
子句级部分匹配准确率:
  SELECT: 100.00%
  WHERE: 96.44%
  GROUP BY: 87.95%
  ORDER BY: 94.32%
  HAVING: 97.28%
gold_sql: SELECT
  `PROVINCE` AS '省份/直辖市',
  MAX(`FINANCE_REVENUE` / `LOCAL_BUDGET_EXPENDITURE`) AS '财政收入与地方财政一般预算支出比例'
FROM
  `people_life_tj`
GROUP BY
  `PROVINCE`
ORDER BY
  '财政收入与地方财政一般预算支出比例' DESC
LIMIT
  1;
pred_sql: SELECT   `PROVINCE` AS '省份/直辖市',   MAX(`FINANCE_REVENUE` / `LOCAL_BUDGET_EXPENDITURE`) AS '财政收入与地方财政一般预算支出比例' FROM   `people_life_tj` GROUP BY   `PROVINCE` ORDER BY   '财政收入与地方财政一般预算支出比例' DESC LIMIT   1;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  `AREA` AS '县级市',
  `CITY` AS '地级市',
  (
    MAX(`PER_CAPITA_INCOME`) - MIN(`PER_CAPITA_INCOME`)
  ) AS '人均可支配收入增长幅度'
FROM
  `people_life_tj`
WHERE
  `YEAR` BETWEEN '2019' AND '2024'
GROUP BY
  `PROVINCE`,
  `AREA`,
  `CITY`
ORDER BY
  `人均可支配收入增长幅度` DESC
LIMIT
  1;
pred_sql: SELECT   `PROVINCE` AS '省份',   `AREA` AS '县级市',   `CITY` AS '地级市',   (     MAX(`PER_CAPITA_INCOME`) - MIN(`PER_CAPITA_INCOME`)   ) AS '人均可支配收入增长幅度' FROM   `people_life_tj` WHERE   `YEAR` >= '2019' AND `YEAR` <= '2024' GROUP BY   `PROVINCE`,   `AREA`,   `CITY` ORDER BY   `人均可支配收入增长幅度` DESC LIMIT   1;
gold_sql: SELECT  
  CITY AS '地级市',  
  PER_CAPITA_INCOME AS '人均可支配收入（元）'  
FROM  
  people_life_tj  
WHERE  
  YEAR = '2010'  
  AND CITY IS NOT NULL  
ORDER BY  
  PER_CAPITA_INCOME DESC  
LIMIT  
  1;
pred_sql: SELECT     CITY AS '地级市',     PER_CAPITA_INCOME AS '人均可支配收入（元）'   FROM     people_life_tj   WHERE     YEAR = '2010'     AND CITY IS NOT NULL   ORDER BY     PER_CAPITA_INCOME DESC   FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  PROVINCE as `省份/直辖市`,
  FINANCE_REVENUE as `财政收入（亿元）`,
  RETAIL_SALES_TOTAL as `社会消费品零售总额（亿元）`,
  ABS(FINANCE_REVENUE - RETAIL_SALES_TOTAL) as `收入和零售总额差值`
FROM
  people_life_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      people_life_tj
  )
  AND CITY is null
  AND AREA is null
ORDER BY
  `收入和零售总额差值` ASC
LIMIT
  1;
pred_sql: SELECT   PROVINCE as `省份/直辖市`,   FINANCE_REVENUE as `财政收入（亿元）`,   RETAIL_SALES_TOTAL as `社会消费品零售总额（亿元）`,   ABS(FINANCE_REVENUE - RETAIL_SALES_TOTAL) as `收入和零售总额差值` FROM   people_life_tj WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       people_life_tj   )   AND CITY is null   AND AREA is null ORDER BY   `收入和零售总额差值` ASC LIMIT   1;
gold_sql: SELECT
  A.PROVINCE AS `省份/直辖市`,
  A.CITY AS `地级市`,
  A.AREA AS `县级市`,
  A.FINANCE_REVENUE / B.FINANCE_REVENUE * 100 - 100 AS `财政收入增速（百分比）`
FROM
  PEOPLE_LIFE_TJ A
  JOIN PEOPLE_LIFE_TJ B ON A.PROVINCE = B.PROVINCE
  AND A.CITY = B.CITY
  AND A.AREA = B.AREA
WHERE
  A.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      PEOPLE_LIFE_TJ
  )
  AND B.YEAR = (
    SELECT
      MAX(YEAR) - 1
    FROM
      PEOPLE_LIFE_TJ
  )
HAVING
  `财政收入增速（百分比）` > 50
pred_sql: SELECT   A.PROVINCE AS `省份/直辖市`,   A.CITY AS `地级市`,   A.AREA AS `县级市`,   (A.FINANCE_REVENUE / B.FINANCE_REVENUE * 100 - 100) AS `财政收入增速（百分比）` FROM   PEOPLE_LIFE_TJ A JOIN   PEOPLE_LIFE_TJ B ON A.PROVINCE = B.PROVINCE   AND A.CITY = B.CITY   AND A.AREA = B.AREA WHERE   A.YEAR = (SELECT MAX(YEAR) FROM PEOPLE_LIFE_TJ)   AND B.YEAR = (SELECT MAX(YEAR) - 1 FROM PEOPLE_LIFE_TJ) HAVING   `财政收入增速（百分比）` > 50;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  CITY AS '地级市',
  LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）'
FROM
  people_life_tj
WHERE
  `YEAR` = '2010'
  AND LOCAL_BUDGET_EXPENDITURE > 100
  AND PROVINCE IS NOT NULL
ORDER BY
  LOCAL_BUDGET_EXPENDITURE DESC;
pred_sql: SELECT   CITY AS '地级市',   PROVINCE AS '省份/直辖市',   LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）' FROM   people_life_tj WHERE   YEAR = '2010'   AND LOCAL_BUDGET_EXPENDITURE > 100   AND PROVINCE IS NOT NULL ORDER BY   LOCAL_BUDGET_EXPENDITURE DESC;
gold_sql: SELECT
  CITY AS '地级市',
  FOREIGN_INVESTMENT_USED AS '实际使用外资（亿美元）'
FROM
  people_life_tj
WHERE
  YEAR = '2010'
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
ORDER BY
  FOREIGN_INVESTMENT_USED DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   FOREIGN_INVESTMENT_USED AS '实际使用外资（亿美元）' FROM   people_life_tj WHERE   PROVINCE = '安徽省'   AND YEAR = '2010'   AND CITY IS NOT NULL GROUP BY   CITY, FOREIGN_INVESTMENT_USED ORDER BY   FOREIGN_INVESTMENT_USED DESC LIMIT   1;
gold_sql: SELECT
  AVG(FINANCE_REVENUE) as `平均财政收入（亿元）`
FROM
  people_life_tj
WHERE
  YEAR = '2023'
  AND PROVINCE = '安徽省'
  AND CITY is not null
  AND AREA is null;
pred_sql: SELECT   AVG(FINANCE_REVENUE) AS `平均财政收入（亿元）` FROM   people_life_tj WHERE   PROVINCE = '安徽省'   AND YEAR = '2023'   AND CITY IS NOT NULL   AND AREA IS NULL;
gold_sql: SELECT
  PROVINCE as `省份`,
  (MAX(FINANCE_REVENUE) - MIN(FINANCE_REVENUE)) / MIN(FINANCE_REVENUE) * 100 as `财政收入增长百分比`
FROM
  people_life_tj
WHERE
  YEAR IN ('2021', '2022', '2023')
  AND CITY is null
  AND AREA is null
GROUP BY
  PROVINCE
ORDER BY
  `财政收入增长百分比` DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE as `省份`,   (MAX(FINANCE_REVENUE) - MIN(FINANCE_REVENUE)) / MIN(FINANCE_REVENUE) * 100 as `财政收入增长百分比` FROM   people_life_tj WHERE   YEAR IN ('2023', '2022', '2021')   AND CITY is null   AND AREA is null GROUP BY   PROVINCE ORDER BY   `财政收入增长百分比` DESC LIMIT   1;
gold_sql: SELECT
  AREA AS '县级市',
  PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）'
FROM
  people_life_tj
WHERE
  PER_CAPITA_CONSUMPTION > 15000
  AND AREA is not null
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      people_life_tj
    
  );
pred_sql: SELECT   AREA AS '县级市',   PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）' FROM   people_life_tj WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       people_life_tj   )   AND AREA IS NOT NULL   AND PER_CAPITA_CONSUMPTION > 15000;
gold_sql: SELECT
  AREA AS '县级市',
  PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）'
FROM
  people_life_tj
WHERE
  PER_CAPITA_CONSUMPTION > 15000
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      people_life_tj
  );
pred_sql: SELECT   '县级市' AS AREA,   '居民人均生活消费支出（元）' AS PER_CAPITA_CONSUMPTION FROM   people_life_tj WHERE   PER_CAPITA_CONSUMPTION > 15000   AND YEAR = (     SELECT       MAX(YEAR)     FROM       people_life_tj   );
gold_sql: SELECT
  `PROVINCE` AS '省份'
FROM
  `people_life_tj`
WHERE
  `PER_CAPITA_INCOME` < 10000
  AND `YEAR` = '2023'
  AND CITY IS NULL
  AND AREA IS NULL
GROUP BY
  `PROVINCE`;
pred_sql: SELECT DISTINCT `PROVINCE` AS '省份' FROM `people_life_tj` WHERE `PER_CAPITA_INCOME` < 10000   AND `YEAR` = '2023'   AND CITY IS NULL   AND AREA IS NULL;
gold_sql: select
  PROVINCE as `省份`,
  FINANCE_REVENUE as `财政收入（亿元）`
from
  PEOPLE_LIFE_TJ
where
  YEAR = (
    select
      MAX(YEAR)
    from
      PEOPLE_LIFE_TJ
  )
  and CITY is null
  and AREA is null
order by
  FINANCE_REVENUE desc
limit
  1;
pred_sql: select   `省份`,   `财政收入（亿元）` from (   select     PROVINCE as `省份`,     FINANCE_REVENUE as `财政收入（亿元）`   from     PEOPLE_LIFE_TJ   where     YEAR = (       select         MAX(YEAR)       from         PEOPLE_LIFE_TJ     )     and CITY is null     and AREA is null   order by     FINANCE_REVENUE desc ) as subquery limit 1;
gold_sql: SELECT
  CITY as `地级市`,
  SUM(FINANCE_REVENUE) as `财政收入总和（亿元）`
FROM
  PEOPLE_LIFE_TJ
WHERE
  `YEAR` = '2023'
  AND CITY IS NOT NULL
  AND AREA IS NULL
GROUP BY
  CITY
HAVING
  SUM(FINANCE_REVENUE) > 200
pred_sql: SELECT   CITY AS `地级市`,   SUM(FINANCE_REVENUE) AS `财政收入总和（亿元）` FROM   PEOPLE_LIFE_TJ WHERE   YEAR = '2023'   AND CITY IS NOT NULL   AND AREA IS NULL GROUP BY   CITY HAVING   SUM(FINANCE_REVENUE) > 200;
gold_sql: SELECT
  AREA as `县级市`,
  LOCAL_BUDGET_EXPENDITURE as `地方财政一般预算支出（亿元）`
FROM
  people_life_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      people_life_tj
  )
  AND AREA is not null
  AND CITY is null
ORDER BY
  LOCAL_BUDGET_EXPENDITURE ASC
LIMIT
  1;
pred_sql: SELECT   `县级市`,   `地方财政一般预算支出（亿元）` FROM (   SELECT     AREA as `县级市`,     LOCAL_BUDGET_EXPENDITURE as `地方财政一般预算支出（亿元）`   FROM     people_life_tj   WHERE     YEAR = (       SELECT         MAX(YEAR)       FROM         people_life_tj     )     AND AREA is not null     AND CITY is null   ORDER BY     LOCAL_BUDGET_EXPENDITURE ASC ) AS subquery LIMIT 1;
gold_sql: SELECT
  AREA as `县级市`,
  LOCAL_BUDGET_EXPENDITURE as `地方财政一般预算支出（亿元）`
FROM
  people_life_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      people_life_tj
  )
  AND AREA is not null
  AND CITY is null
ORDER BY
  LOCAL_BUDGET_EXPENDITURE ASC
LIMIT
  1;
pred_sql: SELECT   `县级市`,   `地方财政一般预算支出（亿元）` FROM (   SELECT     AREA as `县级市`,     LOCAL_BUDGET_EXPENDITURE as `地方财政一般预算支出（亿元）`   FROM     people_life_tj   WHERE     YEAR = (       SELECT         MAX(YEAR)       FROM         people_life_tj     )     AND AREA is not null     AND CITY is null   ORDER BY     LOCAL_BUDGET_EXPENDITURE ASC ) AS subquery LIMIT 1;
gold_sql: SELECT
  CITY AS `地级市`,
  RETAIL_SALES_TOTAL AS `社会消费品零售总额（亿元）`
FROM
  people_life_tj
WHERE
  PROVINCE = '安徽省'
  AND `YEAR` = '2024-06-09'
  AND AREA IS NULL
ORDER BY
  `社会消费品零售总额（亿元）` DESC
LIMIT
  1;
pred_sql: SELECT   `地级市`,   `社会消费品零售总额（亿元）` FROM (   SELECT     CITY AS `地级市`,     RETAIL_SALES_TOTAL AS `社会消费品零售总额（亿元）`   FROM     people_life_tj   WHERE     PROVINCE = '安徽省'     AND `YEAR` = '2024-06-09'     AND AREA IS NULL ) AS subquery ORDER BY   `社会消费品零售总额（亿元）` DESC LIMIT 1;
gold_sql: SELECT
  this_year.PROVINCE AS '省份',
  (
    this_year.PER_CAPITA_CONSUMPTION - prev_year.PER_CAPITA_CONSUMPTION
  ) AS '居民人均生活消费支出增长'
FROM
  (
    SELECT
      PROVINCE,
      PER_CAPITA_CONSUMPTION
    FROM
      people_life_tj
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          people_life_tj
      )
  ) AS this_year
  JOIN (
    SELECT
      PROVINCE,
      PER_CAPITA_CONSUMPTION
    FROM
      people_life_tj
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR) - 1
        FROM
          people_life_tj
      )
  ) AS prev_year ON this_year.PROVINCE = prev_year.PROVINCE
ORDER BY
  `居民人均生活消费支出增长` DESC
LIMIT
  1;
pred_sql: SELECT   this_year.PROVINCE AS '省份',   (     this_year.PER_CAPITA_CONSUMPTION - prev_year.PER_CAPITA_CONSUMPTION   ) AS '居民人均生活消费支出增长' FROM   people_life_tj AS this_year   JOIN people_life_tj AS prev_year ON this_year.PROVINCE = prev_year.PROVINCE WHERE   this_year.YEAR = (     SELECT       MAX(YEAR)     FROM       people_life_tj   ) AND prev_year.YEAR = (     SELECT       MAX(YEAR) - 1     FROM       people_life_tj   ) ORDER BY   `居民人均生活消费支出增长` DESC LIMIT   1;
gold_sql: SELECT
  CURRENT.PROVINCE AS `省份`,
  (
    LAST_YEAR.FINANCE_REVENUE - CURRENT.FINANCE_REVENUE
  ) AS `财政收入下降`
FROM
  (
    SELECT
      PROVINCE,
      FINANCE_REVENUE
    FROM
      people_life_tj
    WHERE
      YEAR = '2023'
  ) AS LAST_YEAR
  JOIN (
    SELECT
      PROVINCE,
      FINANCE_REVENUE
    FROM
      people_life_tj
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          people_life_tj
      )
  ) AS CURRENT ON LAST_YEAR.PROVINCE = CURRENT.PROVINCE
ORDER BY
  `财政收入下降` DESC
LIMIT
  1;
pred_sql: SELECT   LAST_YEAR.PROVINCE AS `省份`,   (     CURRENT.FINANCE_REVENUE - LAST_YEAR.FINANCE_REVENUE   ) AS `财政收入下降` FROM   (     SELECT       PROVINCE,       FINANCE_REVENUE     FROM       people_life_tj     WHERE       YEAR = '2023'   ) AS LAST_YEAR   JOIN (     SELECT       PROVINCE,       FINANCE_REVENUE     FROM       people_life_tj     WHERE       YEAR = (         SELECT           MAX(YEAR)         FROM           people_life_tj       )   ) AS CURRENT ON LAST_YEAR.PROVINCE = CURRENT.PROVINCE ORDER BY   `财政收入下降` DESC LIMIT   1;
gold_sql: SELECT
  SUM(`KECZLL`) AS '客车总流量（辆）'
FROM
  `gsgl_crksfz_yxzt`
WHERE
  `GCRQ` = '2024-06-10'
  AND `SZDQ` = '徐州市';
pred_sql: SELECT   SUM(`KECZLL`) AS '客车总流量（辆）' FROM   `gsgl_crksfz_yxzt` WHERE   `SZDQ` = '徐州市'   AND `GCRQ` = '2024-06-10';
gold_sql: SELECT
  SFZMC as `收费站名称`,
  AVG(HUOCZLL) as `平均货车流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ BETWEEN '2024-06-03' AND '2024-06-09'
GROUP BY
  SFZMC;
pred_sql: SELECT   SFZMC as `收费站名称`,   AVG(HUOCZLL) as `平均货车流量` FROM   gsgl_crksfz_yxzt WHERE   GCRQ >= '2024-06-03' AND GCRQ <= '2024-06-09' GROUP BY   SFZMC;
gold_sql: SELECT
  SFZMC as `收费站名称`,
  HUOCZLL as `货车流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ BETWEEN '2024-06-05' AND '2024-06-11'
ORDER BY
  HUOCZLL DESC
LIMIT
  1;
pred_sql: SELECT   `收费站名称`,   `货车流量` FROM (   SELECT     SFZMC as `收费站名称`,     HUOCZLL as `货车流量`   FROM     gsgl_crksfz_yxzt   WHERE     GCRQ BETWEEN '2024-06-05' AND '2024-06-11' ) AS subquery ORDER BY   `货车流量` DESC LIMIT   1;
gold_sql: SELECT
  SFZMC as `收费站名称`,
  TONGJLC as `里程（公里）`
FROM
  gsgl_crksfz_yxzt
WHERE
  GSMC LIKE '%济徐高速%'
ORDER BY
  TONGJLC DESC
LIMIT
  1;
pred_sql: SELECT   `收费站名称`,   `里程（公里）` FROM (   SELECT     SFZMC AS `收费站名称`,     TONGJLC AS `里程（公里）`   FROM     gsgl_crksfz_yxzt   WHERE     GSMC LIKE '%济徐高速%' ) AS subquery ORDER BY   `里程（公里）` DESC LIMIT 1;
gold_sql: SELECT
  `HUOCZLL` AS `货车流量`
FROM
  `gsgl_crksfz_yxzt`
WHERE
  `GCRQ` = '2024-04-11'
  AND `SFZMC` = '江苏郑集站';
pred_sql: SELECT   `HUOCZLL` AS `货车流量` FROM   `gsgl_crksfz_yxzt` WHERE   `SFZMC` = '江苏郑集站'   AND `GCRQ` = '2024-04-11';
gold_sql: SELECT
  SFZMC AS `收费站名称`,
  AVG(CHEHZZL) AS `平均车货总重量`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
GROUP BY
  SFZMC;
pred_sql: SELECT   SFZMC AS `收费站名称`,   AVG(CHEHZZL) AS `平均车货总重量` FROM   gsgl_crksfz_yxzt WHERE   GCRQ >= '2024-01-01' AND GCRQ <= '2024-03-31' GROUP BY   SFZMC;
gold_sql: SELECT
  SFZMC AS `收费站名称`,
  (HUOCZLL / ZONGCLL) * 100 AS `货车流量占比(%)`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_crksfz_yxzt
  );
pred_sql: SELECT   `收费站名称`,   `货车流量占比(%)` FROM (   SELECT     SFZMC AS `收费站名称`,     (HUOCZLL / ZONGCLL) * 100 AS `货车流量占比(%)`   FROM     gsgl_crksfz_yxzt ) AS subquery WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_crksfz_yxzt   );
gold_sql: SELECT
  SZDQ as `地区`,
  SFZMC as `收费站名称`,
  MAX(ZONGCLL) as `总车流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = '2024-06-09'
GROUP BY
  SZDQ,
  SFZMC
ORDER BY
  `总车流量` DESC
LIMIT
  1;
pred_sql: SELECT   SZDQ as `地区`,   SFZMC as `收费站名称`,   MAX(ZONGCLL) as `总车流量` FROM   gsgl_crksfz_yxzt WHERE   GCRQ = '2024-06-09' GROUP BY   SZDQ,   SFZMC ORDER BY   `总车流量` DESC LIMIT   1;
gold_sql: SELECT
  SFZMC AS '收费站名称',
  (MAX(KECZLL) - MIN(KECZLL)) AS '客车流量增长量'
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ BETWEEN '2024-05-11' AND '2024-06-11'
GROUP BY
  SFZMC
ORDER BY
  '客车流量增长量' DESC
LIMIT
  1;
pred_sql: SELECT   SFZMC AS '收费站名称',   (MAX(KECZLL) - MIN(KECZLL)) AS '客车流量增长量' FROM   gsgl_crksfz_yxzt WHERE   GCRQ BETWEEN '2024-05-11' AND '2024-06-11' GROUP BY   SFZMC ORDER BY   '客车流量增长量' DESC LIMIT   1;
gold_sql: SELECT
  SFZMC AS `收费站名称`
FROM
  gsgl_crksfz_yxzt
GROUP BY
  SFZMC
HAVING
  MAX(ZONGCLL) < 1000
pred_sql: SELECT   SFZMC AS `收费站名称` FROM   gsgl_crksfz_yxzt GROUP BY   SFZMC HAVING   SUM(ZONGCLL) < 1000 ```
gold_sql: SELECT
  GSMC AS `高速名称`,
  SFZMC AS `收费站名称`,
  AVG(CHEHZZL) AS `平均车货总重量`
FROM
  gsgl_crksfz_yxzt
GROUP BY
  GSMC,
  SFZMC
ORDER BY
  `平均车货总重量` DESC
LIMIT
  1;
pred_sql: SELECT   SFZMC AS `收费站名称`,   GSMC AS `高速名称`,   AVG(CHEHZZL) AS `平均车货总重量` FROM   gsgl_crksfz_yxzt GROUP BY   SFZMC,   GSMC ORDER BY   `平均车货总重量` DESC LIMIT   1;
gold_sql: SELECT
  this_week.SFZMC AS `收费站名称`,
  (last_week.TONGJLC - this_week.TONGJLC) AS `里程数下降`
FROM
  (
    SELECT
      SFZMC,
      TONGJLC,
      GCRQ
    FROM
      gsgl_crksfz_yxzt
    WHERE
      GCRQ = '2024-06-03'
  ) AS last_week
  INNER JOIN (
    SELECT
      SFZMC,
      TONGJLC,
      GCRQ
    FROM
      gsgl_crksfz_yxzt
    WHERE
      GCRQ = '2024-06-09'
  ) AS this_week ON last_week.SFZMC = this_week.SFZMC
WHERE
  last_week.TONGJLC > this_week.TONGJLC
ORDER BY
  `里程数下降` DESC
LIMIT
  1;
pred_sql: SELECT   this_week.SFZMC AS `收费站名称`,   (last_week.TONGJLC - this_week.TONGJLC) AS `里程数下降` FROM   (     SELECT       SFZMC,       TONGJLC,       GCRQ     FROM       gsgl_crksfz_yxzt     WHERE       GCRQ = '2024-06-09'   ) AS this_week   INNER JOIN (     SELECT       SFZMC,       TONGJLC,       GCRQ     FROM       gsgl_crksfz_yxzt     WHERE       GCRQ = '2024-06-03'   ) AS last_week ON this_week.SFZMC = last_week.SFZMC WHERE   last_week.TONGJLC > this_week.TONGJLC ORDER BY   `里程数下降` DESC LIMIT   1;
gold_sql: SELECT
  SFZMC AS 收费站名称,
  AVG(ZONGCLL) AS 平均每天总车流量
FROM
  gsgl_crksfz_yxzt
WHERE
  SZDQ LIKE '徐州市%'
  AND GCRQ BETWEEN '2024-06-04' AND '2024-06-10'
GROUP BY
  SFZMC;
pred_sql: SELECT   SFZMC AS 收费站名称,   AVG(ZONGCLL) AS 平均每天总车流量 FROM   gsgl_crksfz_yxzt WHERE   GCRQ BETWEEN '2024-06-04' AND '2024-06-10'   AND SZDQ LIKE '徐州市%' GROUP BY   SFZMC;
gold_sql: SELECT DISTINCT
  SFZMC AS `收费站名称`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ BETWEEN '2024-05-11' AND '2024-06-10'
  AND KECZLL > HUOCZLL;
pred_sql: SELECT DISTINCT SFZMC AS `收费站名称` FROM gsgl_crksfz_yxzt WHERE GCRQ BETWEEN '2024-05-11' AND '2024-06-10' AND KECZLL > HUOCZLL;
gold_sql: SELECT
  AVG(CHEHZZL) AS `平均车货总重量`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = '2024-05-11';
pred_sql: SELECT   AVG(CHEHZZL) AS `平均车货总重量` FROM   gsgl_crksfz_yxzt WHERE   GCRQ = '2024-05-11';
gold_sql: SELECT DISTINCT
  `SUOZQY` AS `所在区域`
FROM
  `tl_kyz_yxzt`;
pred_sql: SELECT DISTINCT `所在区域` FROM (   SELECT `SUOZQY` AS `所在区域`   FROM `tl_kyz_yxzt` ) AS subquery;
gold_sql: SELECT
  AVG(`ZONGBC`) AS '总班次平均值（班）'
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` > '2023-11-22';
pred_sql: SELECT AVG(ZONGBC) AS '总班次平均值（班）' FROM tl_kyz_yxzt WHERE GCRQ > '2023-11-22';
gold_sql: SELECT
  `KEYZMC` AS `客运站名称`,
  `SUOZQY` AS `所在区域`
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kyz_yxzt`
  )
  AND (`ZONGBC` < 5);
pred_sql: SELECT   `KEYZMC` AS `客运站名称`,   `SUOZQY` AS `所在区域` FROM   `tl_kyz_yxzt` WHERE   (`ZONGBC` < 5)   AND (`GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_kyz_yxzt`   ));
gold_sql: SELECT
  MAX(`ZONGBC`) AS '班次总量最大值（班）'
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` = '2023-11-22';
pred_sql: SELECT   MAX(`ZONGBC`) AS '班次总量最大值（班）' FROM   `tl_kyz_yxzt` WHERE   `GCRQ` = '2023-11-22';
gold_sql: SELECT
  MAX(`ZONGBC`) AS `班次总量最大值`
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kyz_yxzt`
  );
pred_sql: SELECT MAX(`ZONGBC`) AS `班次总量最大值` FROM `tl_kyz_yxzt` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_kyz_yxzt`);
gold_sql: SELECT
  `KEYZMC` AS '客运站名称',
  `SUOZQY` AS '所在区域'
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` > '2023-11-22'
  AND `ZONGBC` > 0;
pred_sql: SELECT   `KEYZMC` AS '客运站名称',   `SUOZQY` AS '所在区域' FROM   `tl_kyz_yxzt` WHERE   `ZONGBC` > 0   AND `GCRQ` > '2023-11-22';
gold_sql: SELECT
  `SUOZQY` AS `所在区域`,
  SUM(`DAODBC`) AS `到达班次总和`
FROM
  `tl_kyz_yxzt`
GROUP BY
  `SUOZQY`;
pred_sql: SELECT   `SUOZQY` AS `所在区域`,   SUM(`DAODBC`) AS `到达班次总和` FROM   `tl_kyz_yxzt` GROUP BY   `SUOZQY`;
gold_sql: SELECT
  `KEYZMC` AS '客运站名称',
  `SUOZQY` AS '所在区域'
FROM
  `tl_kyz_yxzt`
WHERE
  `ZONGBC` BETWEEN 3 AND 6
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kyz_yxzt`
  );
pred_sql: SELECT   `KEYZMC` AS '客运站名称',   `SUOZQY` AS '所在区域' FROM   `tl_kyz_yxzt` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_kyz_yxzt`   )   AND `ZONGBC` BETWEEN 3 AND 6;
gold_sql: SELECT
  `SUOZQY` AS 所在区域,
  AVG(`ZONGBC`) AS 平均班次总量
FROM
  `tl_kyz_yxzt`
GROUP BY
  `SUOZQY`;
pred_sql: SELECT   `SUOZQY` AS 所在区域,   AVG(`ZONGBC`) AS 平均班次总量 FROM   `tl_kyz_yxzt` GROUP BY   `SUOZQY`;
gold_sql: SELECT
  COUNT(*) AS `客运站数量`
FROM
  `tl_kyz_yxzt`
WHERE
  `DAODBC` < `FASBC`
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kyz_yxzt`
  );
pred_sql: SELECT   COUNT(*) AS `客运站数量` FROM   `tl_kyz_yxzt` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_kyz_yxzt`   )   AND `DAODBC` < `FASBC`;
gold_sql: SELECT
  SUOZQY AS `所在区域`,
  SUM(ZONGBC) AS `总班次数`
FROM
  tl_kyz_yxzt
WHERE
  SUOZQY = '南通市'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kyz_yxzt
  );
pred_sql: SELECT   `所在区域`,   SUM(`总班次数`) AS `总班次数` FROM (   SELECT     SUOZQY AS `所在区域`,     ZONGBC AS `总班次数`   FROM     tl_kyz_yxzt   WHERE     GCRQ = (       SELECT         MAX(GCRQ)       FROM         tl_kyz_yxzt     ) ) AS subquery WHERE   `所在区域` = '南通市';
gold_sql: SELECT
  COUNT(*) AS `到达班次数为0的客运站数量`
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` = '2023-11-22'
  AND `DAODBC` = 0;
pred_sql: SELECT COUNT(*) AS `到达班次数为0的客运站数量` FROM `tl_kyz_yxzt` WHERE `DAODBC` = 0 AND `GCRQ` = '2023-11-22';
gold_sql: SELECT
  `KEYZMC` AS '客运站名称',
  `SUOZQY` AS '所在区域'
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kyz_yxzt`
  )
ORDER BY
  `ZONGBC` DESC
LIMIT
  1;
pred_sql: SELECT   `KEYZMC` AS '客运站名称',   `SUOZQY` AS '所在区域' FROM   `tl_kyz_yxzt` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_kyz_yxzt`   ) ORDER BY   `ZONGBC` DESC LIMIT   1;
gold_sql: SELECT
  COUNT(*) AS '总班次数为0的客运站数量'
FROM
  tl_kyz_yxzt
WHERE
  ZONGBC = 0
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kyz_yxzt
  );
pred_sql: SELECT COUNT(*) AS '总班次数为0的客运站数量' FROM tl_kyz_yxzt WHERE ZONGBC = 0 AND GCRQ = (SELECT MAX(GCRQ) FROM tl_kyz_yxzt);
gold_sql: SELECT
  COUNT(*) AS `客运站数量`
FROM
  tl_kyz_yxzt
WHERE
  SUOZQY LIKE '%南通%'
pred_sql: SELECT COUNT(*) AS `客运站数量` FROM tl_kyz_yxzt WHERE SUOZQY LIKE '%南通%' ```
gold_sql: SELECT
  SUM(ZONGBC) AS `总班次`
FROM
  tl_kyz_yxzt
WHERE
  SUOZQY = '南通市'
  AND GCRQ = '2024-06-11';
pred_sql: SELECT   SUM(ZONGBC) AS `总班次` FROM   tl_kyz_yxzt WHERE   GCRQ = '2024-06-11'   AND SUOZQY = '南通市';
gold_sql: SELECT
  `KEYZMC` AS '客运站名称',
  SUM(`ZONGBC`) AS '总班次'
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` BETWEEN '2024-06-04' AND '2024-06-10'
GROUP BY
  `KEYZMC`
ORDER BY
  SUM(`ZONGBC`) DESC
LIMIT
  1;
pred_sql: SELECT   `KEYZMC` AS '客运站名称',   SUM(`ZONGBC`) AS '总班次' FROM   `tl_kyz_yxzt` WHERE   `GCRQ` >= '2024-06-04' AND `GCRQ` <= '2024-06-10' GROUP BY   `KEYZMC` ORDER BY   '总班次' DESC LIMIT   1;
gold_sql: SELECT
  KEYZMC AS 客运站名称,
  SUM(DAODBC) AS 到达班次总和
FROM
  tl_kyz_yxzt
WHERE
  GCRQ = '2024-06-09'
GROUP BY
  KEYZMC;
pred_sql: SELECT   KEYZMC AS 客运站名称,   SUM(DAODBC) AS 到达班次总和 FROM   tl_kyz_yxzt WHERE   GCRQ = '2024-06-09' GROUP BY   KEYZMC;
gold_sql: SELECT
  `KEYZMC` AS `客运站名称`,
  `SUOZQY` AS `所在区域`
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kyz_yxzt`
  )
  AND `FASBC` = 0;
pred_sql: SELECT   `KEYZMC` AS `客运站名称`,   `SUOZQY` AS `所在区域` FROM   `tl_kyz_yxzt` WHERE   `FASBC` = 0   AND `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_kyz_yxzt`   );
gold_sql: SELECT
  `SUOZQY` AS '所在区域',
  AVG(`ZONGBC`) AS '平均总班次'
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW()
GROUP BY
  `SUOZQY`;
pred_sql: SELECT   `SUOZQY` AS '所在区域',   AVG(`ZONGBC`) AS '平均总班次' FROM   `tl_kyz_yxzt` WHERE   `GCRQ` >= DATE_SUB(NOW(), INTERVAL 1 MONTH) GROUP BY   `SUOZQY`;
gold_sql: SELECT
  `GCRQ` AS '观测日期',
  SUM(`ZONGBC`) AS '总班次'
FROM
  `tl_kyz_yxzt`
GROUP BY
  `GCRQ`
ORDER BY
  `总班次` DESC
LIMIT
  1;
pred_sql: SELECT   `GCRQ` AS '观测日期',   SUM(`ZONGBC`) AS '总班次' FROM   `tl_kyz_yxzt` GROUP BY   `GCRQ` ORDER BY   2 DESC LIMIT   1;
gold_sql: SELECT
  (`DAODBC` - `FASBC`) AS `班次之差`
FROM
  `tl_kyz_yxzt`
WHERE
  `SUOZQY` = '南通市'
  AND `GCRQ` = '2024-06-11';
pred_sql: SELECT   (`DAODBC` - `FASBC`) AS `班次之差` FROM   `tl_kyz_yxzt` WHERE   `GCRQ` = '2024-06-11'   AND `SUOZQY` = '南通市';
gold_sql: SELECT
  AVG(每日发送班次) AS `平均每天发送班次`
FROM
  (
    SELECT
      SUM(FASBC) AS 每日发送班次
    FROM
      tl_kyz_yxzt
    WHERE
      SUOZQY = '南通市'
      AND GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
    GROUP BY
      GCRQ
  ) AS daily_发送班次;
pred_sql: SELECT   AVG(每日发送班次) AS `平均每天发送班次` FROM   (     SELECT       SUM(FASBC) AS 每日发送班次     FROM       tl_kyz_yxzt     WHERE       SUOZQY = '南通市'       AND GCRQ BETWEEN '2024-01-01' AND '2024-03-31'     GROUP BY       GCRQ   ) AS daily_发送班次;
gold_sql: SELECT
  `SUOZQY` AS `所在区域`,
  (
    SUM(
      CASE
        WHEN `GCRQ` BETWEEN '2024-06-10' AND '2024-06-16'  THEN `ZONGBC`
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN `GCRQ` BETWEEN '2024-06-03' AND '2024-06-09'  THEN `ZONGBC`
        ELSE 0
      END
    )
  ) AS `总班次增长`
FROM
  `tl_kyz_yxzt`
GROUP BY
  `SUOZQY`
ORDER BY
  `总班次增长` DESC
LIMIT
  1;
pred_sql: SELECT   `所在区域`,   (`本周班次` - `上周班次`) AS `总班次增长` FROM (   SELECT     `SUOZQY` AS `所在区域`,     SUM(CASE WHEN `GCRQ` BETWEEN '2024-06-10' AND '2024-06-16' THEN `ZONGBC` ELSE 0 END) AS `本周班次`,     SUM(CASE WHEN `GCRQ` BETWEEN '2024-06-03' AND '2024-06-09' THEN `ZONGBC` ELSE 0 END) AS `上周班次`   FROM     `tl_kyz_yxzt`   GROUP BY     `SUOZQY` ) AS subquery ORDER BY   `总班次增长` DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  `KEYZMC` AS `客运站名称`
FROM
  `tl_kyz_yxzt`
WHERE
  `FASBC` > 10;
pred_sql: SELECT DISTINCT `KEYZMC` AS `客运站名称` FROM `tl_kyz_yxzt` WHERE `FASBC` > 10;
gold_sql: SELECT
  SUOZQY AS `所在区域`,
  COUNT(KEYZMC) AS `客运站数量`
FROM
  tl_kyz_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kyz_yxzt
  )
GROUP BY
  SUOZQY
ORDER BY
  `客运站数量` DESC
LIMIT
  1;
pred_sql: SELECT   SUOZQY AS `所在区域`,   COUNT(KEYZMC) AS `客运站数量` FROM   tl_kyz_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       tl_kyz_yxzt   ) GROUP BY   SUOZQY ORDER BY   `客运站数量` DESC LIMIT   1;
gold_sql: SELECT
  `KEYZMC` AS '客运站名称',
  `SUOZQY` AS '所在区域'
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` BETWEEN '2024-06-04' AND '2024-06-10'
GROUP BY
  `KEYZMC`,
  `SUOZQY`
HAVING
  SUM(`DAODBC`) = 0
  AND SUM(`FASBC`) = 0;
pred_sql: SELECT   `KEYZMC` AS '客运站名称',   `SUOZQY` AS '所在区域' FROM   `tl_kyz_yxzt` WHERE   `GCRQ` >= '2024-06-04' AND `GCRQ` <= '2024-06-10' GROUP BY   `KEYZMC`,   `SUOZQY` HAVING   SUM(`DAODBC`) = 0   AND SUM(`FASBC`) = 0;
gold_sql: SELECT DISTINCT
  `SUOZQY` AS `所在区域`,
  `KEYZMC` AS `客运站名称`
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` BETWEEN '2024-05-12' AND '2024-06-10'
  AND `DAODBC` > 0
  AND `FASBC` > 0;
pred_sql: SELECT DISTINCT   `KEYZMC` AS `客运站名称`,   `SUOZQY` AS `所在区域` FROM   `tl_kyz_yxzt` WHERE   `GCRQ` BETWEEN '2024-05-12' AND '2024-06-10'   AND `DAODBC` > 0   AND `FASBC` > 0;
gold_sql: SELECT
  `KEYZMC` `客运站名称`,
  `SUOZQY` `所在区域`,
  `DAODBC` `到达班次`
FROM
  `tl_kyz_yxzt`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kyz_yxzt`
    WHERE
      `GCRQ` = CURDATE()
  )
ORDER BY
  `DAODBC` DESC
LIMIT
  1;
pred_sql: SELECT   `KEYZMC` AS `客运站名称`,   `SUOZQY` AS `所在区域`,   `DAODBC` AS `到达班次` FROM   `tl_kyz_yxzt` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_kyz_yxzt`     WHERE       `GCRQ` = CURDATE()   ) ORDER BY   `DAODBC` DESC LIMIT   1;
gold_sql: SELECT
  `id` AS `街道ID`,
  `STAY_NUM` AS `停驻统计`
FROM
  `hy_tzd`
WHERE
  `GCRQ` = '2023-10-31'
ORDER BY
  `STAY_NUM` DESC
LIMIT
  1;
pred_sql: SELECT   `id` AS `街道ID`,   `STAY_NUM` AS `停驻统计` FROM   `hy_tzd` WHERE   `GCRQ` = '2023-10-31' ORDER BY   `STAY_NUM` DESC LIMIT   1;
gold_sql: SELECT
  id AS `街道ID`
FROM
  hy_tzd
WHERE
  GCRQ = '2024-05-31'
  AND LONGITUDE = 119
  AND LATITUDE = 31;
pred_sql: SELECT   id AS `街道ID` FROM   hy_tzd WHERE   LONGITUDE = 119   AND LATITUDE = 31   AND GCRQ = '2024-05-31';
gold_sql: SELECT
  LONGITUDE AS `经度`,
  LATITUDE AS `纬度`
FROM
  hy_tzd
WHERE
  GCRQ = '2023-10-31'
  AND STAY_NUM > 2000;
pred_sql: SELECT   LONGITUDE AS `经度`,   LATITUDE AS `纬度` FROM   hy_tzd WHERE   STAY_NUM > 2000   AND GCRQ = '2023-10-31';
gold_sql: SELECT
  LONGITUDE AS `经度`,
  LATITUDE AS `纬度`
FROM
  hy_tzd
WHERE
  GCRQ BETWEEN '2024-05-11' AND '2024-06-11';
pred_sql: SELECT   LATITUDE AS `纬度`,   LONGITUDE AS `经度` FROM   hy_tzd WHERE   GCRQ BETWEEN '2024-05-11' AND '2024-06-11';
gold_sql: SELECT
  `LONGITUDE` AS `经度`,
  `LATITUDE` AS `纬度`,
  `STAY_NUM` AS `停驻统计`
FROM
  `hy_tzd`
WHERE
  `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31'
ORDER BY
  `停驻统计` DESC
LIMIT
  1;
pred_sql: SELECT   `LONGITUDE` AS `经度`,   `LATITUDE` AS `纬度`,   `STAY_NUM` AS `停驻统计` FROM   `hy_tzd` WHERE   `GCRQ` >= '2024-01-01' AND `GCRQ` <= '2024-03-31' ORDER BY   `停驻统计` DESC LIMIT   1;
gold_sql: SELECT
  id AS `街道ID`,
  STAY_NUM AS `停驻统计`
FROM
  hy_tzd
WHERE
  GCRQ BETWEEN '2024-06-08' AND '2024-06-10'
ORDER BY
  STAY_NUM
LIMIT
  1;
pred_sql: SELECT   id AS `街道ID`,   STAY_NUM AS `停驻统计` FROM   hy_tzd WHERE   GCRQ >= '2024-06-08' AND GCRQ <= '2024-06-10' GROUP BY   id, STAY_NUM ORDER BY   STAY_NUM ASC LIMIT   1;
gold_sql: SELECT
  `id` AS `街道ID`,
  `STAY_NUM` AS `停驻统计`
FROM
  `hy_tzd`
WHERE
  `GCRQ` = '2024-06-09'
ORDER BY
  `STAY_NUM` DESC
LIMIT
  1;
pred_sql: SELECT   `id` AS `街道ID`,   `STAY_NUM` AS `停驻统计` FROM   `hy_tzd` WHERE   `GCRQ` = '2024-06-09' ORDER BY   `STAY_NUM` DESC LIMIT   1;
gold_sql: SELECT
  `LONGITUDE` AS '经度',
  `LATITUDE` AS '纬度',
  `STAY_NUM` AS '停驻统计'
FROM
  `HY_TZD`
WHERE
  `STAY_NUM` > 1000
  AND `GCRQ` = '2024-06-02';
pred_sql: SELECT   `LONGITUDE` AS '经度',   `LATITUDE` AS '纬度',   `STAY_NUM` AS '停驻统计' FROM   `HY_TZD` WHERE   `GCRQ` = '2024-06-02'   AND `STAY_NUM` > 1000;
gold_sql: SELECT
  `LONGITUDE` AS `经度`,
  `LATITUDE` AS `纬度`,
  `STAY_NUM` AS `停驻统计`
FROM
  `hy_tzd`
WHERE
  `GCRQ` = '2023-10-31';
pred_sql: SELECT   `LATITUDE` AS `纬度`,   `LONGITUDE` AS `经度`,   `STAY_NUM` AS `停驻统计` FROM   `hy_tzd` WHERE   `GCRQ` = '2023-10-31';
gold_sql: SELECT
  LONGITUDE AS 经度,
  LATITUDE AS 纬度,
  MAX(STAY_NUM) AS 最常见的停驻点次数
FROM
  hy_tzd
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
GROUP BY
  LONGITUDE,
  LATITUDE
ORDER BY
  最常见的停驻点次数 DESC
LIMIT
  1;
pred_sql: SELECT   LONGITUDE AS 经度,   LATITUDE AS 纬度,   STAY_NUM AS 停驻点次数 FROM   hy_tzd WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       hy_tzd   ) ORDER BY   STAY_NUM DESC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  SUM(STAY_NUM) AS `停驻总次数`
FROM
  hy_tzd
GROUP BY
  GCRQ
ORDER BY
  `停驻总次数` DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   SUM(STAY_NUM) AS `停驻总次数` FROM   hy_tzd GROUP BY   GCRQ ORDER BY   `停驻总次数` DESC LIMIT   1;
gold_sql: SELECT
  LATITUDE AS 纬度,
  SUM(STAY_NUM) AS 停驻点数量
FROM
  hy_tzd
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
GROUP BY
  LATITUDE
ORDER BY
  停驻点数量 DESC
LIMIT
  1;
pred_sql: SELECT   LATITUDE AS 纬度,   SUM(STAY_NUM) AS 停驻点数量 FROM   hy_tzd WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       hy_tzd   ) GROUP BY   LATITUDE ORDER BY   停驻点数量 DESC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  STAY_NUM AS `停驻次数`
FROM
  hy_tzd
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
ORDER BY
  STAY_NUM DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   STAY_NUM AS `停驻次数` FROM   hy_tzd ORDER BY   GCRQ DESC,   STAY_NUM DESC LIMIT   1;
gold_sql: SELECT
  LONGITUDE AS `经度`
FROM
  hy_tzd
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
ORDER BY
  STAY_NUM DESC
LIMIT
  1;
pred_sql: SELECT LONGITUDE AS `经度` FROM hy_tzd ORDER BY GCRQ DESC, STAY_NUM DESC LIMIT 1;
gold_sql: SELECT
  COUNT(*) AS `记录数`
FROM
  hy_tzd
WHERE
  STAY_NUM = 0
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
pred_sql: SELECT COUNT(*) AS `记录数` FROM hy_tzd WHERE GCRQ = (SELECT MAX(GCRQ) FROM hy_tzd) AND STAY_NUM = 0;
gold_sql: SELECT
  COUNT(DISTINCT CONCAT(LONGITUDE, LATITUDE)) AS 不同停驻点数量
FROM
  hy_tzd;
pred_sql: SELECT   COUNT(DISTINCT LATITUDE || LONGITUDE) AS 不同停驻点数量 FROM   hy_tzd;
gold_sql: SELECT
  `LONGITUDE` AS `经度`,
  `LATITUDE` AS `纬度`,
  `STAY_NUM` AS `停驻次数`
FROM
  `hy_tzd`
WHERE
  `GCRQ` BETWEEN '2024-06-03' AND '2024-06-09'
ORDER BY
  `STAY_NUM` DESC
LIMIT
  1;
pred_sql: SELECT   `LATITUDE` AS `纬度`,   `LONGITUDE` AS `经度`,   `STAY_NUM` AS `停驻次数` FROM   `hy_tzd` WHERE   `GCRQ` >= '2024-06-03' AND `GCRQ` <= '2024-06-09' ORDER BY   `停驻次数` DESC LIMIT   1;
gold_sql: SELECT
  T1.LONGITUDE AS `经度`,
  T1.LATITUDE AS `纬度`,
  T1.STAY_NUM - COALESCE(T2.STAY_NUM, 0) AS `停驻次数增加`
FROM
  hy_tzd T1
  LEFT JOIN hy_tzd T2 ON T1.LONGITUDE = T2.LONGITUDE
  AND T1.LATITUDE = T2.LATITUDE
  AND T2.GCRQ = DATE_SUB(T1.GCRQ, INTERVAL 7 DAY)
WHERE
  T1.GCRQ BETWEEN '2024-06-04' AND '2024-06-10'
  AND (T1.STAY_NUM - COALESCE(T2.STAY_NUM, 0)) > 0
ORDER BY
  `停驻次数增加` DESC;
pred_sql: SELECT   T1.LONGITUDE AS `经度`,   T1.LATITUDE AS `纬度`,   (T1.STAY_NUM - IFNULL(T2.STAY_NUM, 0)) AS `停驻次数增加` FROM   hy_tzd T1   LEFT JOIN hy_tzd T2 ON T1.LONGITUDE = T2.LONGITUDE   AND T1.LATITUDE = T2.LATITUDE   AND T2.GCRQ = DATE_SUB(T1.GCRQ, INTERVAL 7 DAY) WHERE   T1.GCRQ BETWEEN '2024-06-04' AND '2024-06-10'   AND (T1.STAY_NUM - IFNULL(T2.STAY_NUM, 0)) > 0 ORDER BY   `停驻次数增加` DESC;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  SUM(STAY_NUM) AS `停驻次数`
FROM
  hy_tzd
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-30'
GROUP BY
  GCRQ
ORDER BY
  `停驻次数` DESC;
pred_sql: SELECT   GCRQ AS `观测日期`,   SUM(STAY_NUM) AS `停驻次数` FROM   hy_tzd WHERE   GCRQ >= '2024-06-01' AND GCRQ <= '2024-06-30' GROUP BY   GCRQ ORDER BY   `停驻次数` DESC;
gold_sql: SELECT
  SUM(
    CASE
      WHEN GCRQ BETWEEN '2024-06-01' AND '2024-06-30'  THEN STAY_NUM
      ELSE 0
    END
  ) AS '本月停驻次数',
  SUM(
    CASE
      WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-31'  THEN STAY_NUM
      ELSE 0
    END
  ) AS '上个月停驻次数',
  SUM(
    CASE
      WHEN GCRQ BETWEEN '2024-06-01' AND '2024-06-30'  THEN STAY_NUM
      ELSE 0
    END
  ) - SUM(
    CASE
      WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-31'  THEN STAY_NUM
      ELSE 0
    END
  ) AS '停驻次数变化'
FROM
  hy_tzd;
pred_sql: SELECT   SUM(CASE WHEN GCRQ BETWEEN '2024-06-01' AND '2024-06-30' THEN STAY_NUM ELSE 0 END) AS '本月停驻次数',   SUM(CASE WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-31' THEN STAY_NUM ELSE 0 END) AS '上个月停驻次数',   (SUM(CASE WHEN GCRQ BETWEEN '2024-06-01' AND '2024-06-30' THEN STAY_NUM ELSE 0 END) -    SUM(CASE WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-31' THEN STAY_NUM ELSE 0 END)) AS '停驻次数变化' FROM   hy_tzd;
gold_sql: SELECT
  subquery.LONGITUDE AS '经度',
  subquery.LATITUDE AS '纬度',
  subquery.STAY_NUM_march AS '3月停驻次数',
  subquery.STAY_NUM_april AS '4月停驻次数',
  subquery.STAY_NUM_may AS '5月停驻次数'
FROM
  (
    SELECT
      t1.LONGITUDE,
      t1.LATITUDE,
      t1.STAY_NUM AS STAY_NUM_march,
      (
        SELECT
          STAY_NUM
        FROM
          hy_tzd
        WHERE
          LONGITUDE = t1.LONGITUDE
          AND LATITUDE = t1.LATITUDE
          AND GCRQ = '2024-04-10'
      ) AS STAY_NUM_april,
      (
        SELECT
          STAY_NUM
        FROM
          hy_tzd
        WHERE
          LONGITUDE = t1.LONGITUDE
          AND LATITUDE = t1.LATITUDE
          AND GCRQ = '2024-05-10'
      ) AS STAY_NUM_may
    FROM
      hy_tzd t1
    WHERE
      t1.GCRQ = '2024-03-11'
  ) AS subquery
WHERE
  subquery.STAY_NUM_march < subquery.STAY_NUM_april
  AND subquery.STAY_NUM_april < subquery.STAY_NUM_may;
pred_sql: SELECT   subquery.LONGITUDE AS '经度',   subquery.LATITUDE AS '纬度',   subquery.STAY_NUM_march AS '3月停驻次数',   subquery.STAY_NUM_april AS '4月停驻次数',   subquery.STAY_NUM_may AS '5月停驻次数' FROM   (     SELECT       t1.LONGITUDE,       t1.LATITUDE,       (         SELECT           STAY_NUM         FROM           hy_tzd         WHERE           LONGITUDE = t1.LONGITUDE           AND LATITUDE = t1.LATITUDE           AND GCRQ = '2024-03-11'       ) AS STAY_NUM_march,       (         SELECT           STAY_NUM         FROM           hy_tzd         WHERE           LONGITUDE = t1.LONGITUDE           AND LATITUDE = t1.LATITUDE           AND GCRQ = '2024-04-10'       ) AS STAY_NUM_april,       (         SELECT           STAY_NUM         FROM           hy_tzd         WHERE           LONGITUDE = t1.LONGITUDE           AND LATITUDE = t1.LATITUDE           AND GCRQ = '2024-05-10'       ) AS STAY_NUM_may     FROM       hy_tzd t1     WHERE       t1.GCRQ IN ('2024-03-11', '2024-04-10', '2024-05-10')   ) AS subquery WHERE   subquery.STAY_NUM_march < subquery.STAY_NUM_april   AND subquery.STAY_NUM_april < subquery.STAY_NUM_may;
gold_sql: SELECT
  `GCRQ` AS '日期'
FROM
  `hy_tzd`
WHERE
  `GCRQ` BETWEEN '2024-05-11' AND '2024-06-10'
GROUP BY
  `GCRQ`
HAVING
  SUM(`STAY_NUM`) = 0;
pred_sql: SELECT   `GCRQ` AS '日期' FROM   `hy_tzd` WHERE   `GCRQ` >= '2024-05-11' AND `GCRQ` <= '2024-06-10' GROUP BY   `GCRQ` HAVING   SUM(`STAY_NUM`) = 0;
gold_sql: SELECT
  CONCAT(`LONGITUDE`, ',', `LATITUDE`) AS `地点`,
  MIN(`STAY_NUM`) AS `最少停驻次数`
FROM
  `hy_tzd`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `hy_tzd`
  )
GROUP BY
  `LONGITUDE`,
  `LATITUDE`
ORDER BY
  `最少停驻次数` ASC
LIMIT
  1;
pred_sql: SELECT   CONCAT(`LONGITUDE`, ',', `LATITUDE`) AS `地点`,   MIN(`STAY_NUM`) AS `最少停驻次数` FROM   `hy_tzd` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `hy_tzd`   ) GROUP BY   `LONGITUDE`,   `LATITUDE` ORDER BY   `最少停驻次数` ASC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `时间段`,
  MAX(STAY_NUM) - MIN(STAY_NUM) AS `停驻次数增长量`
FROM
  hy_tzd
WHERE
  GCRQ BETWEEN (
    SELECT
      DATE_SUB(MAX(GCRQ), INTERVAL 1 YEAR)
    FROM
      hy_tzd
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
GROUP BY
  GCRQ
ORDER BY
  `停驻次数增长量` DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `时间段`,   MAX(STAY_NUM) - MIN(STAY_NUM) AS `停驻次数增长量` FROM   hy_tzd WHERE   GCRQ BETWEEN (     SELECT       DATE_SUB(MAX(GCRQ), INTERVAL 1 YEAR)     FROM       hy_tzd   ) AND (     SELECT       MAX(GCRQ)     FROM       hy_tzd   ) GROUP BY   GCRQ ORDER BY   `停驻次数增长量` DESC LIMIT   1;
gold_sql: SELECT
  CUR_WEEK.LONGITUDE AS '经度',
  CUR_WEEK.LATITUDE AS '纬度',
  CUR_WEEK.STAY_NUM AS '当前停驻次数',
  LAST_WEEK.STAY_NUM AS '上周停驻次数',
  (CUR_WEEK.STAY_NUM - LAST_WEEK.STAY_NUM) AS '停驻次数变化'
FROM
  (
    SELECT
      LONGITUDE,
      LATITUDE,
      STAY_NUM
    FROM
      hy_tzd
    WHERE
      GCRQ = '2024-06-11'
    ORDER BY
      STAY_NUM DESC
    LIMIT
      1
  ) AS CUR_WEEK
  JOIN (
    SELECT
      LONGITUDE,
      LATITUDE,
      STAY_NUM
    FROM
      hy_tzd
    WHERE
      GCRQ = '2024-06-04'
  ) AS LAST_WEEK ON CUR_WEEK.LONGITUDE = LAST_WEEK.LONGITUDE
  AND CUR_WEEK.LATITUDE = LAST_WEEK.LATITUDE;
pred_sql: SELECT   CUR_WEEK.LONGITUDE AS '经度',   CUR_WEEK.LATITUDE AS '纬度',   CUR_WEEK.STAY_NUM AS '当前停驻次数',   LAST_WEEK.STAY_NUM AS '上周停驻次数',   (CUR_WEEK.STAY_NUM - LAST_WEEK.STAY_NUM) AS '停驻次数变化' FROM   (     SELECT       LONGITUDE,       LATITUDE,       STAY_NUM     FROM       hy_tzd     WHERE       GCRQ = '2024-06-11'     ORDER BY       STAY_NUM DESC     LIMIT       1   ) AS LAST_WEEK   JOIN (     SELECT       LONGITUDE,       LATITUDE,       STAY_NUM     FROM       hy_tzd     WHERE       GCRQ = '2024-06-04'   ) AS CUR_WEEK ON LAST_WEEK.LONGITUDE = CUR_WEEK.LONGITUDE   AND LAST_WEEK.LATITUDE = CUR_WEEK.LATITUDE;
gold_sql: SELECT
  LONGITUDE AS '经度',
  LATITUDE AS '纬度',
  MAX(STAY_NUM) - MIN(STAY_NUM) AS '波动量'
FROM
  hy_tzd
WHERE
  GCRQ BETWEEN '2024-06-04' AND '2024-06-10'
GROUP BY
  LONGITUDE,
  LATITUDE
ORDER BY
  '波动量' DESC
pred_sql: SELECT   LATITUDE AS '纬度',   LONGITUDE AS '经度',   (MAX(STAY_NUM) - MIN(STAY_NUM)) AS '波动量' FROM   hy_tzd WHERE   GCRQ >= '2024-06-04' AND GCRQ <= '2024-06-10' GROUP BY   LATITUDE,   LONGITUDE ORDER BY   '波动量' DESC;
gold_sql: SELECT
  SUM(
    CASE
      WHEN GCRQ BETWEEN '2024-06-01' AND '2024-06-30'  THEN STAY_NUM
      ELSE 0
    END
  ) > SUM(
    CASE
      WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-31'  THEN STAY_NUM
      ELSE 0
    END
  ) AS `本月停驻总次数是否超过上个月`
FROM
  hy_tzd;
pred_sql: SELECT   (     SELECT SUM(STAY_NUM)     FROM hy_tzd     WHERE GCRQ BETWEEN '2024-06-01' AND '2024-06-30'   ) > (     SELECT SUM(STAY_NUM)     FROM hy_tzd     WHERE GCRQ BETWEEN '2024-05-01' AND '2024-05-31'   ) AS `本月停驻总次数是否超过上个月`;
gold_sql: SELECT
  LONGITUDE AS 经度,
  LATITUDE AS 纬度,
  SUM(STAY_NUM) AS 总停驻次数
FROM
  hy_tzd
WHERE
  GCRQ BETWEEN '2023-06-11' AND '2024-06-10'
GROUP BY
  LONGITUDE,
  LATITUDE
ORDER BY
  总停驻次数 DESC
LIMIT
  1;
pred_sql: SELECT   LATITUDE AS 纬度,   LONGITUDE AS 经度,   SUM(STAY_NUM) AS 总停驻次数 FROM   hy_tzd WHERE   GCRQ BETWEEN '2023-06-11' AND '2024-06-10' GROUP BY   LATITUDE,   LONGITUDE ORDER BY   总停驻次数 DESC LIMIT   1;
gold_sql: SELECT
  `LONGITUDE` AS '经度',
  `LATITUDE` AS '纬度',
  SUM(`STAY_NUM`) AS '总停驻次数'
FROM
  `hy_tzd`
WHERE
  `GCRQ` BETWEEN '2024-04-01' AND '2024-06-30'
GROUP BY
  `LONGITUDE`,
  `LATITUDE`
HAVING
  STD(`STAY_NUM`) <= (
    SELECT
      AVG(STD(`STAY_NUM`))
    FROM
      (
        SELECT
          STD(`STAY_NUM`)
        FROM
          hy_tzd
        WHERE
          GCRQ BETWEEN '2024-04-01' AND '2024-06-30'
        GROUP BY
          LONGITUDE,
          LATITUDE
      ) AS subquery
  )
ORDER BY
  `经度`,
  `纬度`;
pred_sql: SELECT   `LONGITUDE` AS '经度',   `LATITUDE` AS '纬度',   SUM(`STAY_NUM`) AS '总停驻次数' FROM   `hy_tzd` WHERE   `GCRQ` BETWEEN '2024-04-01' AND '2024-06-30' GROUP BY   `LATITUDE`,   `LONGITUDE` HAVING   STD(`STAY_NUM`) <= (     SELECT       AVG(STD(`STAY_NUM`))     FROM       (         SELECT           STD(`STAY_NUM`)         FROM           hy_tzd         WHERE           `GCRQ` BETWEEN '2024-04-01' AND '2024-06-30'         GROUP BY           `LATITUDE`,           `LONGITUDE`       ) AS subquery   ) ORDER BY   `纬度`,   `经度`;
gold_sql: SELECT
  `FSZL` AS '公路客运发送总量（万人次）'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `r_glkyl_z`
  );
pred_sql: SELECT   `FSZL` AS '公路客运发送总量（万人次）' FROM   `r_glkyl_z` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `r_glkyl_z`   );
gold_sql: SELECT
  SUM(`MONTH_FSZL`) AS '累计发送总量（万人次）'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` BETWEEN '2024-06-08' AND '2024-06-11';
pred_sql: SELECT   SUM(`MONTH_FSZL`) AS '累计发送总量（万人次）' FROM   `r_glkyl_z` WHERE   `GCRQ` >= '2024-06-08' AND `GCRQ` <= '2024-06-11';
gold_sql: SELECT
  `FSZL` AS '发送总量（万人次）'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` = '2024-06-09';
pred_sql: SELECT   `FSZL` AS '发送总量（万人次）' FROM   `r_glkyl_z` WHERE   `GCRQ` = '2024-06-09';
gold_sql: SELECT
  `GCRQ` AS '观测日期',
  `SZL` AS '上座率'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` BETWEEN '2024-05-11' AND '2024-06-11'
pred_sql: SELECT   `GCRQ` AS '观测日期',   `SZL` AS '上座率' FROM   `r_glkyl_z` WHERE   `GCRQ` >= '2024-05-11' AND `GCRQ` <= '2024-06-11' ```
gold_sql: SELECT
  `SZQK` AS '上座情况'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `r_glkyl_z`
  );
pred_sql: SELECT   `SZQK` AS '上座情况' FROM   `r_glkyl_z` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `r_glkyl_z`   );
gold_sql: SELECT
  COUNT(GCRQ) AS `观测日期数`
FROM
  r_glkyl_z
WHERE
  SZL > 20
  AND GCRQ BETWEEN '2024-06-01' AND '2024-06-30';
pred_sql: SELECT   COUNT(GCRQ) AS `观测日期数` FROM   r_glkyl_z WHERE   GCRQ BETWEEN '2024-06-01' AND '2024-06-30'   AND SZL > 20;
gold_sql: SELECT
  `GCRQ` AS '日期'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` >= DATE_FORMAT(NOW(), '%Y-%m-01')
  AND `SZQK` = '满座'
pred_sql: SELECT   `GCRQ` AS '日期' FROM   `r_glkyl_z` WHERE   `SZQK` = '满座'   AND `GCRQ` >= DATE_FORMAT(NOW(), '%Y-%m-01') ```
gold_sql: SELECT
  `GCRQ` AS '日期'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` >= DATE_FORMAT(NOW(), '%Y-%m-01')
  AND `SZQK` = '满座'
pred_sql: SELECT   `GCRQ` AS '日期' FROM   `r_glkyl_z` WHERE   `SZQK` = '满座'   AND `GCRQ` >= DATE_FORMAT(NOW(), '%Y-%m-01') ```
gold_sql: SELECT
  GCRQ AS `观测日期`,
  FSZL AS `发送总量（万人次）`
FROM
  r_glkyl_z
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
ORDER BY
  `发送总量（万人次）` DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   FSZL AS `发送总量（万人次）` FROM   r_glkyl_z WHERE   GCRQ >= '2024-01-01' AND GCRQ <= '2024-03-31' ORDER BY   FSZL DESC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  SZL AS `上座率`
FROM
  r_glkyl_z
ORDER BY
  SZL ASC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   SZL AS `上座率` FROM   r_glkyl_z ORDER BY   SZL LIMIT   1;
gold_sql: SELECT
  COUNT(`GCRQ`) AS 观测日期数量
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` BETWEEN '2024-06-01' AND '2024-06-11'
  AND `DRKYLHB` < -0.1;
pred_sql: SELECT   COUNT(`GCRQ`) AS 观测日期数量 FROM   `r_glkyl_z` WHERE   `DRKYLHB` < -0.1   AND `GCRQ` BETWEEN '2024-06-01' AND '2024-06-11';
gold_sql: SELECT
  COUNT(GCRQ) AS `超过平均发送总量的日期数`
FROM
  r_glkyl_z
WHERE
  GCRQ BETWEEN '2024-06-08' AND '2024-06-10'
  AND FSZL > (
    SELECT
      AVG(FSZL)
    FROM
      r_glkyl_z
    WHERE
      GCRQ BETWEEN '2024-06-08' AND '2024-06-10'
  );
pred_sql: SELECT COUNT(GCRQ) AS `超过平均发送总量的日期数` FROM r_glkyl_z WHERE GCRQ IN (     SELECT DISTINCT GCRQ     FROM r_glkyl_z     WHERE GCRQ BETWEEN '2024-06-08' AND '2024-06-10'       AND FSZL > (         SELECT AVG(FSZL)         FROM r_glkyl_z         WHERE GCRQ BETWEEN '2024-06-08' AND '2024-06-10'       ) );
gold_sql: SELECT
  GCRQ AS `日期`
FROM
  r_glkyl_z
WHERE
  SZQK = '座位紧张'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      r_glkyl_z
  );
pred_sql: SELECT GCRQ AS `日期` FROM r_glkyl_z WHERE SZQK = '座位紧张'   AND GCRQ = (     SELECT MAX(GCRQ)     FROM r_glkyl_z   );
gold_sql: SELECT
  COUNT(GCRQ) AS '客运量环比增长超过100 % 的观测天数'
FROM
  r_glkyl_z
WHERE
  DRKYLHB > 1
  AND GCRQ BETWEEN '2024-06-02' AND '2024-06-08';
pred_sql: SELECT   COUNT(GCRQ) AS '客运量环比增长超过100 % 的观测天数' FROM   r_glkyl_z WHERE   GCRQ BETWEEN '2024-06-02' AND '2024-06-08'   AND DRKYLHB > 1;
gold_sql: SELECT
  AVG(SZL) AS '平均上座率'
FROM
  r_glkyl_z
WHERE
  GCRQ BETWEEN '2024-06-10' AND '2024-06-16';
pred_sql: SELECT   AVG(SZL) AS '平均上座率' FROM   r_glkyl_z WHERE   GCRQ >= '2024-06-10' AND GCRQ <= '2024-06-16';
gold_sql: SELECT
  GCRQ AS `发送总量最高的日期`
FROM
  r_glkyl_z
WHERE
  GCRQ BETWEEN '2024-06-04' AND '2024-06-10'
ORDER BY
  FSZL DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `发送总量最高的日期` FROM   r_glkyl_z WHERE   GCRQ >= '2024-06-04' AND GCRQ <= '2024-06-10' ORDER BY   FSZL DESC LIMIT   1;
gold_sql: SELECT
  '2024-06-11' AS `日期`,
  `当前值`.`DRKYLHB` AS `公路客运量环比增长`,
  `上周值`.`DRKYLHB` AS `上周同一天公路客运量环比增长`,
  ((`当前值`.`DRKYLHB` - `上周值`.`DRKYLHB`) / `上周值`.`DRKYLHB`) * 100 AS `增长率百分比`
FROM
  (SELECT `DRKYLHB` FROM `r_glkyl_z` WHERE `GCRQ` = '2024-06-11') AS `当前值`,
  (SELECT `DRKYLHB` FROM `r_glkyl_z` WHERE `GCRQ` = '2024-06-04') AS `上周值`;
pred_sql: SELECT   '2024-06-11' AS `日期`,   `当前值`.`DRKYLHB` AS `公路客运量环比增长`,   `上周值`.`DRKYLHB` AS `上周同一天公路客运量环比增长`,   ((`当前值`.`DRKYLHB` - `上周值`.`DRKYLHB`) / `上周值`.`DRKYLHB`) * 100 AS `增长率百分比` FROM   (SELECT `DRKYLHB` FROM `r_glkyl_z` WHERE `GCRQ` = '2024-06-11') AS `当前值`,   (SELECT `DRKYLHB` FROM `r_glkyl_z` WHERE `GCRQ` = '2024-06-04') AS `上周值`;
gold_sql: SELECT
  AVG(FSZL) AS `平均每日发送总量（万人次）`
FROM
  r_glkyl_z
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31';
pred_sql: SELECT   AVG(FSZL) AS `平均每日发送总量（万人次）` FROM   r_glkyl_z WHERE   GCRQ >= '2024-05-01' AND GCRQ <= '2024-05-31';
gold_sql: SELECT
  MAX(`SZL`) AS '最高上座率'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` BETWEEN '2024-04-01' AND '2024-06-30';
pred_sql: SELECT   MAX(`SZL`) AS '最高上座率' FROM   `r_glkyl_z` WHERE   `GCRQ` >= '2024-04-01' AND `GCRQ` <= '2024-06-30';
gold_sql: SELECT
  `MONTH_FSZL` AS '去年同期累计发送总量（万人次）'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` = (
    SELECT
      `GCRQ`
    FROM
      `r_glkyl_z`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
    ORDER BY
      `GCRQ` DESC
    LIMIT
      1
  );
pred_sql: SELECT   `MONTH_FSZL` AS '去年同期累计发送总量（万人次）' FROM   `r_glkyl_z` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `r_glkyl_z`     WHERE       `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)   );
gold_sql: SELECT
  COUNT(*) AS '环比增长超过5 % 的天数'
FROM
  r_glkyl_z
WHERE
  GCRQ BETWEEN '2024-05-12' AND '2024-06-10'
  AND DRKYLHB > 0.05;
pred_sql: SELECT   COUNT(*) AS '环比增长超过5 % 的天数' FROM   r_glkyl_z WHERE   GCRQ BETWEEN '2024-06-10' AND '2024-05-12'   AND DRKYLHB > 0.05;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  FSZL AS `发送总量（万人次）`
FROM
  r_glkyl_z
WHERE
  WEEKDAY(GCRQ) = 6
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   FSZL AS `发送总量（万人次）` FROM   r_glkyl_z WHERE   WEEKDAY(GCRQ) = 6 ORDER BY   GCRQ ASC LIMIT   1;
gold_sql: SELECT  
  subquery.GCRQ AS `最近连续三天环比增长的日期`  
FROM  
  (  
    SELECT  
      GCRQ,  
      DRKYLHB,  
      LAG(DRKYLHB) OVER (ORDER BY GCRQ) AS prev_day1,  
      LAG(DRKYLHB, 2) OVER (ORDER BY GCRQ) AS prev_day2  
    FROM  
      r_glkyl_z  
  ) subquery  
WHERE  
  subquery.DRKYLHB > 0  
  AND subquery.prev_day1 > 0  
  AND subquery.prev_day2 > 0  
ORDER BY  
  subquery.GCRQ DESC  
LIMIT  
  1;
pred_sql: SELECT     subquery.GCRQ AS `最近连续三天环比增长的日期`   FROM     (       SELECT         GCRQ,         DRKYLHB,         LAG(DRKYLHB) OVER (ORDER BY GCRQ) AS prev_day1,         LAG(DRKYLHB, 2) OVER (ORDER BY GCRQ) AS prev_day2       FROM         r_glkyl_z     ) subquery   WHERE     subquery.DRKYLHB > 0     AND subquery.prev_day1 > 0     AND subquery.prev_day2 > 0   ORDER BY     subquery.GCRQ DESC   LIMIT     1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `SZL` AS `上座率`
FROM
  `r_glkyl_z`
WHERE
  `SZL` = (
    SELECT
      MAX(`SZL`)
    FROM
      `r_glkyl_z`
    WHERE
      MONTH(`GCRQ`) = MONTH(CURDATE())
      AND YEAR(`GCRQ`) = YEAR(CURDATE())
  )
  AND MONTH(`GCRQ`) = MONTH(CURDATE())
  AND YEAR(`GCRQ`) = YEAR(CURDATE());
pred_sql: SELECT   `GCRQ` AS `观测日期`,   `SZL` AS `上座率` FROM   `r_glkyl_z` WHERE   `SZL` = (     SELECT       MAX(`SZL`)     FROM       `r_glkyl_z`     WHERE       MONTH(`GCRQ`) = MONTH(CURDATE())       AND YEAR(`GCRQ`) = YEAR(CURDATE())   )   AND MONTH(`GCRQ`) = MONTH(CURDATE())   AND YEAR(`GCRQ`) = YEAR(CURDATE());
gold_sql: SELECT
  AVG(`FSZL`) AS '平均每日发送总量'
FROM
  `r_glkyl_z`
WHERE
  `GCRQ` BETWEEN '2023-04-01' AND '2023-06-30'
pred_sql: SELECT   AVG(`FSZL`) AS '平均每日发送总量' FROM   `r_glkyl_z` WHERE   `GCRQ` >= '2023-04-01' AND `GCRQ` <= '2023-06-30' ```
gold_sql: SELECT
  GCRQ AS '观测日期',
  SZL AS '上座率'
FROM
  r_glkyl_z
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-11'
  AND SZL > 80;
pred_sql: SELECT   GCRQ AS '观测日期',   SZL AS '上座率' FROM   r_glkyl_z WHERE   SZL > 80   AND GCRQ BETWEEN '2024-06-01' AND '2024-06-11';
gold_sql: SELECT
  PER_CAPITA_REGIONAL_GDP AS '人均地区生产总值（元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
  AND PROVINCE = '安徽省'
  AND CITY = '安庆市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   PER_CAPITA_REGIONAL_GDP AS '人均地区生产总值（元）' FROM   gdp_tj WHERE   CITY = '安庆市'   AND PROVINCE = '安徽省'   AND YEAR = '2010'   AND DISTRICT IS NULL;
gold_sql: SELECT
  CITY AS '地级市',
  DISTRICT AS '县级市',
  REGIONAL_GDP AS '地区生产总值（亿元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
  AND PROVINCE = '安徽省';
pred_sql: SELECT   REGIONAL_GDP AS '地区生产总值（亿元）',   CITY AS '地级市',   DISTRICT AS '县级市' FROM   gdp_tj WHERE   PROVINCE = '安徽省'   AND YEAR = '2010';
gold_sql: SELECT
  YEAR AS '年份',
  REGIONAL_GDP AS '地区生产总值（亿元）'
FROM
  gdp_tj
WHERE
  YEAR = (
    SELECT
      YEAR
    FROM
      gdp_tj
    ORDER BY
      REGIONAL_GDP DESC
    LIMIT
      1
  )
LIMIT
  1;
pred_sql: SELECT   YEAR AS '年份',   REGIONAL_GDP AS '地区生产总值（亿元）' FROM   gdp_tj ORDER BY   REGIONAL_GDP DESC LIMIT   1;
gold_sql: SELECT
  PROVINCE AS '省份',
  PRIMARY_INDUSTRY AS '第一产业产值（亿元）'
FROM
  gdp_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      gdp_tj
  );
pred_sql: SELECT   PRIMARY_INDUSTRY AS '第一产业产值（亿元）',   PROVINCE AS '省份' FROM   gdp_tj WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       gdp_tj   );
gold_sql: SELECT
  PROVINCE AS 省,
  MAX(TERTIARY_INDUSTRY) AS '第三产业产值（亿元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
GROUP BY
  PROVINCE
ORDER BY
  MAX(TERTIARY_INDUSTRY) DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS '省',   MAX(TERTIARY_INDUSTRY) AS '第三产业产值（亿元）' FROM   gdp_tj WHERE   YEAR = '2010' GROUP BY   PROVINCE ORDER BY   '第三产业产值（亿元）' DESC LIMIT   1;
gold_sql: SELECT
  `CITY` AS '城市',
  `REGIONAL_GDP` AS '地区生产总值（亿元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` = '2010'
  AND `CITY` IS NOT NULL
  AND `DISTRICT` IS NULL;
pred_sql: SELECT   `CITY` AS '城市',   `REGIONAL_GDP` AS '地区生产总值（亿元）' FROM   `gdp_tj` WHERE   `YEAR` = '2010'   AND `DISTRICT` IS NULL   AND `CITY` IS NOT NULL;
gold_sql: SELECT
  CITY AS '地级市',
  PER_CAPITA_REGIONAL_GDP AS '人均地区生产总值（元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT   CITY AS '地级市',   PER_CAPITA_REGIONAL_GDP AS '人均地区生产总值（元）' FROM   gdp_tj WHERE   YEAR = '2010'   AND CITY IS NOT NULL   AND DISTRICT IS NULL;
gold_sql: SELECT
  `PROVINCE` AS '省份/直辖市',
  `PER_CAPITA_REGIONAL_GDP` AS '人均地区生产总值（元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` = '2010'
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT   `PROVINCE` AS '省份/直辖市',   `PER_CAPITA_REGIONAL_GDP` AS '人均地区生产总值（元）' FROM   `gdp_tj` WHERE   `YEAR` = '2010'   AND CITY IS NULL   AND DISTRICT IS NULL;
gold_sql: SELECT
  PROVINCE AS '省份',
  PER_CAPITA_REGIONAL_GDP AS '人均地区生产总值（元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
  AND CITY IS NULL
ORDER BY
  PER_CAPITA_REGIONAL_GDP DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS '省份',   PER_CAPITA_REGIONAL_GDP AS '人均地区生产总值（元）' FROM   gdp_tj WHERE   YEAR = '2010'   AND CITY IS NULL ORDER BY   PER_CAPITA_REGIONAL_GDP DESC LIMIT   1;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  SUM(`REGIONAL_GDP`) AS '地区生产总值总和（亿元）'
FROM
  gdp_tj
WHERE
  `YEAR` = '2010'
  AND PROVINCE IS NOT NULL
GROUP BY
  `PROVINCE`;
pred_sql: SELECT   `PROVINCE` AS '省份',   SUM(`REGIONAL_GDP`) AS '地区生产总值总和（亿元）' FROM   gdp_tj WHERE   `YEAR` = '2010'   AND PROVINCE IS NOT NULL GROUP BY   `PROVINCE`;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  SUM(`PRIMARY_INDUSTRY`) AS '第一产业（亿元）',
  SUM(`SECONDARY_INDUSTRY`) AS '第二产业（亿元）',
  SUM(`TERTIARY_INDUSTRY`) AS '第三产业（亿元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` = '2010'
GROUP BY
  `PROVINCE`;
pred_sql: SELECT   `PROVINCE` AS '省份',   SUM(`PRIMARY_INDUSTRY`) AS '第一产业（亿元）',   SUM(`SECONDARY_INDUSTRY`) AS '第二产业（亿元）',   SUM(`TERTIARY_INDUSTRY`) AS '第三产业（亿元）' FROM   `gdp_tj` WHERE   `YEAR` = '2010' GROUP BY   `PROVINCE`;
gold_sql: SELECT
  CITY AS '地级市',
  MAX(PER_CAPITA_REGIONAL_GDP) AS '人均地区生产总值（元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  CITY
ORDER BY
  '人均地区生产总值（元）' DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   MAX(PER_CAPITA_REGIONAL_GDP) AS '人均地区生产总值（元）' FROM   gdp_tj WHERE   YEAR = '2010'   AND CITY IS NOT NULL   AND DISTRICT IS NULL GROUP BY   CITY ORDER BY   MAX(PER_CAPITA_REGIONAL_GDP) DESC LIMIT   1;
gold_sql: SELECT
  REGIONAL_GDP AS '地区生产总值（亿元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
  AND PROVINCE = '安徽省'
  AND CITY = '安庆市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   REGIONAL_GDP AS '地区生产总值（亿元）' FROM   gdp_tj WHERE   PROVINCE = '安徽省'   AND CITY = '安庆市'   AND YEAR = '2010'   AND DISTRICT IS NULL;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  REGIONAL_GDP AS '地区生产总值（亿元）'
FROM
  gdp_tj
WHERE
  `YEAR` = '2010'
  AND REGIONAL_GDP > 900
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT   PROVINCE AS '省份/直辖市',   REGIONAL_GDP AS '地区生产总值（亿元）' FROM   gdp_tj WHERE   `YEAR` = '2010'   AND REGIONAL_GDP > 900   AND PROVINCE IS NOT NULL   AND CITY IS NULL   AND DISTRICT IS NULL;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  (
    (MAX(REGIONAL_GDP) - MIN(REGIONAL_GDP)) / MIN(REGIONAL_GDP)
  ) * 100 AS '地区生产总值增长率(%)'
FROM
  gdp_tj
WHERE
  `YEAR` BETWEEN '2024-06-04' AND '2024-06-10'
GROUP BY
  PROVINCE
ORDER BY
  `地区生产总值增长率(%)` DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS '省份/直辖市',   (     (MAX(REGIONAL_GDP) - MIN(REGIONAL_GDP)) / MIN(REGIONAL_GDP)   ) * 100 AS '地区生产总值增长率(%)' FROM   gdp_tj WHERE   `YEAR` BETWEEN '2024-06-04' AND '2024-06-10' GROUP BY   PROVINCE ORDER BY   `地区生产总值增长率(%)` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS '地级市',
  MAX(PRIMARY_INDUSTRY) AS '第一产业产值（亿元）'
FROM
  gdp_tj
WHERE
  YEAR = '2010'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  CITY
ORDER BY
  '第一产业产值（亿元）' DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   MAX(PRIMARY_INDUSTRY) AS '第一产业产值（亿元）' FROM   gdp_tj WHERE   YEAR = '2010'   AND CITY IS NOT NULL   AND DISTRICT IS NULL GROUP BY   CITY ORDER BY   MAX(PRIMARY_INDUSTRY) DESC LIMIT   1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `PER_CAPITA_REGIONAL_GDP` AS `人均地区生产总值（元）`
FROM
  `gdp_tj`
WHERE
  `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
ORDER BY
  `YEAR` DESC
LIMIT
  1;
pred_sql: SELECT   `PER_CAPITA_REGIONAL_GDP` AS `人均地区生产总值（元）`,   `YEAR` AS `年份` FROM   `gdp_tj` WHERE   `PROVINCE` = '安徽省'   AND `CITY` = '安庆市' ORDER BY   `YEAR` DESC LIMIT   1;
gold_sql: SELECT
  `DISTRICT` AS '县级市',
  `REGIONAL_GDP` AS '地区生产总值（亿元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` = '2010'
ORDER BY
  `REGIONAL_GDP` ASC
LIMIT
  1;
pred_sql: SELECT   `DISTRICT` AS '县级市',   `REGIONAL_GDP` AS '地区生产总值（亿元）' FROM   `gdp_tj` WHERE   `YEAR` = '2010' ORDER BY   `REGIONAL_GDP` ASC LIMIT   1;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  MIN(`REGIONAL_GDP`) - MAX(`REGIONAL_GDP`) AS '地区生产总值增长'
FROM
  gdp_tj
WHERE
  `YEAR` BETWEEN '2024-03-12' AND '2024-06-12'
GROUP BY
  `PROVINCE`
ORDER BY
  `地区生产总值增长` ASC
LIMIT
  1;
pred_sql: SELECT   `PROVINCE` AS '省份',   MIN(`REGIONAL_GDP`) - MAX(`REGIONAL_GDP`) AS '地区生产总值增长' FROM   gdp_tj WHERE   `YEAR` >= '2024-03-12' AND `YEAR` <= '2024-06-12' GROUP BY   `PROVINCE` ORDER BY   `地区生产总值增长` ASC LIMIT   1;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  PRIMARY_INDUSTRY AS '第一产业（亿元）'
FROM
  gdp_tj
WHERE
  `YEAR` = '2010'
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL
ORDER BY
  PRIMARY_INDUSTRY ASC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS '省份/直辖市',   PRIMARY_INDUSTRY AS '第一产业（亿元）' FROM   gdp_tj WHERE   YEAR = '2010'   AND PROVINCE IS NOT NULL   AND CITY IS NULL   AND DISTRICT IS NULL ORDER BY   PRIMARY_INDUSTRY ASC LIMIT 1;
gold_sql: SELECT
  `DISTRICT` AS '县级市',
  `TERTIARY_INDUSTRY` AS '第三产业产值（亿元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` = '2010'
  AND `TERTIARY_INDUSTRY` > 200
  AND `DISTRICT` IS NOT NULL
ORDER BY
  `TERTIARY_INDUSTRY` DESC;
pred_sql: SELECT   `DISTRICT` AS '县级市',   `TERTIARY_INDUSTRY` AS '第三产业产值（亿元）' FROM   `gdp_tj` WHERE   `YEAR` = '2010'   AND `TERTIARY_INDUSTRY` > 200   AND `DISTRICT` IS NOT NULL ORDER BY   `TERTIARY_INDUSTRY` DESC;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  (MAX(`REGIONAL_GDP`) - MIN(`REGIONAL_GDP`)) AS '地区生产总值波动'
FROM
  `gdp_tj`
WHERE
   DISTRICT IS NULL
   AND CITY IS NULL
GROUP BY
  `PROVINCE`
ORDER BY
  `地区生产总值波动` DESC
LIMIT
  1;
pred_sql: SELECT   `PROVINCE` AS '省份',   (MAX(`REGIONAL_GDP`) - MIN(`REGIONAL_GDP`)) AS '地区生产总值波动' FROM   `gdp_tj` WHERE   CITY IS NULL   AND DISTRICT IS NULL GROUP BY   `PROVINCE` ORDER BY   `地区生产总值波动` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS `地级市`,
  MAX(SECONDARY_INDUSTRY) - MIN(SECONDARY_INDUSTRY) AS `增长量（亿元）`
FROM
  gdp_tj
WHERE
  `YEAR` IN ('2023', '2024')
GROUP BY
  CITY
ORDER BY
  `增长量（亿元）` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `地级市`,   (MAX(SECONDARY_INDUSTRY) - MIN(SECONDARY_INDUSTRY)) AS `增长量（亿元）` FROM   gdp_tj WHERE   YEAR IN ('2023', '2024') GROUP BY   CITY ORDER BY   `增长量（亿元）` DESC LIMIT   1;
gold_sql: SELECT
  `CITY` AS '地级市',
  SUM(`REGIONAL_GDP`) AS 'GDP总和（亿元）'
FROM
  gdp_tj
WHERE
  `YEAR` = '2010'
  AND `PROVINCE` = '安徽省'
  AND `CITY` IS NOT NULL
GROUP BY
  `CITY`;
pred_sql: SELECT   `CITY` AS '地级市',   SUM(`REGIONAL_GDP`) AS 'GDP总和（亿元）' FROM   gdp_tj WHERE   `PROVINCE` = '安徽省'   AND `YEAR` = '2010'   AND `CITY` IS NOT NULL GROUP BY   `CITY`;
gold_sql: SELECT
  `REGIONAL_GDP` AS '地区生产总值（亿元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` = '2010'
  AND `CITY` = '安庆市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   `REGIONAL_GDP` AS '地区生产总值（亿元）' FROM   `gdp_tj` WHERE   `CITY` = '安庆市'   AND `YEAR` = '2010'   AND DISTRICT IS NULL;
gold_sql: SELECT
  DISTRICT AS '县级市',
  PER_CAPITA_REGIONAL_GDP AS '人均地区生产总值（元）'
FROM
  gdp_tj
WHERE
  PER_CAPITA_REGIONAL_GDP > 20000
  AND DISTRICT IS NOT NULL
pred_sql: SELECT   '县级市' AS DISTRICT,   '人均地区生产总值（元）' AS PER_CAPITA_REGIONAL_GDP FROM   gdp_tj WHERE   PER_CAPITA_REGIONAL_GDP > 20000   AND DISTRICT IS NOT NULL;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  AVG(`PRIMARY_INDUSTRY`) AS '第一产业平均产值（亿元）'
FROM
  GDP_TJ
WHERE
  `YEAR` = 2010
  AND CITY IS NULL
  AND DISTRICT IS NULL
GROUP BY
  `PROVINCE`
pred_sql: SELECT   `PROVINCE` AS '省份',   AVG(`PRIMARY_INDUSTRY`) AS '第一产业平均产值（亿元）' FROM   GDP_TJ WHERE   `YEAR` = 2010   AND CITY IS NULL   AND DISTRICT IS NULL GROUP BY   `PROVINCE`;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  AVG(`REGIONAL_GDP`) AS '平均GDP增长率（亿元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` BETWEEN '2014' AND '2023'
GROUP BY
  `PROVINCE`;
pred_sql: SELECT   `PROVINCE` AS '省份',   AVG(`REGIONAL_GDP`) AS '平均GDP增长率（亿元）' FROM   `gdp_tj` WHERE   `YEAR` >= '2014' AND `YEAR` <= '2023' GROUP BY   `PROVINCE`;
gold_sql: SELECT
  current_data.DISTRICT AS '县级市',
  (
    current_data.TERTIARY_INDUSTRY - prev_data.TERTIARY_INDUSTRY
  ) AS '第三产业增长量（亿元）'
FROM
  gdp_tj prev_data
  JOIN gdp_tj current_data ON prev_data.DISTRICT = current_data.DISTRICT
WHERE
  prev_data.`YEAR` = '2023'
  AND prev_data.`YEAR` = '2023'
  AND prev_data.`YEAR` IN ('01', '02', '03')
  AND current_data.`YEAR` = '2024'
  AND current_data.`YEAR` IN ('01', '02', '03')
ORDER BY
  `第三产业增长量（亿元）` DESC
LIMIT
  1;
pred_sql: SELECT   current_data.DISTRICT AS '县级市',   (     current_data.TERTIARY_INDUSTRY - prev_data.TERTIARY_INDUSTRY   ) AS '第三产业增长量（亿元）' FROM   gdp_tj prev_data   JOIN gdp_tj current_data ON prev_data.DISTRICT = current_data.DISTRICT WHERE   prev_data.`YEAR` IN ('2023')   AND prev_data.MONTH IN ('01', '02', '03')   AND current_data.`YEAR` IN ('2024')   AND current_data.MONTH IN ('01', '02', '03') ORDER BY   `第三产业增长量（亿元）` DESC LIMIT   1;
gold_sql: SELECT
  `CITY` AS `城市名称`,
  MAX(`PER_CAPITA_REGIONAL_GDP`) AS `人均GDP（元）`
FROM
  `gdp_tj`
WHERE
  `PROVINCE` = '安徽省'
GROUP BY
  `CITY`
ORDER BY
  `人均GDP（元）` DESC
LIMIT
  1;
pred_sql: SELECT   `CITY` AS `城市名称`,   MAX(`PER_CAPITA_REGIONAL_GDP`) AS `人均GDP（元）` FROM   `gdp_tj` WHERE   `PROVINCE` = '安徽省' GROUP BY   `CITY` ORDER BY   `人均GDP（元）` DESC LIMIT   1;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  SUM(`REGIONAL_GDP`) AS 'GDP总量（亿元）'
FROM
  `gdp_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `gdp_tj`
    WHERE
      `YEAR` <= '2024-06-05'
  )
GROUP BY
  `PROVINCE`
ORDER BY
  `GDP总量（亿元）` DESC;
pred_sql: SELECT   `PROVINCE` AS '省份',   SUM(`REGIONAL_GDP`) AS 'GDP总量（亿元）' FROM   `gdp_tj` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `gdp_tj`     WHERE       `YEAR` <= '2024-06-05'   ) GROUP BY   `PROVINCE` ORDER BY   `GDP总量（亿元）` DESC;
gold_sql: SELECT
  t1.PROVINCE AS '省份',
  t1.CITY AS '地级市',
  t1.DISTRICT AS '县级市',
  t1.REGIONAL_GDP AS '今年地区生产总值（亿元）',
  t2.REGIONAL_GDP AS '前年同期地区生产总值（亿元）',
  (t1.REGIONAL_GDP - t2.REGIONAL_GDP) / t2.REGIONAL_GDP * 100 AS '增长率（%）'
FROM
  gdp_tj t1
  JOIN gdp_tj t2 ON t1.PROVINCE = t2.PROVINCE
  AND t1.CITY = t2.CITY
  AND t1.DISTRICT = t2.DISTRICT
WHERE
  t1.YEAR = '2024'
  AND t2.YEAR = '2022';
pred_sql: SELECT   t1.PROVINCE AS '省份',   t1.CITY AS '地级市',   t1.DISTRICT AS '县级市',   t1.REGIONAL_GDP AS '今年地区生产总值（亿元）',   t2.REGIONAL_GDP AS '前年同期地区生产总值（亿元）',   (t1.REGIONAL_GDP - t2.REGIONAL_GDP) / t2.REGIONAL_GDP * 100 AS '增长率（%）' FROM   gdp_tj t2   JOIN gdp_tj t1 ON t1.PROVINCE = t2.PROVINCE   AND t1.CITY = t2.CITY   AND t1.DISTRICT = t2.DISTRICT WHERE   t1.YEAR = '2024'   AND t2.YEAR = '2022';
gold_sql: SELECT
  CITY AS `县级市`,
  PER_CAPITA_REGIONAL_GDP AS `人均地区生产总值（元）`
FROM
  GDP_TJ
WHERE
  PROVINCE = '江苏省'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      GDP_TJ
    WHERE
      PROVINCE = '江苏省'
  )
  AND PER_CAPITA_REGIONAL_GDP > (
    SELECT
      AVG(PER_CAPITA_REGIONAL_GDP)
    FROM
      GDP_TJ
    WHERE
      PROVINCE = '江苏省'
      AND CITY IS NOT NULL
      AND DISTRICT IS NULL
      AND YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          GDP_TJ
        WHERE
          PROVINCE = '江苏省'
      )
  );
pred_sql: SELECT   CITY AS `县级市`,   PER_CAPITA_REGIONAL_GDP AS `人均地区生产总值（元）` FROM   GDP_TJ WHERE   PROVINCE = '江苏省'   AND CITY IS NOT NULL   AND DISTRICT IS NULL   AND YEAR = (     SELECT       MAX(YEAR)     FROM       GDP_TJ     WHERE       PROVINCE = '江苏省'   ) HAVING   PER_CAPITA_REGIONAL_GDP > (     SELECT       AVG(PER_CAPITA_REGIONAL_GDP)     FROM       GDP_TJ     WHERE       PROVINCE = '江苏省'       AND CITY IS NOT NULL       AND DISTRICT IS NULL       AND YEAR = (         SELECT           MAX(YEAR)         FROM           GDP_TJ         WHERE           PROVINCE = '江苏省'       )   );
gold_sql: SELECT
  PROVINCE AS '省份',
  ABS(PRIMARY_INDUSTRY - SECONDARY_INDUSTRY) AS '第一与第二产业差额',
  ABS(PRIMARY_INDUSTRY - TERTIARY_INDUSTRY) AS '第一与第三产业差额',
  ABS(SECONDARY_INDUSTRY - TERTIARY_INDUSTRY) AS '第二与第三产业差额'
FROM
  gdp_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      gdp_tj
  )
ORDER BY
  GREATEST(
    ABS(PRIMARY_INDUSTRY - SECONDARY_INDUSTRY),
    ABS(PRIMARY_INDUSTRY - TERTIARY_INDUSTRY),
    ABS(SECONDARY_INDUSTRY - TERTIARY_INDUSTRY)
  ) ASC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS '省份',   ABS(PRIMARY_INDUSTRY - SECONDARY_INDUSTRY) AS '第一与第二产业差额',   ABS(PRIMARY_INDUSTRY - TERTIARY_INDUSTRY) AS '第一与第三产业差额',   ABS(SECONDARY_INDUSTRY - TERTIARY_INDUSTRY) AS '第二与第三产业差额' FROM   gdp_tj WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       gdp_tj   ) ORDER BY   LEAST(     ABS(PRIMARY_INDUSTRY - SECONDARY_INDUSTRY),     ABS(PRIMARY_INDUSTRY - TERTIARY_INDUSTRY),     ABS(SECONDARY_INDUSTRY - TERTIARY_INDUSTRY)   ) DESC LIMIT   1;
gold_sql: SELECT
  CITY AS `地级市`,
  (TERTIARY_INDUSTRY / REGIONAL_GDP) * 100 AS `第三产业占比（%）`
FROM
  gdp_tj
WHERE
  `YEAR` = '2024-05'
  AND (TERTIARY_INDUSTRY / REGIONAL_GDP) > 0.6
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT   `地级市`,   `第三产业占比（%）` FROM (   SELECT     CITY AS `地级市`,     (TERTIARY_INDUSTRY / REGIONAL_GDP) * 100 AS `第三产业占比（%）`   FROM     gdp_tj   WHERE     `YEAR` = '2024-05'     AND PROVINCE IS NOT NULL     AND CITY IS NOT NULL     AND DISTRICT IS NULL ) AS subquery WHERE   `第三产业占比（%）` > 60;
gold_sql: SELECT
  `tl_dm`.`SEGMENT` AS `区段`,
  AVG(`tl_dm`.`OD`) AS `月均客流量`
FROM
  `tl_dm`
WHERE
  `tl_dm`.`YEAR` = '2020'
  AND `tl_dm`.`ROAD_NAME` = '丰沛线'
GROUP BY
  `tl_dm`.`SEGMENT`;
pred_sql: SELECT   `tl_dm`.`SEGMENT` AS `区段`,   AVG(`tl_dm`.`OD`) AS `月均客流量` FROM   `tl_dm` WHERE   `tl_dm`.`ROAD_NAME` = '丰沛线'   AND `tl_dm`.`YEAR` = '2020' GROUP BY   `tl_dm`.`SEGMENT`;
gold_sql: SELECT
  ROAD_NAME AS `线路名称`,
  SUM(OD) AS `客流量（人/月）`
FROM
  tl_dm
WHERE
  YEAR = '2020'
GROUP BY
  ROAD_NAME
ORDER BY
  `客流量（人/月）` DESC;
pred_sql: SELECT   ROAD_NAME AS `线路名称`,   SUM(OD) AS `客流量（人/月）` FROM   tl_dm WHERE   YEAR = '2020' GROUP BY   ROAD_NAME ORDER BY   `客流量（人/月）` DESC;
gold_sql: SELECT
  ROAD_NAME AS `线路名称`,
  OD / 12 AS `月均OD量（人/月）`
FROM
  tl_dm
WHERE
  YEAR = '2020年'
  AND OD / 12 > 15000;
pred_sql: SELECT   ROAD_NAME AS `线路名称`,   OD / 12 AS `月均OD量（人/月）` FROM   tl_dm WHERE   YEAR = '2020年' HAVING   `月均OD量（人/月）` > 15000;
gold_sql: SELECT
  `YEAR` AS `年份`,
  SUM(`OD`) AS `OD量总和（人/月）`
FROM
  `tl_dm`
GROUP BY
  `YEAR`;
pred_sql: SELECT   `YEAR` AS `年份`,   SUM(`OD`) AS `OD量总和（人/月）` FROM   `tl_dm` GROUP BY   `YEAR`;
gold_sql: SELECT
  COUNT(*) AS `线路数量`
FROM
  tl_dm
WHERE
  `YEAR` = '2020'
  AND `DISTRICT` = '某区';
pred_sql: SELECT   COUNT(*) AS `线路数量` FROM   tl_dm WHERE   `DISTRICT` = '某区'   AND `YEAR` = '2020';
gold_sql: SELECT
  `ROAD_NAME` AS `线路名称`,
  `OD` AS `OD量（人/月）`
FROM
  `tl_dm`
WHERE
  `YEAR` = '2020'
  AND `OD` > (
    SELECT
      AVG(`OD`)
    FROM
      `tl_dm`
    WHERE
      `YEAR` = '2020'
  )
pred_sql: SELECT   `ROAD_NAME` AS `线路名称`,   `OD` AS `OD量（人/月）` FROM   `tl_dm` WHERE   `YEAR` = '2020'   AND `OD` > (     SELECT       AVG(`OD`)     FROM       `tl_dm` AS subquery     WHERE       subquery.`YEAR` = '2020'   );
gold_sql: SELECT
  ROAD_NAME AS `线路名称`,
  SUM(OD) AS `总OD量（人/月）`
FROM
  tl_dm
WHERE
  YEAR IN ('2020', '2021')
GROUP BY
  ROAD_NAME;
pred_sql: SELECT   ROAD_NAME AS `线路名称`,   SUM(OD) AS `总OD量（人/月）` FROM   tl_dm WHERE   YEAR IN ('2021', '2020') GROUP BY   ROAD_NAME;
gold_sql: SELECT
  `YEAR` AS 年份,
  `OD` AS 'OD量'
FROM
  `tl_dm`
WHERE
  `ROAD_NAME` = '丰沛线'
  AND `YEAR` BETWEEN '2020' AND '2024';
pred_sql: SELECT   `YEAR` AS 年份,   `OD` AS 'OD量' FROM   `tl_dm` WHERE   `ROAD_NAME` = '丰沛线'   AND `YEAR` >= '2020' AND `YEAR` <= '2024';
gold_sql: SELECT
  CITY AS `城市`,
  MAX(OD) AS `最高铁路断面OD量`
FROM
  tl_dm
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      tl_dm
  )
GROUP BY
  CITY
ORDER BY
  `最高铁路断面OD量` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `城市`,   MAX(OD) AS `最高铁路断面OD量` FROM   tl_dm WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       tl_dm   ) GROUP BY   CITY ORDER BY   `最高铁路断面OD量` DESC LIMIT   1;
gold_sql: SELECT
  `DISTRICT` AS `区县`,
  `OD` AS `铁路断面OD量（人/月）`
FROM
  `tl_dm`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `tl_dm`
  )
ORDER BY
  `OD` ASC
LIMIT
  1;
pred_sql: SELECT   `DISTRICT` AS `区县`,   `OD` AS `铁路断面OD量（人/月）` FROM   `tl_dm` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `tl_dm`   ) ORDER BY   `OD` ASC LIMIT   1;
gold_sql: SELECT
  `CITY` AS '城市',
  SUM(`OD`) AS 'OD总量'
FROM
  `tl_dm`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `tl_dm`
  )
  AND `ROAD_NAME` = '丰沛线'
GROUP BY
  `CITY`
ORDER BY
  `OD总量` DESC
LIMIT
  1;
pred_sql: SELECT   `CITY` AS '城市',   SUM(`OD`) AS 'OD总量' FROM   `tl_dm` WHERE   `ROAD_NAME` = '丰沛线'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `tl_dm`   ) GROUP BY   `CITY` ORDER BY   `OD总量` DESC LIMIT   1;
gold_sql: SELECT
  `OD` AS 'OD量',
  (
    SELECT
      AVG(`OD`)
    FROM
      `tl_dm`
  ) AS '平均OD量'
FROM
  `tl_dm`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `tl_dm`
  )
  AND `ROAD_NAME` = '丰沛线'
pred_sql: SELECT   `OD` AS 'OD量',   (     SELECT       AVG(`OD`)     FROM       `tl_dm`   ) AS '平均OD量' FROM   `tl_dm` WHERE   `ROAD_NAME` = '丰沛线'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `tl_dm`   ) ```
gold_sql: SELECT
  `SEGMENT` AS `区段`,
  SUM(`OD`) AS `总OD量`
FROM
  `tl_dm`
GROUP BY
  `SEGMENT`
ORDER BY
  `总OD量` DESC
LIMIT
  1;
pred_sql: SELECT   `SEGMENT` AS `区段`,   SUM(`OD`) AS `总OD量` FROM   `tl_dm` GROUP BY   `SEGMENT` ORDER BY   `总OD量` DESC LIMIT   1;
gold_sql: SELECT
  ROAD_NAME AS '线路名称',
  AVG(OD) AS '平均OD量（人/月）'
FROM
  tl_dm
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      tl_dm
  )
GROUP BY
  ROAD_NAME
ORDER BY
  CASE
    WHEN ROAD_NAME = '丰沛线' THEN 1
    ELSE 2
  END
pred_sql: SELECT   ROAD_NAME AS '线路名称',   AVG(OD) AS '平均OD量（人/月）' FROM   tl_dm WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       tl_dm   ) GROUP BY   ROAD_NAME ORDER BY   CASE     WHEN ROAD_NAME = '丰沛线' THEN 1     ELSE 2   END;
gold_sql: SELECT
  CITY AS `城市`,
  (MAX(OD) - MIN(OD)) / MIN(OD) AS `OD量增幅`
FROM
  tl_dm
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      tl_dm
  )
GROUP BY
  CITY
ORDER BY
  `OD量增幅` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `城市`,   (MAX(OD) - MIN(OD)) / MIN(OD) AS `OD量增幅` FROM   tl_dm WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       tl_dm   ) GROUP BY   CITY ORDER BY   `OD量增幅` DESC LIMIT   1;
gold_sql: SELECT
  `DISTRICT` AS `区县`,
  STDDEV(`OD`) AS `OD量标准差`
FROM
  `tl_dm`
GROUP BY
  `DISTRICT`
ORDER BY
  `OD量标准差` ASC
LIMIT
  1;
pred_sql: SELECT   `DISTRICT` AS `区县`,   STDDEV(`OD`) AS `OD量标准差` FROM   `tl_dm` GROUP BY   `DISTRICT` ORDER BY   `OD量标准差` ASC LIMIT   1;
gold_sql: SELECT
  (
    SELECT
      SUM(OD)
    FROM
      tl_dm
    WHERE
      CITY = '南京市'
      AND `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          tl_dm
      )
  ) - (
    SELECT
      SUM(OD)
    FROM
      tl_dm
    WHERE
      CITY = '南京市'
      AND `YEAR` = '2022'
  ) AS `南京市铁路断面OD量比去年增加量`
pred_sql: SELECT   (     SELECT       SUM(OD)     FROM       tl_dm     WHERE       CITY = '南京市'       AND `YEAR` = (         SELECT           MAX(`YEAR`)         FROM           tl_dm       )   ) - (     SELECT       SUM(OD)     FROM       tl_dm     WHERE       CITY = '南京市'       AND `YEAR` = '2022'   ) AS `南京市铁路断面OD量比去年增加量`;
gold_sql: SELECT
  `YEAR` AS '年份',
  `CITY` AS '城市',
  `DISTRICT` AS '区县',
  `SEGMENT` AS '区段',
  `ROAD_NAME` AS '线路名称',
  SUM(`OD`) AS 'OD量（人/月）'
FROM
  `tl_dm`
WHERE
  `ROAD_NAME` = '丰沛线'
  AND `YEAR` BETWEEN '2021' AND '2024'
GROUP BY
  `YEAR`,
  `CITY`,
  `DISTRICT`,
  `SEGMENT`
ORDER BY
  `YEAR`;
pred_sql: SELECT   `YEAR` AS '年份',   `CITY` AS '城市',   `DISTRICT` AS '区县',   `SEGMENT` AS '区段',   `ROAD_NAME` AS '线路名称',   SUM(`OD`) AS 'OD量（人/月）' FROM   `tl_dm` WHERE   `ROAD_NAME` = '丰沛线'   AND `YEAR` IN (2021, 2022, 2023, 2024) GROUP BY   `YEAR`,   `CITY`,   `DISTRICT`,   `SEGMENT` ORDER BY   `YEAR`;
gold_sql: SELECT
  `YEAR` AS '年份',
  `SEGMENT` AS '区段',
  `OD` AS 'OD量（人/月）'
FROM
  `tl_dm`
WHERE
  `ROAD_NAME` = '丰沛线'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `tl_dm`
  );
pred_sql: SELECT   `SEGMENT` AS '区段',   `OD` AS 'OD量（人/月）',   `YEAR` AS '年份' FROM   `tl_dm` WHERE   `ROAD_NAME` = '丰沛线'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `tl_dm`   );
gold_sql: SELECT
  CITY AS `城市`
FROM
  tl_dm
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      tl_dm
  )
GROUP BY
  CITY
HAVING
  MAX(OD) > 20000;
pred_sql: SELECT   CITY AS `城市` FROM   tl_dm WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       tl_dm   ) GROUP BY   CITY HAVING   MAX(OD) > 20000;
gold_sql: SELECT
  `DISTRICT` AS `区县`,
  AVG(`OD`) AS `平均OD量（人/月）`
FROM
  `tl_dm`
WHERE
  `YEAR` BETWEEN '2021' AND '2023'
GROUP BY
  `DISTRICT`
ORDER BY
  `平均OD量（人/月）` DESC
LIMIT
  1;
pred_sql: SELECT   `DISTRICT` AS `区县`,   AVG(`OD`) AS `平均OD量（人/月）` FROM   `tl_dm` WHERE   `YEAR` IN (2021, 2022, 2023) GROUP BY   `DISTRICT` ORDER BY   `平均OD量（人/月）` DESC LIMIT   1;
gold_sql: SELECT
  `SEGMENT` AS `区段`,
  `OD` AS `OD量（人/月）`
FROM
  `tl_dm`
WHERE
  `YEAR` = '2020'
ORDER BY
  `OD` ASC
LIMIT
  1;
pred_sql: SELECT   `SEGMENT` AS `区段`,   `OD` AS `OD量（人/月）` FROM   `tl_dm` WHERE   `YEAR` = '2020' ORDER BY   `OD` ASC LIMIT   1;
gold_sql: SELECT
  current.线路名称,
  (current.OD量 - IFNULL(previous.OD量, 0)) AS `OD量增长数`
FROM
  (
    SELECT
      ROAD_NAME AS 线路名称,
      SUM(OD) AS OD量
    FROM
      tl_dm
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          tl_dm
      )
    GROUP BY
      ROAD_NAME
  ) AS current
  LEFT JOIN (
    SELECT
      ROAD_NAME AS 线路名称,
      SUM(OD) AS OD量
    FROM
      tl_dm
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          tl_dm
        WHERE
          YEAR < (
            SELECT
              MAX(YEAR)
            FROM
              tl_dm
          )
      )
    GROUP BY
      ROAD_NAME
  ) AS previous ON current.线路名称 = previous.线路名称
ORDER BY
  `OD量增长数` DESC
LIMIT
  1;
pred_sql: SELECT   current.线路名称,   (current.OD量 - COALESCE(previous.OD量, 0)) AS `OD量增长数` FROM   (     SELECT       ROAD_NAME AS 线路名称,       SUM(OD) AS OD量     FROM       tl_dm     WHERE       YEAR = (         SELECT           MAX(YEAR)         FROM           tl_dm       )     GROUP BY       ROAD_NAME   ) AS current   LEFT JOIN (     SELECT       ROAD_NAME AS 线路名称,       SUM(OD) AS OD量     FROM       tl_dm     WHERE       YEAR = (         SELECT           MAX(YEAR) - 1         FROM           tl_dm       )     GROUP BY       ROAD_NAME   ) AS previous ON current.线路名称 = previous.线路名称 ORDER BY   `OD量增长数` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS `城市`,
  VARIANCE(OD) AS `OD量方差`
FROM
  tl_dm
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      tl_dm
  )
GROUP BY
  CITY
ORDER BY
  `OD量方差` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `城市`,   VARIANCE(OD) AS `OD量方差` FROM   tl_dm WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       tl_dm   ) GROUP BY   CITY ORDER BY   `OD量方差` DESC LIMIT   1;
gold_sql: SELECT
  `YEAR` AS '年份',
  `CITY` AS '城市',
  AVG(`OD`) AS '平均OD量'
FROM
  `tl_dm`
GROUP BY
  `YEAR`,
  `CITY`
ORDER BY
  AVG(`OD`) DESC
LIMIT
  1;
pred_sql: SELECT   `YEAR` AS '年份',   `CITY` AS '城市',   AVG(`OD`) AS '平均OD量' FROM   `tl_dm` GROUP BY   `CITY`,   `YEAR` ORDER BY   '平均OD量' DESC LIMIT   1;
gold_sql: SELECT
  `CITY` AS '城市',
  COUNT(DISTINCT `ROAD_NAME`) AS '线路数量'
FROM
  `tl_dm`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `tl_dm`
  )
GROUP BY
  `CITY`
ORDER BY
  COUNT(DISTINCT `ROAD_NAME`) DESC
LIMIT
  1;
pred_sql: SELECT   `CITY` AS '城市',   COUNT(DISTINCT `ROAD_NAME`) AS '线路数量' FROM   `tl_dm` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `tl_dm`   ) GROUP BY   `CITY` ORDER BY   '线路数量' DESC LIMIT   1;
gold_sql: SELECT
  SEGMENT AS `区段`,
  (
    SUM(OD) - IFNULL(
      (
        SELECT
          SUM(OD)
        FROM
          tl_dm
        WHERE
          YEAR = '2024'
          AND DATE_FORMAT(
            STR_TO_DATE(CONCAT(YEAR, '-06-13'), '%Y-%m-%d'),
            '%Y-%m-%d'
          ) = DATE_SUB('2024-06-13', INTERVAL 1 MONTH)
      ),
      0
    )
  ) AS `OD量变化`
FROM
  tl_dm
WHERE
  YEAR = '2024'
  AND DATE_FORMAT(
    STR_TO_DATE(CONCAT(YEAR, '-06-13'), '%Y-%m-%d'),
    '%Y-%m-%d'
  ) BETWEEN '2024-05-13' AND '2024-06-13'
GROUP BY
  SEGMENT
ORDER BY
  `OD量变化` ASC
LIMIT
  1;
pred_sql: SELECT   SEGMENT AS `区段`,   (     SUM(OD) - COALESCE(       (         SELECT           SUM(OD)         FROM           tl_dm         WHERE           YEAR = '2024'           AND DATE_FORMAT(             STR_TO_DATE(CONCAT(YEAR, '-06-13'), '%Y-%m-%d'),             '%Y-%m-%d'           ) = DATE_SUB('2024-06-13', INTERVAL 1 MONTH)       ),       0     )   ) AS `OD量变化` FROM   tl_dm WHERE   YEAR = '2024'   AND DATE_FORMAT(     STR_TO_DATE(CONCAT(YEAR, '-06-13'), '%Y-%m-%d'),     '%Y-%m-%d'   ) BETWEEN '2024-05-13' AND '2024-06-13' GROUP BY   SEGMENT ORDER BY   `OD量变化` ASC LIMIT   1;
gold_sql: SELECT
  SUBSTRING_INDEX(
    SUBSTRING_INDEX(
      GROUP_CONCAT(
        OD
        ORDER BY
          OD
      ),
      ',',
      FLOOR((COUNT(*) + 1) / 2)
    ),
    ',',
    -1
  ) AS `OD量中位数`
FROM
  tl_dm;
pred_sql: SELECT   AVG(OD) AS `OD量中位数` FROM (   SELECT     OD,     @rownum := @rownum + 1 AS `rank`   FROM     tl_dm,     (SELECT @rownum := 0) r   ORDER BY     OD ) AS sorted_ods WHERE   rank IN (FLOOR((@rownum + 1) / 2), FLOOR((@rownum + 2) / 2));
gold_sql: SELECT
  CITY AS `城市`,
  MIN(OD) AS `最小OD量`,
  MAX(OD) AS `最大OD量`,
  (MAX(OD) - MIN(OD)) AS `OD量差值`
FROM
  tl_dm
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      tl_dm
  )
GROUP BY
  CITY
ORDER BY
  `OD量差值` ASC
LIMIT
  1;
pred_sql: SELECT   CITY AS `城市`,   MIN(OD) AS `最小OD量`,   MAX(OD) AS `最大OD量`,   (MAX(OD) - MIN(OD)) AS `OD量差值` FROM   tl_dm WHERE   YEAR = (SELECT MAX(YEAR) FROM tl_dm) GROUP BY   CITY ORDER BY   `OD量差值` ASC LIMIT   1;
gold_sql: SELECT
  `线路名称`,
  `OD量（人/月）`
FROM
  (
    SELECT
      `ROAD_NAME` AS `线路名称`,
      SUM(`OD`) AS `OD量（人/月）`
    FROM
      `tl_dm`
    WHERE
      `YEAR` = '2019'
    GROUP BY
      `ROAD_NAME`
    ORDER BY
      `OD量（人/月）` DESC
    LIMIT
      2
  ) AS tmp
ORDER BY
  `OD量（人/月）` ASC
LIMIT
  1;
pred_sql: SELECT   `线路名称`,   `OD量（人/月）` FROM   (     SELECT       `ROAD_NAME` AS `线路名称`,       SUM(`OD`) AS `OD量（人/月）`     FROM       `tl_dm`     WHERE       `YEAR` = '2019'     GROUP BY       `ROAD_NAME`     ORDER BY       `OD量（人/月）` DESC     LIMIT       1 OFFSET 1   ) AS tmp;
gold_sql: SELECT
  `DISTRICT` AS `区县`,
  SUM(`OD`) AS `总OD量`
FROM
  `tl_dm`
WHERE
  `YEAR` = '2024'
GROUP BY
  `DISTRICT`
ORDER BY
  `总OD量` DESC
LIMIT
  1;
pred_sql: SELECT   `DISTRICT` AS `区县`,   SUM(`OD`) AS `总OD量` FROM   `tl_dm` WHERE   `YEAR` = '2024' GROUP BY   `DISTRICT` ORDER BY   `总OD量` DESC LIMIT   1;
gold_sql: SELECT
  `ZONGCLL` AS `总车流量`
FROM
  `gsgl_dmyxzt`
WHERE
  `GCRQ` = '2023-11-17'
  AND `GSMC` = '江宜高速';
pred_sql: SELECT   `ZONGCLL` AS `总车流量` FROM   `gsgl_dmyxzt` WHERE   `GSMC` = '江宜高速'   AND `GCRQ` = '2023-11-17';
gold_sql: SELECT
  GCRQ AS `日期`,
  CHEHZZL AS `车货总重量`
FROM
  gsgl_dmyxzt
WHERE
  DUANMBM = 'S003932004000410010'
ORDER BY
  CHEHZZL DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `日期`,   CHEHZZL AS `车货总重量` FROM   gsgl_dmyxzt WHERE   DUANMBM = 'S003932004000410010' ORDER BY   CHEHZZL DESC LIMIT   1;
gold_sql: SELECT
  AVG(`KECZLL`) AS `平均客车流量（辆/天）`
FROM
  `gsgl_dmyxzt`
WHERE
  `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
pred_sql: SELECT   AVG(`KECZLL`) AS `平均客车流量（辆/天）` FROM   `gsgl_dmyxzt` WHERE   `GCRQ` >= '2023-11-01' AND `GCRQ` <= '2023-11-30';
gold_sql: SELECT
  GCRQ AS `观测日期`,
  ZONGCLL AS `总车流量`
FROM
  gsgl_dmyxzt
WHERE
  GSMC = '江宜高速'
  AND GCRQ BETWEEN '2024-06-11' AND '2024-06-13';
pred_sql: SELECT   ZONGCLL AS `总车流量`,   GCRQ AS `观测日期` FROM   gsgl_dmyxzt WHERE   GSMC = '江宜高速'   AND GCRQ >= '2024-06-11'   AND GCRQ <= '2024-06-13';
gold_sql: SELECT
  SUM(ZONGCLL) AS `车流量总和（辆/天）`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2023-10-01' AND '2023-12-31';
pred_sql: SELECT   SUM(ZONGCLL) AS `车流量总和（辆/天）` FROM   gsgl_dmyxzt WHERE   GCRQ >= '2023-10-01' AND GCRQ <= '2023-12-31';
gold_sql: SELECT
  COUNT(*) AS 记录数量
FROM
  gsgl_dmyxzt
WHERE
  TONGJLC BETWEEN 300 AND 320
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  );
pred_sql: SELECT   COUNT(*) AS 记录数量 FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   )   AND TONGJLC BETWEEN 300 AND 320;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  MAX(ZONGCLL) AS `最大总车流量（辆/天）`
FROM
  gsgl_dmyxzt
WHERE
  GSBM = 'S39'
GROUP BY
  GCRQ
ORDER BY
  `最大总车流量（辆/天）` DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   MAX(ZONGCLL) AS `最大总车流量（辆/天）` FROM   gsgl_dmyxzt WHERE   GSBM = 'S39' GROUP BY   GCRQ ORDER BY   `最大总车流量（辆/天）` DESC LIMIT   1;
gold_sql: SELECT
  AVG(HUOCZLL) AS '货车流量平均值（辆/天）'
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = '2023-11-17';
pred_sql: SELECT   AVG(HUOCZLL) AS '货车流量平均值（辆/天）' FROM   gsgl_dmyxzt WHERE   GCRQ = '2023-11-17';
gold_sql: SELECT
  SUM(TONGJLC) AS `里程总和`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31';
pred_sql: SELECT   SUM(TONGJLC) AS `里程总和` FROM   gsgl_dmyxzt WHERE   GCRQ >= '2024-05-01' AND GCRQ <= '2024-05-31';
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  MIN(ZONGCLL) AS `最小车流量`
FROM
  gsgl_dmyxzt
WHERE
  DUANMMC = '高桥-李典头桥'
GROUP BY
  DUANMMC;
pred_sql: SELECT   DUANMMC AS `断面名称`,   MIN(ZONGCLL) AS `最小车流量` FROM   gsgl_dmyxzt WHERE   DUANMMC = '高桥-李典头桥' GROUP BY   DUANMMC;
gold_sql: SELECT
  GCRQ as `观测日期`,
  DUANMBM as `断面编码`,
  DUANMMC as `断面名称`,
  GSMC as `高速名称`,
  GSBM as `高速编号`,
  TONGJLC as `里程（公里）`,
  KECZLL as `客车总流量（辆/天）`,
  HUOCZLL as `货车总流量（辆/天）`,
  ZONGCLL as `总车流量（辆/天）`,
  CHEHZZL as `车货总重量（吨）`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-06-07' AND '2024-06-13';
pred_sql: SELECT   DUANMBM as `断面编码`,   DUANMMC as `断面名称`,   GSMC as `高速名称`,   GSBM as `高速编号`,   GCRQ as `观测日期`,   TONGJLC as `里程（公里）`,   KECZLL as `客车总流量（辆/天）`,   HUOCZLL as `货车总流量（辆/天）`,   ZONGCLL as `总车流量（辆/天）`,   CHEHZZL as `车货总重量（吨）` FROM   gsgl_dmyxzt WHERE   GCRQ BETWEEN '2024-06-07' AND '2024-06-13';
gold_sql: SELECT
  GCRQ AS '观测日期',
  DUANMMC AS '断面名称',
  KECZLL AS '客车总流量'
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31'
ORDER BY
  KECZLL DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS '观测日期',   DUANMMC AS '断面名称',   KECZLL AS '客车总流量' FROM   gsgl_dmyxzt WHERE   GCRQ >= '2024-05-01' AND GCRQ <= '2024-05-31' ORDER BY   KECZLL DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  AVG(CHEHZZL) AS '车货总重量平均值（吨）'
FROM
  gsgl_dmyxzt
WHERE
  TONGJLC BETWEEN 300 AND 320
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  );
pred_sql: SELECT   AVG(CHEHZZL) AS '车货总重量平均值（吨）' FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   )   AND TONGJLC BETWEEN 300 AND 320;
gold_sql: SELECT
  GSMC AS `高速公路名称`,
  DUANMMC AS `断面名称`,
  ZONGCLL AS `总车流量`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-05-17' AND '2024-06-16'
ORDER BY
  `总车流量` ASC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   GSMC AS `高速公路名称`,   ZONGCLL AS `总车流量` FROM   gsgl_dmyxzt WHERE   GCRQ >= '2024-05-17' AND GCRQ <= '2024-06-16' GROUP BY   DUANMMC, GSMC, ZONGCLL ORDER BY   ZONGCLL ASC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  GSMC AS `高速名称`,
  KECZLL AS `客车总流量`,
  HUOCZLL AS `货车总流量`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
  AND KECZLL > HUOCZLL;
pred_sql: SELECT   GSMC AS `高速名称`,   DUANMMC AS `断面名称`,   KECZLL AS `客车总流量`,   HUOCZLL AS `货车总流量` FROM   gsgl_dmyxzt WHERE   GCRQ BETWEEN '2024-01-01' AND '2024-03-31'   AND KECZLL > HUOCZLL;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  CHEHZZL AS `车货总重量（吨）`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
ORDER BY
  `车货总重量（吨）` DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   CHEHZZL AS `车货总重量（吨）` FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   ) ORDER BY   CHEHZZL DESC LIMIT   1;
gold_sql: SELECT
  GSMC AS `高速公路名称`,
  DUANMMC AS `断面名称`,
  HUOCZLL / ZONGCLL AS `货车总流量占总车流量比例`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = '2024-06-09'
ORDER BY
  `货车总流量占总车流量比例` DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   GSMC AS `高速公路名称`,   HUOCZLL / ZONGCLL AS `货车总流量占总车流量比例` FROM   gsgl_dmyxzt WHERE   GCRQ = '2024-06-09' ORDER BY   `货车总流量占总车流量比例` DESC LIMIT   1;
gold_sql: SELECT
  GSMC AS `高速公路名称`,
  DUANMMC AS `断面名称`,
  (KECZLL + HUOCZLL) AS `总流量之和`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-05-17' AND '2024-06-16'
ORDER BY
  `总流量之和` DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   GSMC AS `高速公路名称`,   (KECZLL + HUOCZLL) AS `总流量之和` FROM   gsgl_dmyxzt WHERE   GCRQ BETWEEN '2024-05-17' AND '2024-06-16' ORDER BY   `总流量之和` DESC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS '断面名称',
  DUANMBM AS '断面编码'
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
  AND CHEHZZL > 1000;
pred_sql: SELECT   DUANMBM AS '断面编码',   DUANMMC AS '断面名称' FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   )   AND CHEHZZL > 1000;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  GSMC AS `高速公路名称`,
  TONGJLC AS `里程（公里）`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
ORDER BY
  TONGJLC ASC
LIMIT
  1;
pred_sql: SELECT   GSMC AS `高速公路名称`,   DUANMMC AS `断面名称`,   TONGJLC AS `里程（公里）` FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   ) ORDER BY   TONGJLC ASC LIMIT   1;
gold_sql: SELECT
  GSMC AS `高速公路名称`,
  DUANMMC AS `断面名称`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
  AND KECZLL > HUOCZLL;
pred_sql: SELECT   DUANMMC AS `断面名称`,   GSMC AS `高速公路名称` FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   )   AND KECZLL > HUOCZLL;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  MAX(ZONGCLL) - MIN(ZONGCLL) AS `总车流量波动量`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-05-17' AND '2024-06-16'
GROUP BY
  DUANMMC
ORDER BY
  `总车流量波动量` DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   (MAX(ZONGCLL) - MIN(ZONGCLL)) AS `总车流量波动量` FROM   gsgl_dmyxzt WHERE   GCRQ BETWEEN '2024-05-17' AND '2024-06-16' GROUP BY   DUANMMC ORDER BY   `总车流量波动量` DESC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS 断面名称,
  GSBM AS 高速编号,
  (KECZLL + HUOCZLL) AS 总流量
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
  AND (KECZLL + HUOCZLL) > 50000;
pred_sql: SELECT   GSBM AS 高速编号,   DUANMMC AS 断面名称,   (KECZLL + HUOCZLL) AS 总流量 FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   )   AND (KECZLL + HUOCZLL) > 50000;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  GSMC AS `高速公路名称`,
  MIN(GCRQ) AS `开始日期`,
  MAX(GCRQ) AS `结束日期`
FROM
  (
    SELECT
      DUANMMC,
      GSMC,
      GCRQ,
      ZONGCLL,
      CASE
        WHEN @prev_section = DUANMMC
        AND @prev_road = GSMC
        AND ZONGCLL > @prev_volume THEN @row_number := @row_number + 1
        ELSE @row_number := 1
      END AS consecutive_days,
      @prev_section := DUANMMC,
      @prev_road := GSMC,
      @prev_volume := ZONGCLL
    FROM
      (
        SELECT
          DUANMMC,
          GSMC,
          GCRQ,
          ZONGCLL
        FROM
          gsgl_dmyxzt
        WHERE
          GCRQ BETWEEN '2024-05-17' AND '2024-06-16'
        ORDER BY
          DUANMMC,
          GSMC,
          GCRQ
      ) AS sub,
      (
        SELECT
          @prev_section := NULL,
          @prev_road := NULL,
          @prev_volume := NULL,
          @row_number := 0
      ) AS vars
  ) AS t
WHERE
  consecutive_days >= 3
GROUP BY
  DUANMMC,
  GSMC
ORDER BY
  `开始日期` ASC;
pred_sql: SELECT   DUANMMC AS `断面名称`,   GSMC AS `高速公路名称`,   MIN(GCRQ) AS `开始日期`,   MAX(GCRQ) AS `结束日期` FROM   (     SELECT       DUANMMC,       GSMC,       GCRQ,       ZONGCLL,       CASE         WHEN @prev_section = DUANMMC         AND @prev_road = GSMC         AND ZONGCLL > @prev_volume THEN @row_number := @row_number + 1         ELSE @row_number := 1       END AS consecutive_days,       @prev_section := DUANMMC,       @prev_road := GSMC,       @prev_volume := ZONGCLL     FROM       (         SELECT           DUANMMC,           GSMC,           GCRQ,           ZONGCLL         FROM           gsgl_dmyxzt         WHERE           GCRQ BETWEEN '2024-05-17' AND '2024-06-16'         ORDER BY           DUANMMC,           GSMC,           GCRQ       ) AS sub,       (         SELECT           @prev_section := NULL,           @prev_road := NULL,           @prev_volume := NULL,           @row_number := 0       ) AS vars   ) AS t WHERE   consecutive_days >= 3 GROUP BY   DUANMMC,   GSMC ORDER BY   `开始日期` ASC;
gold_sql: SELECT
  DUANMMC AS '断面名称',
  CHEHZZL AS '车货总重量（吨）'
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
ORDER BY
  CHEHZZL ASC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS '断面名称',   CHEHZZL AS '车货总重量（吨）' FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   ) ORDER BY   CHEHZZL ASC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CHEHZZL AS `车货总重量（吨）`
FROM
  gsgl_dmyxzt
WHERE
  DUANMMC = '高桥-李典头桥'
  AND GCRQ = '2024-06-09';
pred_sql: SELECT   CHEHZZL AS `车货总重量（吨）` FROM   gsgl_dmyxzt WHERE   GCRQ = '2024-06-09'   AND DUANMMC = '高桥-李典头桥';
gold_sql: SELECT
  `DUANMMC` AS `车货总重量最大的断面`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = '2024-06-14'
ORDER BY
  `CHEHZZL` DESC
LIMIT
  1;
pred_sql: SELECT   `DUANMMC` AS `车货总重量最大的断面` FROM   gsgl_dmyxzt WHERE   GCRQ = '2024-06-14' ORDER BY   `CHEHZZL` DESC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS 断面名称,
  GSMC AS 高速名称
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-06-10' AND '2024-06-16'
GROUP BY
  DUANMMC,
  GSMC
HAVING
  AVG(ZONGCLL) > 50000;
pred_sql: SELECT   GSMC AS 高速名称,   DUANMMC AS 断面名称 FROM   gsgl_dmyxzt WHERE   GCRQ BETWEEN '2024-06-10' AND '2024-06-16' GROUP BY   GSMC,   DUANMMC HAVING   AVG(ZONGCLL) > 50000;
gold_sql: SELECT
  CHEHZZL AS '车货总重量（吨）'
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31'
  AND GSMC = '江宜高速';
pred_sql: SELECT   CHEHZZL AS '车货总重量（吨）' FROM   gsgl_dmyxzt WHERE   GSMC = '江宜高速'   AND GCRQ BETWEEN '2024-05-01' AND '2024-05-31';
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  TONGJLC AS `里程（公里）`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
ORDER BY
  TONGJLC DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   TONGJLC AS `里程（公里）` FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   ) ORDER BY   TONGJLC DESC LIMIT   1;
gold_sql: SELECT
  KECZLL AS `客车流量`
FROM
  gsgl_dmyxzt
WHERE
  DUANMMC = '高桥-李典头桥'
  AND GCRQ = '2024-06-10';
pred_sql: SELECT   KECZLL AS `客车流量` FROM   gsgl_dmyxzt WHERE   GCRQ = '2024-06-10'   AND DUANMMC = '高桥-李典头桥';
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  GCRQ AS `日期`,
  ZONGCLL AS `总车流量`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-06-10' AND '2024-06-16'
  AND DUANMBM IN (
    SELECT
      DUANMBM
    FROM
      gsgl_dmyxzt
    WHERE
      GCRQ BETWEEN '2024-06-10' AND '2024-06-16'
    GROUP BY
      DUANMBM
    HAVING
      COUNT(
        CASE
          WHEN ZONGCLL > 40000 THEN 1
        END
      ) = 7
  )
ORDER BY
  DUANMMC,
  GCRQ;
pred_sql: SELECT   DUANMMC AS `断面名称`,   GCRQ AS `日期`,   ZONGCLL AS `总车流量` FROM   gsgl_dmyxzt WHERE   GCRQ BETWEEN '2024-06-10' AND '2024-06-16'   AND DUANMBM IN (     SELECT       DUANMBM     FROM       gsgl_dmyxzt     WHERE       GCRQ BETWEEN '2024-06-10' AND '2024-06-16'     GROUP BY       DUANMBM     HAVING       COUNT(CASE WHEN ZONGCLL > 40000 THEN 1 END) = 7   ) ORDER BY   DUANMMC,   GCRQ;
gold_sql: SELECT
  GSMC AS `高速名称`,
  SUM(ZONGCLL) AS `总车流量（辆/天）`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
GROUP BY
  GSMC
ORDER BY
  SUM(ZONGCLL) DESC
LIMIT
  1;
pred_sql: SELECT   GSMC AS `高速名称`,   SUM(ZONGCLL) AS `总车流量（辆/天）` FROM   gsgl_dmyxzt WHERE   GCRQ >= '2024-01-01' AND GCRQ <= '2024-03-31' GROUP BY   GSMC ORDER BY   `总车流量（辆/天）` DESC LIMIT   1;
gold_sql: SELECT
  `DUANMBM` AS `断面编码`,
  `ZONGCLL` AS `总车流量`
FROM
  `gsgl_dmyxzt`
WHERE
  `GCRQ` = '2024-06-16'
  AND `DUANMBM` LIKE 'S003%'
pred_sql: SELECT   `DUANMBM` AS `断面编码`,   `ZONGCLL` AS `总车流量` FROM   `gsgl_dmyxzt` WHERE   `DUANMBM` LIKE 'S003%'   AND `GCRQ` = '2024-06-16' ```
gold_sql: SELECT
  DUANMBM AS 断面编码,
  DUANMMC AS 断面名称,
  AVG(HUOCZLL) AS 日均货车流量
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-06-10' AND '2024-06-16'
GROUP BY
  DUANMBM,
  DUANMMC
HAVING
  AVG(HUOCZLL) < 20000;
pred_sql: SELECT   DUANMBM AS 断面编码,   DUANMMC AS 断面名称,   AVG(HUOCZLL) AS 日均货车流量 FROM   gsgl_dmyxzt WHERE   GCRQ >= '2024-06-10' AND GCRQ <= '2024-06-16' GROUP BY   DUANMBM,   DUANMMC HAVING   AVG(HUOCZLL) < 20000;
gold_sql: SELECT
  GSMC AS `高速公路名称`,
  SUM(ZONGCLL) AS `断面车流量总和`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-06-18'
GROUP BY
  GSMC
ORDER BY
  `断面车流量总和` DESC
LIMIT
  1;
pred_sql: SELECT   GSMC AS `高速公路名称`,   SUM(ZONGCLL) AS `断面车流量总和` FROM   gsgl_dmyxzt WHERE   GCRQ >= '2024-01-01' AND GCRQ <= '2024-06-18' GROUP BY   GSMC ORDER BY   `断面车流量总和` DESC LIMIT   1;
gold_sql: SELECT SUM(NATIONAL_ROAD + PROVINCIAL_ROAD) AS `江苏省国省干线总里程` FROM gl_lc WHERE `YEAR` = '2023';
pred_sql: SELECT SUM(NATIONAL_ROAD + PROVINCIAL_ROAD) AS `江苏省国省干线总里程` FROM gl_lc WHERE YEAR = '2023';
gold_sql: SELECT
  COUNT(DISTINCT CITY) AS 城市总数
FROM
  rk_tj
WHERE
  YEAR = '2023'
  AND PROVINCE = '江苏省'
  and CITY is not null
  and DISTRICT is null
  AND CZ_RK > 100;
pred_sql: SELECT COUNT(DISTINCT CITY) AS 城市总数 FROM rk_tj WHERE YEAR = '2023' AND PROVINCE = '江苏省' AND CZ_RK > 100 AND CITY IS NOT NULL AND DISTRICT IS NULL;
gold_sql: SELECT
  g2023.CITY AS 市,
  ROUND(
    (
      (g2023.REGIONAL_GDP - g2022.REGIONAL_GDP) / g2022.REGIONAL_GDP
    ) * 100,
    2
  ) AS `GDP同比增长率(%)`
FROM
  (
    SELECT
      CITY,
      REGIONAL_GDP
    FROM
      gdp_tj
    WHERE
      YEAR = '2023'
      AND PROVINCE = '江苏省'
      AND CITY is not NULL
      AND DISTRICT IS NULL
  ) AS g2023
  JOIN (
    SELECT
      CITY,
      REGIONAL_GDP
    FROM
      gdp_tj
    WHERE
      YEAR = '2022'
      AND PROVINCE = '江苏省'
      AND CITY is not NULL
      AND DISTRICT IS NULL
  ) AS g2022 ON g2023.CITY = g2022.CITY;
pred_sql: SELECT   g2023.CITY AS 市,   ROUND(     (       (g2023.REGIONAL_GDP - g2022.REGIONAL_GDP) / g2022.REGIONAL_GDP     ) * 100,     2   ) AS `GDP同比增长率(%)` FROM   (     SELECT       CITY,       REGIONAL_GDP     FROM       gdp_tj     WHERE       YEAR = '2023'       AND PROVINCE = '江苏省'       AND CITY IS NOT NULL       AND DISTRICT IS NULL   ) AS g2023 JOIN (     SELECT       CITY,       REGIONAL_GDP     FROM       gdp_tj     WHERE       YEAR = '2022'       AND PROVINCE = '江苏省'       AND CITY IS NOT NULL       AND DISTRICT IS NULL   ) AS g2022 ON g2023.CITY = g2022.CITY;
gold_sql: SELECT      CASE WHEN JICHBZDL >= '80%' THEN '是' ELSE '否' END AS `南京机场航班正常率达80%` FROM      jc_yxzt WHERE      HANGKSNMC LIKE '%南京%'     AND YEAR(GCRQ) = 2023 ORDER BY      GCRQ DESC  LIMIT 1;
pred_sql: SELECT      CASE WHEN JICHBZDL >= '80%' THEN '是' ELSE '否' END AS `南京机场航班正常率达80%`  FROM      jc_yxzt  WHERE      HANGKSNMC LIKE '%南京%'       AND YEAR(GCRQ) = 2023  ORDER BY      GCRQ DESC   LIMIT 1;
gold_sql: SELECT COUNT(DISTINCT GSBM) AS '江苏省高速公路总数' FROM gsgl_dmyxzt WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_dmyxzt);
pred_sql: SELECT COUNT(DISTINCT GSBM) AS '江苏省高速公路总数' FROM gsgl_dmyxzt WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_dmyxzt);
gold_sql: SELECT NATIONAL_ROAD + PROVINCIAL_ROAD AS `国省干线总里程` FROM gl_lc WHERE CITY = '南京市' AND `YEAR` = (SELECT MAX(`YEAR`) FROM gl_lc WHERE CITY = '南京市');
pred_sql: SELECT NATIONAL_ROAD + PROVINCIAL_ROAD AS `国省干线总里程`  FROM gl_lc  WHERE CITY = '南京市'  AND `YEAR` = (SELECT MAX(`YEAR`) FROM gl_lc WHERE CITY = '南京市');
gold_sql: SELECT RURAL_ROAD AS `农村公路里程（公里）` FROM gl_lc WHERE CITY = '南京市' AND `YEAR` = (SELECT MAX(`YEAR`) FROM gl_lc WHERE CITY = '南京市');
pred_sql: SELECT RURAL_ROAD AS `农村公路里程（公里）`  FROM gl_lc  WHERE CITY = '南京市'  AND `YEAR` = (SELECT MAX(`YEAR`) FROM gl_lc WHERE CITY = '南京市');
gold_sql: SELECT
  COUNT(DISTINCT ROAD_ID) AS `苏州国省干线数量`
FROM
  ptgl_npjcx
WHERE
  GUANCZMC LIKE '苏州%'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      ptgl_npjcx
    WHERE
      GUANCZMC LIKE '苏州%'
  );
pred_sql: SELECT   COUNT(DISTINCT ROAD_ID) AS `苏州国省干线数量` FROM   ptgl_npjcx WHERE   GUANCZMC LIKE '苏州%'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       ptgl_npjcx     WHERE       GUANCZMC LIKE '苏州%'   );
gold_sql: SELECT
  (SUM(COACH_UP) + SUM(COACH_DOWN)) / (SUM(TRUCK_UP) + SUM(TRUCK_DOWN)) AS `客货比`
FROM
  gsgl_dmll_tj
WHERE
  YEAR = '2023'
  AND ROAD_TYPE LIKE '%宁杭高速%'
  AND (
    ROAD_NAME = '溧水-溧阳'
    OR ROAD_NAME = '溧阳-溧水'
  );
pred_sql: SELECT   (SUM(COACH_UP) + SUM(COACH_DOWN)) / (SUM(TRUCK_UP) + SUM(TRUCK_DOWN)) AS `客货比` FROM   gsgl_dmll_tj WHERE   YEAR = '2023'   AND ROAD_TYPE LIKE '%宁杭高速%'   AND ROAD_NAME IN ('溧水-溧阳', '溧阳-溧水');
gold_sql: SELECT
  (
    COALESCE(GLHY, 0) / NULLIF(COALESCE(HY, 0), 0) * 100
  ) AS `公路货运占比（%）`
FROM
  transportation_tj
WHERE
  PROVINCE = '江苏省'
  AND CITY = '苏州市'
  AND DISTRICT IS NULL
  AND `YEAR` = '2012';
pred_sql: SELECT   (     COALESCE(GLHY, 0) / NULLIF(COALESCE(HY, 0), 0) * 100   ) AS `公路货运占比（%）` FROM   transportation_tj WHERE   `YEAR` = '2012'   AND PROVINCE = '江苏省'   AND CITY = '苏州市'   AND DISTRICT IS NULL;
gold_sql: SELECT
  SUM(ZONGCLL) AS `总车流量`
FROM
  (
    SELECT
      ZONGCLL,
      GCRQ
    FROM
      gsgl_dmyxzt
    WHERE
      GSMC = '新扬高速'
      AND (
        DUANMMC LIKE '%宿迁%'
        AND DUANMMC LIKE '%黄花塘%'
      )
      AND GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_dmyxzt
        WHERE
          GSMC = '新扬高速'
          AND (
            DUANMMC LIKE '%宿迁%'
            AND DUANMMC LIKE '%黄花塘%'
          )
      )
  ) AS RecentData;
pred_sql: SELECT   SUM(ZONGCLL) AS `总车流量` FROM   gsgl_dmyxzt WHERE   GSMC = '新扬高速'   AND DUANMMC LIKE '%宿迁%'   AND DUANMMC LIKE '%黄花塘%'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt     WHERE       GSMC = '新扬高速'       AND DUANMMC LIKE '%宿迁%'       AND DUANMMC LIKE '%黄花塘%'   );
gold_sql: SELECT
  AVG(`TRUCK_UP`) AS `平均货车上行流量`,
  AVG(`TRUCK_DOWN`) AS `平均货车下行流量`,
  AVG(`COACH_UP`) AS `平均客车上行流量`,
  AVG(`COACH_DOWN`) AS `平均客车下行流量`,
  AVG(`UP_VOLUME`) AS `平均上行总流量`,
  AVG(`DOWN_VOLUME`) AS `平均下行总流量`,
  AVG(`VOLUME`) AS `平均总流量`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `ROAD_TYPE` LIKE '%新扬高速%'
  AND `ROAD_NAME` LIKE '%泗洪北-梅花%';
pred_sql: SELECT   AVG(`TRUCK_DOWN`) AS `平均货车下行流量`,   AVG(`COACH_UP`) AS `平均客车上行流量`,   AVG(`COACH_DOWN`) AS `平均客车下行流量`,   AVG(`UP_VOLUME`) AS `平均上行总流量`,   AVG(`DOWN_VOLUME`) AS `平均下行总流量`,   AVG(`VOLUME`) AS `平均总流量`,   AVG(`TRUCK_UP`) AS `平均货车上行流量` FROM   `gsgl_dmll_tj` WHERE   `ROAD_NAME` LIKE '%泗洪北-梅花%'   AND `YEAR` = '2017'   AND `ROAD_TYPE` LIKE '%新扬高速%';
gold_sql: SELECT
  `ROAD_NAME` AS 道路名称,
  ((POWER((volume_2023 / volume_2012), 1 / 11)) - 1) AS `年均增速`
FROM
  (
    SELECT
      `ROAD_NAME`,
      MAX(
        CASE
          WHEN `YEAR` = 2023 THEN `VOLUME`
        END
      ) AS volume_2023,
      MAX(
        CASE
          WHEN `YEAR` = 2012 THEN `VOLUME`
        END
      ) AS volume_2012
    FROM
      `GSGL_DMLL_TJ`
    WHERE
      `ROAD_TYPE` LIKE 'S49-新扬高速'
      AND `ROAD_NAME` LIKE '%宿迁南枢纽-黄花塘枢纽%'
    GROUP BY
      `ROAD_NAME`
  ) AS volume_data
WHERE
  volume_2023 IS NOT NULL
  AND volume_2012 IS NOT NULL;
pred_sql: SELECT   `ROAD_NAME` AS 道路名称,   ((POWER((volume_2023 / volume_2012), 1 / 11)) - 1) AS `年均增速` FROM   (     SELECT       `ROAD_NAME`,       MAX(CASE WHEN `YEAR` = 2023 THEN `VOLUME` END) AS volume_2023,       MAX(CASE WHEN `YEAR` = 2012 THEN `VOLUME` END) AS volume_2012     FROM       `GSGL_DMLL_TJ`     WHERE       `ROAD_TYPE` LIKE 'S49-新扬高速'       AND `ROAD_NAME` LIKE '%宿迁南枢纽-黄花塘枢纽%'     GROUP BY       `ROAD_NAME`   ) AS volume_data WHERE   volume_2023 IS NOT NULL   AND volume_2012 IS NOT NULL;
gold_sql: SELECT
  GUANCZMC AS 观测站名称,
  GUANCZBM AS 观测站编码,
  HUOCZLL / ZONGCLL AS '货车占比'
FROM
  ptgl_dmyxzt
WHERE
  XINGZQH = '3201'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_dmyxzt
    WHERE
      XINGZQH = '3201'
  )
ORDER BY
  HUOCZLL / ZONGCLL DESC
LIMIT
  5;
pred_sql: SELECT   GUANCZBM AS 观测站编码,   GUANCZMC AS 观测站名称,   HUOCZLL / ZONGCLL AS '货车占比' FROM   ptgl_dmyxzt WHERE   XINGZQH = '3201'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       ptgl_dmyxzt     WHERE       XINGZQH = '3201'   ) ORDER BY   '货车占比' DESC LIMIT   5;
gold_sql: SELECT
  COUNT(DISTINCT ROAD_ID) AS `苏州现状国省干线数量`
FROM
  ptgl_npjcx
WHERE
  GUANCZMC LIKE '苏州%'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      ptgl_npjcx
  );
pred_sql: SELECT   COUNT(DISTINCT ROAD_ID) AS `苏州现状国省干线数量` FROM   ptgl_npjcx WHERE   GUANCZMC LIKE '苏州%'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       ptgl_npjcx   );
gold_sql: SELECT (SUM(TRUCK_UP) + SUM(TRUCK_DOWN)) / (SUM(TRUCK_UP) + SUM(TRUCK_DOWN) + SUM(COACH_UP) + SUM(COACH_DOWN)) AS `货车占比`  FROM    gsgl_dmll_tj  WHERE    YEAR = '2017'    AND ROAD_TYPE LIKE '%京沪高速%';
pred_sql: SELECT (SUM(TRUCK_UP) + SUM(TRUCK_DOWN)) / (SUM(TRUCK_UP) + SUM(TRUCK_DOWN) + SUM(COACH_UP) + SUM(COACH_DOWN)) AS `货车占比` FROM gsgl_dmll_tj WHERE YEAR = '2017' AND ROAD_TYPE LIKE '%京沪高速%';
gold_sql: SELECT GCRQ AS `车流量最大的日期`  FROM gsgl_dmyxzt  WHERE GSMC LIKE '%沪陕高速%'  AND GCRQ > (SELECT MAX(GCRQ) - INTERVAL 1 YEAR FROM gsgl_dmyxzt)  ORDER BY ZONGCLL DESC  LIMIT 1;
pred_sql: SELECT GCRQ AS `车流量最大的日期`  FROM gsgl_dmyxzt   WHERE GSMC LIKE '%沪陕高速%'   AND GCRQ > (SELECT MAX(GCRQ) - INTERVAL 1 YEAR FROM gsgl_dmyxzt)   ORDER BY ZONGCLL DESC   LIMIT 1;
gold_sql: SELECT
  `YEAR` AS 年,
  `VOLUME` AS 断面量
FROM
  gsgl_dmll_tj
WHERE
  `ROAD_NAME` LIKE '薛家-常州北'
  AND `ROAD_TYPE` LIKE '%沪宁高速%'
  AND `YEAR` BETWEEN YEAR(CURDATE()) - 9 AND YEAR(CURDATE())
ORDER BY
  `YEAR` DESC;
pred_sql: SELECT   `YEAR` AS 年,   `VOLUME` AS 断面量 FROM   gsgl_dmll_tj WHERE   `ROAD_TYPE` LIKE '%沪宁高速%'   AND `ROAD_NAME` LIKE '薛家-常州北'   AND `YEAR` >= YEAR(CURDATE()) - 9 ORDER BY   `YEAR`;
gold_sql: SELECT
  POW(
    MAX(
      CASE
        WHEN YEAR = YEAR(CURDATE()) THEN VOLUME
        ELSE NULL
      END
    ) / MIN(
      CASE
        WHEN YEAR = YEAR(CURDATE()) - 10 THEN VOLUME
        ELSE NULL
      END
    ),
    1 / 11
  ) - 1 AS 年均增长率
FROM
  gsgl_dmll_tj
WHERE
  ROAD_NAME = '薛家-常州北'
  AND ROAD_TYPE LIKE '%沪宁高速%'
  AND YEAR IN (YEAR(CURDATE()), YEAR(CURDATE()) - 10);
pred_sql: SELECT   POW(     MAX(       CASE         WHEN YEAR = YEAR(CURDATE()) THEN VOLUME         ELSE NULL       END     ) / MIN(       CASE         WHEN YEAR = YEAR(CURDATE()) - 10 THEN VOLUME         ELSE NULL       END     ),     1 / 11   ) - 1 AS 年均增长率 FROM   gsgl_dmll_tj WHERE   ROAD_NAME = '薛家-常州北'   AND ROAD_TYPE LIKE '%沪宁高速%'   AND YEAR IN (YEAR(CURDATE()), YEAR(CURDATE()) - 10);
gold_sql: SELECT
  ROUND((TRUCK_UP + TRUCK_DOWN) / VOLUME, 2) AS '货车流量占比',
  ROUND((COACH_UP + COACH_DOWN) / VOLUME, 2) AS '客车流量占比'
FROM
  gsgl_dmll_tj
WHERE
  `YEAR` = '2023'
  AND `ROAD_NAME` = '薛家-常州北'
  AND `ROAD_TYPE` LIKE '%沪宁高速%';
pred_sql: SELECT   ROUND((COACH_UP + COACH_DOWN) / VOLUME, 2) AS '客车流量占比',   ROUND((TRUCK_UP + TRUCK_DOWN) / VOLUME, 2) AS '货车流量占比' FROM   gsgl_dmll_tj WHERE   `YEAR` = '2023'   AND `ROAD_NAME` = '薛家-常州北'   AND `ROAD_TYPE` LIKE '%沪宁高速%';
gold_sql: SELECT
  HOUR AS 时段
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmll_fs
  )
ORDER BY
  ROAD_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT HOUR AS 时段 FROM gsgl_dmll_fs WHERE GCRQ = (     SELECT MAX(GCRQ)     FROM gsgl_dmll_fs ) ORDER BY ROAD_VOLUME DESC LIMIT 1;
gold_sql: SELECT
  COUNT(*) AS 平均客流量超过10000辆每小时的断面数量
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
  AND ZONGCLL / 24 >= 10000;
pred_sql: SELECT COUNT(*) AS 平均客流量超过10000辆每小时的断面数量 FROM gsgl_dmyxzt WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_dmyxzt) AND ZONGCLL / 24 >= 10000;
gold_sql: SELECT
  AVG(TONGJLC) AS 平均距离
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
  AND KECZLL / 24 > 5000;
pred_sql: SELECT AVG(TONGJLC) AS 平均距离 FROM gsgl_dmyxzt WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_dmyxzt) AND KECZLL > 12000;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号
FROM
  gsgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
  );
pred_sql: SELECT   ZHONGDZH AS 终点桩号,   QIDZH AS 起点桩号,   LUD AS 路段 FROM   gsgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt   );
gold_sql: SELECT
  TRUCK_UP + TRUCK_DOWN AS '货车日均交通量'
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`) - 1
    FROM
      ptgl_gcznpjl
  );
pred_sql: SELECT   (TRUCK_UP + TRUCK_DOWN) AS '货车日均交通量' FROM   ptgl_gcznpjl WHERE   `YEAR` = (     SELECT       MAX(`YEAR`) - 1     FROM       ptgl_gcznpjl   );
gold_sql: SELECT
  LONGITUDE AS 经度,
  LATITUDE AS 纬度
FROM
  hy_tzd
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
ORDER BY
  STAY_NUM DESC
LIMIT
  3;
pred_sql: SELECT   LONGITUDE AS 经度,   LATITUDE AS 纬度 FROM   hy_tzd WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       hy_tzd   ) ORDER BY   STAY_NUM DESC LIMIT   3;
gold_sql: SELECT
  AVG(ZONGCLL * 1.5) AS 日均交通量
FROM
  gsgl_crksfz_yxzt
WHERE
  SFZMC = '江苏郑集站'
  AND YEAR(GCRQ) = 2023;
pred_sql: SELECT   AVG(ZONGCLL * 1.5) AS 日均交通量 FROM   gsgl_crksfz_yxzt WHERE   YEAR(GCRQ) = 2023   AND SFZMC = '江苏郑集站';
gold_sql: SELECT
  MAX(YEAR) AS `最新年份`,
  SUM(SLHY) AS `水路货运量（万吨）`,
  SUM(SLKY) AS `水路客运量（万人）`
FROM
  transportation_tj
WHERE
  PROVINCE = '江苏省'
  AND CITY IS NULL
  AND DISTRICT IS NULL
GROUP BY
  PROVINCE;
pred_sql: SELECT   MAX(YEAR) AS `最新年份`,   SUM(SLHY) AS `水路货运量（万吨）`,   SUM(SLKY) AS `水路客运量（万人）` FROM   transportation_tj WHERE   PROVINCE = '江苏省'   AND CITY IS NULL   AND DISTRICT IS NULL GROUP BY   PROVINCE;
gold_sql: SELECT COUNT(DISTINCT HANGKSNMC) AS '4E及以上等级的机场数量' FROM jc_yxzt WHERE (FEIXQDJ = '4E') or (FEIXQDJ = '4F')   AND GCRQ = (SELECT MAX(GCRQ) FROM jc_yxzt)
pred_sql: SELECT COUNT(DISTINCT HANGKSNMC) AS '4E及以上等级的机场数量'  FROM jc_yxzt  WHERE GCRQ = (SELECT MAX(GCRQ) FROM jc_yxzt)  AND (FEIXQDJ = '4E' OR FEIXQDJ = '4F') ```
gold_sql: SELECT
  MAX(YEAR) AS `最新年份`,
  AVG(HY) AS `平均货运量（万吨）`,
  AVG(KY) AS `平均客运量（万人）`
FROM
  transportation_tj
WHERE
  PROVINCE = '江苏省'
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT   MAX(YEAR) AS `最新年份`,   AVG(HY) AS `平均货运量（万吨）`,   AVG(KY) AS `平均客运量（万人）` FROM   transportation_tj WHERE   PROVINCE = '江苏省'   AND CITY IS NULL   AND DISTRICT IS NULL;
gold_sql: SELECT CHUANZMC AS 船闸名称, PINGJDZSJ AS 平均待闸时间（小时）  FROM cj_yxzt  WHERE GCRQ = (CURDATE() - INTERVAL 1 DAY)  ORDER BY PINGJDZSJ DESC  LIMIT 1;
pred_sql: SELECT CHUANZMC AS 船闸名称, PINGJDZSJ AS 平均待闸时间（小时） FROM cj_yxzt WHERE GCRQ = (CURDATE() - INTERVAL 1 DAY) ORDER BY PINGJDZSJ DESC LIMIT 1;
gold_sql: SELECT
  SEGMENT AS 区段
FROM
  tl_dm
WHERE
  ROAD_NAME = '京沪高速铁路'
  AND (OD / (30 * 24)) > 50
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`) - 1
    FROM
      tl_dm
  );
pred_sql: SELECT   SEGMENT AS 区段 FROM   tl_dm WHERE   `YEAR` = (     SELECT       MAX(`YEAR`) - 1     FROM       tl_dm   )   AND ROAD_NAME = '京沪高速铁路'   AND (OD / (30 * 24)) > 50;
gold_sql: SELECT
  SUM(
    CASE
      WHEN YEAR = '2023' THEN PASSENGER
      ELSE 0
    END
  ) AS `2023年客流量`,
  SUM(
    CASE
      WHEN YEAR = '2022' THEN PASSENGER
      ELSE 0
    END
  ) AS `2022年客流量`,
  CONCAT(
    FLOOR(
      (
        (
          SUM(
            CASE
              WHEN YEAR = '2023' THEN PASSENGER
              ELSE 0
            END
          ) - SUM(
            CASE
              WHEN YEAR = '2022' THEN PASSENGER
              ELSE 0
            END
          )
        ) / SUM(
          CASE
            WHEN YEAR = '2022' THEN PASSENGER
            ELSE 0
          END
        )
      ) * 100
    ),
    '%'
  ) AS `同比增减比例`
FROM
  hk_od_sjxl
WHERE
  O_PROVINCE = '江苏省';
pred_sql: SELECT   SUM(CASE WHEN YEAR = '2023' THEN PASSENGER ELSE 0 END) AS `2023年客流量`,   SUM(CASE WHEN YEAR = '2022' THEN PASSENGER ELSE 0 END) AS `2022年客流量`,   CONCAT(FLOOR((SUM(CASE WHEN YEAR = '2023' THEN PASSENGER ELSE 0 END) - SUM(CASE WHEN YEAR = '2022' THEN PASSENGER ELSE 0 END)) / SUM(CASE WHEN YEAR = '2022' THEN PASSENGER ELSE 0 END) * 100), '%') AS `同比增减比例` FROM   hk_od_sjxl WHERE   O_PROVINCE = '江苏省';
gold_sql: SELECT
  D_CITY AS 市,
  SUM(PASSENGER) AS 客流量
FROM
  hk_od_sjxl
WHERE
  O_CITY = '南京市'
  AND `YEAR` = '2022'
GROUP BY
  D_CITY
ORDER BY
  客流量 DESC
LIMIT
  5;
pred_sql: SELECT   D_CITY AS 市,   SUM(PASSENGER) AS 客流量 FROM   hk_od_sjxl WHERE   `YEAR` = '2022'   AND O_CITY = '南京市' GROUP BY   D_CITY ORDER BY   客流量 DESC LIMIT   5;
gold_sql: SELECT      LUD AS '路段',      QIDZH AS '起点桩号',      ZHONGDZH AS '终点桩号',     YONGDCHANGD AS '拥堵长度（米）' FROM      gsgl_ldydzt  WHERE LUD='G42' AND  GCRQ = '2023-07-21' AND      YONGDCHENGD = (SELECT MAX(YONGDCHENGD) FROM gsgl_ldydzt WHERE GCRQ = '2023-07-21') ORDER BY      YONGDCHANGD DESC;
pred_sql: SELECT      LUD AS '路段',      QIDZH AS '起点桩号',      ZHONGDZH AS '终点桩号',     YONGDCHANGD AS '拥堵长度（米）'  FROM      gsgl_ldydzt   WHERE LUD='G42' AND  GCRQ = '2023-07-21'  AND      YONGDCHENGD = (SELECT MAX(YONGDCHENGD) FROM gsgl_ldydzt WHERE GCRQ = '2023-07-21')  ORDER BY      YONGDCHANGD DESC;
gold_sql: SELECT
  LUD AS `拥堵路段`,
  AVG(CHIXSJ) AS `平均拥堵时长（分钟）`
FROM
  gsgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-01-26' AND '2024-03-05'
  AND LUD = 'G25'
GROUP BY
  LUD;
pred_sql: SELECT   LUD AS `拥堵路段`,   AVG(CHIXSJ) AS `平均拥堵时长（分钟）` FROM   gsgl_ldydzt WHERE   GCRQ BETWEEN '2024-01-26' AND '2024-03-05'   AND LUD = 'G25' GROUP BY   LUD;
gold_sql: SELECT
  COUNT(*) AS POI总数,
  PROVINCE AS 省,
  GROUP_CONCAT(DISTINCT CITY) AS 市,
  GROUP_CONCAT(DISTINCT AREA) AS 区县,
  MAX(YEAR) AS  日期
FROM
  poi
WHERE
  PROVINCE = '江苏省'
GROUP BY
  PROVINCE;
pred_sql: SELECT   PROVINCE AS 省,   COUNT(*) AS POI总数,   MAX(YEAR) AS 日期,   GROUP_CONCAT(DISTINCT CITY) AS 市,   GROUP_CONCAT(DISTINCT AREA) AS 区县 FROM   poi WHERE   PROVINCE = '江苏省' GROUP BY   PROVINCE;
gold_sql: SELECT
  NATIONAL_ROAD + PROVINCIAL_ROAD AS `干线公路总里程`
FROM
  gl_lc
WHERE
  CITY = '南京市'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      gl_lc
    WHERE
      CITY = '南京市'
  );
pred_sql: SELECT   NATIONAL_ROAD + PROVINCIAL_ROAD AS `干线公路总里程` FROM   gl_lc WHERE   CITY = '南京市'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       gl_lc     WHERE       CITY = '南京市'   );
gold_sql: SELECT
  GCRQ as `最高流量日期`
FROM
  gsgl_dmyxzt
WHERE
  GSMC = '沪蓉高速'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
    WHERE
      GSMC = '沪蓉高速'
  )
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `最高流量日期` FROM   gsgl_dmyxzt WHERE   GSMC = '沪蓉高速' ORDER BY   ZONGCLL DESC,   GCRQ DESC LIMIT 1;
gold_sql: SELECT
  `O_DISTRICTS` AS 起点,
  `D_DISTRICTS` AS 终点,
  MAX(`VOLUME`) AS `最高OD车流量（辆/月）`
FROM
  gsgl_od_flow_tj
WHERE
  `O_PROVINCE` = '江苏省'
  AND `O_CITY` = '常州市'
  AND `O_DISTRICTS` != null
  AND `D_PROVINCE` = '江苏省'
  AND `D_CITY` = '常州市'
  AND `D_DISTRICTS` != null
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      gsgl_od_flow_tj
    WHERE
      `O_PROVINCE` = '江苏省'
      AND `O_CITY` = '常州市'
  )
GROUP BY
  `起点`,
  `终点`
ORDER BY
  `最高OD车流量（辆/月）` DESC
LIMIT
  1;
pred_sql: SELECT   `D_DISTRICTS` AS 终点,   `O_DISTRICTS` AS 起点,   MAX(`VOLUME`) AS `最高OD车流量（辆/月）` FROM   gsgl_od_flow_tj WHERE   `D_PROVINCE` = '江苏省'   AND `D_CITY` = '常州市'   AND `D_DISTRICTS` IS NOT NULL   AND `O_PROVINCE` = '江苏省'   AND `O_CITY` = '常州市'   AND `O_DISTRICTS` IS NOT NULL   AND `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       gsgl_od_flow_tj     WHERE       `D_PROVINCE` = '江苏省'       AND `D_CITY` = '常州市'   ) GROUP BY   终点,   起点 ORDER BY   `最高OD车流量（辆/月）` DESC LIMIT   1;
gold_sql: SELECT
  GSMC as `高速公路名称`,
  SFZMC as `收费站名称`,
  MAX(HUOCZLL) as `最高货车流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  YEAR(GCRQ) = 2023
GROUP BY
  GSMC,
  SFZMC
ORDER BY
  `最高货车流量` DESC
LIMIT
  1;
pred_sql: SELECT   SFZMC as `收费站名称`,   GSMC as `高速公路名称`,   MAX(HUOCZLL) as `最高货车流量` FROM   gsgl_crksfz_yxzt WHERE   YEAR(GCRQ) = 2023 GROUP BY   SFZMC,   GSMC ORDER BY   `最高货车流量` DESC LIMIT   1;
gold_sql: SELECT
  SUM(KECZLL) / SUM(HUOCZLL) AS `客货比`
FROM
  gsgl_dmyxzt
WHERE
  YEAR(GCRQ) = 2023
  AND GSMC LIKE '%沪宁高速%';
pred_sql: SELECT   SUM(KECZLL) / SUM(HUOCZLL) AS `客货比` FROM   gsgl_dmyxzt WHERE   YEAR(GCRQ) = 2023   AND GSMC LIKE '%沪宁高速%';
gold_sql: SELECT
  DUANMMC AS 断面名称,
  ZONGCLL AS 总车流量
FROM
  gsgl_dmyxzt
WHERE
  GSMC LIKE '%江宜高速%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
  AND DUANMMC = '高桥-李典头桥';
pred_sql: SELECT   ZONGCLL AS 总车流量,   DUANMMC AS 断面名称 FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt     WHERE       GSMC LIKE '%江宜高速%'       AND DUANMMC = '高桥-李典头桥'   )   AND GSMC LIKE '%江宜高速%'   AND DUANMMC = '高桥-李典头桥';
gold_sql: SELECT
  (
    SELECT
      AVG(PINGJDZSJ)
    FROM
      cj_yxzt
    WHERE
      GUANLDW LIKE '江苏省%'
      AND YEAR(GCRQ) = 2023
  ) AS 2023年内河待闸时间,
  (
    SELECT
      AVG(PINGJDZSJ)
    FROM
      cj_yxzt
    WHERE
      GUANLDW LIKE '江苏省%'
      AND YEAR(GCRQ) = 2022
  ) AS  2022年内河待闸时间,
  (
    SELECT
      AVG(PINGJDZSJ)
    FROM
      cj_yxzt
    WHERE
      GUANLDW LIKE '江苏省%'
      AND YEAR(GCRQ) = 2023
  ) - (
    SELECT
      AVG(PINGJDZSJ)
    FROM
      cj_yxzt
    WHERE
      GUANLDW LIKE '江苏省%'
      AND YEAR(GCRQ) = 2022
  ) / (
    SELECT
      AVG(PINGJDZSJ)
    FROM
      cj_yxzt
    WHERE
      GUANLDW LIKE '江苏省%'
      AND YEAR(GCRQ) = 2022
  ) AS 下降量;
pred_sql: SELECT   (     SELECT       AVG(PINGJDZSJ)     FROM       cj_yxzt     WHERE       GUANLDW LIKE '江苏省%'       AND YEAR(GCRQ) = 2023   ) AS 2023年内河待闸时间,   (     SELECT       AVG(PINGJDZSJ)     FROM       cj_yxzt     WHERE       GUANLDW LIKE '江苏省%'       AND YEAR(GCRQ) = 2022   ) AS 2022年内河待闸时间,   (     SELECT       AVG(PINGJDZSJ)     FROM       cj_yxzt     WHERE       GUANLDW LIKE '江苏省%'       AND YEAR(GCRQ) = 2023   ) - (     SELECT       AVG(PINGJDZSJ)     FROM       cj_yxzt     WHERE       GUANLDW LIKE '江苏省%'       AND YEAR(GCRQ) = 2022   ) / (     SELECT       AVG(PINGJDZSJ)     FROM       cj_yxzt     WHERE       GUANLDW LIKE '江苏省%'       AND YEAR(GCRQ) = 2022   ) AS 下降量;
gold_sql: SELECT
  `GUANCZMC`AS 观测站名称,
  `ZONGCLL` / 24 AS `每小时车流量`
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
    WHERE
      `GCRQ` < CURRENT_DATE()
  )
  AND `GUANCZBM` LIKE 'S121%'
  AND `ZONGCLL` / 24 > 300;
pred_sql: SELECT   `GUANCZMC` AS 观测站名称,   `ZONGCLL` / 24 AS `每小时车流量` FROM   ptgl_dmyxzt WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       ptgl_dmyxzt     WHERE       `GCRQ` < CURRENT_DATE()   )   AND `GUANCZBM` LIKE 'S121%'   AND `ZONGCLL` / 24 > 300;
gold_sql: SELECT
  YONGDCHENGD AS 拥堵程度,
  COUNT(*) AS `路段数量`
FROM
  PTGL_LDYDZT
WHERE
  LUD LIKE '%S226%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      PTGL_LDYDZT
  )
GROUP BY
  YONGDCHENGD
UNION ALL
SELECT
  '基本畅通' AS YONGDCHENGD,
  0 AS `路段数量`
FROM
  DUAL
WHERE
  NOT EXISTS (
    SELECT
      1
    FROM
      PTGL_LDYDZT
    WHERE
      LUD LIKE '%S226%'
      AND GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          PTGL_LDYDZT
      )
  );
pred_sql: SELECT   YONGDCHENGD AS 拥堵程度,   COUNT(*) AS `路段数量` FROM   PTGL_LDYDZT WHERE   LUD LIKE '%S226%'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       PTGL_LDYDZT   ) GROUP BY   YONGDCHENGD UNION ALL SELECT   '基本畅通' AS YONGDCHENGD,   0 AS `路段数量` FROM   DUAL WHERE   NOT EXISTS (     SELECT       1     FROM       PTGL_LDYDZT     WHERE       LUD LIKE '%S226%'       AND GCRQ = (         SELECT           MAX(GCRQ)         FROM           PTGL_LDYDZT       )   );
gold_sql: SELECT
  `GUANCZMC` AS 观测站名称,
  `ZONGCLL` / 24 AS `每小时车流量`
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
    WHERE
      `GCRQ` < CURRENT_DATE()
  )
  AND `GUANCZBM` LIKE '%宁连%'
  AND `ZONGCLL` / 24 > 200;
pred_sql: SELECT   `GUANCZMC` AS 观测站名称,   `ZONGCLL` / 24 AS `每小时车流量` FROM   ptgl_dmyxzt WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       ptgl_dmyxzt     WHERE       `GCRQ` < CURRENT_DATE()   )   AND `GUANCZBM` LIKE '%宁连%'   AND `ZONGCLL` / 24 > 200;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  YONGDCHENGD AS 拥堵程度
FROM
  ptgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_ldydzt
    WHERE
      LUD LIKE '%G104%'
  )
  AND LUD LIKE '%G104%'
UNION ALL
SELECT
  '基本畅通' AS LUD,
  NULL AS QIDZH,
  NULL AS ZHONGDZH,
  NULL AS YONGDCHENGD
WHERE
  NOT EXISTS (
    SELECT
      1
    FROM
      ptgl_ldydzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          ptgl_ldydzt
        WHERE
          LUD LIKE '%G104%'
      )
      AND LUD LIKE '%G104%'
  );
pred_sql: SELECT   LUD AS 路段,   QIDZH AS 起点桩号,   ZHONGDZH AS 终点桩号,   YONGDCHENGD AS 拥堵程度 FROM   ptgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       ptgl_ldydzt     WHERE       LUD LIKE '%G104%'   )   AND LUD LIKE '%G104%' UNION ALL SELECT   '基本畅通' AS LUD,   NULL AS QIDZH,   NULL AS ZHONGDZH,   NULL AS YONGDCHENGD WHERE   NOT EXISTS (     SELECT       1     FROM       ptgl_ldydzt     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           ptgl_ldydzt         WHERE           LUD LIKE '%G104%'       )       AND LUD LIKE '%G104%'   );
gold_sql: SELECT      `LUD` AS '路段',     `QIDZH` AS '起点桩号',     `ZHONGDZH` AS '终点桩号' FROM      gsgl_ldydzt  WHERE      `GCRQ` BETWEEN '2023-05-01' AND '2023-05-05'      AND `LUD` LIKE 'S41%'  ORDER BY      `YONGDCHANGD` DESC, `CHIXSJ` DESC LIMIT 3;
pred_sql: SELECT      `LUD` AS '路段',     `QIDZH` AS '起点桩号',     `ZHONGDZH` AS '终点桩号' FROM      gsgl_ldydzt  WHERE      `GCRQ` BETWEEN '2023-05-01' AND '2023-05-05'      AND `LUD` LIKE 'S41%'  ORDER BY      `YONGDCHANGD` DESC, `CHIXSJ` DESC LIMIT 3;
gold_sql: SELECT AVG(NUM) AS `平均交通量` FROM ptgl_dmll_tj WHERE GUANCZMC LIKE '%312%' AND NUM IS NOT NULL;
pred_sql: SELECT AVG(NUM) AS `平均交通量` FROM ptgl_dmll_tj WHERE GUANCZMC LIKE '%312%' AND NUM IS NOT NULL;
gold_sql: SELECT `BIG_TRUCK` + `BIG_PASSENGER_CAR` + `CONTAINER` + `EXTRA-LARGE_TRUCK` AS `大型车流量`,  `MEDIUM_TRUCK` + `PASSENGER_CAR` + `CARGO_TRUCK` + `TRACTOR` AS `中型车流量`, `MOTOR_VEHICLE` + `MOTORCYCLE` + `AUTOMOBILE` + `PEDAL_CYCLE` + `SMALL_TRUCK` + `SMALL_PASSENGER_CAR` AS `小型车流量` FROM  ptgl_dmll_tj  WHERE  `YEAR` = '2022' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT      (`BIG_TRUCK` + `BIG_PASSENGER_CAR` + `CONTAINER` + `EXTRA-LARGE_TRUCK`) AS `大型车流量`,     (`MEDIUM_TRUCK` + `PASSENGER_CAR` + `CARGO_TRUCK` + `TRACTOR`) AS `中型车流量`,     (`MOTOR_VEHICLE` + `MOTORCYCLE` + `AUTOMOBILE` + `PEDAL_CYCLE` + `SMALL_TRUCK` + `SMALL_PASSENGER_CAR`) AS `小型车流量` FROM      ptgl_dmll_tj WHERE      `YEAR` = '2022'      AND `MONTH` = '7'      AND `GUANCZMC` LIKE '%扬州S243冻青%';
gold_sql: SELECT LUD AS '路段', YONGDCHANGD AS '拥堵长度（米）' FROM gsgl_ldydzt  WHERE GCRQ = '2023-07-21' AND YONGDCHANGD >= 300;
pred_sql: SELECT LUD AS '路段', YONGDCHANGD AS '拥堵长度（米）' FROM gsgl_ldydzt WHERE GCRQ = '2023-07-21' AND YONGDCHANGD >= 300;
gold_sql: SELECT
  CHUANZMC AS 观测站名称
FROM
  cj_yxzt
WHERE
  GUOZCBHYL > 50000
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      cj_yxzt
  )
  AND GUANLDW LIKE '%京沪运河%';
pred_sql: SELECT CHUANZMC AS 观测站名称 FROM cj_yxzt WHERE GUOZCBHYL > 50000   AND GCRQ = (     SELECT MAX(GCRQ)     FROM cj_yxzt   )   AND GUANLDW LIKE '%京沪运河%';
gold_sql: SELECT
  LONGITUDE AS `经度`,
  LATITUDE AS `纬度`
FROM
  hy_tzd
WHERE
  GCRQ = '2023-10-31'
ORDER BY
  STAY_NUM DESC
LIMIT
  1;
pred_sql: SELECT   LATITUDE AS `纬度`,   LONGITUDE AS `经度` FROM   hy_tzd WHERE   GCRQ = '2023-10-31' ORDER BY   STAY_NUM DESC LIMIT   1;
gold_sql: SELECT    `LUXQDCSMC` AS `起点城市`,   `LUXZDCSMC` AS `终点城市`,   SUM(`BANCZL`) AS `班次总数` FROM    `tl_kylx` WHERE    `GCRQ` BETWEEN '2023-01-07' AND '2023-02-15' GROUP BY    `LUXQDCSMC`, `LUXZDCSMC` ORDER BY    `班次总数` DESC LIMIT 10;
pred_sql: SELECT    `LUXQDCSMC` AS `起点城市`,   `LUXZDCSMC` AS `终点城市`,   SUM(`BANCZL`) AS `班次总数` FROM    `tl_kylx` WHERE    `GCRQ` BETWEEN '2023-01-07' AND '2023-02-15' GROUP BY    `LUXQDCSMC`, `LUXZDCSMC` ORDER BY    `班次总数` DESC LIMIT 10;
gold_sql: SELECT
  O_PROVINCE AS 起点省,
  O_CITY AS 起点市,
  D_PROVINCE AS 终点省,
  D_CITY AS 终点市,
  PASSENGER AS 人流量
FROM
  hk_od
WHERE
  `YEAR` = '2023'
ORDER BY
  PASSENGER DESC
LIMIT
  10;
pred_sql: SELECT   D_PROVINCE AS 终点省,   D_CITY AS 终点市,   O_PROVINCE AS 起点省,   O_CITY AS 起点市,   PASSENGER AS 人流量 FROM   hk_od WHERE   YEAR = '2023' ORDER BY   PASSENGER DESC LIMIT   10;
gold_sql: SELECT
  SUM(YONGDCHANGD) / 1000 AS '拥堵里程（公里）'
FROM
  gsgl_ldydzt
WHERE
  GCRQ = '2023-07-21';
pred_sql: SELECT   SUM(YONGDCHANGD) / 1000 AS '拥堵里程（公里）' FROM   gsgl_ldydzt WHERE   GCRQ = '2023-07-21';
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  PINGJDZSJ AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      cj_yxzt
    WHERE
      GUANLDW LIKE '%江苏%'
      AND GCRQ < CURDATE()
  )
ORDER BY
  PINGJDZSJ DESC
LIMIT
  10;
pred_sql: SELECT   CHUANZMC AS 船闸名称,   PINGJDZSJ AS 平均待闸时间 FROM   cj_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       cj_yxzt     WHERE       GUANLDW LIKE '%江苏%'       AND GCRQ < CURDATE()   ) ORDER BY   PINGJDZSJ DESC LIMIT   10;
gold_sql: SELECT
  LUD AS '路段',
  YONGDCHENGD AS '拥堵程度'
FROM
  gsgl_ldydzt
WHERE
  GCRQ BETWEEN '2023-09-30' AND '2023-10-06'
ORDER BY
  YONGDCHENGD DESC
LIMIT
  10;
pred_sql: SELECT   LUD AS '路段',   YONGDCHENGD AS '拥堵程度' FROM   gsgl_ldydzt WHERE   GCRQ BETWEEN '2023-09-30' AND '2023-10-06' ORDER BY   YONGDCHENGD DESC LIMIT   10;
gold_sql: SELECT
  AVG(CHELL) AS `日均客流交换量（辆/天）`
FROM
  gsgl_od_flow
WHERE
  GCRQ BETWEEN '2024-02-01' AND '2024-02-29'
  AND (
    (
      O_CITY = '南京市'
      AND D_CITY = '苏州市'
    )
    OR (
      O_CITY = '苏州市'
      AND D_CITY = '南京市'
    )
  )
pred_sql: SELECT AVG(CHELL) AS `日均客流交换量（辆/天）` FROM gsgl_od_flow WHERE GCRQ BETWEEN '2024-02-01' AND '2024-02-29' AND (O_CITY IN ('南京市', '苏州市') AND D_CITY IN ('南京市', '苏州市')) AND O_CITY <> D_CITY;
gold_sql: SELECT
  SUM(FASBC) AS `南京站2月份发送量（班）`
FROM
  tl_kyz_yxzt
WHERE
  GCRQ BETWEEN '2024-02-01' AND '2024-02-29'
  AND KEYZMC = '南京站';
pred_sql: SELECT   SUM(FASBC) AS `南京站2月份发送量（班）` FROM   tl_kyz_yxzt WHERE   KEYZMC = '南京站'   AND GCRQ BETWEEN '2024-02-01' AND '2024-02-29';
gold_sql: SELECT
  CZ_RK AS 常住人口
FROM
  rk_tj
WHERE
  YEAR = '2023'
  AND CITY = '无锡市'
  AND DISTRICT IS NULL;
pred_sql: SELECT CZ_RK AS 常住人口 FROM rk_tj WHERE YEAR = '2023' AND CITY = '无锡市' AND DISTRICT IS NULL;
gold_sql: SELECT
  `ROAD_TYPE` AS 道路类型,
  SUM(`COACH_UP` + `COACH_DOWN`) AS `小客车流量`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND (
    `ROAD_TYPE` LIKE '%新扬高速%'
    OR `ROAD_TYPE` LIKE '%启扬高速%'
  )
GROUP BY
  `ROAD_TYPE`;
pred_sql: SELECT   `ROAD_TYPE` AS 道路类型,   SUM(`COACH_UP` + `COACH_DOWN`) AS `小客车流量` FROM   `gsgl_dmll_tj` WHERE   `YEAR` = '2017'   AND (     `ROAD_TYPE` LIKE '%新扬高速%'     OR `ROAD_TYPE` LIKE '%启扬高速%'   ) GROUP BY   `ROAD_TYPE`;
gold_sql: SELECT
  BANCZL AS `徐州到盐城铁路班次OD`
FROM
  tl_kylx
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kylx
  )
  AND LUXQDCSMC = '徐州市'
  AND LUXZDCSMC = '盐城市';
pred_sql: SELECT   BANCZL AS `徐州到盐城铁路班次OD` FROM   tl_kylx WHERE   LUXQDCSMC = '徐州市'   AND LUXZDCSMC = '盐城市'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       tl_kylx   );
gold_sql: SELECT
  SEGMENT AS 区段,
  SUM(OD) AS 铁路断面量
FROM
  tl_dm
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      tl_dm
  )
  AND SEGMENT IN (
    '南京-镇江',
    '镇江-丹阳',
    '丹阳-常州',
    '常州-无锡',
    '无锡-苏州',
    '苏州-昆山',
    '昆山-上海西',
    '上海西-上海'
  )
GROUP BY
  SEGMENT;
pred_sql: SELECT   SEGMENT AS 区段,   SUM(OD) AS 铁路断面量 FROM   tl_dm WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       tl_dm   )   AND SEGMENT IN (     '南京-镇江',     '镇江-丹阳',     '丹阳-常州',     '常州-无锡',     '无锡-苏州',     '苏州-昆山',     '昆山-上海西',     '上海西-上海'   ) GROUP BY   SEGMENT;
gold_sql: SELECT
  DAODBC AS 南京南站的到达班次
FROM
  tl_kyz_yxzt
WHERE
  SUOZQY = '南京市'
  AND KEYZMC = '南京南站'
  AND GCRQ = '2023-08-14';
pred_sql: SELECT DAODBC AS 南京南站的到达班次 FROM tl_kyz_yxzt WHERE GCRQ = '2023-08-14'   AND KEYZMC = '南京南站'   AND SUOZQY = '南京市';
gold_sql: SELECT
  ZONGBC AS 总班次
FROM
  jc_yxzt
WHERE
  HANGKSNMC = '南京禄口国际机场'
  AND GCRQ = (
    SELECT
      MAX(GCRQ) - INTERVAL 1 DAY
    FROM
      jc_yxzt
  );
pred_sql: SELECT   ZONGBC AS 总班次 FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ) - INTERVAL 1 DAY     FROM       jc_yxzt   )   AND HANGKSNMC = '南京禄口国际机场';
gold_sql: SELECT
  ZONGBC AS 总班次
FROM
  jc_yxzt
WHERE
  HANGKSNMC LIKE '%南京禄口%机场%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ) - INTERVAL 1 DAY
    FROM
      jc_yxzt
  );
pred_sql: SELECT   ZONGBC AS 总班次 FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ) - INTERVAL 1 DAY     FROM       jc_yxzt   )   AND HANGKSNMC LIKE '%南京禄口%机场%';
gold_sql: SELECT
  TLHY AS 铁路货运量
FROM
  transportation_tj
WHERE
  YEAR = '2010'
  AND PROVINCE = '安徽省'
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT TLHY AS 铁路货运量 FROM transportation_tj WHERE YEAR = '2010' AND PROVINCE = '安徽省' AND CITY IS NULL AND DISTRICT IS NULL;
gold_sql: SELECT
  BANCZL AS `铁路日发班次`
FROM
  tl_kylx
WHERE
  LUXQDCSMC = '南京市'
  AND LUXZDCSMC = '苏州市'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kylx
  );
pred_sql: SELECT   BANCZL AS `铁路日发班次` FROM   tl_kylx WHERE   LUXQDCSMC = '南京市'   AND LUXZDCSMC = '苏州市'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       tl_kylx   );
gold_sql: SELECT
  SEGMENT AS 区段
FROM
  tl_dm
WHERE
  YEAR = '2020'
  AND ROAD_NAME LIKE '%沪宁%'
ORDER BY
  OD DESC
LIMIT
  1;
pred_sql: SELECT   SEGMENT AS 区段 FROM   tl_dm WHERE   YEAR = '2020'   AND ROAD_NAME LIKE '%沪宁%' ORDER BY   OD DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT SUM(PASSENGER)/31 AS `日均客流量（人/日）` FROM tl_od WHERE `YEAR` = '2018'       AND ( D_CITY = '南京市');
pred_sql: SELECT SUM(PASSENGER)/31 AS `日均客流量（人/日）` FROM tl_od WHERE (D_CITY = '南京市') AND (YEAR = '2018');
gold_sql: SELECT
  MAX(BANCZL) AS 南京至盐城每日发放的高铁班次数量
FROM
  tl_kylx
WHERE
  LUXQDCSMC = '南京市'
  AND LUXZDCSMC = '盐城市'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kylx
    WHERE
      LUXQDCSMC = '南京市'
      AND LUXZDCSMC = '盐城市'
  );
pred_sql: SELECT MAX(BANCZL) AS 南京至盐城每日发放的高铁班次数量 FROM tl_kylx WHERE LUXQDCSMC = '南京市' AND LUXZDCSMC = '盐城市' AND GCRQ = (SELECT MAX(GCRQ) FROM tl_kylx WHERE LUXQDCSMC = '南京市' AND LUXZDCSMC = '盐城市');
gold_sql: SELECT
  YEAR AS 年份,
  SUM(TLHY) AS `铁路货运量（万吨）`,
  SUM(TLKY) AS `铁路客运量（万人）`
FROM
  transportation_tj
WHERE
  PROVINCE = '江苏省'
  AND YEAR BETWEEN '2013' AND '2023'
  AND DISTRICT IS NULL
GROUP BY
  YEAR;
pred_sql: SELECT   YEAR AS 年份,   SUM(TLHY) AS `铁路货运量（万吨）`,   SUM(TLKY) AS `铁路客运量（万人）` FROM   transportation_tj WHERE   PROVINCE = '江苏省'   AND YEAR BETWEEN '2013' AND '2023'   AND DISTRICT IS NULL GROUP BY   YEAR ORDER BY   YEAR;
gold_sql: SELECT
  SUM(TLHY) AS `铁路货运总发送量（万吨）`
FROM
  transportation_tj
WHERE
  PROVINCE = '江苏省'
  AND YEAR = '2023'
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT   SUM(TLHY) AS `铁路货运总发送量（万吨）` FROM   transportation_tj WHERE   YEAR = '2023'   AND PROVINCE = '江苏省'   AND CITY IS NULL   AND DISTRICT IS NULL;
gold_sql: SELECT      SEGMENT AS `客流最大断面` FROM      tl_dm WHERE      YEAR = '2024' AND      ROAD_NAME LIKE '%沪宁城际%' ORDER BY      OD DESC LIMIT 1;
pred_sql: SELECT      SEGMENT AS `客流最大断面`  FROM      tl_dm  WHERE      ROAD_NAME LIKE '%沪宁城际%'  AND      YEAR = '2024'  ORDER BY      OD DESC  LIMIT 1;
gold_sql: SELECT
  `LUXQDCSMC` AS 路线起点城市名称,
  `LUXZDCSMC` AS 路线终点城市名称,
  MAX(`BANCZL`) AS `最大班次总量`
FROM
  `tl_kylx`
WHERE
  YEAR(`GCRQ`) = 2023
GROUP BY
  `LUXQDCSMC`,
  `LUXZDCSMC`
ORDER BY
  `最大班次总量` DESC
LIMIT
  1;
pred_sql: SELECT   `LUXQDCSMC` AS 路线起点城市名称,   `LUXZDCSMC` AS 路线终点城市名称,   MAX(`BANCZL`) AS `最大班次总量` FROM   `tl_kylx` WHERE   YEAR(`GCRQ`) = 2023 GROUP BY   `LUXQDCSMC`,   `LUXZDCSMC` ORDER BY   `最大班次总量` DESC LIMIT   1;
gold_sql: SELECT
  LUXZDCSMC AS 路线终点城市名称
FROM
  tl_kylx
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31'
  AND LUXQDCSMC = '南京市'
ORDER BY
  BANCZL DESC
LIMIT
  3;
pred_sql: SELECT   LUXZDCSMC AS 路线终点城市名称 FROM   tl_kylx WHERE   GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31'   AND LUXQDCSMC = '南京市' GROUP BY   LUXZDCSMC ORDER BY   COUNT(*) DESC LIMIT   3;
gold_sql: SELECT
  LUXZDCSMC AS 路线终点城市名称
FROM
  tl_kylx
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31'
  AND LUXQDCSMC = '南京市'
ORDER BY
  BANCZL DESC
LIMIT
  3;
pred_sql: SELECT   LUXZDCSMC AS 路线终点城市名称 FROM   tl_kylx WHERE   GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31'   AND LUXQDCSMC = '南京市' GROUP BY   LUXZDCSMC ORDER BY   COUNT(*) DESC LIMIT   3;
gold_sql: SELECT YEAR AS 年份, REGIONAL_GDP AS 地区生产总值 FROM gdp_tj WHERE CITY = '苏州市' AND DISTRICT is null AND YEAR BETWEEN '2019' AND '2022';
pred_sql: SELECT 年份, 地区生产总值  FROM (     SELECT YEAR AS 年份, REGIONAL_GDP AS 地区生产总值      FROM gdp_tj      WHERE CITY = '苏州市' AND DISTRICT IS NULL ) AS subquery  WHERE 年份 BETWEEN '2019' AND '2022';
gold_sql: SELECT
  KEYZMC AS 客运站名称,
  (ZONGBC - DAODBC - FASBC) AS `停靠班次`
FROM
  tl_kyz_yxzt
WHERE
  SUOZQY IN ('南京市', '镇江市', '苏州市', '无锡市', '常州市')
  AND (ZONGBC - DAODBC - FASBC) > 20
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kyz_yxzt
  );
pred_sql: SELECT   KEYZMC AS 客运站名称,   (ZONGBC - DAODBC - FASBC) AS `停靠班次` FROM   tl_kyz_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       tl_kyz_yxzt   )   AND SUOZQY IN ('南京市', '镇江市', '苏州市', '无锡市', '常州市')   AND (ZONGBC - DAODBC - FASBC) > 20;
gold_sql: SELECT
  `DAODBC` AS `昨日到达班次`,
  `FASBC` AS `昨日发送班次`
FROM
  tl_kyz_yxzt
WHERE
  `KEYZMC` = '南京南'
  AND `GCRQ` = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kyz_yxzt
    WHERE
      GCRQ < CURDATE()
  );
pred_sql: SELECT   `DAODBC` AS `昨日到达班次`,   `FASBC` AS `昨日发送班次` FROM   tl_kyz_yxzt WHERE   `KEYZMC` = '南京南'   AND `GCRQ` = (     SELECT       MAX(GCRQ)     FROM       tl_kyz_yxzt     WHERE       GCRQ < CURDATE()   );
gold_sql: SELECT
  `FASBC` AS `昨日始发车次`,
  (`ZONGBC` - `DAODBC` - `FASBC`) AS `昨日过路车次`
FROM
  tl_kyz_yxzt
WHERE
  `KEYZMC` = '南京南'
  AND `GCRQ` = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kyz_yxzt
    WHERE
      GCRQ < CURDATE()
  );
pred_sql: SELECT   (`ZONGBC` - `DAODBC` - `FASBC`) AS `昨日过路车次`,   `FASBC` AS `昨日始发车次` FROM   tl_kyz_yxzt WHERE   `KEYZMC` = '南京南'   AND `GCRQ` = (     SELECT       MAX(GCRQ)     FROM       tl_kyz_yxzt     WHERE       GCRQ < CURDATE()   );
gold_sql: SELECT
  `YEAR` AS 年份,
  TLHY AS `铁路货运量`
FROM
  transportation_tj
WHERE
  `YEAR` BETWEEN '2016' AND '2023'
  AND PROVINCE = '江苏省'
  AND CITY = '南京市';
pred_sql: SELECT   `YEAR` AS 年份,   TLHY AS `铁路货运量` FROM   transportation_tj WHERE   PROVINCE = '江苏省'   AND CITY = '南京市'   AND `YEAR` BETWEEN '2016' AND '2023';
gold_sql: SELECT
  JICHBZDL AS 机场航班准点率
FROM
  jc_yxzt
WHERE
  HANGKSNMC LIKE '%上海浦东%机场%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      jc_yxzt
  );
pred_sql: SELECT   JICHBZDL AS 机场航班准点率 FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       jc_yxzt   )   AND HANGKSNMC LIKE '%上海浦东%机场%';
gold_sql: SELECT
  AVG(YONGDCHENGD) AS `京沪高速拥堵程度`
FROM
  gsgl_ldydzt
WHERE
  LUD LIKE 'G2'
  AND GCRQ = '2023-07-21';
pred_sql: SELECT   AVG(YONGDCHENGD) AS `京沪高速拥堵程度` FROM   gsgl_ldydzt WHERE   GCRQ = '2023-07-21'   AND LUD LIKE 'G2';
gold_sql: SELECT
  AVG(BANCZL) AS `日均发车班次`
FROM
  tl_kylx
WHERE
  LUXQDCSMC = '南通市'
  AND LUXZDCSMC = '南京市'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kylx
  );
pred_sql: SELECT AVG(BANCZL) AS `日均发车班次` FROM tl_kylx WHERE LUXQDCSMC = '南通市' AND LUXZDCSMC = '南京市' AND GCRQ = (SELECT MAX(GCRQ) FROM tl_kylx);
gold_sql: SELECT DISTINCT
  QIDMC AS 船闸名称
FROM
  hd_yxzt
WHERE
  HANGDMC LIKE '%京杭运河%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hd_yxzt
  )
UNION
SELECT DISTINCT
  ZHONGDMC
FROM
  hd_yxzt
WHERE
  HANGDMC LIKE '%京杭运河%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hd_yxzt
  );
pred_sql: SELECT DISTINCT   QIDMC AS 船闸名称 FROM   hd_yxzt WHERE   HANGDMC LIKE '%京杭运河%'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       hd_yxzt   ) UNION SELECT DISTINCT   ZHONGDMC AS 船闸名称 FROM   hd_yxzt WHERE   HANGDMC LIKE '%京杭运河%'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       hd_yxzt   );
gold_sql: SELECT
  PINGJDZSJ AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  CHUANZMC = '江阴'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      cj_yxzt
    WHERE
      GCRQ < CURDATE()
  );
pred_sql: SELECT   PINGJDZSJ AS 平均待闸时间 FROM   cj_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       cj_yxzt     WHERE       GCRQ < CURDATE()   )   AND CHUANZMC = '江阴';
gold_sql: SELECT
  AVG(DUANMHYZL) AS 断面的日平均货运总量
FROM
  hd_yxzt
WHERE
  HANGDDMMC LIKE '%船闸%'
  AND YEAR(GCRQ) = 2023;
pred_sql: SELECT   AVG(DUANMHYZL) AS 断面的日平均货运总量 FROM   hd_yxzt WHERE   YEAR(GCRQ) = 2023   AND HANGDDMMC LIKE '%船闸%';
gold_sql: SELECT
  CHUANZMC AS 船闸名称
FROM
  cj_yxzt
WHERE
  YEAR(GCRQ) = 2023
  AND GUANLDW LIKE '江苏省%'
  AND PINGJDZSJ > 10;
pred_sql: SELECT CHUANZMC AS 船闸名称 FROM cj_yxzt WHERE GCRQ BETWEEN '2023-01-01' AND '2023-12-31'   AND GUANLDW LIKE '江苏省%'   AND PINGJDZSJ > 10;
gold_sql: SELECT
    a.GCRQ AS `观测日期`,
    a.total_hyzl AS `今日货运总量（万吨）`,
    COALESCE(b.total_hyzl, 0) AS `昨日货运总量（万吨）`,
    a.total_hyzl - COALESCE(b.total_hyzl, 0) AS `货运总量差值（万吨）`
FROM
    (SELECT
        GCRQ,
        SUM(DUANMHYZL) AS total_hyzl
     FROM
        hd_yxzt
     WHERE
        HANGDMC LIKE '%京杭运河%'
     GROUP BY
        GCRQ
    ) a
LEFT JOIN
    (SELECT
        GCRQ,
        SUM(DUANMHYZL) AS total_hyzl
     FROM
        hd_yxzt
     WHERE
        HANGDMC LIKE '%京杭运河%'
     GROUP BY
        GCRQ
    ) b
ON
    DATE(a.GCRQ) = DATE(b.GCRQ) + INTERVAL 1 DAY
WHERE
    a.GCRQ = (
        SELECT MAX(GCRQ)
        FROM hd_yxzt
        WHERE HANGDMC LIKE '%京杭运河%'
    )
ORDER BY
    a.GCRQ;


pred_sql: SELECT     a.GCRQ AS `观测日期`,     a.total_hyzl AS `今日货运总量（万吨）`,     COALESCE(b.total_hyzl, 0) AS `昨日货运总量（万吨）`,     a.total_hyzl - COALESCE(b.total_hyzl, 0) AS `货运总量差值（万吨）` FROM     (SELECT         GCRQ,         SUM(DUANMHYZL) AS total_hyzl      FROM         hd_yxzt      WHERE         HANGDMC LIKE '%京杭运河%'      GROUP BY         GCRQ     ) b RIGHT JOIN     (SELECT         GCRQ,         SUM(DUANMHYZL) AS total_hyzl      FROM         hd_yxzt      WHERE         HANGDMC LIKE '%京杭运河%'      GROUP BY         GCRQ     ) a ON     DATE(a.GCRQ) = DATE(b.GCRQ) + INTERVAL 1 DAY WHERE     a.GCRQ = (         SELECT MAX(GCRQ)         FROM hd_yxzt         WHERE HANGDMC LIKE '%京杭运河%'     ) ORDER BY     a.GCRQ;
gold_sql: SELECT HANGDXZDJ AS `航道现状等级` FROM hd_yxzt  WHERE HANGDMC = '京杭运河' ORDER BY GCRQ DESC LIMIT 1;
pred_sql: SELECT HANGDXZDJ AS `航道现状等级`  FROM hd_yxzt  WHERE HANGDMC = '京杭运河'  ORDER BY GCRQ DESC  LIMIT 1;
gold_sql: SELECT SUM(CHIXSJ) AS '总拥堵时间（分钟）' FROM gsgl_ldydzt  WHERE LUD = 'G42' AND GCRQ = (SELECT MAX(GCRQ) FROM gsgl_ldydzt);
pred_sql: SELECT SUM(CHIXSJ) AS '总拥堵时间（分钟）' FROM gsgl_ldydzt WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_ldydzt) AND LUD = 'G42';
gold_sql: SELECT
  AVG(PINGJDZSJ) AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  CHUANZMC = '江阴'
  AND YEAR(GCRQ) = 2023;
pred_sql: SELECT AVG(PINGJDZSJ) AS 平均待闸时间 FROM cj_yxzt WHERE YEAR(GCRQ) = 2023 AND CHUANZMC = '江阴';
gold_sql: SELECT
  SUM(VOLUME) AS `2023年内河航道货运量（吨）`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2023'
  AND O_CITY = '无锡'
  AND D_CITY = '泰州';
pred_sql: SELECT   SUM(VOLUME) AS `2023年内河航道货运量（吨）` FROM   hd_nh_od WHERE   O_CITY = '无锡'   AND D_CITY = '泰州'   AND `YEAR` = '2023';
gold_sql: SELECT SEGMENT AS `超过20万吨的断面` FROM hd_nh_dm  WHERE CHANNEL = '京杭运河' AND VOLUME > 20  GROUP BY SEGMENT;
pred_sql: SELECT SEGMENT AS `超过20万吨的断面`  FROM hd_nh_dm  WHERE CHANNEL = '京杭运河'  GROUP BY SEGMENT  HAVING SUM(VOLUME) > 20;
gold_sql: SELECT
  CITY AS `超过20万吨的港口`
FROM
  transportation_tj
WHERE
  GKTT > 20
GROUP BY
  CITY;
pred_sql: SELECT DISTINCT CITY AS `超过20万吨的港口` FROM transportation_tj WHERE GKTT > 20;
gold_sql: SELECT `HANGDUANMC` AS `航段`, `DUANMHYZL` AS `货运量` FROM hd_yxzt WHERE `HANGDMC` = '京杭运河'  AND DATE(`GCRQ`) = '2023-11-16' ORDER BY `DUANMHYZL` DESC LIMIT 1;
pred_sql: SELECT `HANGDUANMC` AS `航段`, `DUANMHYZL` AS `货运量`  FROM hd_yxzt  WHERE `HANGDMC` = '京杭运河' AND DATE(`GCRQ`) = '2023-11-16'  ORDER BY `DUANMHYZL` DESC  LIMIT 1;
gold_sql: SELECT
  AVG(PINGJDZSJ) AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  CHUANZMC = '谏壁'
  AND YEAR(GCRQ) = 2023
  AND MONTH(GCRQ) = (
    SELECT
      MONTH(GCRQ) AS busy_month
    FROM
      cj_yxzt
    WHERE
      CHUANZMC = '谏壁'
      AND YEAR(GCRQ) = 2023
    GROUP BY
      busy_month
    ORDER BY
      SUM(NEIHHD_CHUANZTGL) DESC
    LIMIT
      1
  );
pred_sql: SELECT AVG(PINGJDZSJ) AS 平均待闸时间 FROM cj_yxzt WHERE CHUANZMC = '谏壁' AND YEAR(GCRQ) = 2023 AND MONTH(GCRQ) = (     SELECT busy_month     FROM (         SELECT MONTH(GCRQ) AS busy_month, SUM(NEIHHD_CHUANZTGL) AS total_tgl         FROM cj_yxzt         WHERE CHUANZMC = '谏壁' AND YEAR(GCRQ) = 2023         GROUP BY busy_month         ORDER BY total_tgl DESC         LIMIT 1     ) AS subquery );
gold_sql: SELECT
  MONTH(GCRQ) AS `月份`,
  SUM(DUANMHYZL) AS `每月货物通过量（万吨）`
FROM
  hd_yxzt
WHERE
  (
    QIDMC LIKE '%连云港%'
    OR QIDMC LIKE '%宿迁%'
  )
  AND (
    ZHONGDMC LIKE '%连云港%'
    OR ZHONGDMC LIKE '%宿迁%'
  )
  AND YEAR(GCRQ) = 2023
GROUP BY
  MONTH(GCRQ);
pred_sql: SELECT   MONTH(GCRQ) AS `月份`,   SUM(DUANMHYZL) AS `每月货物通过量（万吨）` FROM   hd_yxzt WHERE   (     QIDMC LIKE '%连云港%'     OR QIDMC LIKE '%宿迁%'   )   AND (     ZHONGDMC LIKE '%连云港%'     OR ZHONGDMC LIKE '%宿迁%'   )   AND YEAR(GCRQ) = 2023 GROUP BY   MONTH(GCRQ);
gold_sql: SELECT
  YEAR(GCRQ)  AS 年份,
  MONTH(GCRQ)  AS 月份,
  SUM(TONGXL) AS 船闸总通行量
FROM
  cj_yxzt
WHERE
  YEAR(GCRQ) = 2023
GROUP BY
  YEAR(GCRQ),
  MONTH(GCRQ)
ORDER BY
  船闸总通行量 DESC
LIMIT
  1;
pred_sql: SELECT   MONTH(GCRQ) AS 月份,   YEAR(GCRQ) AS 年份,   SUM(TONGXL) AS 船闸总通行量 FROM   cj_yxzt WHERE   YEAR(GCRQ) = 2023 GROUP BY   MONTH(GCRQ),   YEAR(GCRQ) ORDER BY   船闸总通行量 DESC LIMIT   1;
gold_sql: SELECT
  `O_CITY`,
  SUM(`VOLUME`) AS 内河上船舶数
FROM
  hd_nh_od
WHERE
  `D_CITY` IN ('苏州', '无锡', '常州', '镇江')
  AND `O_CITY` IN ('苏州', '无锡', '常州', '镇江')
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_nh_od
  )
GROUP BY
  `O_CITY`
ORDER BY
  内河上船舶数 DESC
LIMIT
  1;
pred_sql: SELECT   `O_CITY`,   SUM(`VOLUME`) AS 内河上船舶数 FROM   hd_nh_od WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_nh_od   )   AND `D_CITY` IN ('苏州', '无锡', '常州', '镇江')   AND `O_CITY` IN ('苏州', '无锡', '常州', '镇江') GROUP BY   `O_CITY` ORDER BY   内河上船舶数 DESC LIMIT   1;
gold_sql: SELECT
  SUM(TONGXL) AS 通过闸船舶数量
FROM
  cj_yxzt
WHERE
  CHUANZMC = '江阴'
  AND YEAR(GCRQ) = 2023;
pred_sql: SELECT   SUM(TONGXL) AS 通过闸船舶数量 FROM   cj_yxzt WHERE   YEAR(GCRQ) = 2023   AND CHUANZMC = '江阴';
gold_sql: SELECT
  SUM(JIZXTTL) AS 集装箱吞吐量
FROM
  yjgk_yxzt
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31';
pred_sql: SELECT   SUM(JIZXTTL) AS 集装箱吞吐量 FROM   yjgk_yxzt WHERE   GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31';
gold_sql: SELECT       `HANGDUANMC` AS `航段`,      SUM(`DUANMHYZL`) AS `总货运量`  FROM       hd_yxzt  WHERE       `HANGDMC` = '京杭运河'     AND YEAR(`GCRQ`) = 2023      AND MONTH(`GCRQ`) = 11  GROUP BY       `HANGDUANMC`  ORDER BY       `总货运量` DESC  LIMIT 3;
pred_sql: SELECT       `HANGDUANMC` AS `航段`,      SUM(`DUANMHYZL`) AS `总货运量`   FROM       hd_yxzt   WHERE       `HANGDMC` = '京杭运河'           AND YEAR(`GCRQ`) = 2023            AND MONTH(`GCRQ`) = 11   GROUP BY       `HANGDUANMC`   ORDER BY       `总货运量` DESC   LIMIT 3;
gold_sql: SELECT
  SUM(WANDJBWS) AS `万吨级及以上码头泊位数合计`
FROM
  yjgk_yxzt
WHERE
  YEAR(GCRQ) = 2022;
pred_sql: SELECT   SUM(WANDJBWS) AS `万吨级及以上码头泊位数合计` FROM   yjgk_yxzt WHERE   GCRQ >= '2022-01-01' AND GCRQ < '2023-01-01';
gold_sql: SELECT
  SUM(GUOZCBHYL) AS 淮阴船闸货物通过量
FROM
  cj_yxzt
WHERE
  CHUANZMC LIKE '%淮阴%'
  AND YEAR(GCRQ) = 2023
  AND MONTH(GCRQ) = 03;
pred_sql: SELECT   SUM(GUOZCBHYL) AS 淮阴船闸货物通过量 FROM   cj_yxzt WHERE   YEAR(GCRQ) = 2023   AND MONTH(GCRQ) = 03   AND CHUANZMC LIKE '%淮阴%';
gold_sql: SELECT
  SUM(VOLUME) AS `江苏省内河航道货运量`
FROM
  hd_nh_od
WHERE
  YEAR = '2023'
  AND (
    `O_CITY` IN (
      '南京市',
      '无锡市',
      '徐州市',
      '常州市',
      '苏州市',
      '南通市',
      '连云港市',
      '淮安市',
      '盐城市',
      '扬州市',
      '镇江市',
      '泰州市',
      '宿迁市'
    )
  )
  AND (
    `D_CITY` IN (
      '南京市',
      '无锡市',
      '徐州市',
      '常州市',
      '苏州市',
      '南通市',
      '连云港市',
      '淮安市',
      '盐城市',
      '扬州市',
      '镇江市',
      '泰州市',
      '宿迁市'
    )
  )
pred_sql: SELECT SUM(VOLUME) AS `江苏省内河航道货运量` FROM hd_nh_od WHERE YEAR = '2023'   AND O_CITY IN (     '南京市', '无锡市', '徐州市', '常州市', '苏州市', '南通市', '连云港市', '淮安市', '盐城市', '扬州市', '镇江市', '泰州市', '宿迁市'   )   AND D_CITY IN (     '南京市', '无锡市', '徐州市', '常州市', '苏州市', '南通市', '连云港市', '淮安市', '盐城市', '扬州市', '镇江市', '泰州市', '宿迁市'   );
gold_sql: SELECT
  SUM(
    CASE
      WHEN `YEAR` = '2023' THEN `VOLUME`
      ELSE 0
    END
  ) AS `2023年南京矿建运量`,
  SUM(
    CASE
      WHEN `YEAR` = '2022' THEN `VOLUME`
      ELSE 0
    END
  ) AS `2022年南京矿建运量`,
  SUM(
    CASE
      WHEN `YEAR` = '2023' THEN `VOLUME`
      ELSE 0
    END
  ) - SUM(
    CASE
      WHEN `YEAR` = '2022' THEN `VOLUME`
      ELSE 0
    END
  ) AS `年变化量`
FROM
  hd_nh_od
WHERE
  (
    `O_CITY` = '南京'
    OR `D_CITY` = '南京'
  )
  AND `CARGO` = '矿建'
  AND (
    `YEAR` = '2023'
    OR `YEAR` = '2022'
  );
pred_sql: SELECT   SUM(CASE WHEN `YEAR` = '2023' THEN `VOLUME` ELSE 0 END) AS `2023年南京矿建运量`,   SUM(CASE WHEN `YEAR` = '2022' THEN `VOLUME` ELSE 0 END) AS `2022年南京矿建运量`,   (SUM(CASE WHEN `YEAR` = '2023' THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2022' THEN `VOLUME` ELSE 0 END)) AS `年变化量` FROM   hd_nh_od WHERE   (`O_CITY` = '南京' OR `D_CITY` = '南京')   AND `CARGO` = '矿建'   AND `YEAR` IN ('2023', '2022');
gold_sql: SELECT
  GKTT AS 江阴港吞吐量
FROM
  transportation_tj
WHERE
  CITY = '江阴市'
  AND DISTRICT IS NULL
  AND `YEAR` = 2023;
pred_sql: SELECT   GKTT AS 江阴港吞吐量 FROM   transportation_tj WHERE   `YEAR` = 2023   AND CITY = '江阴市'   AND DISTRICT IS NULL;
gold_sql: SELECT
  COUNT(DISTINCT CHUANZMC) AS 江苏省交通船闸数量
FROM
  cj_yxzt
WHERE
  YEAR(GCRQ) = 2023
  AND GUANLDW LIKE '江苏省%';
pred_sql: SELECT COUNT(DISTINCT CHUANZMC) AS 江苏省交通船闸数量 FROM cj_yxzt WHERE GCRQ >= '2023-01-01' AND GCRQ < '2024-01-01' AND GUANLDW LIKE '江苏省%';
gold_sql: SELECT
  SUM(GKTT) AS 省港口吞吐量
FROM
  transportation_tj
WHERE
  `YEAR` = '2023'
  AND PROVINCE = '江苏省'
  AND DISTRICT IS NULL;
pred_sql: SELECT   SUM(GKTT) AS 省港口吞吐量 FROM   transportation_tj WHERE   PROVINCE = '江苏省'   AND `YEAR` = '2023'   AND DISTRICT IS NULL;
gold_sql: SELECT
  SUM(GUOZCBHYL) AS 江苏境内虞山船闸货运量
FROM
  cj_yxzt
WHERE
  YEAR(GCRQ) = 2023
  AND CHUANZMC LIKE '虞山%'
  AND GUANLDW LIKE '江苏省%';
pred_sql: SELECT   SUM(GUOZCBHYL) AS 江苏境内虞山船闸货运量 FROM   cj_yxzt WHERE   GUANLDW LIKE '江苏省%'   AND YEAR(GCRQ) = 2023   AND CHUANZMC LIKE '虞山%';
gold_sql: SELECT
  COUNT(DISTINCT CHUANZMC) AS 江苏境内交通船闸数量
FROM
  cj_yxzt
WHERE
  GUANLDW LIKE '江苏省%';
pred_sql: SELECT COUNT(DISTINCT CHUANZMC) AS 江苏境内交通船闸数量 FROM cj_yxzt WHERE GUANLDW LIKE '江苏省%';
gold_sql: SELECT
  NEIH_YUNSCCBS AS `江苏省内河船舶数量`
FROM
  cb_yxqk
WHERE
  YEAR(GCRQ) = '2022'
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT   NEIH_YUNSCCBS AS `江苏省内河船舶数量` FROM   cb_yxqk WHERE   YEAR(GCRQ) = '2022' ORDER BY   GCRQ ASC LIMIT   1;
gold_sql: SELECT
  NEIH_YUNSCCBS AS `江苏省内河船舶数量`
FROM
  cb_yxqk
WHERE
  YEAR(GCRQ) = '2022'
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT   NEIH_YUNSCCBS AS `江苏省内河船舶数量` FROM   cb_yxqk WHERE   YEAR(GCRQ) = '2022' ORDER BY   GCRQ ASC LIMIT   1;
gold_sql: SELECT
  GKTT AS 南京港的货物吞吐量
FROM
  transportation_tj
WHERE
  PROVINCE = '江苏省'
  and CITY = '南京市'
  AND DISTRICT IS NULL
  AND `YEAR` = '2023';
pred_sql: SELECT   GKTT AS 南京港的货物吞吐量 FROM   transportation_tj WHERE   `YEAR` = '2023'   AND PROVINCE = '江苏省'   AND CITY = '南京市'   AND DISTRICT IS NULL;
gold_sql: SELECT
  SUM(ZONGBC) AS `2023年上海浦东机场飞行次数`
FROM
  jc_yxzt
WHERE
  HANGKSNMC LIKE '%浦东%'
  AND GCRQ BETWEEN '2023-01-01' AND '2023-12-31';
pred_sql: SELECT   SUM(ZONGBC) AS `2023年上海浦东机场飞行次数` FROM   jc_yxzt WHERE   GCRQ BETWEEN '2023-01-01' AND '2023-12-31'   AND HANGKSNMC LIKE '%浦东%';
gold_sql: SELECT
  HJ_RK * 10000 AS 苏州昆山的户籍人口数量
FROM
  rk_tj
WHERE
  `YEAR` = 2023
  AND PROVINCE = '江苏省'
  AND CITY = '苏州市'
  AND DISTRICT = '昆山市';
pred_sql: SELECT   HJ_RK * 10000 AS 苏州昆山的户籍人口数量 FROM   rk_tj WHERE   `YEAR` = 2023   AND PROVINCE = '江苏省'   AND CITY = '苏州市'   AND DISTRICT = '昆山市';
gold_sql: SELECT
  REGIONAL_GDP AS 扬州市的GDP
FROM
  gdp_tj
WHERE
  YEAR = '2023'
  AND PROVINCE = '江苏省'
  AND CITY = '扬州市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   REGIONAL_GDP AS 扬州市的GDP FROM   gdp_tj WHERE   PROVINCE = '江苏省'   AND CITY = '扬州市'   AND YEAR = '2023'   AND DISTRICT IS NULL;
gold_sql: SELECT
  `PRIMARY_INDUSTRY` AS 第一产业总值
FROM
  gdp_tj
WHERE
  `YEAR` = '2023'
  AND `PROVINCE` = '江苏省'
  AND `CITY` = '镇江市'
  AND `DISTRICT` IS NULL;
pred_sql: SELECT   `PRIMARY_INDUSTRY` AS 第一产业总值 FROM   gdp_tj WHERE   `PROVINCE` = '江苏省'   AND `CITY` = '镇江市'   AND `YEAR` = '2023'   AND `DISTRICT` IS NULL;
gold_sql: SELECT
  CITY AS 市,
  GKTT AS 吞吐量
FROM
  transportation_tj
WHERE
  `YEAR` = '2023'
  AND PROVINCE = '江苏省'
  and CITY is not null
  and DISTRICT is null
ORDER BY
  GKTT DESC
LIMIT
  3;
pred_sql: SELECT   CITY AS 市,   GKTT AS 吞吐量 FROM   transportation_tj WHERE   `YEAR` = '2023'   AND PROVINCE = '江苏省'   AND CITY IS NOT NULL   AND DISTRICT IS NULL ORDER BY   GKTT DESC LIMIT 3;
gold_sql: SELECT
  `QIYZS` AS `江苏省水运企业数量`
FROM
  yjgk_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      yjgk_yxzt
  );
pred_sql: SELECT   `QIYZS` AS `江苏省水运企业数量` FROM   yjgk_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       yjgk_yxzt   );
gold_sql: SELECT
  SUM(GUOZCBHYL) AS 淮安船闸货物通过量
FROM
  cj_yxzt
WHERE
  CHUANZMC LIKE '%淮安%'
  AND YEAR(GCRQ) = 2023
  AND MONTH(GCRQ) = 04;
pred_sql: SELECT   SUM(GUOZCBHYL) AS 淮安船闸货物通过量 FROM   cj_yxzt WHERE   YEAR(GCRQ) = 2023   AND MONTH(GCRQ) = 4   AND CHUANZMC LIKE '%淮安%';
gold_sql: SELECT
  SUM(JIZXTTL) AS 沿江港口集装箱吞吐量
FROM
  yjgk_yxzt
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31';
pred_sql: SELECT   SUM(JIZXTTL) AS 沿江港口集装箱吞吐量 FROM   yjgk_yxzt WHERE   GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31';
gold_sql: SELECT
  MAX(BANCZL) AS 南京到盐城的班列开行量
FROM
  tl_kylx
WHERE
  LUXQDCSMC = '南京市'
  AND LUXZDCSMC = '盐城市'
  AND YEAR(GCRQ) = 2023;
pred_sql: SELECT   MAX(BANCZL) AS 南京到盐城的班列开行量 FROM   tl_kylx WHERE   YEAR(GCRQ) = 2023   AND LUXQDCSMC = '南京市'   AND LUXZDCSMC = '盐城市';
gold_sql: SELECT
  L_TYPE AS 类型,
  NAME AS 名称,
  LATITUDE AS 纬度,
  LONGITUDE AS 经度
FROM
  poi
WHERE
  CITY = '南京市'
  AND YEAR = '2024'
  AND L_TYPE = '交通设施';
pred_sql: SELECT   L_TYPE AS 类型,   NAME AS 名称,   LATITUDE AS 纬度,   LONGITUDE AS 经度 FROM   poi WHERE   YEAR = '2024'   AND CITY = '南京市'   AND L_TYPE = '交通设施';
gold_sql: SELECT
  a.SEGMENT AS `断面`,
  a.OD AS `2024年交通量`,
  a.OD - IFNULL(b.OD, 0) AS `同比增长`
FROM
  tl_dm a
  LEFT JOIN tl_dm b ON a.SEGMENT = b.SEGMENT
  AND b.YEAR = '2023'
WHERE
  a.YEAR = '2024'
  AND a.ROAD_NAME LIKE '%沪宁铁路%'
ORDER BY
  a.SEGMENT;
pred_sql: SELECT   a.SEGMENT AS `断面`,   a.OD AS `2024年交通量`,   a.OD - COALESCE(b.OD, 0) AS `同比增长` FROM   tl_dm a   LEFT JOIN tl_dm b ON a.SEGMENT = b.SEGMENT   AND b.YEAR = '2023' WHERE   a.YEAR = '2024'   AND a.ROAD_NAME LIKE '%沪宁铁路%' ORDER BY   a.SEGMENT;
gold_sql: SELECT
  CZ_RK  AS 苏州昆山常住人口
FROM
  rk_tj
WHERE
  `YEAR` = '2021'
  AND PROVINCE = '江苏省'
  AND CITY = '苏州市'
  AND DISTRICT = '昆山市';
pred_sql: SELECT CZ_RK AS 苏州昆山常住人口 FROM rk_tj WHERE `YEAR` = '2021' AND PROVINCE = '江苏省' AND CITY = '苏州市' AND DISTRICT = '昆山市';
gold_sql: SELECT
  SZDQ AS `所在地区`,
  SFZMC AS `收费站名称`,
  ZONGCLL AS `出入口总流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_crksfz_yxzt
  )
  AND SFZMC LIKE '江苏%'
ORDER BY
  ZONGCLL DESC
LIMIT
  5;
pred_sql: SELECT   SFZMC AS `收费站名称`,   SZDQ AS `所在地区`,   ZONGCLL AS `出入口总流量` FROM   gsgl_crksfz_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_crksfz_yxzt   )   AND SFZMC LIKE '江苏%' ORDER BY   ZONGCLL DESC LIMIT   5;
gold_sql: SELECT
  SUM(CHELL) AS '出行量'
FROM
  gsgl_od_flow
WHERE
  O_DISTRICTS = '江阴市'
  AND D_DISTRICTS = '常熟市'
  AND GCRQ = DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        gsgl_od_flow
    ),
    INTERVAL 1 DAY
  );
pred_sql: SELECT   SUM(CHELL) AS '出行量' FROM   gsgl_od_flow WHERE   GCRQ = DATE_SUB(     (       SELECT         MAX(GCRQ)       FROM         gsgl_od_flow     ),     INTERVAL 1 DAY   )   AND O_DISTRICTS = '江阴市'   AND D_DISTRICTS = '常熟市';
gold_sql: SELECT
  SUM(BANCZL) AS `铁路日发班次`
FROM
  tl_kylx
WHERE
  LUXQDCSMC = '苏州市'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kylx
  );
pred_sql: SELECT   SUM(BANCZL) AS `铁路日发班次` FROM   tl_kylx WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       tl_kylx   )   AND LUXQDCSMC = '苏州市';
gold_sql: SELECT
  REXHWL AS 热线话务量,
  ZIXYWL AS 咨询业务量,
  TOUSYWL AS 投诉业务量
FROM
  rxfwzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      rxfwzt
  )
  AND `XINGZQH` LIKE '320100';
pred_sql: SELECT   ZIXYWL AS 咨询业务量,   REXHWL AS 热线话务量,   TOUSYWL AS 投诉业务量 FROM   rxfwzt WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       rxfwzt   )   AND `XINGZQH` LIKE '320100';
gold_sql: SELECT
  SFZMC AS 收费站
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_crksfz_yxzt
  )
  AND GSMC LIKE '%京沪高速%'
ORDER BY
  HUOCZLL DESC
LIMIT
  1;
pred_sql: SELECT SFZMC AS 收费站 FROM gsgl_crksfz_yxzt WHERE GCRQ = (     SELECT MAX(GCRQ)     FROM gsgl_crksfz_yxzt   )   AND GSMC LIKE '%京沪高速%' ORDER BY HUOCZLL DESC LIMIT 1;
gold_sql: SELECT
  LUD AS 路段,
  YONGDCHANGD AS 拥堵长度
FROM
  gsgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
    WHERE
      GCRQ < CURDATE()
  )
ORDER BY
  YONGDCHANGD DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS 路段,   YONGDCHANGD AS 拥堵长度 FROM   gsgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt     WHERE       GCRQ < CURDATE()   ) ORDER BY   拥堵长度 DESC LIMIT   1;
gold_sql: SELECT
  JICHBZDL AS 班次准点率
FROM
  jc_yxzt
WHERE
  HANGKSNMC LIKE '%禄口%机场%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ) - INTERVAL 1 DAY
    FROM
      jc_yxzt
  );
pred_sql: SELECT   JICHBZDL AS 班次准点率 FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ) - INTERVAL 1 DAY     FROM       jc_yxzt   )   AND HANGKSNMC LIKE '%禄口%机场%';
gold_sql: SELECT
  SUM(BANCZL) AS `昨天铁路的班次总量`
FROM
  tl_kylx
WHERE
  (
    LUXQDCSMC = '南京市'
    OR LUXZDCSMC = '南京市'
  )
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      tl_kylx
  ) - INTERVAL 1 DAY;
pred_sql: SELECT   SUM(BANCZL) AS `昨天铁路的班次总量` FROM   tl_kylx WHERE   (     LUXQDCSMC = '南京市'     OR LUXZDCSMC = '南京市'   )   AND GCRQ = DATE_SUB((     SELECT       MAX(GCRQ)     FROM       tl_kylx   ), INTERVAL 1 DAY);
gold_sql: SELECT
  CZ_RK as `江苏省常住人口（万人）`
FROM
  rk_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      rk_tj
    WHERE
      PROVINCE = '江苏省'
      AND YEAR <= '2023'
  )
  AND PROVINCE = '江苏省'
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT CZ_RK AS `江苏省常住人口（万人）` FROM rk_tj WHERE YEAR = (     SELECT MAX(YEAR)     FROM rk_tj     WHERE PROVINCE = '江苏省' AND YEAR <= '2023' ) AND PROVINCE = '江苏省' AND CITY IS NULL AND DISTRICT IS NULL;
gold_sql: SELECT
  SUM(NATIONAL_ROAD) AS '江苏省国道总里程'
FROM
  gl_lc
WHERE
  `YEAR` <= '2023';
pred_sql: SELECT   SUM(NATIONAL_ROAD) AS '江苏省国道总里程' FROM   gl_lc WHERE   YEAR <= 2023;
gold_sql: SELECT
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号
FROM
  gsgl_ldydzt
WHERE
  LUD = 'G42'
  AND YEAR(GCRQ) = 2024
  AND MONTH(GCRQ) = 2
ORDER BY
  YONGDCHENGD DESC,
  YONGDCHANGD DESC
LIMIT
  5;
pred_sql: SELECT   ZHONGDZH AS 终点桩号,   QIDZH AS 起点桩号 FROM   gsgl_ldydzt WHERE   LUD = 'G42'   AND YEAR(GCRQ) = 2024   AND MONTH(GCRQ) = 2 ORDER BY   YONGDCHANGD DESC,   YONGDCHENGD DESC LIMIT   5;
gold_sql: SELECT
  SFZMC AS `收费站名称`,
  SUM(ZONGCLL) AS `总流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  DATE(
    STR_TO_DATE(SUBSTRING_INDEX(GCRQ, 'T', 1), '%Y-%m-%d')
  ) BETWEEN '2023-11-01' AND '2023-11-30'
GROUP BY
  SFZMC
ORDER BY
  `总流量` DESC
LIMIT
  10;
pred_sql: SELECT   SFZMC AS `收费站名称`,   SUM(ZONGCLL) AS `总流量` FROM   gsgl_crksfz_yxzt WHERE   DATE(     STR_TO_DATE(SUBSTRING_INDEX(GCRQ, 'T', 1), '%Y-%m-%d')   ) BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY   SFZMC ORDER BY   `总流量` DESC LIMIT   10;
gold_sql: SELECT
  HANGKSNMC AS `机场名称`
FROM
  jc_yxzt
WHERE
  YEAR(GCRQ) = 2024
  AND MONTH(GCRQ) = 2
ORDER BY
  CONVERT(
    REPLACE
      (JICHBZDL, '%', ''),
      DECIMAL(5, 2)
  ) DESC
LIMIT
  3;
pred_sql: SELECT HANGKSNMC AS `机场名称` FROM jc_yxzt WHERE YEAR(GCRQ) = 2024 AND MONTH(GCRQ) = 2 ORDER BY CAST(REPLACE(JICHBZDL, '%', '') AS DECIMAL(5, 2)) DESC LIMIT 3;
gold_sql: SELECT
  ZONGCLL AS 车流量总计
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ) - INTERVAL 1 DAY
    FROM
      gsgl_crksfz_yxzt
  )
  AND SFZMC LIKE '%南京%'
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT   ZONGCLL AS 车流量总计 FROM   gsgl_crksfz_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ) - INTERVAL '1 day'     FROM       gsgl_crksfz_yxzt   )   AND SFZMC LIKE '%南京%' ORDER BY   GCRQ DESC LIMIT   1;
gold_sql: SELECT
  AVG(YONGDCHENGD) AS `平均拥堵程度`,
  AVG(YONGDCHANGD) AS `平均拥堵长度`,
  AVG(CHIXSJ) AS `平均持续时间`
FROM
  gsgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
    WHERE
      HOUR(GCRQ) BETWEEN 17 AND 19
  )
  AND LUD = 'G42';
pred_sql: SELECT   AVG(YONGDCHENGD) AS `平均拥堵程度`,   AVG(YONGDCHANGD) AS `平均拥堵长度`,   AVG(CHIXSJ) AS `平均持续时间` FROM   gsgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt     WHERE       HOUR(GCRQ) BETWEEN 17 AND 19   )   AND LUD = 'G42';
gold_sql: SELECT
  A.GCRQ AS `今年日期`,
  A.ZONGCLL AS `今年车流量`,
  (A.ZONGCLL - B.ZONGCLL) AS `车流量变化`
FROM
  (
    SELECT
      GCRQ,
      ZONGCLL
    FROM
      gsgl_dmyxzt
    WHERE
      GSBM = 'S39'
      AND DUANMMC = '高桥-李典头桥'
      AND GCRQ BETWEEN '2024-01-01' AND '2024-12-31'
  ) A
  LEFT JOIN (
    SELECT
      GCRQ,
      ZONGCLL
    FROM
      gsgl_dmyxzt
    WHERE
      GSBM = 'S39'
      AND DUANMMC = '高桥-李典头桥'
      AND GCRQ BETWEEN '2023-01-01' AND '2023-12-31'
  ) B ON A.GCRQ = B.GCRQ;
pred_sql: SELECT   A.GCRQ AS `今年日期`,   A.ZONGCLL AS `今年车流量`,   (A.ZONGCLL - B.ZONGCLL) AS `车流量变化` FROM   (     SELECT       GCRQ,       ZONGCLL     FROM       gsgl_dmyxzt     WHERE       GSBM = 'S39'       AND DUANMMC = '高桥-李典头桥'       AND GCRQ BETWEEN '2024-01-01' AND '2024-12-31'   ) A   LEFT JOIN (     SELECT       GCRQ,       ZONGCLL     FROM       gsgl_dmyxzt     WHERE       GSBM = 'S39'       AND DUANMMC = '高桥-李典头桥'       AND GCRQ BETWEEN '2023-01-01' AND '2023-12-31'   ) B ON A.GCRQ = B.GCRQ;
gold_sql: SELECT
  SFZMC AS `流量最大的收费站`,
  KECZLL AS `客车总流量`,
  HUOCZLL AS `货车总流量`,
  ZONGCLL AS `总车流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  GSMC = '江宜高速'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_crksfz_yxzt
    WHERE
      GSMC = '江宜高速'
  )
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT   KECZLL AS `客车总流量`,   HUOCZLL AS `货车总流量`,   ZONGCLL AS `总车流量`,   SFZMC AS `流量最大的收费站` FROM   gsgl_crksfz_yxzt WHERE   GSMC = '江宜高速'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_crksfz_yxzt     WHERE       GSMC = '江宜高速'   ) ORDER BY   ZONGCLL DESC LIMIT   1;
gold_sql: SELECT
  QIDZH AS `起点桩号`,
  ZHONGDZH AS `终点桩号`,
  YONGDCHENGD AS `拥堵程度`
FROM
  ptgl_ldydzt
WHERE
  LUD = 'S328'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_ldydzt
  )
ORDER BY
  YONGDCHANGD DESC,
  CHIXSJ DESC
LIMIT
  1;
pred_sql: SELECT   ZHONGDZH AS `终点桩号`,   QIDZH AS `起点桩号`,   YONGDCHENGD AS `拥堵程度` FROM   ptgl_ldydzt WHERE   LUD = 'S328'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       ptgl_ldydzt   ) ORDER BY   YONGDCHENGD DESC,   CHIXSJ DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS '城市名称',
  TotalPassengers AS '总旅客吞吐量',
  RANK() OVER (
    ORDER BY
      TotalPassengers DESC
  ) AS '江苏省内排名'
FROM
  (
    SELECT
      O_CITY,
      SUM(PASSENGER) AS TotalPassengers
    FROM
      hk_od
    WHERE
      O_PROVINCE = '江苏'
      AND `YEAR` = 2023
    GROUP BY
      O_CITY
  ) AS CityTotals
WHERE
  O_CITY = '南通';
pred_sql: SELECT   O_CITY AS '城市名称',   TotalPassengers AS '总旅客吞吐量',   RANK() OVER (     ORDER BY       TotalPassengers DESC   ) AS '江苏省内排名' FROM   (     SELECT       O_CITY,       SUM(PASSENGER) AS TotalPassengers     FROM       hk_od     WHERE       `YEAR` = 2023       AND O_PROVINCE = '江苏'     GROUP BY       O_CITY   ) AS CityTotals WHERE   O_CITY = '南通';
gold_sql: SELECT
  AVG(JICHBZDL) AS 准点率
FROM
  jc_yxzt
WHERE
  HANGKSNMC LIKE '%南京禄口国际机场%'
  AND YEAR(GCRQ) = 2023
  AND MONTH(GCRQ) = 06;
pred_sql: SELECT   AVG(JICHBZDL) AS 准点率 FROM   jc_yxzt WHERE   YEAR(GCRQ) = 2023   AND MONTH(GCRQ) = 06   AND HANGKSNMC LIKE '%南京禄口国际机场%';
gold_sql: SELECT
  CHIXSJ AS '最拥堵的时间段（分钟）',
  YONGDCHANGD AS '拥堵长度（米）'
FROM
  gsgl_ldydzt
WHERE
  GCRQ = '2023-07-21'
  AND LUD LIKE 'G30%'
ORDER BY
  YONGDCHENGD DESC,
  YONGDCHANGD DESC
LIMIT
  1;
pred_sql: SELECT   CHIXSJ AS '最拥堵的时间段（分钟）',   YONGDCHANGD AS '拥堵长度（米）' FROM   gsgl_ldydzt WHERE   LUD LIKE 'G30%'   AND GCRQ = '2023-07-21' ORDER BY   YONGDCHANGD DESC,   YONGDCHENGD DESC LIMIT   1;
gold_sql: SELECT
  HANGKSNMC AS `机场名称`,
  AVG(JICHBZDL) AS `平均准点率`
FROM
  jc_yxzt
WHERE
  YEAR(GCRQ) = 2023
  AND MONTH(GCRQ) = 11
GROUP BY
  HANGKSNMC
ORDER BY
  AVG(JICHBZDL) DESC
LIMIT
  3;
pred_sql: SELECT   HANGKSNMC AS `机场名称`,   AVG(JICHBZDL) AS `平均准点率` FROM   jc_yxzt WHERE   GCRQ BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY   HANGKSNMC ORDER BY   `平均准点率` DESC LIMIT   3;
gold_sql: SELECT
  `DUANMMC` AS `货车占比最高的断面`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ >= '2023-01-01'
  AND GCRQ <= '2023-12-31'
ORDER BY
  `HUOCZLL` / `ZONGCLL` DESC
LIMIT
  1;
pred_sql: SELECT   `DUANMMC` AS `货车占比最高的断面` FROM   gsgl_dmyxzt WHERE   GCRQ BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY   (`HUOCZLL` / `ZONGCLL`) DESC LIMIT   1;
gold_sql: SELECT
  GUANCZMC AS `江苏流量最大的普通公路断面`
FROM
  ptgl_dmyxzt
WHERE
  XINGZQH LIKE '32%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_dmyxzt
  )
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT   GUANCZMC AS `江苏流量最大的普通公路断面` FROM   ptgl_dmyxzt WHERE   XINGZQH LIKE '32%' ORDER BY   ZONGCLL DESC,   GCRQ DESC LIMIT   1;
gold_sql: SELECT
  GCRQ as `最大断面流量日期`,
  ZONGCLL as `流量数值`
FROM
  gsgl_dmyxzt
WHERE
  GSMC = '沪宜高速'
  AND DUANMMC LIKE '苏南硕放机场-无锡东%'
  AND YEAR(GCRQ) = 2023
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `最大断面流量日期`,   ZONGCLL AS `流量数值` FROM   gsgl_dmyxzt WHERE   GSMC = '沪宜高速'   AND DUANMMC LIKE '苏南硕放机场-无锡东%'   AND YEAR(GCRQ) = 2023 ORDER BY   ZONGCLL DESC LIMIT 1;
gold_sql: SELECT
  REGIONAL_GDP AS `地区生产总值（亿元）`
FROM
  gdp_tj
WHERE
  YEAR = '2023'
  AND PROVINCE = '江苏省'
  AND CITY = '无锡市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   REGIONAL_GDP AS `地区生产总值（亿元）` FROM   gdp_tj WHERE   PROVINCE = '江苏省'   AND CITY = '无锡市'   AND YEAR = '2023'   AND DISTRICT IS NULL;
gold_sql: SELECT
  AVG(ZONGCLL) AS `日均车流量`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-02-01' AND '2024-02-29'
  AND GSMC = '宁沪高速'
  AND (
    DUANMMC LIKE '%硕放枢纽%'
    OR DUANMMC LIKE '%东桥枢纽%'
  );
pred_sql: SELECT AVG(ZONGCLL) AS `日均车流量` FROM gsgl_dmyxzt WHERE GCRQ BETWEEN '2024-02-01' AND '2024-02-29' AND (GSMC = '宁沪高速' AND (DUANMMC LIKE '%硕放枢纽%' OR DUANMMC LIKE '%东桥枢纽%'));
gold_sql: SELECT
  SUM(ZONGCLL) AS '流量'
FROM
  gsgl_crksfz_yxzt
WHERE
  SFZMC = '江苏常熟站'
  AND YEAR(GCRQ) = 2023;
pred_sql: SELECT   SUM(ZONGCLL) AS '流量' FROM   gsgl_crksfz_yxzt WHERE   YEAR(GCRQ) = 2023   AND SFZMC = '江苏常熟站';
gold_sql: SELECT
  AVG(ZONGCLL) AS `平均交通量`
FROM
  gsgl_dmyxzt
WHERE
  YEAR(GCRQ) = 2023
  AND GSMC LIKE '%沪宁高速%';
pred_sql: SELECT AVG(ZONGCLL) AS `平均交通量` FROM gsgl_dmyxzt WHERE YEAR(GCRQ) = 2023 AND GSMC LIKE '%沪宁高速%';
gold_sql: SELECT
  GSGL_JTLL AS '江苏省高速公路总车流量（万辆/天）',
  XSSD AS '高速公路行驶速度（千米/小时）',
  LWCTL AS '高速公路路网畅通率',
  RTXZK AS '日通行状况'
FROM
  r_gsgl_z
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      r_gsgl_z
  );
pred_sql: SELECT   LWCTL AS '高速公路路网畅通率',   RTXZK AS '日通行状况',   XSSD AS '高速公路行驶速度（千米/小时）',   GSGL_JTLL AS '江苏省高速公路总车流量（万辆/天）' FROM   r_gsgl_z WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       r_gsgl_z   );
gold_sql: SELECT
  LUD,
  MAX(YONGDCHENGD) AS '最大拥堵程度',
  SUM(YONGDCHANGD) AS '总拥堵长度（米）',
  SUM(CHIXSJ) AS '总拥堵时间（分钟）'
FROM
  gsgl_ldydzt
WHERE
  LUD LIKE 'G30%'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
    WHERE
      LUD LIKE 'G30%'
  )
GROUP BY
  LUD;
pred_sql: SELECT   LUD,   MAX(YONGDCHENGD) AS '最大拥堵程度',   SUM(YONGDCHANGD) AS '总拥堵长度（米）',   SUM(CHIXSJ) AS '总拥堵时间（分钟）' FROM   gsgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt     WHERE       LUD LIKE 'G30%'   )   AND LUD LIKE 'G30%' GROUP BY   LUD;
gold_sql: SELECT
  SUM(ZONGCLL) As 进出城车流量
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_crksfz_yxzt
  )
  AND GSBM LIKE '%G42%'
  AND GSMC LIKE '%沪蓉高速%'
  AND SFZMC LIKE '%南京%'
LIMIT
  1;
pred_sql: SELECT SUM(ZONGCLL) AS 进出城车流量 FROM gsgl_crksfz_yxzt WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_crksfz_yxzt)   AND GSBM LIKE '%G42%'   AND GSMC LIKE '%沪蓉高速%'   AND SFZMC LIKE '%南京%' LIMIT 1;
gold_sql: SELECT
  SFZMC AS 收费站,
  KECZLL AS 客车总流量,
  HUOCZLL AS 货车总流量,
  ZONGCLL AS 总车流量
FROM
  gsgl_crksfz_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_crksfz_yxzt
    WHERE
      GSMC LIKE '沪蓉高速'
  )
  AND GSMC LIKE '沪蓉高速'
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT   SFZMC AS 收费站,   KECZLL AS 客车总流量,   HUOCZLL AS 货车总流量,   ZONGCLL AS 总车流量 FROM   gsgl_crksfz_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_crksfz_yxzt     WHERE       GSMC LIKE '沪蓉高速'   )   AND GSMC LIKE '沪蓉高速' ORDER BY   ZONGCLL DESC LIMIT   1;
gold_sql: SELECT
  QIDZH AS `起点桩号`,
  ZHONGDZH AS `终点桩号`,
  YONGDCHENGD AS `拥堵程度`
FROM
  ptgl_ldydzt
WHERE
  LUD = 'S328'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_ldydzt
  )
ORDER BY
  YONGDCHANGD DESC,
  CHIXSJ DESC
LIMIT
  1;
pred_sql: SELECT   ZHONGDZH AS `终点桩号`,   QIDZH AS `起点桩号`,   YONGDCHENGD AS `拥堵程度` FROM   ptgl_ldydzt WHERE   LUD = 'S328'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       ptgl_ldydzt   ) ORDER BY   YONGDCHENGD DESC,   CHIXSJ DESC LIMIT   1;
gold_sql: SELECT
  AVG(ZONGCLL) as `日均车流量`
FROM
  gsgl_crksfz_yxzt
WHERE
  SFZMC = '宁马收费站'
  AND GCRQ BETWEEN '2023-05-01' AND '2023-05-05';
pred_sql: SELECT   AVG(ZONGCLL) AS `日均车流量` FROM   gsgl_crksfz_yxzt WHERE   GCRQ BETWEEN '2023-05-01' AND '2023-05-05'   AND SFZMC = '宁马收费站';
gold_sql: SELECT
  `YEAR` AS 日期,
  ROAD_NAME AS 道路名称,
  SUM(UP_VOLUME + DOWN_VOLUME) AS '去年交通量'
FROM
  gsgl_dmll_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      gsgl_dmll_tj
  ) - 1
  AND ROAD_TYPE LIKE '沪陕高速'
  AND ROAD_NAME LIKE '南通'
GROUP BY
  `YEAR`,
  ROAD_NAME;
pred_sql: SELECT   `YEAR` AS 日期,   ROAD_NAME AS 道路名称,   SUM(UP_VOLUME + DOWN_VOLUME) AS '去年交通量' FROM   gsgl_dmll_tj WHERE   ROAD_TYPE LIKE '沪陕高速'   AND ROAD_NAME LIKE '南通'   AND `YEAR` = (     SELECT       MAX(`YEAR`) - 1     FROM       gsgl_dmll_tj   ) GROUP BY   `YEAR`,   ROAD_NAME;
gold_sql: SELECT
  a.ROAD_NAME AS 道路名称,
  a.YEAR AS 年份,
  a.VOLUME AS '交通量',
  FIND_IN_SET(a.VOLUME, b.VolumeOrder) AS '排名'
FROM
  gsgl_dmll_tj a
  INNER JOIN (
    SELECT
      GROUP_CONCAT(
        VOLUME
        ORDER BY
          VOLUME DESC
      ) AS VolumeOrder
    FROM
      (
        SELECT DISTINCT
          VOLUME
        FROM
          gsgl_dmll_tj
        WHERE
          `YEAR` = (
            SELECT
              MAX(`YEAR`)
            FROM
              gsgl_dmll_tj
          ) - 1
      ) AS SubQuery
  ) b
WHERE
  a.`YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      gsgl_dmll_tj
  ) - 1
  AND a.ROAD_TYPE LIKE '%沪陕高速%'
  AND a.ROAD_NAME LIKE '%南通%'
ORDER BY
  a.VOLUME DESC;
pred_sql: SELECT   a.ROAD_NAME AS 道路名称,   a.YEAR AS 年份,   a.VOLUME AS '交通量',   FIND_IN_SET(a.VOLUME, b.VolumeOrder) AS '排名' FROM   gsgl_dmll_tj a   INNER JOIN (     SELECT       GROUP_CONCAT(         DISTINCT VOLUME         ORDER BY           VOLUME DESC       ) AS VolumeOrder     FROM       gsgl_dmll_tj     WHERE       `YEAR` = (         SELECT           MAX(`YEAR`) - 1         FROM           gsgl_dmll_tj       )   ) b WHERE   a.`YEAR` = (     SELECT       MAX(`YEAR`) - 1     FROM       gsgl_dmll_tj   )   AND a.ROAD_TYPE LIKE '%沪陕高速%'   AND a.ROAD_NAME LIKE '%南通%' ORDER BY   a.VOLUME DESC;
gold_sql: SELECT
  CITY AS 市,
  SUM(GKTT) as 总吞吐量
FROM
  transportation_tj
WHERE
  `YEAR` = '2023'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  CITY
ORDER BY
  总吞吐量 DESC
LIMIT
  3;
pred_sql: SELECT   CITY AS 市,   SUM(GKTT) as 总吞吐量 FROM   transportation_tj WHERE   `YEAR` = '2023'   AND CITY IS NOT NULL   AND DISTRICT IS NULL GROUP BY   CITY ORDER BY   总吞吐量 DESC LIMIT   3;
gold_sql: SELECT
  `GCRQ` AS '观测日期',
  `DUANMBM` AS '断面编码',
  `DUANMMC` AS '断面名称',
  `ZONGCLL` AS '总车流量（辆/天）',
  `CHEHZZL` AS '车货总重量（吨）'
FROM
  `gsgl_dmyxzt`
WHERE
  `GSMC` LIKE '%沪宁%'
  AND `DUANMMC` LIKE '丹徒枢纽-镇江枢纽%'
  AND `GCRQ` = '2024-06-16';
pred_sql: SELECT   `DUANMBM` AS '断面编码',   `GCRQ` AS '观测日期',   `DUANMMC` AS '断面名称',   `CHEHZZL` AS '车货总重量（吨）',   `ZONGCLL` AS '总车流量（辆/天）' FROM   `gsgl_dmyxzt` WHERE   `DUANMMC` LIKE '丹徒枢纽-镇江枢纽%'   AND `GSMC` LIKE '%沪宁%'   AND `GCRQ` = '2024-06-16';
gold_sql: SELECT
  CITY AS 市,
  COUNT(*) AS POI数量
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  and CITY is not null
GROUP BY
  市
ORDER BY
  POI数量 DESC;
pred_sql: SELECT   CITY AS 市,   COUNT(*) AS POI数量 FROM   poi WHERE   PROVINCE = '江苏省'   AND CITY IS NOT NULL GROUP BY   市 ORDER BY   POI数量 DESC;
gold_sql: SELECT
  `ROAD_NAME` as 名称,
  VOLUME AS `最大货车流量的断面`
FROM
  hy_dmll
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT   `ROAD_NAME` as 名称,   VOLUME AS `最大货车流量的断面` FROM   hy_dmll ORDER BY   VOLUME DESC LIMIT   1;
gold_sql: SELECT
  COUNT(*) AS `观测点数量`
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = '2018'
  AND `VOLUME` > 10000;
pred_sql: SELECT COUNT(*) AS `观测点数量` FROM ptgl_gcznpjl WHERE `VOLUME` > 10000   AND `YEAR` = '2018';
gold_sql: SELECT
  `GUANCZMC` as 观测点
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = '2018'
  AND `VOLUME` > 15000;
pred_sql: SELECT   GUANCZMC as 观测点 FROM   ptgl_gcznpjl WHERE   YEAR = '2018'   AND VOLUME > 15000;
gold_sql: SELECT DUANMMC as `流量最大的路段` FROM gsgl_dmyxzt WHERE GCRQ BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY ZONGCLL DESC LIMIT 1;
pred_sql: SELECT DUANMMC AS `流量最大的路段`  FROM gsgl_dmyxzt  WHERE GCRQ BETWEEN '2023-01-01' AND '2023-12-31'  ORDER BY ZONGCLL DESC  LIMIT 1;
gold_sql: SELECT COUNT(*) AS `公交站数量` FROM poi WHERE AREA = '金坛区' AND M_TYPE = '公交站' AND `YEAR` = (SELECT MAX(`YEAR`) FROM poi WHERE AREA = '金坛区' AND M_TYPE = '公交站');
pred_sql: SELECT COUNT(*) AS `公交站数量` FROM poi WHERE M_TYPE = '公交站' AND AREA = '金坛区' AND `YEAR` = (SELECT MAX(`YEAR`) FROM poi WHERE M_TYPE = '公交站' AND AREA = '金坛区');
gold_sql: SELECT
  COUNT(*) AS `公交站数量`
FROM
  poi
WHERE
  AREA = '金坛区'
  AND M_TYPE = '公交站'
  AND `YEAR` = '2024';
pred_sql: SELECT COUNT(*) AS `公交站数量` FROM poi WHERE `YEAR` = '2024' AND M_TYPE = '公交站' AND AREA = '金坛区';
gold_sql: SELECT
  GCRQ as `车流量最大的日期`
FROM
  r_gsgl_z
WHERE
  GCRQ > (
    SELECT
      MAX(GCRQ) - INTERVAL 7 DAY
    FROM
      r_gsgl_z
  )
ORDER BY
  GSGL_JTLL DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `车流量最大的日期` FROM   r_gsgl_z WHERE   GCRQ > (     SELECT       MAX(GCRQ) - INTERVAL 7 DAY     FROM       r_gsgl_z   ) ORDER BY   GSGL_JTLL DESC LIMIT   1;
gold_sql: SELECT COUNT(*) AS `公交站数量` FROM poi WHERE PROVINCE = '江苏省' AND M_TYPE = '公交站' AND `YEAR` = '2022';
pred_sql: SELECT COUNT(*) AS `公交站数量` FROM poi WHERE `YEAR` = '2022' AND PROVINCE = '江苏省' AND M_TYPE = '公交站';
gold_sql: SELECT SUM(NATIONAL_ROAD + PROVINCIAL_ROAD) AS `江苏省国省干道里程`  FROM gl_lc  WHERE CITY IN ('南京市', '无锡市', '徐州市', '常州市', '苏州市', '南通市', '连云港市', '淮安市', '盐城市', '扬州市', '镇江市', '泰州市', '宿迁市')  AND YEAR = (SELECT MAX(YEAR) FROM gl_lc);
pred_sql: SELECT SUM(NATIONAL_ROAD + PROVINCIAL_ROAD) AS `江苏省国省干道里程` FROM gl_lc WHERE YEAR = (SELECT MAX(YEAR) FROM gl_lc) AND CITY IN ('南京市', '无锡市', '徐州市', '常州市', '苏州市', '南通市', '连云港市', '淮安市', '盐城市', '扬州市', '镇江市', '泰州市', '宿迁市');
gold_sql: SELECT
  CITY as 城市,
  COUNT(*) AS `公交站数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND M_TYPE = '公交站'
  AND `YEAR` = '2022'
GROUP BY
  CITY;
pred_sql: SELECT   CITY AS 城市,   COUNT(*) AS `公交站数量` FROM   poi WHERE   M_TYPE = '公交站'   AND PROVINCE = '江苏省'   AND `YEAR` = '2022' GROUP BY   CITY;
gold_sql: SELECT      (NATIONAL_ROAD_2023 - NATIONAL_ROAD_2022) * 1000 AS `国道新增里程（米）`,     (PROVINCIAL_ROAD_2023 - PROVINCIAL_ROAD_2022) * 1000 AS `省道新增里程（米）` FROM     (SELECT NATIONAL_ROAD AS NATIONAL_ROAD_2022, PROVINCIAL_ROAD AS PROVINCIAL_ROAD_2022 FROM gl_lc WHERE `YEAR` = '2022' AND `CITY` = '南京市') AS data_2022 JOIN     (SELECT NATIONAL_ROAD AS NATIONAL_ROAD_2023, PROVINCIAL_ROAD AS PROVINCIAL_ROAD_2023 FROM gl_lc WHERE `YEAR` = '2023' AND `CITY` = '南京市') AS data_2023;
pred_sql: SELECT      (NATIONAL_ROAD_2023 - NATIONAL_ROAD_2022) * 1000 AS `国道新增里程（米）`,     (PROVINCIAL_ROAD_2023 - PROVINCIAL_ROAD_2022) * 1000 AS `省道新增里程（米）` FROM     (SELECT NATIONAL_ROAD AS NATIONAL_ROAD_2022, PROVINCIAL_ROAD AS PROVINCIAL_ROAD_2022 FROM gl_lc WHERE `YEAR` = '2022' AND `CITY` = '南京市') AS data_2022 JOIN     (SELECT NATIONAL_ROAD AS NATIONAL_ROAD_2023, PROVINCIAL_ROAD AS PROVINCIAL_ROAD_2023 FROM gl_lc WHERE `YEAR` = '2023' AND `CITY` = '南京市') AS data_2023;
gold_sql: SELECT
  SUM(SLKY) as `城市客运轮渡运量（万人次）`
FROM
  transportation_tj
WHERE
  YEAR = '2022'
  AND PROVINCE = '江苏省'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT SUM(SLKY) AS `城市客运轮渡运量（万人次）` FROM transportation_tj WHERE YEAR = '2022' AND PROVINCE = '江苏省' AND CITY IS NOT NULL AND DISTRICT IS NULL;
gold_sql: SELECT
  AVG(ZONGCLL) AS '日均总流量',
  AVG(KECZLL) AS '客车流量',
  AVG(HUOCZLL) AS '货车流量',
  (AVG(ZONGCLL) - AVG(ZONGCLL_PREV)) / AVG(ZONGCLL_PREV) * 100 AS '总流量同比增长比',
  (AVG(KECZLL) - AVG(KECZLL_PREV)) / AVG(KECZLL_PREV) * 100 AS '客车流量同比增长比',
  (AVG(HUOCZLL) - AVG(HUOCZLL_PREV)) / AVG(HUOCZLL_PREV) * 100 AS '货车流量同比增长比'
FROM
  (
    SELECT
      DUANMBM,
      GCRQ,
      ZONGCLL,
      KECZLL,
      HUOCZLL,
      LAG(ZONGCLL, 1) OVER (
        partition by
          DUANMBM
        ORDER BY
          GCRQ
      ) AS ZONGCLL_PREV,
      LAG(KECZLL, 1) OVER (
        partition by
          DUANMBM
        ORDER BY
          GCRQ
      ) AS KECZLL_PREV,
      LAG(HUOCZLL, 1) OVER (
        partition by
          HUOCZLL
        ORDER BY
          GCRQ
      ) AS HUOCZLL_PREV
    FROM
      (
        SELECT
          DUANMBM,
          GCRQ,
          ZONGCLL,
          KECZLL,
          HUOCZLL
        FROM
          gsgl_dmyxzt
        WHERE
          GCRQ = '2023-11-17'
          OR GCRQ = '2022-11-17'
      ) TEMP
  ) TEMP1
pred_sql: SELECT   AVG(ZONGCLL) AS '日均总流量',   AVG(KECZLL) AS '客车流量',   AVG(HUOCZLL) AS '货车流量',   (AVG(ZONGCLL) - AVG(ZONGCLL_PREV)) / AVG(ZONGCLL_PREV) * 100 AS '总流量同比增长比',   (AVG(KECZLL) - AVG(KECZLL_PREV)) / AVG(KECZLL_PREV) * 100 AS '客车流量同比增长比',   (AVG(HUOCZLL) - AVG(HUOCZLL_PREV)) / AVG(HUOCZLL_PREV) * 100 AS '货车流量同比增长比' FROM   (     SELECT       DUANMBM,       GCRQ,       ZONGCLL,       KECZLL,       HUOCZLL,       LAG(ZONGCLL, 1) OVER (         partition by           DUANMBM         ORDER BY           GCRQ       ) AS ZONGCLL_PREV,       LAG(KECZLL, 1) OVER (         partition by           DUANMBM         ORDER BY           GCRQ       ) AS KECZLL_PREV,       LAG(HUOCZLL, 1) OVER (         partition by           DUANMBM         ORDER BY           GCRQ       ) AS HUOCZLL_PREV     FROM       (         SELECT           DUANMBM,           GCRQ,           ZONGCLL,           KECZLL,           HUOCZLL         FROM           gsgl_dmyxzt         WHERE           GCRQ = '2023-11-17'           OR GCRQ = '2022-11-17'       ) TEMP   ) TEMP1;
gold_sql: SELECT    A.ZONGCLL AS '当日车流量', B.ZONGCLL AS '昨日日车流量', ((A.ZONGCLL / B.ZONGCLL) - 1) * 100 AS '环比增长(%)' FROM    (SELECT SUM(ZONGCLL) AS ZONGCLL FROM gsgl_crksfz_yxzt WHERE GCRQ = '2023-11-19' AND SZDQ = '南京市') A,   (SELECT SUM(ZONGCLL) AS ZONGCLL FROM gsgl_crksfz_yxzt WHERE GCRQ = '2023-11-18' AND SZDQ = '南京市') B;
pred_sql: SELECT      A.ZONGCLL AS '当日车流量',      B.ZONGCLL AS '昨日日车流量',      ((A.ZONGCLL / B.ZONGCLL) - 1) * 100 AS '环比增长(%)'  FROM      (SELECT SUM(ZONGCLL) AS ZONGCLL FROM gsgl_crksfz_yxzt WHERE GCRQ = '2023-11-19' AND SZDQ = '南京市') A,      (SELECT SUM(ZONGCLL) AS ZONGCLL FROM gsgl_crksfz_yxzt WHERE GCRQ = '2023-11-18' AND SZDQ = '南京市') B;
gold_sql: SELECT
  ROUND(SUM(PASSENGER) / 12) AS `年均客运量（人/年）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND (
    `O_PROVINCE` = '江苏省'
    OR `D_PROVINCE` = '江苏省'
  );
pred_sql: SELECT ROUND(SUM(PASSENGER) / 12) AS `年均客运量（人/年）` FROM tl_od WHERE `YEAR` = '2018' AND (`O_PROVINCE` = '江苏省' OR `D_PROVINCE` = '江苏省');
gold_sql: SELECT
  A.LONGITUDE AS 经度,
  A.LATITUDE AS 纬度,
  B.CNT as 数量
FROM
  (
    SELECT
      LONGITUDE ,
      LATITUDE ,
      STAY_NUM
    FROM
      hy_tzd
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          hy_tzd
      )
    ORDER BY
      STAY_NUM DESC
    limit
      5
  ) A,
  (
    SELECT
      COUNT(*) AS CNT
    FROM
      hy_tzd
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          hy_tzd
      )
  ) B;
pred_sql: SELECT   A.LONGITUDE AS 经度,   A.LATITUDE AS 纬度,   B.CNT as 数量 FROM   (     SELECT       LONGITUDE,       LATITUDE,       STAY_NUM     FROM       hy_tzd     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           hy_tzd       )     ORDER BY       STAY_NUM DESC     limit       5   ) A,   (     SELECT       COUNT(*) AS CNT     FROM       hy_tzd     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           hy_tzd       )   ) B;
gold_sql: SELECT    `LUWCTL` AS '平均拥堵情况',   `HUANBI` AS '与前一天相比变化' FROM    gsgl_lwydzt  WHERE    `GCRQ` = '2023-07-24'    AND `XINGZQH` = '3201';
pred_sql: SELECT    `LUWCTL` AS '平均拥堵情况',   `HUANBI` AS '与前一天相比变化' FROM    gsgl_lwydzt  WHERE    `XINGZQH` = '3201'    AND `GCRQ` = '2023-07-24';
gold_sql: SELECT
  COUNT(*) AS 数量,
  PROVINCE AS 省,
  GROUP_CONCAT(DISTINCT CITY) AS 市,
  GROUP_CONCAT(DISTINCT AREA) AS 县区,
  MAX(YEAR) AS 日期
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND M_TYPE = '加油站'
GROUP BY
  PROVINCE;
pred_sql: SELECT   COUNT(*) AS 数量,   PROVINCE AS 省,   GROUP_CONCAT(DISTINCT CITY) AS 市,   GROUP_CONCAT(DISTINCT AREA) AS 县区,   MAX(YEAR) AS 日期 FROM   poi WHERE   M_TYPE = '加油站'   AND PROVINCE = '江苏省' GROUP BY   PROVINCE;
gold_sql: SELECT DATE_FORMAT(GCRQ, '%Y-%m') AS `投诉话务量峰值月份`, SUM(TOUSYWL) AS `投诉业务量合计` FROM rxfwzt  WHERE GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31' AND XINGZQH LIKE '32%' GROUP BY DATE_FORMAT(GCRQ, '%Y-%m')  ORDER BY SUM(TOUSYWL) DESC  LIMIT 1;
pred_sql: SELECT DATE_FORMAT(GCRQ, '%Y-%m') AS `投诉话务量峰值月份`, SUM(TOUSYWL) AS `投诉业务量合计`  FROM rxfwzt   WHERE GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31' AND XINGZQH LIKE '32%'  GROUP BY DATE_FORMAT(GCRQ, '%Y-%m')   ORDER BY `投诉业务量合计` DESC   LIMIT 1;
gold_sql: SELECT a.CITY, a.TLHY AS '2022年铁路货运', b.TLHY AS '2021年铁路货运', CASE WHEN b.TLHY = 0 THEN NULL ELSE (a.TLHY - b.TLHY) / b.TLHY END AS '同比增长率' FROM (SELECT CITY, TLHY FROM transportation_tj WHERE YEAR = '2022' AND PROVINCE = '江苏省' AND CITY IS NOT NULL AND DISTRICT IS NULL AND TLHY > 0) a INNER JOIN (SELECT CITY, TLHY FROM transportation_tj WHERE YEAR = '2021' AND PROVINCE = '江苏省' AND CITY IS NOT NULL AND DISTRICT IS NULL AND TLHY > 0) b ON a.CITY = b.CITY ORDER BY CASE WHEN b.TLHY = 0 THEN NULL ELSE (a.TLHY - b.TLHY) / b.TLHY END DESC, a.CITY limit 1;
pred_sql: SELECT a.CITY, a.TLHY AS '2022年铁路货运', b.TLHY AS '2021年铁路货运', CASE WHEN b.TLHY = 0 THEN NULL ELSE (a.TLHY - b.TLHY) / b.TLHY END AS '同比增长率' FROM (SELECT CITY, TLHY FROM transportation_tj WHERE YEAR = '2022' AND PROVINCE = '江苏省' AND CITY IS NOT NULL AND DISTRICT IS NULL AND TLHY > 0) a JOIN (SELECT CITY, TLHY FROM transportation_tj WHERE YEAR = '2021' AND PROVINCE = '江苏省' AND CITY IS NOT NULL AND DISTRICT IS NULL AND TLHY > 0) b ON a.CITY = b.CITY ORDER BY CASE WHEN b.TLHY = 0 THEN NULL ELSE (a.TLHY - b.TLHY) / b.TLHY END DESC, a.CITY LIMIT 1;
gold_sql: SELECT
  A.`YEAR` AS `年份`,
  B.TLHY AS `上一年铁路货运量`,
  A.TLHY AS `今年铁路货运量`,
  (A.TLHY - B.TLHY) AS `同比变化量`
FROM
  (
    SELECT
      `YEAR`,
      TLHY
    FROM
      transportation_tj
    WHERE
      PROVINCE = '江苏省'
      AND CITY IS NULL
      AND DISTRICT IS NULL
      AND `YEAR` IN ('2021', '2022', '2023')
  ) A
  LEFT JOIN (
    SELECT
      `YEAR`,
      TLHY
    FROM
      transportation_tj
    WHERE
      PROVINCE = '江苏省'
      AND CITY IS NULL
      AND DISTRICT IS NULL
      AND `YEAR` IN ('2020', '2021', '2022')
  ) B ON A.`YEAR` = CAST(B.`YEAR` AS UNSIGNED) + 1
ORDER BY
  A.`YEAR`;
pred_sql: SELECT   A.`YEAR` AS `年份`,   B.TLHY AS `上一年铁路货运量`,   A.TLHY AS `今年铁路货运量`,   (A.TLHY - B.TLHY) AS `同比变化量` FROM   (     SELECT       `YEAR`,       TLHY     FROM       transportation_tj     WHERE       PROVINCE = '江苏省'       AND CITY IS NULL       AND DISTRICT IS NULL       AND `YEAR` IN ('2021', '2022', '2023')   ) A   LEFT JOIN (     SELECT       `YEAR`,       TLHY     FROM       transportation_tj     WHERE       PROVINCE = '江苏省'       AND CITY IS NULL       AND DISTRICT IS NULL       AND `YEAR` IN ('2020', '2021', '2022')   ) B ON A.`YEAR` = B.`YEAR` + 1 ORDER BY   A.`YEAR`;
gold_sql: SELECT
  O_CITY AS `起点最活跃的城市`,
  SUM(CHELL) AS `总车流量`
FROM
  gsgl_od_flow
WHERE
  GCRQ = '2023-11-19'
GROUP BY
  O_CITY
ORDER BY
  SUM(CHELL) DESC
LIMIT
  1;
pred_sql: SELECT   O_CITY AS `起点最活跃的城市`,   SUM(CHELL) AS `总车流量` FROM   gsgl_od_flow WHERE   GCRQ = '2023-11-19' GROUP BY   O_CITY ORDER BY   `总车流量` DESC LIMIT   1;
gold_sql: SELECT
  LONGITUDE AS 经度,
  LATITUDE AS 纬度,
  STAY_NUM AS 停住统计
FROM
  hy_tzd
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  )
ORDER BY
  STAY_NUM DESC
LIMIT
  5;
pred_sql: SELECT   LATITUDE AS 纬度,   LONGITUDE AS 经度,   STAY_NUM AS 停住统计 FROM   hy_tzd WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       hy_tzd   ) ORDER BY   STAY_NUM DESC LIMIT   5;
gold_sql: SELECT
  GSMC AS `高速公路名称`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ > (
    SELECT
      MAX(GCRQ) - INTERVAL 7 DAY
    FROM
      gsgl_dmyxzt
  )
GROUP BY
  GSMC
ORDER BY
  (MAX(ZONGCLL) - MIN(ZONGCLL)) DESC
LIMIT
  1;
pred_sql: SELECT GSMC AS `高速公路名称` FROM gsgl_dmyxzt WHERE GCRQ > (     SELECT MAX(GCRQ) - INTERVAL 7 DAY     FROM gsgl_dmyxzt ) GROUP BY GSMC ORDER BY (MAX(ZONGCLL) - MIN(ZONGCLL)) DESC LIMIT 1;
gold_sql: SELECT      (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-19') AS `2023年11月19日南京航空班次量`,     (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-18') AS `2023年11月18日南京航空班次量`,     (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-19')      - (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-18') AS `变化量` FROM DUAL;
pred_sql: SELECT      (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-18') AS `2023年11月18日南京航空班次量`,     (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-19') AS `2023年11月19日南京航空班次量`,     (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-19') - (SELECT ZONGBC FROM jc_yxzt WHERE HANGKSNMC LIKE '%南京%' AND GCRQ = '2023-11-18') AS `变化量` FROM DUAL;
gold_sql: SELECT
  pl_tj_2021.CITY AS 城市,
  (
    pl_tj_2022.PER_CAPITA_CONSUMPTION - pl_tj_2021.PER_CAPITA_CONSUMPTION
  ) AS 数据增长
FROM
  people_life_tj pl_tj_2021
  JOIN people_life_tj pl_tj_2022 ON pl_tj_2021.CITY = pl_tj_2022.CITY
WHERE
  pl_tj_2021.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      people_life_tj
    WHERE
      YEAR < '2022'
  )
  AND pl_tj_2022.YEAR = '2022'
  AND (
    pl_tj_2022.PER_CAPITA_CONSUMPTION - pl_tj_2021.PER_CAPITA_CONSUMPTION
  ) > 0
  AND pl_tj_2021.AREA IS NULL
  AND pl_tj_2021.PROVINCE IS NOT NULL
  AND pl_tj_2021.CITY IS NOT NULL
  AND pl_tj_2021.PER_CAPITA_CONSUMPTION <> 0
  AND pl_tj_2022.AREA IS NULL
  AND pl_tj_2022.PROVINCE IS NOT NULL
  AND pl_tj_2022.CITY IS NOT NULL
  AND pl_tj_2022.PER_CAPITA_CONSUMPTION <> 0
ORDER BY
  数据增长 DESC
LIMIT
  3;
pred_sql: SELECT   pl_tj_2021.CITY AS 城市,   (     pl_tj_2022.PER_CAPITA_CONSUMPTION - pl_tj_2021.PER_CAPITA_CONSUMPTION   ) AS 数据增长 FROM   people_life_tj pl_tj_2021   JOIN people_life_tj pl_tj_2022 ON pl_tj_2021.CITY = pl_tj_2022.CITY WHERE   pl_tj_2021.YEAR = (     SELECT       MAX(YEAR)     FROM       people_life_tj     WHERE       YEAR < '2022'   )   AND pl_tj_2022.YEAR = '2022'   AND (     pl_tj_2022.PER_CAPITA_CONSUMPTION - pl_tj_2021.PER_CAPITA_CONSUMPTION   ) > 0   AND pl_tj_2021.AREA IS NULL   AND pl_tj_2021.PROVINCE IS NOT NULL   AND pl_tj_2021.CITY IS NOT NULL   AND pl_tj_2021.PER_CAPITA_CONSUMPTION <> 0   AND pl_tj_2022.AREA IS NULL   AND pl_tj_2022.PROVINCE IS NOT NULL   AND pl_tj_2022.CITY IS NOT NULL   AND pl_tj_2022.PER_CAPITA_CONSUMPTION <> 0 ORDER BY   数据增长 DESC LIMIT   3;
gold_sql: SELECT
  city AS 市,
  AREA AS 区,
  COUNT(*) AS POI数量
FROM
  poi
GROUP BY
  city,
  AREA
ORDER BY
  POI数量 DESC
limit
  3;
pred_sql: SELECT   city AS 市,   AREA AS 区,   COUNT(*) AS POI数量 FROM   poi GROUP BY   AREA,   city ORDER BY   POI数量 DESC LIMIT 3;
gold_sql: SELECT
  O_AIRPORT AS 启程机场,
  D_AIRPORT AS 到达机场,
  FLIGHTS AS 航班班次
FROM
  hk_hx
WHERE
  FLIGHTS = (
    SELECT
      MAX(FLIGHTS)
    FROM
      hk_hx
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          hk_hx
      )
  );
pred_sql: SELECT   D_AIRPORT AS 到达机场,   O_AIRPORT AS 启程机场,   FLIGHTS AS 航班班次 FROM   hk_hx WHERE   FLIGHTS = (     SELECT       MAX(FLIGHTS)     FROM       hk_hx     WHERE       `YEAR` = (         SELECT           MAX(`YEAR`)         FROM           hk_hx       )   );
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市`,
  `LUXZDCSMC` AS `终点城市`,
  MAX(`BANCZL`) AS `最大班次增长`
FROM
  `tl_kylx`
WHERE
  `GCRQ` = '2023-11-23'
GROUP BY
  `LUXQDCSMC`,
  `LUXZDCSMC`
ORDER BY
  `最大班次增长` DESC
LIMIT
  1;
pred_sql: SELECT   `LUXQDCSMC` AS `起点城市`,   `LUXZDCSMC` AS `终点城市`,   MAX(`BANCZL`) AS `最大班次增长` FROM   `tl_kylx` WHERE   `GCRQ` = '2023-11-23' GROUP BY   `LUXZDCSMC`,   `LUXQDCSMC` ORDER BY   `最大班次增长` DESC LIMIT   1;
gold_sql: SELECT
  `CARGO` AS `货物类型`,
  SUM(`VOLUME`) AS `总货运量`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `MONTH` = '11'
GROUP BY
  `CARGO`
ORDER BY
  `总货运量` DESC
LIMIT
  3;
pred_sql: SELECT   `CARGO` AS `货物类型`,   SUM(`VOLUME`) AS `总货运量` FROM   hd_nh_od WHERE   `YEAR` = '2020'   AND `MONTH` = '11' GROUP BY   `CARGO` ORDER BY   `总货运量` DESC LIMIT   3;
gold_sql: SELECT
  `YEAR`AS 日期,
  TLHY AS `铁路货运量`
FROM
  transportation_tj
WHERE
  `YEAR` BETWEEN '2019' AND '2024'
  AND PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   `YEAR` AS 日期,   TLHY AS `铁路货运量` FROM   transportation_tj WHERE   PROVINCE = '江苏省'   AND CITY = '南京市'   AND DISTRICT IS NULL   AND `YEAR` BETWEEN '2019' AND '2024';
gold_sql: SELECT
  LUD AS 路段,
  YONGDCHENGD AS 拥堵程度,
  YONGDCHANGD AS 拥堵长度,
  CHIXSJ AS 持续时间
FROM
  gsgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
  )
ORDER BY
  YONGDCHANGD DESC,
  CHIXSJ DESC
LIMIT
  5;
pred_sql: SELECT   LUD AS 路段,   YONGDCHENGD AS 拥堵程度,   YONGDCHANGD AS 拥堵长度,   CHIXSJ AS 持续时间 FROM   gsgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt   ) ORDER BY   拥堵长度 DESC,   持续时间 DESC LIMIT   5;
gold_sql: SELECT
  XINGZQH AS 城市编码,
  TOUSYWL AS 投诉业务量
FROM
  rxfwzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      rxfwzt
  )
ORDER BY
  TOUSYWL DESC
limit
  1;
pred_sql: SELECT   XINGZQH AS 城市编码,   TOUSYWL AS 投诉业务量 FROM   rxfwzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       rxfwzt   ) ORDER BY   TOUSYWL DESC LIMIT 1;
gold_sql: SELECT
  `CARGO` AS `货物类别`,
  SUM(`VOLUME`) AS `运输量`
FROM
  hd_nh_od
WHERE
  (`YEAR`, `MONTH`) = (
    SELECT
      `YEAR`,
      `MONTH`
    FROM
      hd_nh_od
    ORDER BY
      `YEAR` DESC,
      `MONTH` DESC
    LIMIT
      1
  )
GROUP BY
  `CARGO`
ORDER BY
  `运输量` DESC
LIMIT
  3;
pred_sql: SELECT   `CARGO` AS `货物类别`,   SUM(`VOLUME`) AS `运输量` FROM   hd_nh_od WHERE   (`YEAR`, `MONTH`) = (     SELECT       `YEAR`,       `MONTH`     FROM       hd_nh_od     ORDER BY       `YEAR` DESC,       `MONTH` DESC     LIMIT       1   ) GROUP BY   `CARGO` ORDER BY   `运输量` DESC LIMIT   3;
gold_sql: SELECT O_CITY AS `地区`, SUM(CHELL) AS `当日客流量`, (SELECT SUM(prev_day.CHELL) FROM gsgl_od_flow AS prev_day WHERE prev_day.GCRQ = (SELECT MAX(GCRQ) - INTERVAL 1 DAY FROM gsgl_od_flow) AND prev_day.CHELLX IN ('客一', '客二', '客三', '客四') AND prev_day.O_CITY = outer_query.O_CITY) AS `前一日客流量`, SUM(CHELL) - (SELECT SUM(prev_day.CHELL) FROM gsgl_od_flow AS prev_day WHERE prev_day.GCRQ = (SELECT MAX(GCRQ) - INTERVAL 1 DAY FROM gsgl_od_flow) AND prev_day.CHELLX IN ('客一', '客二', '客三', '客四') AND prev_day.O_CITY = outer_query.O_CITY) AS `客流量增长` FROM gsgl_od_flow AS outer_query WHERE outer_query.GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow) AND outer_query.CHELLX IN ('客一', '客二', '客三', '客四') GROUP BY O_CITY ORDER BY `客流量增长` DESC LIMIT 1;
pred_sql: SELECT O_CITY AS `地区`, SUM(CHELL) AS `当日客流量`, (SELECT SUM(prev_day.CHELL) FROM gsgl_od_flow AS prev_day WHERE prev_day.GCRQ = (SELECT MAX(GCRQ) - INTERVAL 1 DAY FROM gsgl_od_flow) AND prev_day.CHELLX IN ('客一', '客二', '客三', '客四') AND prev_day.O_CITY = outer_query.O_CITY) AS `前一日客流量`, SUM(CHELL) - (SELECT SUM(prev_day.CHELL) FROM gsgl_od_flow AS prev_day WHERE prev_day.GCRQ = (SELECT MAX(GCRQ) - INTERVAL 1 DAY FROM gsgl_od_flow) AND prev_day.CHELLX IN ('客一', '客二', '客三', '客四') AND prev_day.O_CITY = outer_query.O_CITY) AS `客流量增长` FROM gsgl_od_flow AS outer_query WHERE outer_query.GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow) AND outer_query.CHELLX IN ('客一', '客二', '客三', '客四') GROUP BY O_CITY ORDER BY `客流量增长` DESC LIMIT 1;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  YONGDCHANGD AS 拥堵长度,
  CHIXSJ AS 持续时间
FROM
  gsgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
  )
ORDER BY
  CHIXSJ DESC,
  YONGDCHANGD DESC
LIMIT
  5;
pred_sql: SELECT   ZHONGDZH AS 终点桩号,   LUD AS 路段,   QIDZH AS 起点桩号,   CHIXSJ AS 持续时间,   YONGDCHANGD AS 拥堵长度 FROM   gsgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt   ) ORDER BY   YONGDCHANGD DESC,   CHIXSJ DESC LIMIT   5;
gold_sql: SELECT
  HANGKSNMC AS 机场,
  JICHBZDL AS 准点率
FROM
  jc_yxzt
WHERE
  JICHBZDL = (
    SELECT
      MAX(JICHBZDL)
    FROM
      jc_yxzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          jc_yxzt
      )
  )
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      jc_yxzt
  );
pred_sql: SELECT   HANGKSNMC AS 机场,   JICHBZDL AS 准点率 FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       jc_yxzt   )   AND JICHBZDL = (     SELECT       MAX(JICHBZDL)     FROM       jc_yxzt     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           jc_yxzt       )   );
gold_sql: SELECT  
    (SELECT MAX(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') AS `最大班次`,  
    (SELECT `GCRQ` FROM `r_tlbc_z` WHERE `ZBC` = (SELECT MAX(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') LIMIT 1) AS `最大班次对应日期`,  
    (SELECT MIN(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') AS `最小班次`,  
    (SELECT `GCRQ` FROM `r_tlbc_z` WHERE `ZBC` = (SELECT MIN(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') LIMIT 1) AS `最小班次对应日期`  
FROM  
    DUAL;
pred_sql: SELECT       (SELECT MAX(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') AS `最大班次`,       (SELECT `GCRQ` FROM `r_tlbc_z` WHERE `ZBC` = (SELECT MAX(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') LIMIT 1) AS `最大班次对应日期`,       (SELECT MIN(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') AS `最小班次`,       (SELECT `GCRQ` FROM `r_tlbc_z` WHERE `ZBC` = (SELECT MIN(`ZBC`) FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30') LIMIT 1) AS `最小班次对应日期`   FROM       DUAL;
gold_sql: SELECT    COUNT(*) AS '拥堵路段数量',    MAX(CHIXSJ) AS '最长拥堵时间（分钟）',    MAX(YONGDCHANGD) AS '最长拥堵长度（米）'  FROM    gsgl_ldydzt  WHERE    GCRQ = (SELECT MAX(GCRQ) FROM gsgl_ldydzt)  ;
pred_sql: SELECT    COUNT(*) AS '拥堵路段数量',    MAX(CHIXSJ) AS '最长拥堵时间（分钟）',    MAX(YONGDCHANGD) AS '最长拥堵长度（米）'  FROM    gsgl_ldydzt  WHERE    GCRQ = (SELECT MAX(GCRQ) FROM gsgl_ldydzt)  ;
gold_sql: SELECT `D_CITY` AS `城市`, SUM(`PASSENGER`) AS `客运量（人/月）`  FROM tl_od  WHERE `YEAR` = '2018' AND `D_PROVINCE` = '江苏省' GROUP BY `D_CITY`  ORDER BY SUM(`PASSENGER`) DESC  LIMIT 3;
pred_sql: SELECT `D_CITY` AS `城市`, SUM(`PASSENGER`) AS `客运量（人/月）` FROM tl_od WHERE `YEAR` = '2018' AND `D_PROVINCE` = '江苏省' GROUP BY `D_CITY` ORDER BY `客运量（人/月）` DESC LIMIT 3;
gold_sql: SELECT ROUND(SUM(`VOLUME`) / COUNT(DISTINCT CONCAT(`YEAR`, `MONTH`)) / 30, 2) AS `平均日运输量` FROM hd_nh_od WHERE `YEAR` = '2020';
pred_sql: SELECT ROUND(SUM(`VOLUME`) / (COUNT(DISTINCT `YEAR`, `MONTH`) * 30), 2) AS `平均日运输量` FROM hd_nh_od WHERE `YEAR` = '2020';
gold_sql: SELECT  
    `DMMC` AS `货车增长最快的高速断面称`,  
    MAX(`货车断面日增长量`) AS `最大日增长量`  
FROM (  
    SELECT  
        `DUANMMC` AS `DMMC`,  
        `GCRQ`,  
        `HUOCZLL`,  
        (`HUOCZLL` - LAG(`HUOCZLL`, 1, `HUOCZLL`) OVER (PARTITION BY `DUANMMC` ORDER BY `GCRQ`)) AS `货车断面日增长量`  
    FROM (  
        SELECT  
            `GCRQ`,  
            `DUANMMC`,  
            MAX(`HUOCZLL`) AS `HUOCZLL`  
        FROM gsgl_dmyxzt  
        WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30'  
        GROUP BY `GCRQ`, `DUANMMC`  
    ) AS daily_max  
    WHERE `DUANMMC` IS NOT NULL  
) AS subquery  
WHERE  
    `货车断面日增长量` IS NOT NULL  
    AND `货车断面日增长量` > 0  
GROUP BY  
    `DMMC` 
ORDER BY  
    MAX(`货车断面日增长量`) DESC  
LIMIT 1;
pred_sql: SELECT       `DMMC` AS `货车增长最快的高速断面称`,       MAX(`货车断面日增长量`) AS `最大日增长量`   FROM (       SELECT           `DUANMMC` AS `DMMC`,           `GCRQ`,           `HUOCZLL`,           (`HUOCZLL` - LAG(`HUOCZLL`, 1, `HUOCZLL`) OVER (PARTITION BY `DUANMMC` ORDER BY `GCRQ`)) AS `货车断面日增长量`       FROM (           SELECT               `GCRQ`,               `DUANMMC`,               MAX(`HUOCZLL`) AS `HUOCZLL`           FROM gsgl_dmyxzt           WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30'           GROUP BY `GCRQ`, `DUANMMC`       ) AS daily_max       WHERE `DUANMMC` IS NOT NULL   ) AS subquery   WHERE       `货车断面日增长量` IS NOT NULL       AND `货车断面日增长量` > 0   GROUP BY       `DMMC`  ORDER BY       MAX(`货车断面日增长量`) DESC   LIMIT 1;
gold_sql: SELECT
  LONGITUDE AS 经度,
  LATITUDE AS 纬度,
  STAY_NUM AS 总量
FROM
  hy_tzd
WHERE
  STAY_NUM > 10000
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hy_tzd
  );
pred_sql: SELECT   LATITUDE AS 纬度,   LONGITUDE AS 经度,   STAY_NUM AS 总量 FROM   hy_tzd WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       hy_tzd   )   AND STAY_NUM > 10000;
gold_sql: SELECT  
    GCRQ AS `观测日期`, 
    O_CITY AS `起点城市`,  
    O_DISTRICTS AS `起点地区`,  
    SUM(CHELL) * 1.5 AS `OD出行总量`  
FROM  
    gsgl_od_flow  
WHERE  
    GCRQ ='2023-11-19'  
    AND O_DISTRICTS IS NOT NULL  
GROUP BY  
    GCRQ,
    O_CITY,  
    O_DISTRICTS  
HAVING  
    SUM(CHELL) * 1.5 > 100000; 
pred_sql: SELECT       GCRQ AS `观测日期`,      O_CITY AS `起点城市`,       O_DISTRICTS AS `起点地区`,       SUM(CHELL) * 1.5 AS `OD出行总量`   FROM       gsgl_od_flow   WHERE       GCRQ ='2023-11-19'       AND O_DISTRICTS IS NOT NULL   GROUP BY       O_CITY,       O_DISTRICTS,     GCRQ   HAVING       `OD出行总量` > 100000;
gold_sql: SELECT
  `CITY` AS 市
FROM
  rk_tj
WHERE
  `CZ_RK` > 1000
  AND DISTRICT IS NULL
  AND CITY IS NOT NULL
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      rk_tj
  )
GROUP BY
  `CITY`;
pred_sql: SELECT DISTINCT `CITY` AS 市 FROM rk_tj WHERE `CZ_RK` > 1000   AND DISTRICT IS NULL   AND CITY IS NOT NULL   AND `YEAR` = (     SELECT MAX(`YEAR`) FROM rk_tj   );
gold_sql: SELECT
  CM.CITY AS 市,
  GROWTH AS 话务增长
FROM
  (
    SELECT
      A.XINGZQH,
      (B.TOTAL - A.TOTAL) AS GROWTH
    FROM
      (
        SELECT
          XINGZQH,
          (REXHWL + ZIXYWL + TOUSYWL) AS TOTAL
        FROM
          rxfwzt
        WHERE
          GCRQ = (
            SELECT
              MAX(GCRQ)
            FROM
              rxfwzt
          )
      ) A
      INNER JOIN (
        SELECT
          XINGZQH,
          (REXHWL + ZIXYWL + TOUSYWL) AS TOTAL
        FROM
          rxfwzt
        WHERE
          GCRQ = (
            SELECT
              MAX(GCRQ)
            FROM
              rxfwzt
            WHERE
              GCRQ < (
                SELECT
                  MAX(GCRQ)
                FROM
                  rxfwzt
              )
          )
      ) B ON A.XINGZQH = B.XINGZQH
  ) C
  INNER JOIN (
    SELECT
      '320100' AS XZQH_CODE,
      '南京市' AS CITY
    UNION
    SELECT
      '320200',
      '无锡市'
    UNION
    SELECT
      '320300',
      '徐州市'
    UNION
    SELECT
      '320400',
      '常州市'
    UNION
    SELECT
      '320500',
      '苏州市'
    UNION
    SELECT
      '320600',
      '南通市'
    UNION
    SELECT
      '320700',
      '连云港市'
    UNION
    SELECT
      '320800',
      '淮安市'
    UNION
    SELECT
      '320900',
      '盐城市'
    UNION
    SELECT
      '321000',
      '扬州市'
    UNION
    SELECT
      '321100',
      '镇江市'
    UNION
    SELECT
      '321200',
      '泰州市'
    UNION
    SELECT
      '321300',
      '宿迁市'
  ) CM ON C.XINGZQH = CM.XZQH_CODE
ORDER BY
  GROWTH DESC
LIMIT
  5;
pred_sql: SELECT   CM.CITY AS 市,   GROWTH AS 话务增长 FROM   (     SELECT       A.XINGZQH,       (B.TOTAL - A.TOTAL) AS GROWTH     FROM       (         SELECT           XINGZQH,           (REXHWL + ZIXYWL + TOUSYWL) AS TOTAL         FROM           rxfwzt         WHERE           GCRQ = (             SELECT               MAX(GCRQ)             FROM               rxfwzt           )       ) A       INNER JOIN (         SELECT           XINGZQH,           (REXHWL + ZIXYWL + TOUSYWL) AS TOTAL         FROM           rxfwzt         WHERE           GCRQ = (             SELECT               MAX(GCRQ)             FROM               rxfwzt             WHERE               GCRQ < (                 SELECT                   MAX(GCRQ)                 FROM                   rxfwzt               )           )       ) B ON A.XINGZQH = B.XINGZQH   ) C   INNER JOIN (     SELECT       '320100' AS XZQH_CODE,       '南京市' AS CITY     UNION ALL     SELECT       '320200',       '无锡市'     UNION ALL     SELECT       '320300',       '徐州市'     UNION ALL     SELECT       '320400',       '常州市'     UNION ALL     SELECT       '320500',       '苏州市'     UNION ALL     SELECT       '320600',       '南通市'     UNION ALL     SELECT       '320700',       '连云港市'     UNION ALL     SELECT       '320800',       '淮安市'     UNION ALL     SELECT       '320900',       '盐城市'     UNION ALL     SELECT       '321000',       '扬州市'     UNION ALL     SELECT       '321100',       '镇江市'     UNION ALL     SELECT       '321200',       '泰州市'     UNION ALL     SELECT       '321300',       '宿迁市'   ) CM ON C.XINGZQH = CM.XZQH_CODE ORDER BY   GROWTH DESC LIMIT 5;
gold_sql: SELECT      AVG(`HUOCZLL`) AS `货车日均断面量` FROM      gsgl_dmyxzt WHERE      `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
pred_sql: SELECT      AVG(HUOCZLL) AS 货车日均断面量 FROM      gsgl_dmyxzt WHERE      GCRQ >= '2023-11-01' AND GCRQ <= '2023-11-30';
gold_sql: SELECT
  current.O_CITY AS `出发城市`,
  current.D_CITY AS `到达城市`,
  (current.CHELL - previous.CHELL) / previous.CHELL * 100 AS `环比增长率`
FROM
  (
    SELECT
      O_CITY,
      D_CITY,
      SUM(CHELL) AS CHELL
    FROM
      gsgl_od_flow
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_od_flow
      )
    GROUP BY
      O_CITY,
      D_CITY
  ) AS current
  JOIN (
    SELECT
      O_CITY,
      D_CITY,
      SUM(CHELL) AS CHELL
    FROM
      gsgl_od_flow
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_od_flow
        WHERE
          GCRQ < (
            SELECT
              MAX(GCRQ)
            FROM
              gsgl_od_flow
          )
      )
    GROUP BY
      O_CITY,
      D_CITY
  ) AS previous ON current.O_CITY = previous.O_CITY
  AND current.D_CITY = previous.D_CITY
WHERE
  (current.CHELL - previous.CHELL) / previous.CHELL > 0.1;
pred_sql: SELECT   current.O_CITY AS `出发城市`,   current.D_CITY AS `到达城市`,   (current.CHELL - previous.CHELL) / previous.CHELL * 100 AS `环比增长率` FROM   (     SELECT       O_CITY,       D_CITY,       SUM(CHELL) AS CHELL     FROM       gsgl_od_flow     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           gsgl_od_flow       )     GROUP BY       O_CITY,       D_CITY   ) AS current   INNER JOIN (     SELECT       O_CITY,       D_CITY,       SUM(CHELL) AS CHELL     FROM       gsgl_od_flow     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           gsgl_od_flow         WHERE           GCRQ < (             SELECT               MAX(GCRQ)             FROM               gsgl_od_flow           )       )     GROUP BY       O_CITY,       D_CITY   ) AS previous ON current.O_CITY = previous.O_CITY   AND current.D_CITY = previous.D_CITY WHERE   (current.CHELL - previous.CHELL) / previous.CHELL > 0.1;
gold_sql: SELECT   
    A.MONTH +1 AS `月份`,  
    IF(B.VOLUME IS NULL, NULL, (A.VOLUME - B.VOLUME) / B.VOLUME * 100) AS `客运量月环比增长率`  
FROM   
    (SELECT   
         MONTH,  
         SUM(COACH_UP + COACH_DOWN) AS VOLUME  
     FROM   
         ptgl_gczypjl  
     WHERE   
         `YEAR` = '2,018'  
     GROUP BY   
         MONTH) A  
LEFT JOIN   
    (SELECT   
         MONTH - 1 AS MONTH, 
         SUM(COACH_UP + COACH_DOWN) AS VOLUME  
     FROM   
         ptgl_gczypjl  
     WHERE   
         `YEAR` = '2,018'  
     AND   
         MONTH > 1   
     GROUP BY   
         MONTH - 1) B 
ON   
    A.MONTH = B.MONTH 
WHERE A.MONTH <12
ORDER BY   
    A.MONTH;
pred_sql: SELECT        A.MONTH + 1 AS `月份`,       IF(B.VOLUME IS NULL, NULL, (A.VOLUME - B.VOLUME) / B.VOLUME * 100) AS `客运量月环比增长率`   FROM        (SELECT             MONTH,            SUM(COACH_UP + COACH_DOWN) AS VOLUME        FROM             ptgl_gczypjl        WHERE             `YEAR` = '2,018'        GROUP BY             MONTH) A   LEFT JOIN        (SELECT             MONTH - 1 AS MONTH,           SUM(COACH_UP + COACH_DOWN) AS VOLUME        FROM             ptgl_gczypjl        WHERE             `YEAR` = '2,018'        AND             MONTH > 1         GROUP BY             MONTH - 1) B  ON        A.MONTH = B.MONTH  WHERE A.MONTH < 12 ORDER BY        A.MONTH;
gold_sql: SELECT
  COUNT(DISTINCT LUD) AS 交通流量超过了设计通行能力的高速公路断面数量
FROM
  gsgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
  );
pred_sql: SELECT   COUNT(DISTINCT LUD) AS 交通流量超过了设计通行能力的高速公路断面数量 FROM   gsgl_ldydzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt   );
gold_sql: SELECT
  `ROAD_NAME`AS 道路名称,
  `ROAD_TYPE` AS 道路类别,
  AVG(`LOAD`) as `日均运输量`
FROM
  hy_dmll
GROUP BY
  `ROAD_NAME`,
  `ROAD_TYPE`
order by
  AVG(`LOAD`) DESC
LIMIT
  5;
pred_sql: SELECT   `ROAD_TYPE` AS 道路类别,   `ROAD_NAME` AS 道路名称,   AVG(`LOAD`) AS `日均运输量` FROM   hy_dmll WHERE   `LOAD` > 12000 GROUP BY   `ROAD_TYPE`,   `ROAD_NAME` ORDER BY   `日均运输量` DESC LIMIT   5;
gold_sql: SELECT
  CITY AS 市,
  COUNT(*) AS POI数据中交通设施类型的数量
FROM
  poi
WHERE
  L_TYPE = '交通设施'
GROUP BY
  CITY
ORDER BY
  POI数据中交通设施类型的数量 DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS 市,   COUNT(*) AS POI数据中交通设施类型的数量 FROM   poi WHERE   L_TYPE = '交通设施' GROUP BY   CITY ORDER BY   COUNT(*) DESC LIMIT   1;
gold_sql: SELECT
  HANGKSNMC AS 机场,
  JICHBZDL AS 准点率
FROM
  jc_yxzt
ORDER BY
  CAST(JICHBZDL AS DECIMAL(10, 2)) DESC,
  HANGKSNMC ASC
limit
  3;
pred_sql: SELECT   HANGKSNMC AS 机场,   JICHBZDL AS 准点率 FROM   jc_yxzt ORDER BY   CAST(JICHBZDL AS DECIMAL(10, 2)) DESC,   HANGKSNMC ASC LIMIT 3;
gold_sql: SELECT
  current_data.YEAR AS 日期,
  current_data.PROVINCE AS 省,
  current_data.CITY AS 市,
  (
    (current_data.CKMY + current_data.JKMY) - (previous_data.CKMY + previous_data.JKMY)
  ) / NULLIF((previous_data.CKMY + previous_data.JKMY), 0) * 100 AS 货物进出口量同比增长量
FROM
  jckmy_tj current_data
  JOIN (
    SELECT
      *
    FROM
      jckmy_tj
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`) - 1
        FROM
          jckmy_tj
      )
  ) AS previous_data ON current_data.PROVINCE = previous_data.PROVINCE
  AND current_data.CITY = previous_data.CITY
  AND current_data.DISTRICT IS NULL
  AND previous_data.DISTRICT IS NULL
WHERE
  current_data.`YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      jckmy_tj
  )
ORDER BY
  货物进出口量同比增长量 DESC;
pred_sql: SELECT   current_data.YEAR AS 日期,   current_data.PROVINCE AS 省,   current_data.CITY AS 市,   (     (current_data.CKMY + current_data.JKMY) - (previous_data.CKMY + previous_data.JKMY)   ) / NULLIF((previous_data.CKMY + previous_data.JKMY), 0) * 100 AS 货物进出口量同比增长量 FROM   jckmy_tj AS current_data   JOIN (     SELECT       *     FROM       jckmy_tj     WHERE       `YEAR` = (         SELECT           MAX(`YEAR`) - 1         FROM           jckmy_tj       )   ) AS previous_data ON current_data.PROVINCE = previous_data.PROVINCE   AND current_data.CITY = previous_data.CITY   AND current_data.DISTRICT IS NULL   AND previous_data.DISTRICT IS NULL WHERE   current_data.`YEAR` = (     SELECT       MAX(`YEAR`)     FROM       jckmy_tj   ) ORDER BY   货物进出口量同比增长量 DESC;
gold_sql: SELECT
  LUD AS 路段,
  COUNT(DISTINCT GCRQ) AS `拥堵天数`,
  AVG(YONGDCHANGD) AS `平均拥堵长度`
FROM
  gsgl_ldydzt
GROUP BY
  LUD
ORDER BY
  `拥堵天数` DESC,
  `平均拥堵长度` DESC
LIMIT
  5;
pred_sql: SELECT   LUD AS 路段,   COUNT(DISTINCT GCRQ) AS `拥堵天数`,   AVG(YONGDCHANGD) AS `平均拥堵长度` FROM   gsgl_ldydzt GROUP BY   LUD ORDER BY   `拥堵天数` DESC,   `平均拥堵长度` DESC LIMIT   5;
gold_sql: SELECT
  `CITY` AS 市
FROM
  rk_tj
WHERE
  `CZ_RK` > 1000
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      rk_tj
  )
  AND CITY IS NOT NULL
GROUP BY
  `CITY`;
pred_sql: SELECT DISTINCT `CITY` AS 市 FROM rk_tj WHERE `CZ_RK` > 1000   AND `YEAR` = (SELECT MAX(`YEAR`) FROM rk_tj)   AND `CITY` IS NOT NULL;
gold_sql: SELECT  
    A.HANGKSNMC AS '机场名称',  
    A.ZONGBC AS '本期起降架次',  
    COALESCE(B.ZONGBC, 0) AS '上期起降架次',  
    CASE   
        WHEN B.ZONGBC = 0 THEN NULL  
        ELSE ((A.ZONGBC - B.ZONGBC) / B.ZONGBC * 100)  
    END AS '环比增长率'  
FROM (  
    SELECT   
        HANGKSNMC,  
        SUM(ZONGBC) AS ZONGBC,  
        GCRQ  
    FROM   
        jc_yxzt  
    WHERE GCRQ = (SELECT MAX(GCRQ) FROM jc_yxzt)  
    GROUP BY  GCRQ, HANGKSNMC  
) AS A  
LEFT JOIN (  
    SELECT   
        HANGKSNMC,  
        SUM(ZONGBC) AS ZONGBC,  
        GCRQ  
    FROM   
        jc_yxzt  
    WHERE GCRQ = DATE_SUB((SELECT MAX(GCRQ) FROM jc_yxzt), INTERVAL 1 DAY) 
    GROUP BY GCRQ, HANGKSNMC  
) AS B  
ON A.HANGKSNMC = B.HANGKSNMC
pred_sql: SELECT       A.HANGKSNMC AS '机场名称',       A.ZONGBC AS '本期起降架次',       COALESCE(B.ZONGBC, 0) AS '上期起降架次',       CASE            WHEN B.ZONGBC = 0 THEN NULL           ELSE ((A.ZONGBC - B.ZONGBC) / B.ZONGBC * 100)       END AS '环比增长率'   FROM (       SELECT            HANGKSNMC,           SUM(ZONGBC) AS ZONGBC,           GCRQ       FROM            jc_yxzt       WHERE GCRQ = (SELECT MAX(GCRQ) FROM jc_yxzt)       GROUP BY HANGKSNMC, GCRQ   ) AS A   LEFT JOIN (       SELECT            HANGKSNMC,           SUM(ZONGBC) AS ZONGBC,           GCRQ       FROM            jc_yxzt       WHERE GCRQ = DATE_SUB((SELECT MAX(GCRQ) FROM jc_yxzt), INTERVAL 1 DAY)      GROUP BY HANGKSNMC, GCRQ   ) AS B   ON A.HANGKSNMC = B.HANGKSNMC;
gold_sql: SELECT
  `LUXQDCSMC` AS 路线起点,
  `LUXZDCSMC` AS 路线终点,
  `BANCZL` AS 班次总计
FROM
  `tl_kylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kylx`
  )
ORDER BY
  `BANCZL` DESC
LIMIT
  3;
pred_sql: SELECT   `LUXZDCSMC` AS 路线终点,   `LUXQDCSMC` AS 路线起点,   `BANCZL` AS 班次总计 FROM   `tl_kylx` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_kylx`   ) ORDER BY   `BANCZL` DESC LIMIT   3;
gold_sql: SELECT
  CITY AS 市,
  AREA AS 区,
  COUNT(*) AS 餐饮娱乐场所的数量
FROM
  poi
WHERE
  L_TYPE IN ('餐饮美食', '休闲娱乐')
GROUP BY
  CITY,
  AREA
ORDER BY
  餐饮娱乐场所的数量 DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS 市,   AREA AS 区,   COUNT(*) AS 餐饮娱乐场所的数量 FROM   poi WHERE   L_TYPE IN ('餐饮美食', '休闲娱乐') GROUP BY   CITY,   AREA ORDER BY   餐饮娱乐场所的数量 DESC LIMIT   1;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  YONGDCHANGD AS 拥堵长度,
  CHIXSJ AS 持续时间
FROM
  ptgl_ldydzt
WHERE
  YONGDCHENGD = '严重拥堵'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_ldydzt
  )
ORDER BY
  YONGDCHANGD DESC,
  CHIXSJ DESC;
pred_sql: SELECT   LUD AS 路段,   QIDZH AS 起点桩号,   ZHONGDZH AS 终点桩号,   YONGDCHANGD AS 拥堵长度,   CHIXSJ AS 持续时间 FROM   ptgl_ldydzt WHERE   YONGDCHENGD = '严重拥堵'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       ptgl_ldydzt   ) ORDER BY   拥堵长度 DESC,   持续时间 DESC;
gold_sql: SELECT   
    O_CITY AS `起点城市`,  
    `跨城出行占比`  
FROM (  
    SELECT   
        O_CITY,  
        (SUM(CASE WHEN O_CITY != D_CITY THEN CHELL ELSE 0 END) / NULLIF(SUM(CHELL), 0)) * 100 AS `跨城出行占比`  
    FROM   
        gsgl_od_flow  
    WHERE   
        GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow)  
        AND O_CITY LIKE '%市'
    GROUP BY   
        O_CITY  
) AS subquery  
WHERE   
    `跨城出行占比` <30;
pred_sql: SELECT      `起点城市`,      `跨城出行占比`  FROM (      SELECT          O_CITY AS `起点城市`,          (SUM(CASE WHEN O_CITY != D_CITY THEN CHELL ELSE 0 END) / NULLIF(SUM(CHELL), 0)) * 100 AS `跨城出行占比`      FROM          gsgl_od_flow      WHERE          GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow)          AND O_CITY LIKE '%市'      GROUP BY          O_CITY  ) AS subquery  WHERE      `跨城出行占比` < 30;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  `跨城出行占比`
FROM
  (
    SELECT
      O_CITY,
      (
        SUM(
          CASE
            WHEN O_CITY != D_CITY THEN CHELL
            ELSE 0
          END
        ) / NULLIF(SUM(CHELL), 0)
      ) * 100 AS `跨城出行占比`
    FROM
      gsgl_od_flow
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_od_flow
      )
      AND O_CITY LIKE '%市'
    GROUP BY
      O_CITY
  ) AS subquery
WHERE
  `跨城出行占比` < 30;
pred_sql: SELECT   `起点城市`,   `跨城出行占比` FROM   (     SELECT       O_CITY AS `起点城市`,       (         SUM(           CASE             WHEN O_CITY != D_CITY THEN CHELL             ELSE 0           END         ) / NULLIF(SUM(CHELL), 0)       ) * 100 AS `跨城出行占比`     FROM       gsgl_od_flow     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           gsgl_od_flow       )       AND O_CITY LIKE '%市'     GROUP BY       O_CITY   ) AS subquery WHERE   `跨城出行占比` < 30;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  AVG(YONGDCHANGD) AS `平均拥堵长度`,
  AVG(CHIXSJ) AS `平均拥堵时长`
FROM
  gsgl_ldydzt
GROUP BY
  LUD,
  QIDZH,
  ZHONGDZH
ORDER BY
  `平均拥堵长度` DESC,
  `平均拥堵时长` DESC
LIMIT
  5;
pred_sql: SELECT   LUD AS 路段,   QIDZH AS 起点桩号,   ZHONGDZH AS 终点桩号,   AVG(YONGDCHANGD) AS `平均拥堵长度`,   AVG(CHIXSJ) AS `平均拥堵时长` FROM   gsgl_ldydzt GROUP BY   LUD,   QIDZH,   ZHONGDZH ORDER BY   `平均拥堵长度` DESC,   `平均拥堵时长` DESC LIMIT 5;
gold_sql: SELECT current.O_CITY AS `出发城市`, current.D_CITY AS `到达城市`, (current.CHELL_SUM - IFNULL(previous.totalCHELL, 0)) AS `OD量增长数`  FROM (     SELECT O_CITY, D_CITY, SUM(CHELL) AS CHELL_SUM      FROM gsgl_od_flow      WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow) AND O_CITY != D_CITY      GROUP BY O_CITY, D_CITY ) AS current  LEFT JOIN (     SELECT O_CITY, D_CITY, SUM(CHELL) AS totalCHELL      FROM gsgl_od_flow      WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow WHERE GCRQ < (SELECT MAX(GCRQ) FROM gsgl_od_flow)) AND O_CITY != D_CITY      GROUP BY O_CITY, D_CITY ) AS previous  ON current.O_CITY = previous.O_CITY AND current.D_CITY = previous.D_CITY  ORDER BY `OD量增长数` DESC  LIMIT 3;
pred_sql: SELECT current.O_CITY AS `出发城市`, current.D_CITY AS `到达城市`, (current.CHELL_SUM - COALESCE(previous.totalCHELL, 0)) AS `OD量增长数` FROM (     SELECT O_CITY, D_CITY, SUM(CHELL) AS CHELL_SUM     FROM gsgl_od_flow     WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow) AND O_CITY != D_CITY     GROUP BY O_CITY, D_CITY ) AS current LEFT JOIN (     SELECT O_CITY, D_CITY, SUM(CHELL) AS totalCHELL     FROM gsgl_od_flow     WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow WHERE GCRQ < (SELECT MAX(GCRQ) FROM gsgl_od_flow)) AND O_CITY != D_CITY     GROUP BY O_CITY, D_CITY ) AS previous ON current.O_CITY = previous.O_CITY AND current.D_CITY = previous.D_CITY ORDER BY `OD量增长数` DESC LIMIT 3;
gold_sql: SELECT MAX(GCRQ) AS 最新观测日期, AVG(PINGJYWSJ) AS 平均延误时间, MAX(PINGJYWSJ) AS '最大延误时间',MIN(PINGJYWSJ) AS '最小延误时间'  FROM jc_yxzt;
pred_sql: SELECT MAX(GCRQ) AS '最新观测日期', AVG(PINGJYWSJ) AS '平均延误时间', MAX(PINGJYWSJ) AS '最大延误时间', MIN(PINGJYWSJ) AS '最小延误时间' FROM jc_yxzt;
gold_sql: SELECT
  GKTT AS 南京市港口的货物吞吐量
FROM
  transportation_tj
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND DISTRICT IS NULL
ORDER BY
  `YEAR` DESC
LIMIT
  1;
pred_sql: SELECT   GKTT AS 南京市港口的货物吞吐量 FROM   transportation_tj WHERE   CITY = '南京市'   AND PROVINCE = '江苏省'   AND DISTRICT IS NULL ORDER BY   `YEAR` DESC LIMIT   1;
gold_sql: SELECT
  MAX(DRLLHB) AS `车流量环比增长率最大值`,
  MIN(DRLLHB) AS `车流量环比增长率最小值`
FROM
  r_gsgl_z;
pred_sql: SELECT   MIN(DRLLHB) AS `车流量环比增长率最小值`,   MAX(DRLLHB) AS `车流量环比增长率最大值` FROM   r_gsgl_z;
gold_sql: SELECT
  CITY AS 市,
  COUNT(*) AS 旅游景点数量
FROM
  poi
WHERE
  L_TYPE LIKE '%旅游%'
GROUP BY
  CITY
ORDER BY
  旅游景点数量 DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS 市,   COUNT(*) AS 旅游景点数量 FROM   poi WHERE   L_TYPE LIKE '%旅游%' GROUP BY   CITY ORDER BY   2 DESC LIMIT   1;
gold_sql: SELECT GSHYL AS '最新高速公路货运量', DRHYLHB AS '环比增长率'  FROM r_gsgl_z  WHERE GCRQ = (SELECT MAX(GCRQ) FROM r_gsgl_z);
pred_sql: SELECT DRHYLHB AS '环比增长率', GSHYL AS '最新高速公路货运量' FROM r_gsgl_z WHERE GCRQ = (SELECT MAX(GCRQ) FROM r_gsgl_z);
gold_sql: SELECT *  
FROM (  
    SELECT  
        `GSMC` AS `高速公路名称`,  
        `DUANMMC` AS `断面名称`,  
        (`ZONGCLL_SUM` - LAG(`ZONGCLL_SUM`, 1, NULL) OVER (PARTITION BY `GSMC`, `DUANMMC` ORDER BY `GCRQ`)) AS `交通流量增长量`  
    FROM (  
        SELECT  
            `GCRQ`,  
            `GSMC`,  
            `DUANMMC`,  
            SUM(`ZONGCLL`) AS `ZONGCLL_SUM`  
        FROM  
            GSGL_DMYXZT  
        WHERE  
            `GCRQ` IN ('2023-11-22', '2023-11-23')  
        GROUP BY  
            `DUANMMC`, `GCRQ`, `GSMC`  
    ) AS traffic_flow  
) AS filtered_flow  
WHERE `交通流量增长量` IS NOT NULL
ORDER BY  
    `交通流量增长量` DESC    
LIMIT 1;
pred_sql: SELECT       `GSMC` AS `高速公路名称`,       `DUANMMC` AS `断面名称`,       (`ZONGCLL_SUM` - LAG(`ZONGCLL_SUM`, 1, NULL) OVER (PARTITION BY `GSMC`, `DUANMMC` ORDER BY `GCRQ`)) AS `交通流量增长量`   FROM (       SELECT           `GCRQ`,           `GSMC`,           `DUANMMC`,           SUM(`ZONGCLL`) AS `ZONGCLL_SUM`       FROM           GSGL_DMYXZT       WHERE           `GCRQ` IN ('2023-11-22', '2023-11-23')       GROUP BY           `DUANMMC`, `GCRQ`, `GSMC`   ) AS traffic_flow   WHERE `交通流量增长量` IS NOT NULL ORDER BY       `交通流量增长量` DESC     LIMIT 1;
gold_sql: SELECT
  AVG(CAST(JICHBZDL AS DECIMAL(10, 2))) AS 平均准点率
FROM
  jc_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      jc_yxzt
  );
pred_sql: SELECT   AVG(CAST(JICHBZDL AS DECIMAL(10, 2))) AS 平均准点率 FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       jc_yxzt   );
gold_sql: SELECT   
    subquery.O_CITY AS `出发城市`,   
    subquery.D_CITY AS `到达城市`,   
    ROUND(subquery.货车数量 / subquery.总数量 * 100, 2) AS `货车占比（百分比）`  
FROM   
    (  
        SELECT   
            O_CITY,   
            D_CITY,   
            SUM(CASE WHEN CHELLX LIKE '货%' THEN CHELL ELSE 0 END) AS `货车数量`,   
            SUM(CHELL) AS `总数量`   
        FROM   
            gsgl_od_flow   
        WHERE   
            GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow)  
      		and O_CITY LIKE '%市' AND O_CITY != '上海市'
            and D_CITY LIKE '%市' AND D_CITY != '上海市'
        GROUP BY   
            O_CITY,   
            D_CITY   
        HAVING   
            `货车数量` > 0 AND   
            `总数量` > 0 AND   
            `货车数量` > (`总数量` / 2)  
    ) AS subquery;
pred_sql: SELECT        subquery.O_CITY AS `出发城市`,        subquery.D_CITY AS `到达城市`,        ROUND(subquery.货车数量 / subquery.总数量 * 100, 2) AS `货车占比（百分比）`   FROM        (           SELECT                O_CITY,                D_CITY,                SUM(CASE WHEN CHELLX LIKE '货%' THEN CHELL ELSE 0 END) AS `货车数量`,                SUM(CHELL) AS `总数量`            FROM                gsgl_od_flow            WHERE                GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow)               AND O_CITY LIKE '%市' AND O_CITY != '上海市'             AND D_CITY LIKE '%市' AND D_CITY != '上海市'         GROUP BY                O_CITY,                D_CITY            HAVING                `货车数量` > 0 AND                `总数量` > 0 AND                `货车数量` > (`总数量` / 2)       ) AS subquery;
gold_sql: SELECT
  ROUND(GNLY * 1.0 / NULLIF(GJLY, 0), 2) AS `国内旅游与国外旅游比例`
FROM
  jckmy_tj
WHERE
  `YEAR` = 2022
  AND `CITY` = '南京市'
  AND `PROVINCE` = '江苏省'
  AND DISTRICT is null;
pred_sql: SELECT   ROUND(GJLY * 1.0 / NULLIF(GNLY, 0), 2) AS `国内旅游与国外旅游比例` FROM   jckmy_tj WHERE   YEAR = 2022   AND CITY = '南京市'   AND PROVINCE = '江苏省'   AND DISTRICT IS NULL;
gold_sql: SELECT AVG(YONGDCHANGD) AS `平均拥堵长度`, AVG(CHIXSJ) AS `平均拥堵时长`  FROM gsgl_ldydzt  WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_ldydzt);
pred_sql: SELECT AVG(YONGDCHANGD) AS `平均拥堵长度`, AVG(CHIXSJ) AS `平均拥堵时长` FROM gsgl_ldydzt WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_ldydzt);
gold_sql: SELECT
  CITY AS 市,
  COUNT(*) AS 教育机构数量
FROM
  poi
WHERE
  L_TYPE = '科教文化'
  AND M_TYPE IN (
    '幼儿园',
    '小学',
    '中学',
    '驾校',
    '培训单位',
    '高等教育',
    '职业技术教育',
    '成人教育'
  )
GROUP BY
  CITY
ORDER BY
  教育机构数量 DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS 市,   COUNT(*) AS 教育机构数量 FROM   poi WHERE   M_TYPE IN (     '幼儿园',     '小学',     '中学',     '驾校',     '培训单位',     '高等教育',     '职业技术教育',     '成人教育'   )   AND L_TYPE = '科教文化' GROUP BY   CITY ORDER BY   教育机构数量 DESC LIMIT   1;
gold_sql: SELECT MAX(total_CHELL) AS `客运量最大值`, MIN(total_CHELL) AS `客运量最小值` FROM (     SELECT GCRQ, SUM(CHELL) as total_CHELL     FROM gsgl_od_flow     WHERE O_PROVINCE = '江苏省' AND CHELLX LIKE '客%'     GROUP BY GCRQ ) AS subquery;
pred_sql: SELECT MIN(total_CHELL) AS `客运量最小值`, MAX(total_CHELL) AS `客运量最大值` FROM (     SELECT GCRQ, SUM(CHELL) as total_CHELL     FROM gsgl_od_flow     WHERE O_PROVINCE = '江苏省' AND CHELLX LIKE '客%'     GROUP BY GCRQ ) AS subquery;
gold_sql: SELECT     O_CITY AS `起点城市`,     (SUM(CASE WHEN CHELLX LIKE '客%' THEN CHELL ELSE 0 END) / SUM(CHELL)) * 100 AS `客车出行占比` FROM     gsgl_od_flow WHERE     GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow)     AND O_PROVINCE = '江苏省' AND O_CITY  LIKE '%市'GROUP BY     O_CITY ORDER BY     `客车出行占比` DESC LIMIT 1;
pred_sql: SELECT      O_CITY AS `起点城市`,      (SUM(CASE WHEN CHELLX LIKE '客%' THEN CHELL ELSE 0 END) / SUM(CHELL)) * 100 AS `客车出行占比`  FROM      gsgl_od_flow  WHERE      GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow)      AND O_PROVINCE = '江苏省'      AND O_CITY LIKE '%市' GROUP BY      O_CITY  ORDER BY      `客车出行占比` DESC  LIMIT 1;
gold_sql: SELECT    QIDZH AS `起点桩号`,    ZHONGDZH AS `终点桩号`,    YONGDCHENGD AS `拥堵状态`,    CHIXSJ AS `拥堵时长` FROM ptgl_ldydzt WHERE LUD = 'S331'    AND YONGDCHENGD = '严重拥堵'    AND GCRQ = (SELECT MAX(GCRQ) FROM ptgl_ldydzt) ORDER BY CHIXSJ DESC LIMIT 1;
pred_sql: SELECT    QIDZH AS `起点桩号`,    ZHONGDZH AS `终点桩号`,    YONGDCHENGD AS `拥堵状态`,    CHIXSJ AS `拥堵时长`  FROM ptgl_ldydzt  WHERE LUD = 'S331'    AND YONGDCHENGD = '严重拥堵'    AND GCRQ = (SELECT MAX(GCRQ) FROM ptgl_ldydzt)  ORDER BY CHIXSJ DESC LIMIT 1;
gold_sql: SELECT
  COUNT(DISTINCT CITY) AS `共有常住人口100万以上城市数量`
FROM
  RK_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      RK_TJ
  )
  AND CZ_RK > 100;
pred_sql: SELECT COUNT(DISTINCT CITY) AS `共有常住人口100万以上城市数量` FROM RK_TJ WHERE YEAR = (SELECT MAX(YEAR) FROM RK_TJ) AND CZ_RK > 100;
gold_sql: SELECT
  badminton_count AS 羽毛球数量,
  table_tennis_count AS 乒乓球数量,
  badminton_count / table_tennis_count AS 比例
FROM
  (
    SELECT
      (
        SELECT
          COUNT(*)
        FROM
          poi
        WHERE
          L_TYPE = '运动健身'
          AND CITY = '南京市'
          AND M_TYPE = '羽毛球'
      ) AS badminton_count,
      (
        SELECT
          COUNT(*)
        FROM
          poi
        WHERE
          L_TYPE = '运动健身'
          AND CITY = '南京市'
          AND M_TYPE = '乒乓球'
      ) AS table_tennis_count
  ) AS counts;
pred_sql: SELECT   badminton_count AS 羽毛球数量,   table_tennis_count AS 乒乓球数量,   badminton_count / table_tennis_count AS 比例 FROM   (     SELECT       COUNT(CASE WHEN M_TYPE = '羽毛球' THEN 1 END) AS badminton_count,       COUNT(CASE WHEN M_TYPE = '乒乓球' THEN 1 END) AS table_tennis_count     FROM       poi     WHERE       L_TYPE = '运动健身'       AND CITY = '南京市'   ) AS counts;
gold_sql: SELECT
  AREA AS `区域`,
  COUNT(*) AS `银行和投资理财类设施数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND M_TYPE IN ('银行', '投资理财')
GROUP BY
  AREA
ORDER BY
  `银行和投资理财类设施数量` DESC;
pred_sql: SELECT   AREA AS `区域`,   COUNT(*) AS `银行和投资理财类设施数量` FROM   poi WHERE   M_TYPE IN ('银行', '投资理财')   AND PROVINCE = '江苏省' GROUP BY   AREA ORDER BY   `银行和投资理财类设施数量` DESC;
gold_sql: SELECT
  `AREA` AS `区域`,
  SUM(
    CASE
      WHEN `M_TYPE` = '高星级酒店' THEN 1
      ELSE 0
    END
  ) AS `高星级酒店数量`,
  SUM(
    CASE
      WHEN `M_TYPE` = '经济型连锁酒店' THEN 1
      ELSE 0
    END
  ) AS `经济型连锁酒店数量`
FROM
  `poi`
WHERE
  `YEAR` = '2022'
  AND `CITY` = '南京市'
GROUP BY
  `AREA`;
pred_sql: SELECT   `AREA` AS `区域`,   SUM(CASE WHEN `M_TYPE` = '高星级酒店' THEN 1 ELSE 0 END) AS `高星级酒店数量`,   SUM(CASE WHEN `M_TYPE` = '经济型连锁酒店' THEN 1 ELSE 0 END) AS `经济型连锁酒店数量` FROM   `poi` WHERE   `CITY` = '南京市'   AND `YEAR` = '2022' GROUP BY   `AREA`;
gold_sql: SELECT
  AREA AS 区域,
  SUM(
    CASE
      WHEN M_TYPE = '蛋糕甜品店' THEN 1
      ELSE 0
    END
  ) AS 蛋糕甜品店,
  SUM(
    CASE
      WHEN M_TYPE = '咖啡' THEN 1
      ELSE 0
    END
  ) AS 咖啡店
FROM
  poi
WHERE
  L_TYPE = '餐饮美食'
  AND M_TYPE IN ('蛋糕甜品店', '咖啡')
  AND CITY = '南京市'
GROUP BY
  AREA
ORDER BY
  AREA;
pred_sql: SELECT   AREA AS 区域,   COUNT(CASE WHEN M_TYPE = '蛋糕甜品店' THEN 1 END) AS 蛋糕甜品店,   COUNT(CASE WHEN M_TYPE = '咖啡' THEN 1 END) AS 咖啡店 FROM   poi WHERE   L_TYPE = '餐饮美食'   AND M_TYPE IN ('蛋糕甜品店', '咖啡')   AND CITY = '南京市' GROUP BY   AREA ORDER BY   AREA;
gold_sql: SELECT
  (
    SELECT
      COUNT(*)
    FROM
      poi
    WHERE
      CITY = '南京市'
      AND (M_TYPE = '火车站')
      AND `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          poi
      )
  ) - (
    SELECT
      COUNT(*)
    FROM
      poi
    WHERE
      CITY = '南京市'
      AND (M_TYPE = '公交站')
      AND `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          poi
      )
  ) AS `数量差距`
pred_sql: SELECT      (SELECT COUNT(*) FROM poi WHERE CITY = '南京市' AND M_TYPE = '火车站' AND `YEAR` = (SELECT MAX(`YEAR`) FROM poi)) -      (SELECT COUNT(*) FROM poi WHERE CITY = '南京市' AND M_TYPE = '公交站' AND `YEAR` = (SELECT MAX(`YEAR`) FROM poi)) AS `数量差距`;
gold_sql: SELECT
  AREA AS `区域`,
  COUNT(*) AS `高等教育和科研单位数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND (
    M_TYPE = '高等教育'
    OR M_TYPE = '科研单位'
  )
GROUP BY
  AREA
ORDER BY
  `高等教育和科研单位数量` DESC;
pred_sql: SELECT   AREA AS `区域`,   COUNT(*) AS `高等教育和科研单位数量` FROM   poi WHERE   PROVINCE = '江苏省'   AND M_TYPE IN ('高等教育', '科研单位') GROUP BY   AREA ORDER BY   `高等教育和科研单位数量` DESC;
gold_sql: SELECT
  CITY AS `城市`,
  M_TYPE AS `设施类型`,
  COUNT(*) AS `设施数量`
FROM
  poi
WHERE
  CITY IN ('南京市')
  AND M_TYPE IN ('充电站', '加气站')
GROUP BY
  CITY,
  M_TYPE
pred_sql: SELECT   M_TYPE AS `设施类型`,   CITY AS `城市`,   COUNT(*) AS `设施数量` FROM   poi WHERE   M_TYPE IN ('充电站', '加气站')   AND CITY = '南京市' GROUP BY   M_TYPE,   CITY;
gold_sql: SELECT
  YEAR AS 年份,
  M_TYPE AS 场所,
  COUNT(*) AS 数量
FROM
  poi
WHERE
  L_TYPE = '休闲娱乐'
  AND M_TYPE IN ('电影院', '剧场')
  AND CITY = '南京市'
  AND YEAR IN (2022, 2023)
GROUP BY
  YEAR,
  M_TYPE
ORDER BY
  YEAR,
  M_TYPE;
pred_sql: SELECT   YEAR AS 年份,   M_TYPE AS 场所,   COUNT(*) AS 数量 FROM   poi WHERE   CITY = '南京市'   AND L_TYPE = '休闲娱乐'   AND M_TYPE IN ('电影院', '剧场')   AND YEAR IN (2022, 2023) GROUP BY   M_TYPE,   YEAR ORDER BY   场所,   年份;
gold_sql: SELECT
  AREA AS 地区,
  SUM(
    CASE
      WHEN L_TYPE = '购物消费'
      AND M_TYPE = '百货商场' THEN 1
      ELSE 0
    END
  ) AS 百货商场,
  SUM(
    CASE
      WHEN L_TYPE = '购物消费'
      AND M_TYPE = '便利店' THEN 1
      ELSE 0
    END
  ) AS 便利店,
  SUM(
    CASE
      WHEN L_TYPE = '购物消费'
      AND (
        M_TYPE = '百货商场'
        OR M_TYPE = '便利店'
      ) THEN 1
      ELSE 0
    END
  ) AS 总计
FROM
  poi
WHERE
  CITY = '南京市'
  AND (
    M_TYPE = '百货商场'
    OR M_TYPE = '便利店'
  )
GROUP BY
  地区
ORDER BY
  总计 DESC
LIMIT
  1;
pred_sql: SELECT   AREA AS 地区,   SUM(CASE WHEN L_TYPE = '购物消费' AND M_TYPE = '百货商场' THEN 1 ELSE 0 END) AS 百货商场,   SUM(CASE WHEN L_TYPE = '购物消费' AND M_TYPE = '便利店' THEN 1 ELSE 0 END) AS 便利店,   SUM(CASE WHEN L_TYPE = '购物消费' AND (M_TYPE = '百货商场' OR M_TYPE = '便利店') THEN 1 ELSE 0 END) AS 总计 FROM   poi WHERE   CITY = '南京市'   AND M_TYPE IN ('百货商场', '便利店') GROUP BY   地区 ORDER BY   总计 DESC LIMIT   1;
gold_sql: SELECT
  `CITY` AS `城市`,
  COUNT(*) AS `设施数量`
FROM
  poi
WHERE
  `PROVINCE` = '江苏省'
  AND `L_TYPE` IN ('医药销售', '医疗保健')
GROUP BY
  `CITY`
ORDER BY
  `设施数量` DESC;
pred_sql: SELECT   `CITY` AS `城市`,   COUNT(*) AS `设施数量` FROM   poi WHERE   `L_TYPE` IN ('医药销售', '医疗保健')   AND `PROVINCE` = '江苏省' GROUP BY   `CITY` ORDER BY   `设施数量` DESC;
gold_sql: SELECT
  `AREA` AS `区域`,
  `M_TYPE` AS `类型`,
  COUNT(`id`) AS `设施数量`
FROM
  `poi`
WHERE
  `CITY` = '南京市'
  AND `M_TYPE` IN ('小吃快餐', '中国菜')
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `poi`
  )
GROUP BY
  `AREA`,
  `M_TYPE`
ORDER BY
  `设施数量` DESC;
pred_sql: SELECT   `AREA` AS `区域`,   `M_TYPE` AS `类型`,   COUNT(`id`) AS `设施数量` FROM   `poi` WHERE   `CITY` = '南京市'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `poi`   )   AND `M_TYPE` IN ('小吃快餐', '中国菜') GROUP BY   `M_TYPE`,   `AREA` ORDER BY   `设施数量` DESC;
gold_sql: SELECT
  `AREA` AS `区域`,
  COUNT(`id`) AS `设施数量`
FROM
  `poi`
WHERE
  `CITY` = '南京市'
  AND `YEAR` = '2022'
  AND `M_TYPE` IN ('汽车销售', '汽车维修', '汽车配件')
GROUP BY
  `AREA`
ORDER BY
  `设施数量` ASC
LIMIT
  1;
pred_sql: SELECT   `AREA` AS `区域`,   COUNT(`id`) AS `设施数量` FROM   `poi` WHERE   `YEAR` = '2022'   AND `CITY` = '南京市'   AND `M_TYPE` IN ('汽车销售', '汽车维修', '汽车配件') GROUP BY   `AREA` ORDER BY   `设施数量` ASC LIMIT   1;
gold_sql: SELECT
  `AREA` AS `区域`,
  SUM(
    CASE
      WHEN `M_TYPE` = '洗浴推拿' THEN 1
      ELSE 0
    END
  ) AS `洗浴推拿数量`,
  SUM(
    CASE
      WHEN `M_TYPE` = '洗衣' THEN 1
      ELSE 0
    END
  ) AS `洗衣数量`
FROM
  `poi`
WHERE
  `CITY` = '南京市'
GROUP BY
  `AREA`;
pred_sql: SELECT   `AREA` AS `区域`,   SUM(CASE WHEN `M_TYPE` = '洗浴推拿' THEN 1 ELSE 0 END) AS `洗浴推拿数量`,   SUM(CASE WHEN `M_TYPE` = '洗衣' THEN 1 ELSE 0 END) AS `洗衣数量` FROM   `poi` WHERE   `CITY` = '南京市' GROUP BY   `AREA`;
gold_sql: SELECT
  COUNT(*) AS `维护和更新频率`
FROM
  poi
WHERE
  `CITY` = '南京市'
  AND `M_TYPE` = '公厕'
  AND `YEAR` BETWEEN '2023-06-17' AND '2024-06-16';
pred_sql: SELECT   COUNT(*) AS `维护和更新频率` FROM   poi WHERE   `YEAR` BETWEEN '2023-06-17' AND '2024-06-16'   AND `CITY` = '南京市'   AND `M_TYPE` = '公厕';
gold_sql: SELECT
  `CITY` AS `城市`,
  COUNT(*) AS `数量（个）`
FROM
  `poi`
WHERE
  (
    `M_TYPE` = '纪念馆'
    OR `M_TYPE` = '世界遗产'
  )
  AND `PROVINCE` = '江苏省'
GROUP BY
  `CITY`
ORDER BY
  `数量（个）` DESC
LIMIT
  1;
pred_sql: SELECT   `CITY` AS `城市`,   COUNT(*) AS `数量（个）` FROM   `poi` WHERE   `PROVINCE` = '江苏省'   AND (     `M_TYPE` = '纪念馆'     OR `M_TYPE` = '世界遗产'   ) GROUP BY   `CITY` ORDER BY   `数量（个）` DESC LIMIT   1;
gold_sql: SELECT
  `AREA` AS '区域',
  COUNT(`id`) AS '红色旅游景点和博物馆数量'
FROM
  `poi`
WHERE
  `CITY` = '南京市'
  AND (
    `M_TYPE` = '红色旅游景点'
    OR `M_TYPE` = '博物馆'
  )
GROUP BY
  `AREA`
ORDER BY
  COUNT(`id`) DESC
pred_sql: SELECT   `AREA` AS '区域',   COUNT(`id`) AS '红色旅游景点和博物馆数量' FROM   `poi` WHERE   `CITY` = '南京市'   AND `M_TYPE` IN ('红色旅游景点', '博物馆') GROUP BY   `AREA` ORDER BY   '红色旅游景点和博物馆数量' DESC;
gold_sql: SELECT
  M_TYPE AS `中类`,
  COUNT(id) AS `新增数量`
FROM
  poi
WHERE
  `YEAR` = '2023'
  AND `CITY` = '南京'
  AND `M_TYPE` IN ('户外健身场所', '水上运动')
GROUP BY
  M_TYPE
pred_sql: SELECT   M_TYPE AS `中类`,   COUNT(id) AS `新增数量` FROM   poi WHERE   `CITY` = '南京'   AND `YEAR` = '2023'   AND M_TYPE IN ('水上运动', '户外健身场所') GROUP BY   M_TYPE;
gold_sql: SELECT
  AREA AS `区`,
  SUM(
    CASE
      WHEN M_TYPE = '篮球' THEN 1
      ELSE 0
    END
  ) AS `篮球场数量`,
  SUM(
    CASE
      WHEN M_TYPE = '网球' THEN 1
      ELSE 0
    END
  ) AS `网球场数量`
FROM
  poi
WHERE
  CITY = '南京市'
GROUP BY
  AREA;
pred_sql: SELECT   AREA AS `区`,   SUM(CASE WHEN M_TYPE = '篮球' THEN 1 ELSE 0 END) AS `篮球场数量`,   SUM(CASE WHEN M_TYPE = '网球' THEN 1 ELSE 0 END) AS `网球场数量` FROM   poi WHERE   CITY = '南京市' GROUP BY   AREA;
gold_sql: SELECT
  CITY AS `城市`,
  COUNT(NAME) AS `设施数量`,
  COUNT(DISTINCT AREA) AS `覆盖区域数`
FROM
  poi
WHERE
  m_TYPE IN ('影院', 'KTV')
  AND (
    CITY = '南京市'
    OR CITY != '南京市'
  )
GROUP BY
  CITY
ORDER BY
  城市;
pred_sql: SELECT   CITY AS `城市`,   COUNT(NAME) AS `设施数量`,   COUNT(DISTINCT AREA) AS `覆盖区域数` FROM   poi WHERE   m_TYPE IN ('影院', 'KTV')   AND CITY IN ('南京市', '其他城市') GROUP BY   CITY ORDER BY   `城市`;
gold_sql: SELECT
  AREA AS '区域',
  COUNT(*) AS '市场和商业街数量'
FROM
  poi
WHERE
  CITY = '南京市'
  AND (
    M_TYPE = '市场'
    OR M_TYPE = '商业街'
  )
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      poi
  )
GROUP BY
  AREA
ORDER BY
  COUNT(*) DESC;
pred_sql: SELECT   AREA AS '区域',   COUNT(*) AS '市场和商业街数量' FROM   poi WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       poi   )   AND CITY = '南京市'   AND M_TYPE IN ('市场', '商业街') GROUP BY   AREA ORDER BY   '市场和商业街数量' DESC;
gold_sql: SELECT
  CITY AS `城市`,
  COUNT(*) AS `教育设施数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND (
    M_TYPE = '小学'
    OR M_TYPE = '中学'
  )
GROUP BY
  CITY
ORDER BY
  COUNT(*) DESC;
pred_sql: SELECT   CITY AS `城市`,   COUNT(*) AS `教育设施数量` FROM   poi WHERE   PROVINCE = '江苏省'   AND M_TYPE IN ('小学', '中学') GROUP BY   CITY ORDER BY   `教育设施数量` DESC;
gold_sql: SELECT DISTINCT
  DISTINCT `NAME` AS `名称`,
  `LATITUDE` AS `经度`,
  `LONGITUDE` AS `纬度`,
  `PROVINCE` AS `省份`,
  `CITY` AS `城市`,
  `AREA` AS `区域`
FROM
  `poi`
WHERE
  `CITY` = '南京市'
  AND `L_TYPE` = '休闲娱乐'
  AND `M_TYPE` IN ('棋牌室', '茶座')
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `poi`
  );
pred_sql: SELECT DISTINCT   `NAME` AS `名称`,   `LATITUDE` AS `经度`,   `LONGITUDE` AS `纬度`,   `PROVINCE` AS `省份`,   `CITY` AS `城市`,   `AREA` AS `区域` FROM   `poi` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `poi`   )   AND `CITY` = '南京市'   AND `L_TYPE` = '休闲娱乐'   AND `M_TYPE` IN ('棋牌室', '茶座');
gold_sql: SELECT
  `AREA` AS `区域`,
  COUNT(
    CASE
      WHEN `M_TYPE` = '物流' THEN 1
      ELSE NULL
    END
  ) / COUNT(
    CASE
      WHEN `M_TYPE` = '邮局' THEN 1
      ELSE NULL
    END
  ) AS `物流与邮局比例`
FROM
  `poi`
WHERE
  `CITY` = '南京市'
GROUP BY
  `AREA`;
pred_sql: SELECT   `AREA` AS `区域`,   COUNT(CASE WHEN `M_TYPE` = '物流' THEN 1 ELSE NULL END) / COUNT(CASE WHEN `M_TYPE` = '邮局' THEN 1 ELSE NULL END) AS `物流与邮局比例` FROM   `poi` WHERE   `CITY` = '南京市' GROUP BY   `AREA`;
gold_sql: SELECT
  CITY AS `城市`,
  SUM(
    CASE
      WHEN M_TYPE IN ('加油站', '充电站') THEN 1
      ELSE 0
    END
  ) AS `数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
GROUP BY
  CITY
ORDER BY
  `数量` DESC;
pred_sql: SELECT   CITY AS `城市`,   COUNT(*) AS `数量` FROM   poi WHERE   PROVINCE = '江苏省' AND M_TYPE IN ('加油站', '充电站') GROUP BY   CITY ORDER BY   `数量` DESC;
gold_sql: SELECT
  M_TYPE AS '中类',
  COUNT(*) AS '数量'
FROM
  poi
WHERE
  CITY = '南京市'
  AND L_TYPE = '金融机构'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      poi
    WHERE
      CITY = '南京市'
  )
GROUP BY
  M_TYPE;
pred_sql: SELECT   M_TYPE AS '中类',   COUNT(*) AS '数量' FROM   poi WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       poi     WHERE       CITY = '南京市'   )   AND CITY = '南京市'   AND L_TYPE = '金融机构' GROUP BY   M_TYPE;
gold_sql: SELECT
  CITY AS '城市',
  SUM(
    CASE
      WHEN M_TYPE = '专科医院' THEN 1
      ELSE 0
    END
  ) AS '专科医院数量',
  SUM(
    CASE
      WHEN M_TYPE = '综合医院' THEN 1
      ELSE 0
    END
  ) AS '综合医院数量',
  COUNT(DISTINCT NAME) AS '覆盖范围'
FROM
  poi
GROUP BY
  CITY;
pred_sql: SELECT   CITY AS '城市',   SUM(CASE WHEN M_TYPE = '专科医院' THEN 1 ELSE 0 END) AS '专科医院数量',   SUM(CASE WHEN M_TYPE = '综合医院' THEN 1 ELSE 0 END) AS '综合医院数量',   COUNT(DISTINCT NAME) AS '覆盖范围' FROM   poi GROUP BY   CITY;
gold_sql: SELECT
  CITY AS `城市`,
  COUNT(*) AS `旅游景点和酒店数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND (
    L_TYPE = '旅游景点'
    OR L_TYPE = '酒店住宿'
  )
GROUP BY
  CITY
ORDER BY
  COUNT(*) DESC
pred_sql: SELECT   CITY AS `城市`,   COUNT(*) AS `旅游景点和酒店数量` FROM   poi WHERE   PROVINCE = '江苏省'   AND L_TYPE IN ('旅游景点', '酒店住宿') GROUP BY   CITY ORDER BY   `旅游景点和酒店数量` DESC;
gold_sql: SELECT
  COUNT(*) AS `公交站数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND AREA = '高淳区'
  AND M_TYPE = '公交站'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      poi
  );
pred_sql: SELECT COUNT(*) AS `公交站数量` FROM poi WHERE M_TYPE = '公交站'   AND PROVINCE = '江苏省'   AND CITY = '南京市'   AND AREA = '高淳区'   AND `YEAR` = (     SELECT MAX(`YEAR`) FROM poi   );
gold_sql: SELECT
  AREA AS '区域',
  COUNT(*) AS '生活服务设施数量'
FROM
  poi
WHERE
  CITY = '南京市'
  AND L_TYPE = '生活服务'
GROUP BY
  AREA
ORDER BY
  COUNT(*) DESC
LIMIT
  1;
pred_sql: SELECT   AREA AS '区域',   COUNT(*) AS '生活服务设施数量' FROM   poi WHERE   L_TYPE = '生活服务'   AND CITY = '南京市' GROUP BY   AREA ORDER BY   '生活服务设施数量' DESC LIMIT   1;
gold_sql: SELECT
  `M_TYPE` AS '中类',
  COUNT(*) AS '数量'
FROM
  `poi`
WHERE
  `YEAR` = '2022'
  AND `CITY` = '南京市'
  AND `AREA` = '六合区'
GROUP BY
  `M_TYPE`
ORDER BY
  COUNT(*) DESC
LIMIT
  1;
pred_sql: SELECT   `M_TYPE` AS '中类',   COUNT(*) AS '数量' FROM   `poi` WHERE   `CITY` = '南京市'   AND `AREA` = '六合区'   AND `YEAR` = '2022' GROUP BY   `M_TYPE` ORDER BY   '数量' DESC LIMIT   1;
gold_sql: SELECT
  L_TYPE AS `大类`,
  COUNT(*) AS `数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
GROUP BY
  L_TYPE
ORDER BY
  `数量` DESC
LIMIT
  1;
pred_sql: SELECT   L_TYPE AS `大类`,   COUNT(*) AS `数量` FROM   poi WHERE   PROVINCE = '江苏省' GROUP BY   L_TYPE ORDER BY   `数量` DESC LIMIT   1;
gold_sql: SELECT
  `L_TYPE` AS `大类`,
  COUNT(*) AS `数量`
FROM
  `poi`
WHERE
  `CITY` = '南京市'
GROUP BY
  `L_TYPE`;
pred_sql: SELECT   `L_TYPE` AS `大类`,   COUNT(*) AS `数量` FROM   `poi` WHERE   `CITY` = '南京市' GROUP BY   `L_TYPE`;
gold_sql: SELECT
  AREA AS '区域',
  COUNT(*) AS '交通设施数量'
FROM
  poi
WHERE
  `YEAR` = '2022'
  AND CITY = '南京市'
GROUP BY
  AREA
ORDER BY
  COUNT(*) DESC
LIMIT
  1;
pred_sql: SELECT   AREA AS '区域',   COUNT(*) AS '交通设施数量' FROM   poi WHERE   CITY = '南京市'   AND `YEAR` = '2022' GROUP BY   AREA ORDER BY   '交通设施数量' DESC LIMIT   1;
gold_sql: SELECT
  AREA AS '区域',
  COUNT(*) AS '家居建材类设施数量'
FROM
  poi
WHERE
  CITY = '南京市'
  AND M_TYPE = '家居建材'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      poi
    WHERE
      CITY = '南京市'
  )
GROUP BY
  AREA;
pred_sql: SELECT   AREA AS '区域',   COUNT(*) AS '家居建材类设施数量' FROM   poi WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       poi     WHERE       CITY = '南京市'   )   AND CITY = '南京市'   AND M_TYPE = '家居建材' GROUP BY   AREA;
gold_sql: SELECT
  AREA AS '区域',
  COUNT(*) AS '公交站数量'
FROM
  poi
WHERE
  AREA IN ('高淳区', '六合区')
  AND M_TYPE = '公交站'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      poi
    WHERE
      AREA IN ('高淳区', '六合区')
      AND M_TYPE = '公交站'
  )
GROUP BY
  AREA;
pred_sql: SELECT   AREA AS '区域',   COUNT(*) AS '公交站数量' FROM   poi WHERE   M_TYPE = '公交站'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       poi     WHERE       M_TYPE = '公交站'   )   AND AREA IN ('高淳区', '六合区') GROUP BY   AREA;
gold_sql: SELECT
  AREA AS 区域,
  COUNT(*) AS 商业活动次数
FROM
  poi
WHERE
  CITY = '南京市'
  AND YEAR BETWEEN '2023' AND '2024'
  AND L_TYPE = '商业'
GROUP BY
  AREA
ORDER BY
  商业活动次数 DESC;
pred_sql: SELECT   AREA AS 区域,   COUNT(*) AS 商业活动次数 FROM   poi WHERE   YEAR BETWEEN '2023' AND '2024'   AND CITY = '南京市'   AND L_TYPE = '商业' GROUP BY   AREA ORDER BY   商业活动次数 DESC;
gold_sql: SELECT
  AREA AS `区域`,
  L_TYPE AS `大类`,
  COUNT(*) AS `设施数量`
FROM
  poi
WHERE
  CITY = '南京市'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      poi
  )
GROUP BY
  AREA,
  L_TYPE;
pred_sql: SELECT   L_TYPE AS `大类`,   AREA AS `区域`,   COUNT(*) AS `设施数量` FROM   poi WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       poi   )   AND CITY = '南京市' GROUP BY   L_TYPE,   AREA;
gold_sql: SELECT
  AREA AS `区域`,
  COUNT(*) AS `公交站数量`
FROM
  poi
WHERE
  M_TYPE = '公交站'
  AND PROVINCE = '江苏省'
GROUP BY
  AREA
ORDER BY
  `公交站数量` DESC
LIMIT
  1;
pred_sql: SELECT   AREA AS `区域`,   COUNT(*) AS `公交站数量` FROM   poi WHERE   PROVINCE = '江苏省'   AND M_TYPE = '公交站' GROUP BY   AREA ORDER BY   `公交站数量` DESC LIMIT   1;
gold_sql: SELECT
  `M_TYPE` AS `中类`,
  COUNT(*) AS `频率`
FROM
  `poi`
WHERE
  `CITY` = '南京市'
  AND `AREA` = '高淳区'
  AND `L_TYPE` = '生活服务'
GROUP BY
  `中类`
ORDER BY
  `频率` DESC
LIMIT
  1;
pred_sql: SELECT   `M_TYPE` AS `中类`,   COUNT(*) AS `频率` FROM   `poi` WHERE   `AREA` = '高淳区'   AND `CITY` = '南京市'   AND `L_TYPE` = '生活服务' GROUP BY   `中类` ORDER BY   `频率` DESC LIMIT   1;
gold_sql: SELECT
  COUNT(*) AS `设施数量`
FROM
  poi
WHERE
  YEAR = '2022'
  AND CITY = '南京市'
  AND AREA = '江宁区'
  AND M_TYPE = '家居建材'
pred_sql: SELECT COUNT(*) AS `设施数量` FROM poi WHERE CITY = '南京市' AND AREA = '江宁区' AND M_TYPE = '家居建材' AND YEAR = '2022';
gold_sql: SELECT
  AREA AS '区域',
  COUNT(*) AS '交通设施数量'
FROM
  poi
WHERE
  CITY = '南京市'
  AND L_TYPE = '交通设施'
GROUP BY
  AREA
ORDER BY
  '交通设施数量' DESC
LIMIT
  1;
pred_sql: SELECT   AREA AS '区域',   COUNT(*) AS '交通设施数量' FROM   poi WHERE   L_TYPE = '交通设施'   AND CITY = '南京市' GROUP BY   AREA ORDER BY   '交通设施数量' DESC LIMIT   1;
gold_sql: SELECT
  CITY AS '城市',
  COUNT(*) AS '生活服务类设施数量'
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND YEAR = '2022'
  AND L_TYPE = '生活服务'
GROUP BY
  CITY
ORDER BY
  COUNT(*) DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '城市',   COUNT(*) AS '生活服务类设施数量' FROM   poi WHERE   YEAR = '2022'   AND PROVINCE = '江苏省'   AND L_TYPE = '生活服务' GROUP BY   CITY ORDER BY   '生活服务类设施数量' DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT `HANGDUANMC` AS `航段名称`,
  SUM(`DUANMHYZL`) AS `货运总量（万吨）`
FROM
  `hd_yxzt`
GROUP BY
  `HANGDUANMC`;
pred_sql: SELECT    `HANGDUANMC` AS `航段名称`,   SUM(`DUANMHYZL`) AS `货运总量（万吨）` FROM    `hd_yxzt` GROUP BY    `HANGDUANMC`;
gold_sql: SELECT DISTINCT
 DISTINCT `HANGDUANMC` AS `航段名称`
FROM
  hd_yxzt
WHERE
  `HANGDXZDJ` = '三级航道'
GROUP BY
  `HANGDUANMC`;
pred_sql: SELECT DISTINCT `HANGDUANMC` AS `航段名称` FROM hd_yxzt WHERE `HANGDXZDJ` = '三级航道' ORDER BY `HANGDUANMC`;
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  `HANGDUANMC` AS `航段名称`,
  `QIDMC` AS `起点名称`,
  `ZHONGDMC` AS `终点名称`,
  `HANGDXZDJ` AS `航道现状等级`,
  `ZUIDTHSS` AS `最低通航水深`,
  `HANGDZDSS` AS `航道最大水深`,
  `HANGDDK` AS `航道底宽`,
  `HANGDMK` AS `航道面宽`,
  `DUANMHYZL` AS `断面货运总量`
FROM
  hd_yxzt
WHERE
  `GCRQ` = '2023-11-18'
ORDER BY
  `HANGDMC`;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   `QIDMC` AS `起点名称`,   `ZHONGDMC` AS `终点名称`,   `HANGDXZDJ` AS `航道现状等级`,   `ZUIDTHSS` AS `最低通航水深`,   `HANGDZDSS` AS `航道最大水深`,   `HANGDDK` AS `航道底宽`,   `HANGDMK` AS `航道面宽`,   `DUANMHYZL` AS `断面货运总量`,   `HANGDMC` AS `航道名称` FROM   hd_yxzt WHERE   `GCRQ` = '2023-11-18' ORDER BY   `HANGDMC`;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`
FROM
  hd_yxzt
WHERE
  `ZUIDTHSS` = `HANGDZDSS`;
pred_sql: SELECT HANGDUANMC AS 航段名称 FROM hd_yxzt WHERE ZUIDTHSS = HANGDDZSS;
gold_sql: SELECT
  `HANGDDMMC` AS `航道断面名称`
FROM
  hd_yxzt
WHERE
  `HANGDDK` = 100;
pred_sql: SELECT   `HANGDDMMC` AS `航道断面名称` FROM   hd_yxzt WHERE   `HANGDDK` = 100;
gold_sql: SELECT
  `HANGDXZDJ` AS `航道现状等级`,
  COUNT(*) AS `航段数量`
FROM
  `hd_yxzt`
GROUP BY
  `HANGDXZDJ`;
pred_sql: SELECT   `HANGDXZDJ` AS `航道现状等级`,   COUNT(*) AS `航段数量` FROM   `hd_yxzt` GROUP BY   `HANGDXZDJ`;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  `HANGDMC` AS `航道名称`,
  `QIDMC` AS `起点名称`,
  `ZHONGDMC` AS `终点名称`,
  `GCRQ` AS `观测日期`,
  `HANGDXZDJ` AS `航道现状等级`,
  `ZUIDTHSS` AS `最低通航水深（米）`,
  `HANGDZDSS` AS `航道最大水深（米）`,
  `HANGDDK` AS `航道底宽（米）`,
  `HANGDMK` AS `航道面宽（米）`,
  `HANGDDMMC` AS `航道断面名称`,
  `DUANMHYZL` AS `货运总量（万吨）`
FROM
  `hd_yxzt`
WHERE
  `DUANMHYZL` > 50
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `hd_yxzt`
  );
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   `HANGDMC` AS `航道名称`,   `QIDMC` AS `起点名称`,   `ZHONGDMC` AS `终点名称`,   `GCRQ` AS `观测日期`,   `HANGDXZDJ` AS `航道现状等级`,   `ZUIDTHSS` AS `最低通航水深（米）`,   `HANGDZDSS` AS `航道最大水深（米）`,   `HANGDDK` AS `航道底宽（米）`,   `HANGDMK` AS `航道面宽（米）`,   `HANGDDMMC` AS `航道断面名称`,   `DUANMHYZL` AS `货运总量（万吨）` FROM   `hd_yxzt` WHERE   `DUANMHYZL` > 50   AND `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `hd_yxzt`   );
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  `QIDMC` AS `起点名称`,
  `ZHONGDMC` AS `终点名称`
FROM
  hd_yxzt
WHERE
  `HANGDXZDJ` = '五级航道';
pred_sql: SELECT   `QIDMC` AS `起点名称`,   `ZHONGDMC` AS `终点名称`,   `HANGDUANMC` AS `航段名称` FROM   hd_yxzt WHERE   `HANGDXZDJ` = '五级航道';
gold_sql: SELECT
  `HANGDDMMC` AS '航道断面名称',
  AVG(`DUANMHYZL`) AS '平均货运总量（万吨）'
FROM
  hd_yxzt
GROUP BY
  `HANGDDMMC`;
pred_sql: SELECT   `HANGDDMMC` AS '航道断面名称',   AVG(`DUANMHYZL`) AS '平均货运总量（万吨）' FROM   hd_yxzt GROUP BY   `HANGDDMMC`;
gold_sql: SELECT
  `HANGDUANMC` AS `航段`,
  `DUANMHYZL` AS `货运量`
FROM
  hd_yxzt
WHERE
  DATE(`GCRQ`) = '2023-11-16'
ORDER BY
  `DUANMHYZL` DESC
LIMIT
  5;
pred_sql: SELECT   `HANGDUANMC` AS `航段`,   `DUANMHYZL` AS `货运量` FROM   hd_yxzt WHERE   `GCRQ` = '2023-11-16' ORDER BY   `DUANMHYZL` DESC LIMIT   5;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  (MAX(`HANGDZDSS`) + MIN(`ZUIDTHSS`)) / 2 AS `水深平均值`
FROM
  hd_yxzt
GROUP BY
  `HANGDUANMC`;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   (MAX(`HANGDZDSS`) + MIN(`ZUIDTHSS`)) / 2 AS `水深平均值` FROM   hd_yxzt GROUP BY   `HANGDUANMC`;
gold_sql: SELECT
  `QIDMC` AS `起点名称`,
  COUNT(DISTINCT `HANGDUANMC`) AS `航段数量`
FROM
  `hd_yxzt`
GROUP BY
  `QIDMC`
ORDER BY
  `航段数量` DESC;
pred_sql: SELECT   `QIDMC` AS `起点名称`,   COUNT(DISTINCT `HANGDUANMC`) AS `航段数量` FROM   `hd_yxzt` GROUP BY   `QIDMC` ORDER BY   `航段数量` DESC;
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  `HANGDUANMC` AS `航段名称`,
  MAX(`HANGDZDSS`) AS `最大水深`,
  MIN(`HANGDZDSS`) AS `最低水深`
FROM
  hd_yxzt
WHERE
  `QIDMC` = '皂河船闸'
GROUP BY
  `HANGDMC`,
  `HANGDUANMC`;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   `HANGDMC` AS `航道名称`,   MIN(`HANGDZDSS`) AS `最低水深`,   MAX(`HANGDZDSS`) AS `最大水深` FROM   hd_yxzt WHERE   `QIDMC` = '皂河船闸' GROUP BY   `HANGDUANMC`,   `HANGDMC`;
gold_sql: SELECT
  `GCRQ` AS '观测日期',
  `HANGDMC` AS '航道名称',
  `HANGDXZDJ` AS '航道现状等级'
FROM
  hd_yxzt
WHERE
  `HANGDXZDJ` IN ('五级航道', '六级航道', '七级航道');
pred_sql: SELECT   `GCRQ` AS '观测日期',   `HANGDMC` AS '航道名称' FROM   hd_yxzt WHERE   `HANGDXZDJ` IN ('五级航道', '六级航道', '七级航道');
gold_sql: SELECT
  航段名称,
  总货运量
FROM
  (
    SELECT
      HANGDUANMC AS `航段名称`,
      SUM(DUANMHYZL) AS `总货运量`
    FROM
      hd_yxzt
    GROUP BY
      HANGDUANMC
  ) AS ranked_segments
ORDER BY
  `总货运量` DESC
LIMIT
  1;
pred_sql: SELECT   `航段名称`,   `总货运量` FROM   (     SELECT       HANGDUANMC AS `航段名称`,       SUM(DUANMHYZL) AS `总货运量`     FROM       hd_yxzt     GROUP BY       HANGDUANMC   ) AS ranked_segments ORDER BY   `总货运量` DESC LIMIT   1;
gold_sql: SELECT
  `HANGDMC` AS '航道名称',
  `HANGDUANMC` AS '航段名称',
  `GCRQ` AS '观测日期'
FROM
  hd_yxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      hd_yxzt
  )
ORDER BY
  `HANGDMC`;
pred_sql: SELECT   `HANGDUANMC` AS '航段名称',   `HANGDMC` AS '航道名称',   `GCRQ` AS '观测日期' FROM   hd_yxzt WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       hd_yxzt   ) ORDER BY   `HANGDMC`;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`
FROM
  `hd_yxzt`
WHERE
  `ZUIDTHSS` = `HANGDZDSS`
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `hd_yxzt`
  );
pred_sql: SELECT   `HANGDUANMC` AS `航段名称` FROM   `hd_yxzt` WHERE   `ZUIDTHSS` = `HANGDZDSS`   AND `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `hd_yxzt`   );
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  MAX(`ZUIDTHSS`) AS `最低通航水深最大值`
FROM
  hd_yxzt
GROUP BY
  `HANGDMC`;
pred_sql: SELECT   `HANGDMC` AS `航道名称`,   MAX(`ZUIDTHSS`) AS `最低通航水深最大值` FROM   hd_yxzt GROUP BY   `HANGDMC`;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  COUNT(*) AS `观测次数`
FROM
  `hd_yxzt`
GROUP BY
  `HANGDUANMC`;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   COUNT(*) AS `观测次数` FROM   `hd_yxzt` GROUP BY   `HANGDUANMC`;
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  `HANGDUANMC` AS `航段名称`,
  `QIDMC` AS `起点名称`,
  `ZHONGDMC` AS `终点名称`
FROM
  `hd_yxzt`
WHERE
  `QIDMC` = `ZHONGDMC`;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   `QIDMC` AS `起点名称`,   `ZHONGDMC` AS `终点名称`,   `HANGDMC` AS `航道名称` FROM   `hd_yxzt` WHERE   `ZHONGDMC` = `QIDMC`;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  AVG(`HANGDDK`) AS `平均航道底宽`
FROM
  hd_yxzt
GROUP BY
  `HANGDUANMC`;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   AVG(`HANGDDK`) AS `平均航道底宽` FROM   hd_yxzt GROUP BY   `HANGDUANMC`;
gold_sql: SELECT
  QIDMC AS `起点名称`,
  SUM(DUANMHYZL) AS `总货运量（万吨）`
FROM
  hd_yxzt
GROUP BY
  QIDMC;
pred_sql: SELECT   QIDMC AS `起点名称`,   SUM(DUANMHYZL) AS `总货运量（万吨）` FROM   hd_yxzt GROUP BY   QIDMC;
gold_sql: SELECT
  `HANGDUANMC`,
  MAX(`HANGDZDSS`) - MIN(`ZUIDTHSS`) AS `水深差值`
FROM
  hd_yxzt
GROUP BY
  `HANGDUANMC`;
pred_sql: SELECT   `HANGDUANMC`,   (MAX(`HANGDZDSS`) - MIN(`ZUIDTHSS`)) AS `水深差值` FROM   hd_yxzt GROUP BY   `HANGDUANMC`;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  `ZUIDTHSS` AS `最低通航水深`
FROM
  hd_yxzt
WHERE
  `QIDMC` = '邵伯船闸'
ORDER BY
  `GCRQ` DESC
LIMIT
  1;
pred_sql: SELECT   `ZUIDTHSS` AS `最低通航水深`,   `HANGDUANMC` AS `航段名称` FROM   hd_yxzt WHERE   `QIDMC` = '邵伯船闸' ORDER BY   `GCRQ` ASC LIMIT   1;
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  `HANGDUANMC` AS `航段名称`,
  `QIDMC` AS `起点名称`,
  `HANGDXZDJ` AS `航道现状等级`,
  `ZUIDTHSS` AS `最低通航水深`,
  `HANGDZDSS` AS `航道最大水深`,
  `HANGDDK` AS `航道底宽`,
  `HANGDMK` AS `航道面宽`,
  `HANGDDMMC` AS `航道断面名称`,
  `DUANMHYZL` AS `断面货运总量`,
  `GCRQ` AS `观测日期`
FROM
  hd_yxzt
WHERE
  `ZHONGDMC` = '盐邵船闸'
ORDER BY
  `GCRQ` DESC;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   `HANGDMC` AS `航道名称`,   `QIDMC` AS `起点名称`,   `HANGDXZDJ` AS `航道现状等级`,   `ZUIDTHSS` AS `最低通航水深`,   `HANGDZDSS` AS `航道最大水深`,   `HANGDDK` AS `航道底宽`,   `HANGDMK` AS `航道面宽`,   `HANGDDMMC` AS `航道断面名称`,   `DUANMHYZL` AS `断面货运总量`,   `GCRQ` AS `观测日期` FROM   hd_yxzt WHERE   `ZHONGDMC` = '盐邵船闸' ORDER BY   `GCRQ` DESC;
gold_sql: SELECT
  `HANGDXZDJ` AS `航道现状等级`,
  AVG(`HANGDZDSS`) AS `平均最大水深`
FROM
  hd_yxzt
GROUP BY
  `HANGDXZDJ`;
pred_sql: SELECT   `HANGDXZDJ` AS `航道现状等级`,   AVG(`HANGDZDSS`) AS `平均最大水深` FROM   hd_yxzt GROUP BY   `HANGDXZDJ`;
gold_sql: SELECT
  `HANGDDMMC` AS '航道断面名称',
  MIN(`ZUIDTHSS`) AS '最低通航水深（米）'
FROM
  hd_yxzt
GROUP BY
  `HANGDDMMC`;
pred_sql: SELECT   `HANGDDMMC` AS '航道断面名称',   MIN(`ZUIDTHSS`) AS '最低通航水深（米）' FROM   hd_yxzt GROUP BY   `HANGDDMMC`;
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  `HANGDUANMC` AS `航段名称`,
  `QIDMC` AS `起点名称`,
  `ZHONGDMC` AS `终点名称`,
  `HANGDXZDJ` AS `航道现状等级`,
  `ZUIDTHSS` AS `最低通航水深`,
  `HANGDZDSS` AS `航道最大水深`,
  `HANGDDK` AS `航道底宽`,
  `HANGDMK` AS `航道面宽`,
  `HANGDDMMC` AS `航道断面名称`,
  `DUANMHYZL` AS `断面货运总量`
FROM
  `hd_yxzt`
WHERE
  `HANGDXZDJ` = '一级航道'
  AND YEAR(`GCRQ`) = 2023;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   `HANGDMC` AS `航道名称`,   `QIDMC` AS `起点名称`,   `ZHONGDMC` AS `终点名称`,   `HANGDXZDJ` AS `航道现状等级`,   `ZUIDTHSS` AS `最低通航水深`,   `HANGDZDSS` AS `航道最大水深`,   `HANGDDK` AS `航道底宽`,   `HANGDMK` AS `航道面宽`,   `HANGDDMMC` AS `航道断面名称`,   `DUANMHYZL` AS `断面货运总量` FROM   `hd_yxzt` WHERE   YEAR(`GCRQ`) = 2023   AND `HANGDXZDJ` = '一级航道';
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  (`ZUIDTHSS` + `HANGDZDSS`) AS `最低通航水深和最大水深的和`
FROM
  `hd_yxzt`
ORDER BY
  `最低通航水深和最大水深的和` DESC;
pred_sql: SELECT   `HANGDUANMC` AS `航段名称`,   (`ZUIDTHSS` + `HANGDZDSS`) AS `最低通航水深和最大水深的和` FROM   `hd_yxzt` ORDER BY   `最低通航水深和最大水深的和` DESC;
gold_sql: SELECT
  `HANGDUANMC` AS `航段名称`,
  `QIDMC` AS `起点名称`,
  `ZHONGDMC` AS `终点名称`
FROM
  `hd_yxzt`
WHERE
  `HANGDXZDJ` <= '五级';
pred_sql: SELECT   `QIDMC` AS `起点名称`,   `ZHONGDMC` AS `终点名称`,   `HANGDUANMC` AS `航段名称` FROM   `hd_yxzt` WHERE   `HANGDXZDJ` <= '五级';
gold_sql: SELECT
  `HANGDUANMC` AS '航段名称',
  MAX(`GCRQ`) AS '观测日期',
  SUM(`DUANMHYZL`) AS '货运总量（万吨）'
FROM
  `hd_yxzt`
WHERE
  `QIDMC` = '解台船闸'
GROUP BY
  `HANGDUANMC`;
pred_sql: SELECT   `HANGDUANMC` AS '航段名称',   MAX(`GCRQ`) AS '观测日期',   SUM(`DUANMHYZL`) AS '货运总量（万吨）' FROM   `hd_yxzt` WHERE   `QIDMC` = '解台船闸' GROUP BY   `HANGDUANMC`;
gold_sql: SELECT
  SUM(DUANMHYZL) AS `货运总量（万吨）`
FROM
  hd_yxzt
WHERE
  HANGDXZDJ = '五级航道';
pred_sql: SELECT SUM(DUANMHYZL) AS `货运总量（万吨）` FROM hd_yxzt WHERE HANGDXZDJ = '五级航道';
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  `VOLUME` AS `货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` BETWEEN 2015 AND 2020
  AND `O_PROVINCE` = '江苏省'
  AND `D_PROVINCE` = '江苏省'
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT   `D_CITY` AS `终点城市`,   `O_CITY` AS `起点城市`,   `VOLUME` AS `货运量（万吨）` FROM   hd_yjyh_od WHERE   `YEAR` BETWEEN 2015 AND 2020   AND `O_PROVINCE` = '江苏省'   AND `D_PROVINCE` = '江苏省' ORDER BY   `VOLUME` DESC LIMIT   1;
gold_sql: SELECT
  `O_COUNTRY` AS `出发地国家`,
  SUM(`VOLUME`) AS `货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = 2015
  AND `D_PROVINCE` = '江苏省'
GROUP BY
  `O_COUNTRY`
ORDER BY
  SUM(`VOLUME`) DESC
LIMIT
  1;
pred_sql: SELECT   `O_COUNTRY` AS `出发地国家`,   SUM(`VOLUME`) AS `货运量（万吨）` FROM   hd_yjyh_od WHERE   `YEAR` = 2015   AND `D_PROVINCE` = '江苏省' GROUP BY   `O_COUNTRY` ORDER BY   `货运量（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  `CARGO` AS `货种`,
  SUM(VOLUME) AS `总货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `O_COUNTRY` = '中国'
  AND `O_CONTINENT` = '亚洲'
  AND `D_CONTINENT` = '亚洲'
  AND `YEAR` = 2015
GROUP BY
  `CARGO`
ORDER BY
  SUM(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT   `货种`,   `总货运量（万吨）` FROM (   SELECT     CARGO AS `货种`,     SUM(VOLUME) AS `总货运量（万吨）`   FROM     hd_yjyh_od   WHERE     O_COUNTRY = '中国'     AND O_CONTINENT = '亚洲'     AND D_CONTINENT = '亚洲'     AND YEAR = 2015   GROUP BY     CARGO ) AS subquery ORDER BY   `总货运量（万吨）` DESC LIMIT 1;
gold_sql: SELECT
  YEAR AS `年份`,
  O_CITY AS `起点城市`,
  SUM(VOLUME) AS `运输量（万吨）`
FROM
  hd_yjyh_od
WHERE
  O_PROVINCE = '江苏省'
  AND D_PROVINCE = '江苏省'
GROUP BY
  YEAR,
  O_CITY
ORDER BY
  YEAR,
  `运输量（万吨）` DESC
LIMIT
  5;
pred_sql: SELECT   YEAR AS `年份`,   O_CITY AS `起点城市`,   SUM(VOLUME) AS `运输量（万吨）` FROM   hd_yjyh_od WHERE   O_PROVINCE = '江苏省'   AND D_PROVINCE = '江苏省' GROUP BY   YEAR,   O_CITY ORDER BY   `运输量（万吨）` DESC,   YEAR LIMIT   5;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `CARGO` AS `货物类型`,
  SUM(`VOLUME`) AS `货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `O_PROVINCE` = '江苏省'
  AND `D_COUNTRY` != '中国'
GROUP BY
  `YEAR`,
  `CARGO`
ORDER BY
  `YEAR`,
  `货物类型`;
pred_sql: SELECT   `YEAR` AS `年份`,   `CARGO` AS `货物类型`,   SUM(`VOLUME`) AS `货运量（万吨）` FROM   hd_yjyh_od WHERE   `D_COUNTRY` != '中国'   AND `O_PROVINCE` = '江苏省' GROUP BY   `货物类型`,   `年份` ORDER BY   `年份`,   `货物类型`;
gold_sql: SELECT
  `O_PROVINCE` AS `起点省`,
  SUM(`VOLUME`) AS `最大货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `D_PROVINCE` = '江苏省'
GROUP BY
  `O_PROVINCE`
ORDER BY
  `最大货运量（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   `O_PROVINCE` AS `起点省`,   SUM(`VOLUME`) AS `最大货运量（万吨）` FROM   hd_yjyh_od WHERE   `D_PROVINCE` = '江苏省' GROUP BY   `O_PROVINCE` ORDER BY   `最大货运量（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `D_COUNTRY` AS `终点国家`,
  SUM(`VOLUME`) AS `年度运输量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `O_PROVINCE` = '江苏省'
  AND `CARGO` IN ('煤炭、石油、天然气及制品')
GROUP BY
  `YEAR`,
  `D_COUNTRY`
ORDER BY
  `YEAR`,
  `D_COUNTRY`;
pred_sql: SELECT   `D_COUNTRY` AS `终点国家`,   `YEAR` AS `年份`,   SUM(`VOLUME`) AS `年度运输量（万吨）` FROM   hd_yjyh_od WHERE   `O_PROVINCE` = '江苏省'   AND `CARGO` IN ('煤炭、石油、天然气及制品') GROUP BY   `D_COUNTRY`,   `YEAR` ORDER BY   `D_COUNTRY`,   `YEAR`;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `CARGO` AS `货种`,
  SUM(`VOLUME`) AS `货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `D_PROVINCE` = '江苏省'
  AND `D_CONTINENT` = '欧洲'
  AND `YEAR` BETWEEN 2015 AND 2020
GROUP BY
  `YEAR`,
  `CARGO`
ORDER BY
  `YEAR`,
  `CARGO`;
pred_sql: SELECT   `YEAR` AS `年份`,   `CARGO` AS `货种`,   SUM(`VOLUME`) AS `货运量（万吨）` FROM   hd_yjyh_od WHERE   `D_PROVINCE` = '江苏省'   AND `D_CONTINENT` = '欧洲'   AND `YEAR` BETWEEN 2015 AND 2020 GROUP BY   `CARGO`,   `YEAR` ORDER BY   `货种`,   `年份`;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  SUM(
    CASE
      WHEN CARGO IN ('矿石', '矿建材料') THEN VOLUME
      ELSE 0
    END
  ) AS `矿石和矿建材料运输量（万吨）`
FROM
  hd_yjyh_od
WHERE
  O_PROVINCE = '江苏省'
GROUP BY
  O_CITY
ORDER BY
  `矿石和矿建材料运输量（万吨）` DESC;
pred_sql: SELECT   O_CITY AS `起点城市`,   SUM(     CASE       WHEN CARGO IN ('矿石', '矿建材料') THEN VOLUME       ELSE 0     END   ) AS `矿石和矿建材料运输量（万吨）` FROM   hd_yjyh_od WHERE   O_PROVINCE = '江苏省' GROUP BY   O_CITY ORDER BY   `矿石和矿建材料运输量（万吨）` DESC;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  `volume_growth` AS `货运量增长（万吨）`
FROM (
  SELECT
    `CARGO`,
    `YEAR`,
    `total_volume`,
    `total_volume` - LAG(`total_volume`) OVER (
      PARTITION BY `CARGO`
      ORDER BY `YEAR`
    ) AS `volume_growth`
  FROM (
    SELECT
      `YEAR`,
      `CARGO`,
      SUM(`VOLUME`) AS `total_volume`
    FROM
      hd_yjyh_od
    WHERE
      `O_PROVINCE` = '江苏省'
      AND `D_CONTINENT` = '南美洲'
    GROUP BY
      `YEAR`,
      `CARGO`
  ) yearly_volume
) volume_growth
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_yjyh_od
    WHERE
      `O_PROVINCE` = '江苏省'
      AND `D_CONTINENT` = '南美洲'
  )
ORDER BY
  `货运量增长（万吨）` DESC
LIMIT
  1;

pred_sql: SELECT   `CARGO` AS `货物种类`,   `volume_growth` AS `货运量增长（万吨）` FROM (   SELECT     `CARGO`,     `YEAR`,     `total_volume`,     `total_volume` - LAG(`total_volume`) OVER (       PARTITION BY `CARGO`       ORDER BY `YEAR`     ) AS `volume_growth`   FROM (     SELECT       `YEAR`,       `CARGO`,       SUM(`VOLUME`) AS `total_volume`     FROM       hd_yjyh_od     WHERE       `O_PROVINCE` = '江苏省'       AND `D_CONTINENT` = '南美洲'     GROUP BY       `YEAR`,       `CARGO`   ) yearly_volume ) volume_growth WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_yjyh_od     WHERE       `O_PROVINCE` = '江苏省'       AND `D_CONTINENT` = '南美洲'   ) ORDER BY   `货运量增长（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  A.`YEAR` AS `年份`,
  A.`D_CITY` AS `终点城市`,
  COALESCE(A.`年度货运量（万吨）`, 0) AS `今年货运量（万吨）`,
  COALESCE(B.`年度货运量（万吨）`, 0) AS `上一年货运量（万吨）`,
  (
    COALESCE(A.`年度货运量（万吨）`, 0) - COALESCE(B.`年度货运量（万吨）`, 0)
  ) AS `变化量（万吨）`
FROM
  (
    SELECT
      `YEAR`,
      `D_CITY`,
      SUM(`VOLUME`) AS `年度货运量（万吨）`
    FROM
      hd_yjyh_od
    WHERE
      `O_PROVINCE` = '江苏省'
    GROUP BY
      `YEAR`,
      `D_CITY`
  ) A
  LEFT JOIN (
    SELECT
      `YEAR`,
      `D_CITY`,
      SUM(`VOLUME`) AS `年度货运量（万吨）`
    FROM
      hd_yjyh_od
    WHERE
      `O_PROVINCE` = '江苏省'
    GROUP BY
      `YEAR`,
      `D_CITY`
  ) B ON A.`D_CITY` = B.`D_CITY`
  AND A.`YEAR` = B.`YEAR` + 1
ORDER BY
  A.`YEAR`,
  A.`D_CITY`;
pred_sql: SELECT   A.`YEAR` AS `年份`,   A.`D_CITY` AS `终点城市`,   COALESCE(A.`年度货运量（万吨）`, 0) AS `今年货运量（万吨）`,   COALESCE(B.`年度货运量（万吨）`, 0) AS `上一年货运量（万吨）`,   (     COALESCE(A.`年度货运量（万吨）`, 0) - COALESCE(B.`年度货运量（万吨）`, 0)   ) AS `变化量（万吨）` FROM   (     SELECT       `YEAR`,       `D_CITY`,       SUM(`VOLUME`) AS `年度货运量（万吨）`     FROM       hd_yjyh_od     WHERE       `O_PROVINCE` = '江苏省'     GROUP BY       `YEAR`,       `D_CITY`   ) B   RIGHT JOIN (     SELECT       `YEAR`,       `D_CITY`,       SUM(`VOLUME`) AS `年度货运量（万吨）`     FROM       hd_yjyh_od     WHERE       `O_PROVINCE` = '江苏省'     GROUP BY       `YEAR`,       `D_CITY`   ) A ON A.`D_CITY` = B.`D_CITY`   AND A.`YEAR` = B.`YEAR` + 1 ORDER BY   A.`YEAR`,   A.`D_CITY`;
gold_sql: SELECT
  O_CONTINENT AS `洲`,
  SUM(VOLUME) / (
    SELECT
      SUM(VOLUME)
    FROM
      hd_yjyh_od
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          hd_yjyh_od
      )
      AND O_PROVINCE = '江苏省'
      AND D_PROVINCE = '江苏省'
  ) * 100 AS `年度货运量占比（%）`
FROM
  hd_yjyh_od
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      hd_yjyh_od
  )
  AND O_PROVINCE = '江苏省'
  AND D_PROVINCE = '江苏省'
GROUP BY
  O_CONTINENT
ORDER BY
  `年度货运量占比（%）` DESC
LIMIT
  1;
pred_sql: SELECT      O_CONTINENT AS `洲`,     SUM(VOLUME) / (         SELECT              SUM(VOLUME)         FROM              hd_yjyh_od         WHERE              YEAR = (SELECT MAX(YEAR) FROM hd_yjyh_od)             AND O_PROVINCE = '江苏省'             AND D_PROVINCE = '江苏省'     ) * 100 AS `年度货运量占比（%）` FROM      hd_yjyh_od WHERE      YEAR = (SELECT MAX(YEAR) FROM hd_yjyh_od)     AND O_PROVINCE = '江苏省'     AND D_PROVINCE = '江苏省' GROUP BY      O_CONTINENT ORDER BY      `年度货运量占比（%）` DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  SUM(`VOLUME`) AS `年度运输量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `O_PROVINCE` = '江苏省'
  AND `D_CONTINENT` = '非洲'
  AND `CARGO` IN ('农业产品', '食品')
GROUP BY
  `YEAR`
ORDER BY
  `年份` ASC;
pred_sql: SELECT   `YEAR` AS `年份`,   SUM(`VOLUME`) AS `年度运输量（万吨）` FROM   hd_yjyh_od WHERE   `CARGO` IN ('农业产品', '食品')   AND `O_PROVINCE` = '江苏省'   AND `D_CONTINENT` = '非洲' GROUP BY   `YEAR` ORDER BY   `年份`;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  SUM(`VOLUME`) AS `货运量（万吨）`,
  CASE
    WHEN `O_PROVINCE` = '江苏省'
    AND `D_CONTINENT` = '亚洲' THEN '沿江运输'
    WHEN `O_PROVINCE` = '江苏省'
    AND `D_CONTINENT` = '海洋' THEN '沿海运输'
    ELSE '其他运输'
  END AS `运输类型`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = (
    SELECT
      MAX(YEAR)
    FROM
      hd_yjyh_od
  )
  AND `O_PROVINCE` = '江苏省'
GROUP BY
  `运输类型`,
  `CARGO`
ORDER BY
  `运输类型`,
  `货运量（万吨）` DESC;
pred_sql: SELECT   `CARGO` AS `货物种类`,   SUM(`VOLUME`) AS `货运量（万吨）`,   CASE     WHEN `O_PROVINCE` = '江苏省'     AND `D_CONTINENT` = '亚洲' THEN '沿江运输'     WHEN `O_PROVINCE` = '江苏省'     AND `D_CONTINENT` = '海洋' THEN '沿海运输'     ELSE '其他运输'   END AS `运输类型` FROM   hd_yjyh_od WHERE   `YEAR` = (     SELECT       MAX(YEAR)     FROM       hd_yjyh_od   )   AND `O_PROVINCE` = '江苏省' GROUP BY   `运输类型`,   `CARGO` ORDER BY   `运输类型`,   `货运量（万吨）` DESC;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  SUM(`VOLUME`) / (
    SELECT
      SUM(`VOLUME`)
    FROM
      `hd_yjyh_od`
    WHERE
      `O_CITY` = '南京市'
      AND `O_PROVINCE` = '江苏省'
  ) * 100 AS `运输量占比（%）`
FROM
  hd_yjyh_od
WHERE
  `O_CITY` = '南京市'
  AND `O_PROVINCE` = '江苏省'
GROUP BY
  `CARGO`
ORDER BY
  `运输量占比（%）` DESC
LIMIT
  1;
pred_sql: SELECT   `CARGO` AS `货物种类`,   (SUM(`VOLUME`) / (     SELECT       SUM(`VOLUME`)     FROM       `hd_yjyh_od`     WHERE       `O_CITY` = '南京市'       AND `O_PROVINCE` = '江苏省'   )) * 100 AS `运输量占比（%）` FROM   hd_yjyh_od WHERE   `O_CITY` = '南京市'   AND `O_PROVINCE` = '江苏省' GROUP BY   `CARGO` ORDER BY   `运输量占比（%）` DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS `城市`,
  CARGO AS `货物种类`,
  SUM(VOLUME) AS `总货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  O_PROVINCE = '江苏省'
  AND D_PROVINCE = '江苏省'
  AND O_CITY = D_CITY
GROUP BY
  O_CITY,
  CARGO;
pred_sql: SELECT   O_CITY AS `城市`,   CARGO AS `货物种类`,   SUM(VOLUME) AS `总货运量（万吨）` FROM   hd_yjyh_od WHERE   O_PROVINCE = '江苏省'   AND D_PROVINCE = '江苏省'   AND O_CITY = D_CITY GROUP BY   CARGO,   O_CITY;
gold_sql: SELECT
  current.CARGO AS `货物种类`,
  (
    (current.total_volume - previous.total_volume) / previous.total_volume
  ) * 100 AS `年度增长率（%）`
FROM
  (
    SELECT
      `CARGO`,
      SUM(`VOLUME`) AS `total_volume`
    FROM
      hd_yjyh_od
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          hd_yjyh_od
      )
      AND `O_PROVINCE` = '江苏省'
      AND `D_CONTINENT` = '北美洲'
    GROUP BY
      `CARGO`
  ) AS current
  JOIN (
    SELECT
      `CARGO`,
      SUM(`VOLUME`) AS `total_volume`
    FROM
      hd_yjyh_od
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          hd_yjyh_od
      ) - 1
      AND `O_PROVINCE` = '江苏省'
      AND `D_CONTINENT` = '北美洲'
    GROUP BY
      `CARGO`
  ) AS previous ON current.CARGO = previous.CARGO
ORDER BY
  `年度增长率（%）` DESC
LIMIT
  1;
pred_sql: SELECT   current.CARGO AS `货物种类`,   (     (current.total_volume - previous.total_volume) / previous.total_volume   ) * 100 AS `年度增长率（%）` FROM   (     SELECT       `CARGO`,       SUM(`VOLUME`) AS `total_volume`     FROM       hd_yjyh_od     WHERE       `YEAR` = (         SELECT           MAX(`YEAR`)         FROM           hd_yjyh_od       )       AND `O_PROVINCE` = '江苏省'       AND `D_CONTINENT` = '北美洲'     GROUP BY       `CARGO`   ) AS previous   JOIN (     SELECT       `CARGO`,       SUM(`VOLUME`) AS `total_volume`     FROM       hd_yjyh_od     WHERE       `YEAR` = (         SELECT           MAX(`YEAR`)         FROM           hd_yjyh_od       ) - 1       AND `O_PROVINCE` = '江苏省'       AND `D_CONTINENT` = '北美洲'     GROUP BY       `CARGO`   ) AS current ON current.CARGO = previous.CARGO ORDER BY   `年度增长率（%）` DESC LIMIT   1;
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  SUM(`VOLUME`) AS `总运输量（万吨）`
FROM
  `hd_yjyh_od`
WHERE
  `O_PROVINCE` = '江苏省'
GROUP BY
  `O_CITY`,
  `D_CITY`
ORDER BY
  `总运输量（万吨）` DESC;
pred_sql: SELECT   `D_CITY` AS `终点城市`,   `O_CITY` AS `起点城市`,   SUM(`VOLUME`) AS `总运输量（万吨）` FROM   `hd_yjyh_od` WHERE   `O_PROVINCE` = '江苏省' GROUP BY   `D_CITY`,   `O_CITY` ORDER BY   `总运输量（万吨）` DESC;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  SUM(`VOLUME`) AS `运输量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_yjyh_od
  )
  AND `O_CITY` = '苏州市'
  AND `O_PROVINCE` = '江苏省'
GROUP BY
  `CARGO`
ORDER BY
  `运输量（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   `CARGO` AS `货物种类`,   SUM(`VOLUME`) AS `运输量（万吨）` FROM   hd_yjyh_od WHERE   `O_CITY` = '苏州市'   AND `O_PROVINCE` = '江苏省'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_yjyh_od   ) GROUP BY   `CARGO` ORDER BY   `运输量（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `D_COUNTRY` AS `终点国家`,
  SUM(`VOLUME`) AS `货物运输量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `O_PROVINCE` = '江苏省'
  AND `D_CONTINENT` = '亚洲'
GROUP BY
  `YEAR`,
  `D_COUNTRY`
ORDER BY
  `YEAR`,
  `货物运输量（万吨）` DESC;
pred_sql: SELECT   `D_COUNTRY` AS `终点国家`,   `YEAR` AS `年份`,   SUM(`VOLUME`) AS `货物运输量（万吨）` FROM   hd_yjyh_od WHERE   `O_PROVINCE` = '江苏省'   AND `D_CONTINENT` = '亚洲' GROUP BY   `D_COUNTRY`,   `YEAR` ORDER BY   `年份`,   `货物运输量（万吨）` DESC;
gold_sql: SELECT
  SUM(`VOLUME`) AS `运输量总和（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = 2015
  AND `O_COUNTRY` = '中国'
  AND `O_CONTINENT` = '亚洲'
  AND `CARGO` = '煤炭、石油、天然气及制品';
pred_sql: SELECT   SUM(`VOLUME`) AS `运输量总和（万吨）` FROM   hd_yjyh_od WHERE   `CARGO` = '煤炭、石油、天然气及制品'   AND `YEAR` = 2015   AND `O_COUNTRY` = '中国'   AND `O_CONTINENT` = '亚洲';
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  `年度运输量增长率（%）`
FROM (
  SELECT
    `CARGO`,
    (
      (
        SUM(
          CASE
            WHEN `YEAR` = (SELECT MAX(`YEAR`) FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`
            ELSE 0
          END
        ) - SUM(
          CASE
            WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`
            ELSE 0
          END
        )
      ) / SUM(
        CASE
          WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`
          ELSE 0
        END
      )
    ) * 100 AS `年度运输量增长率（%）`
  FROM
    hd_yjyh_od
  WHERE
    `D_CITY` = '南通市'
  GROUP BY
    `CARGO`
  HAVING
    SUM(
      CASE
        WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`
        ELSE 0
      END
    ) > 0
) growth_rates
ORDER BY
  `年度运输量增长率（%）` DESC
LIMIT
  1;

pred_sql: SELECT   `CARGO` AS `货物种类`,   `年度运输量增长率（%）` FROM (   SELECT     `CARGO`,     (       (         SUM(           CASE             WHEN `YEAR` = (SELECT MAX(`YEAR`) FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`             ELSE 0           END         ) - SUM(           CASE             WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`             ELSE 0           END         )       ) / SUM(         CASE           WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`           ELSE 0         END       )     ) * 100 AS `年度运输量增长率（%）`   FROM     hd_yjyh_od   WHERE     `D_CITY` = '南通市'   GROUP BY     `CARGO`   HAVING     SUM(       CASE         WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM hd_yjyh_od WHERE `D_CITY` = '南通市') THEN `VOLUME`         ELSE 0       END     ) > 0 ) growth_rates ORDER BY   `年度运输量增长率（%）` DESC LIMIT   1;
gold_sql: SELECT
  `CARGO` AS `货物类别`,
  `D_CONTINENT` AS `目的地洲`,
  SUM(`VOLUME`) AS `运输量`
FROM
  `hd_yjyh_od`
WHERE
  `CARGO` IN ('矿建', '金属矿')
GROUP BY
  `CARGO`,
  `D_CONTINENT`
ORDER BY
  `运输量` DESC;
pred_sql: SELECT   `D_CONTINENT` AS `目的地洲`,   `CARGO` AS `货物类别`,   SUM(`VOLUME`) AS `运输量` FROM   `hd_yjyh_od` WHERE   `CARGO` IN ('金属矿', '矿建') GROUP BY   `D_CONTINENT`,   `CARGO` ORDER BY   `运输量` DESC;
gold_sql: SELECT
  `O_CONTINENT` AS `起点洲`,
  `D_CONTINENT` AS `终点洲`,
  `CARGO` AS `货物种类`,
  SUM(`VOLUME`) AS `运输量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_yjyh_od
  )
  AND `CARGO` IN ('高端产品', '电子通讯产品')
GROUP BY
  `O_CONTINENT`,
  `D_CONTINENT`,
  `CARGO`
ORDER BY
  `起点洲`,
  `终点洲`,
  `货物种类`;
pred_sql: SELECT   `D_CONTINENT` AS `终点洲`,   `O_CONTINENT` AS `起点洲`,   `CARGO` AS `货物种类`,   SUM(`VOLUME`) AS `运输量（万吨）` FROM   hd_yjyh_od WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_yjyh_od   )   AND `CARGO` IN ('高端产品', '电子通讯产品') GROUP BY   `D_CONTINENT`,   `O_CONTINENT`,   `CARGO` ORDER BY   `终点洲`,   `起点洲`,   `货物种类`;
gold_sql: SELECT
  D_CONTINENT AS 终点洲,
  CARGO AS 货种,
  SUM(VOLUME) AS 运输量_万吨
FROM
  HD_YJYH_OD
WHERE
  CARGO IN ('集装箱', '农业产品')
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HD_YJYH_OD
  )
GROUP BY
  D_CONTINENT,
  CARGO;
pred_sql: SELECT   D_CONTINENT AS 终点洲,   CARGO AS 货种,   SUM(VOLUME) AS 运输量_万吨 FROM   HD_YJYH_OD WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HD_YJYH_OD   )   AND CARGO IN ('集装箱', '农业产品') GROUP BY   D_CONTINENT,   CARGO;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  SUM(`VOLUME`) AS `运输量总和（万吨）`,
  (
    SUM(`VOLUME`) / (
      SELECT
        SUM(`VOLUME`)
      FROM
        hd_yjyh_od
      WHERE
        `YEAR` = (
          SELECT
            MAX(`YEAR`)
          FROM
            hd_yjyh_od
        )
        AND (
          `D_CITY` = '苏州市'
          OR `D_CITY` = '无锡市'
        )
    ) * 100
  ) AS `占比（%）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_yjyh_od
  )
  AND (
    `D_CITY` = '苏州市'
    OR `D_CITY` = '无锡市'
  )
GROUP BY
  `CARGO`
ORDER BY
  `占比（%）` DESC
LIMIT
  1;
pred_sql: SELECT   `CARGO` AS `货物种类`,   SUM(`VOLUME`) AS `运输量总和（万吨）`,   (     SUM(`VOLUME`) / (       SELECT         SUM(`VOLUME`)       FROM         hd_yjyh_od       WHERE         `YEAR` = (           SELECT             MAX(`YEAR`)           FROM             hd_yjyh_od         )         AND (           `D_CITY` IN ('苏州市', '无锡市')         )     ) * 100   ) AS `占比（%）` FROM   hd_yjyh_od WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_yjyh_od   )   AND `D_CITY` IN ('苏州市', '无锡市') GROUP BY   `CARGO` ORDER BY   `占比（%）` DESC LIMIT   1;
gold_sql: SELECT
  `O_COUNTRY` AS `起点国家`,
  `D_COUNTRY` AS `终点国家`,
  SUM(`VOLUME`) AS `年度运输量总和（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = 2015
  AND `CARGO` LIKE '%煤炭%'
GROUP BY
  `O_COUNTRY`,
  `D_COUNTRY`;
pred_sql: SELECT   `D_COUNTRY` AS `终点国家`,   `O_COUNTRY` AS `起点国家`,   SUM(`VOLUME`) AS `年度运输量总和（万吨）` FROM   hd_yjyh_od WHERE   `YEAR` = 2015   AND `CARGO` LIKE '%煤炭%' GROUP BY   `D_COUNTRY`,   `O_COUNTRY`;
gold_sql: SELECT
  `YEAR` AS `年份`,
  SUM(`VOLUME`) AS `煤炭年运输量(万吨)`
FROM
  `HD_YJYH_OD`
WHERE
  `CARGO` like '%煤炭%'
GROUP BY
  `YEAR`
ORDER BY
  `YEAR`;
pred_sql: SELECT   `YEAR` AS `年份`,   SUM(`VOLUME`) AS `煤炭年运输量(万吨)` FROM   `HD_YJYH_OD` WHERE   `CARGO` LIKE '%煤炭%' GROUP BY   `YEAR` ORDER BY   `YEAR`;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `O_CONTINENT` AS `起点洲`,
  `O_COUNTRY` AS `起点国家`,
  `O_PROVINCE` AS `起点省`,
  `O_CITY` AS `起点城市`,
  `D_CONTINENT` AS `终点洲`,
  `D_COUNTRY` AS `终点国家`,
  `D_PROVINCE` AS `终点省`,
  `D_CITY` AS `终点城市`,
  `CARGO` AS `货种`,
  `VOLUME` AS `货运量（万吨）`
FROM
  `HD_YJYH_OD`
WHERE
  `CARGO` LIKE '%煤炭%'
  OR `CARGO` LIKE '%石油%'
ORDER BY
  `YEAR` DESC,
  `O_PROVINCE`,
  `D_PROVINCE`;
pred_sql: SELECT   `YEAR` AS `年份`,   `O_CONTINENT` AS `起点洲`,   `O_COUNTRY` AS `起点国家`,   `O_PROVINCE` AS `起点省`,   `O_CITY` AS `起点城市`,   `D_CONTINENT` AS `终点洲`,   `D_COUNTRY` AS `终点国家`,   `D_PROVINCE` AS `终点省`,   `D_CITY` AS `终点城市`,   `CARGO` AS `货种`,   `VOLUME` AS `货运量（万吨）` FROM   `HD_YJYH_OD` WHERE   `CARGO` IN ('煤炭', '石油') ORDER BY   `YEAR` DESC,   `O_PROVINCE`,   `D_PROVINCE`;
gold_sql: SELECT
  O_COUNTRY AS '国家',
  SUM(VOLUME) AS '煤运输量'
FROM
  HD_YJYH_OD
WHERE
  CARGO = '煤炭、石油、天然气及制品'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HD_YJYH_OD
  )
GROUP BY
  O_COUNTRY
ORDER BY
  SUM(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT   O_COUNTRY AS '国家',   SUM(VOLUME) AS '煤运输量' FROM   HD_YJYH_OD WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HD_YJYH_OD   )   AND CARGO = '煤炭、石油、天然气及制品' GROUP BY   O_COUNTRY ORDER BY   '煤运输量' DESC LIMIT   1;
gold_sql: SELECT
  `O_CONTINENT` AS `起点洲`,
  `D_CONTINENT` AS `终点洲`,
  SUM(`VOLUME`) AS `货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `CARGO` = '%天然气%'
  AND `YEAR` = (
    SELECT
      MAX(YEAR)
    FROM
      hd_yjyh_od
  )
GROUP BY
  `O_CONTINENT`,
  `D_CONTINENT`
ORDER BY
  `货运量（万吨）` DESC;
pred_sql: SELECT   `D_CONTINENT` AS `终点洲`,   `O_CONTINENT` AS `起点洲`,   SUM(`VOLUME`) AS `货运量（万吨）` FROM   hd_yjyh_od WHERE   `CARGO` LIKE '%天然气%'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_yjyh_od   ) GROUP BY   `D_CONTINENT`,   `O_CONTINENT` ORDER BY   `货运量（万吨）` DESC;
gold_sql: SELECT
  CARGO AS '货物种类',
  (
    VOLUME - LAG(VOLUME) OVER (
      PARTITION BY
        CARGO
      ORDER BY
        YEAR
    )
  ) / LAG(VOLUME) OVER (
    PARTITION BY
      CARGO
    ORDER BY
      YEAR
  ) * 100 AS '年度增长率（百分比）'
FROM
  HD_YJYH_OD
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HD_YJYH_OD
  )
ORDER BY
  '年度增长率（百分比）' DESC
LIMIT
  1;
pred_sql: SELECT      CARGO AS '货物种类',     (VOLUME - LAG(VOLUME) OVER (PARTITION BY CARGO ORDER BY YEAR)) / LAG(VOLUME) OVER (PARTITION BY CARGO ORDER BY YEAR) * 100 AS '年度增长率（百分比）' FROM      HD_YJYH_OD WHERE      YEAR = (SELECT MAX(YEAR) FROM HD_YJYH_OD) GROUP BY      CARGO, YEAR ORDER BY      '年度增长率（百分比）' DESC LIMIT 1;
gold_sql: SELECT DISTINCT
  DISTINCT NAME AS `名称`
FROM
  poi
WHERE
  CITY = '南京市'
  AND AREA = '六合区'
  AND L_TYPE = '生活服务'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      poi
    WHERE
      CITY = '南京市'
      AND AREA = '六合区'
      AND L_TYPE = '生活服务'
  );
pred_sql: SELECT DISTINCT NAME AS `名称` FROM poi WHERE CITY = '南京市' AND AREA = '六合区' AND L_TYPE = '生活服务' AND YEAR = (SELECT MAX(YEAR) FROM poi WHERE CITY = '南京市' AND AREA = '六合区' AND L_TYPE = '生活服务');
gold_sql: SELECT
  LUD AS "拥堵最严重路段",
  GCRQ AS "拥堵日期",
  YONGDCHENGD AS "拥堵程度",
  YONGDCHANGD AS "拥堵长度"
FROM
  GSGL_LDYDZT
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31'
  AND YONGDCHENGD = '严重拥堵'
ORDER BY
  YONGDCHANGD DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS "拥堵最严重路段",   GCRQ AS "拥堵日期",   YONGDCHENGD AS "拥堵程度",   YONGDCHANGD AS "拥堵长度" FROM   GSGL_LDYDZT WHERE   YONGDCHENGD = '严重拥堵'   AND GCRQ BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY   YONGDCHANGD DESC LIMIT   1;
gold_sql: SELECT DISTINCT
 DISTINCT  L_TYPE AS `大类名称`,
  COUNT(*) AS `设施数量`
FROM
  POI
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  )
GROUP BY
  L_TYPE;
pred_sql: SELECT    L_TYPE AS `大类名称`,   COUNT(*) AS `设施数量` FROM    POI WHERE    PROVINCE = '江苏省'   AND CITY = '南京市'   AND YEAR = (SELECT MAX(YEAR) FROM POI) GROUP BY    L_TYPE;
gold_sql: SELECT DISTINCT
  DISTINCT`AREA` AS `区域`,
  COUNT(*) AS `中介机构数量`
FROM
  `POI`
WHERE
  `CITY` = '南京市'
  AND `M_TYPE` = '中介'
GROUP BY
  `AREA`;
pred_sql: SELECT DISTINCT   `AREA` AS `区域`,   COUNT(*) AS `中介机构数量` FROM   `POI` WHERE   `M_TYPE` = '中介'   AND `CITY` = '南京市' GROUP BY   `AREA`;
gold_sql: SELECT DISTINCT
  DISTINCT `AREA` AS `区域`,
  COUNT(`id`) AS `交通设施数量`
FROM
  `POI`
WHERE
  `L_TYPE` = '交通设施'
  AND `PROVINCE` = '江苏省'
  AND `CITY` = '南京市'
  AND `YEAR` = (SELECT MAX(YEAR) from POI)
GROUP BY
  `AREA`;
pred_sql: SELECT DISTINCT   `AREA` AS `区域`,   COUNT(`id`) AS `交通设施数量` FROM   `POI` WHERE   `L_TYPE` = '交通设施'   AND `PROVINCE` = '江苏省'   AND `CITY` = '南京市'   AND `YEAR` = (SELECT MAX(YEAR) FROM POI) GROUP BY   `AREA`;
gold_sql: SELECT DISTINCT
 DISTINCT NAME AS `名称`,
  LATITUDE AS `经度`,
  LONGITUDE AS `纬度`
FROM
  POI
WHERE
  CITY = '南京市'
  AND AREA = '江宁区'
  AND M_TYPE = '家居建材'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  );
pred_sql: SELECT DISTINCT   NAME AS `名称`,   LATITUDE AS `经度`,   LONGITUDE AS `纬度` FROM   POI WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       POI   )   AND CITY = '南京市'   AND AREA = '江宁区'   AND M_TYPE = '家居建材';
gold_sql: SELECT
  COUNT(*) AS `公交站数量`
FROM
  poi
WHERE
  CITY = '南京市'
  AND AREA = '高淳区'
  AND M_TYPE = '公交站'
  AND `YEAR` = '2022';
pred_sql: SELECT COUNT(*) AS `公交站数量` FROM poi WHERE `YEAR` = '2022' AND CITY = '南京市' AND AREA = '高淳区' AND M_TYPE = '公交站';
gold_sql: SELECT DISTINCT
DISTINCT  NAME AS `公司企业名称`
FROM
  POI
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND AREA = '高淳区'
  AND L_TYPE = '公司企业'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  );
pred_sql: SELECT DISTINCT NAME AS `公司企业名称` FROM POI WHERE PROVINCE = '江苏省'   AND CITY = '南京市'   AND AREA = '高淳区'   AND L_TYPE = '公司企业'   AND YEAR = (     SELECT MAX(YEAR) FROM POI   );
gold_sql: SELECT DISTINCT
  DISTINCT NAME AS `名称`
FROM
  POI
WHERE
  CITY = '南京市'
  AND AREA = '高淳区'
  AND L_TYPE = '运动健身'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  )
pred_sql: SELECT DISTINCT NAME AS `名称` FROM POI WHERE CITY = '南京市' AND AREA = '高淳区' AND L_TYPE = '运动健身' AND YEAR = (SELECT MAX(YEAR) FROM POI);
gold_sql: SELECT DISTINCT
DISTINCT `NAME` AS `旅游景点名称`
FROM
  `POI`
WHERE
  `PROVINCE` = '江苏省'
  AND `CITY` = '南京市'
  AND `AREA` = '高淳区'
  AND `L_TYPE` = '旅游景点'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      `POI`
  );
pred_sql: SELECT DISTINCT `NAME` AS `旅游景点名称` FROM `POI` WHERE `PROVINCE` = '江苏省'   AND `CITY` = '南京市'   AND `AREA` = '高淳区'   AND `L_TYPE` = '旅游景点'   AND YEAR = (     SELECT MAX(YEAR) FROM `POI`   );
gold_sql: SELECT DISTINCT
DISTINCT `NAME` AS `名称`
FROM
  `POI`
WHERE
  `CITY` = '南京市'
  AND `AREA` = '六合区'
  AND `M_TYPE` = '中介'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `POI`
  )
pred_sql: SELECT DISTINCT `NAME` AS `名称` FROM `POI` WHERE `CITY` = '南京市'   AND `AREA` = '六合区'   AND `M_TYPE` = '中介'   AND `YEAR` = (     SELECT MAX(`YEAR`) FROM `POI`   );
gold_sql: SELECT DISTINCT
  DISTINCT NAME AS `名称`
FROM
  POI
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND AREA = '高淳区'
  AND L_TYPE = '交通设施'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  );
pred_sql: SELECT DISTINCT NAME AS `名称` FROM POI WHERE PROVINCE = '江苏省'   AND CITY = '南京市'   AND AREA = '高淳区'   AND L_TYPE = '交通设施'   AND YEAR = (     SELECT MAX(YEAR) FROM POI   );
gold_sql: SELECT DISTINCT
 DISTINCT NAME AS `名称`
FROM
  POI
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND AREA = '江宁区'
  AND M_TYPE = '家居建材'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      `POI`
  );
pred_sql: SELECT DISTINCT NAME AS `名称` FROM POI WHERE PROVINCE = '江苏省'   AND CITY = '南京市'   AND AREA = '江宁区'   AND M_TYPE = '家居建材'   AND YEAR = (     SELECT MAX(YEAR) FROM POI   );
gold_sql: SELECT DISTINCT
  DISTINCT GSMC AS `高速名称`,
  SUM(ZONGCLL) AS `总车流量（辆/天）`,
  SUM(CHEHZZL) AS `车货总重量（吨）`
FROM
  GSGL_CRKSFZ_YXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_CRKSFZ_YXZT
  )
GROUP BY
  GSMC;
pred_sql: SELECT DISTINCT   GSMC AS `高速名称`,   SUM(ZONGCLL) AS `总车流量（辆/天）`,   SUM(CHEHZZL) AS `车货总重量（吨）` FROM   GSGL_CRKSFZ_YXZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_CRKSFZ_YXZT   ) GROUP BY   GSMC;
gold_sql: SELECT DISTINCT
  DISTINCT GSMC AS `高速名称`,
  SUM(ZONGCLL) AS `总车流量（辆）`
FROM
  GSGL_CRKSFZ_YXZT
WHERE
  GCRQ >= '2023-01-01'
  AND GCRQ <= '2023-12-31'
GROUP BY
  GSMC
ORDER BY
  `总车流量（辆）` DESC;
pred_sql: SELECT DISTINCT   GSMC AS `高速名称`,   SUM(ZONGCLL) AS `总车流量（辆）` FROM   GSGL_CRKSFZ_YXZT WHERE   GCRQ BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY   GSMC ORDER BY   `总车流量（辆）` DESC;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `O_PROVINCE` AS `流入省份`,
  `VOLUME` AS `车辆流入量（辆/天）`
FROM
  `GSGL_CRK_ZYSFLR`
WHERE
  `VOLUME` < 30000
ORDER BY
  `GCRQ` DESC;
pred_sql: SELECT   `GCRQ` AS `观测日期`,   `O_PROVINCE` AS `流入省份`,   `VOLUME` AS `车辆流入量（辆/天）` FROM   `GSGL_CRK_ZYSFLR` WHERE   `VOLUME` < 30000 ORDER BY   `GCRQ` DESC;
gold_sql: SELECT DISTINCT
  DUANMMC AS `高速路段`,
  GSMC AS `高速名称`,
  KECZLL AS 客车总流量,
  HUOCZLL AS 货车总流量
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = '2023-11-17'
  AND KECZLL is Not NULL
  AND HUOCZLL is Not NULL
ORDER BY
  (KECZLL + HUOCZLL) ASC
Limit
  1;
pred_sql: SELECT DISTINCT   GSMC AS `高速名称`,   DUANMMC AS `高速路段`,   KECZLL AS 客车总流量,   HUOCZLL AS 货车总流量 FROM   gsgl_dmyxzt WHERE   GCRQ = '2023-11-17'   AND KECZLL IS NOT NULL   AND HUOCZLL IS NOT NULL ORDER BY   (KECZLL + HUOCZLL) ASC LIMIT 1;
gold_sql: SELECT DISTINCT
  GSMC AS `高速名称`
FROM
  GSGL_DMYXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMYXZT
  )
  AND KECZLL > 10000;
pred_sql: SELECT DISTINCT GSMC AS `高速名称` FROM GSGL_DMYXZT WHERE GCRQ = (SELECT MAX(GCRQ) FROM GSGL_DMYXZT) AND KECZLL > 10000;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  GSGL_LWYDZT
WHERE
  LUWCTL > 0.99;
pred_sql: SELECT GCRQ AS 观测日期 FROM GSGL_LWYDZT WHERE LUWCTL > 0.99;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  GSGL_LWYDZT
WHERE
  LUWCTL BETWEEN 0.98 AND 0.99;
pred_sql: SELECT 观测日期 FROM GSGL_LWYDZT WHERE 高速路网畅通率 BETWEEN 0.98 AND 0.99;
gold_sql: SELECT
  GCRQ AS '观测日期',
  O_PROVINCE AS '起点省份',
  O_CITY AS '起点城市',
  D_PROVINCE AS '终点省份',
  D_CITY AS '终点城市',
  CHELL AS '车流量'
FROM
  GSGL_OD_FLOW
WHERE
  CHELL < 5000;
pred_sql: SELECT   O_PROVINCE AS '起点省份',   D_PROVINCE AS '终点省份',   GCRQ AS '观测日期',   O_CITY AS '起点城市',   D_CITY AS '终点城市',   CHELL AS '车流量' FROM   GSGL_OD_FLOW WHERE   CHELL < 5000;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `O_PROVINCE` AS `起点省份`,
  `O_CITY` AS `起点城市`,
  `O_DISTRICTS` AS `起点地区`,
  `D_PROVINCE` AS `终点省份`,
  `D_CITY` AS `终点城市`,
  `D_DISTRICTS` AS `终点地区`,
  `CHELLX` AS `车辆类型`,
  `CHELL` AS `车流量（辆/天）`
FROM
  `GSGL_OD_FLOW`
WHERE
  `CHELLX` = '客一';
pred_sql: SELECT   `GCRQ` AS `观测日期`,   `O_PROVINCE` AS `起点省份`,   `O_CITY` AS `起点城市`,   `O_DISTRICTS` AS `起点地区`,   `D_PROVINCE` AS `终点省份`,   `D_CITY` AS `终点城市`,   `D_DISTRICTS` AS `终点地区`,   `CHELLX` AS `车辆类型`,   `CHELL` AS `车流量（辆/天）` FROM   `GSGL_OD_FLOW` WHERE   `CHELLX` = '客一';
gold_sql: SELECT
  D_PROVINCE AS `出口省份`,
  SUM(VOLUME) / COUNT(DISTINCT GCRQ) AS `车流量（辆/天）`
FROM
  GSGL_OD_FLOW_TJ
WHERE
  YEAR = 2023
GROUP BY
  D_PROVINCE
HAVING
  `车流量（辆/天）` > 1000;
pred_sql: SELECT   D_PROVINCE AS `出口省份`,   SUM(VOLUME) / COUNT(DISTINCT GCRQ) AS `车流量（辆/天）` FROM   GSGL_OD_FLOW_TJ WHERE   YEAR = 2023 GROUP BY   D_PROVINCE HAVING   `车流量（辆/天）` > 1000;
gold_sql: SELECT
  GCRQ AS '观测日期',
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  CHELL AS '车流量'
FROM
  gsgl_rmlx
WHERE
  O_CITY = '苏州市'
  AND D_CITY = '上海市'
pred_sql: SELECT   GCRQ AS '观测日期',   O_CITY AS '起点城市',   D_CITY AS '终点城市',   CHELL AS '车流量' FROM   gsgl_rmlx WHERE   D_CITY = '上海市'   AND O_CITY = '苏州市';
gold_sql: SELECT
  CHANNEL AS 航道,
  VOLUME AS `货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  YEAR = 2021
  AND MONTH = '1月-10月'
  AND SEGMENT = '刘集船闸段';
pred_sql: SELECT   CHANNEL AS 航道,   VOLUME AS `货运量（万吨）` FROM   hd_nh_dm WHERE   SEGMENT = '刘集船闸段'   AND YEAR = 2021   AND MONTH IN ('1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月');
gold_sql: SELECT DISTINCT
  DISTINCT CHANNEL AS `航道名称`,
  SUM(VOLUME) AS `货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  YEAR = 2021
  AND MONTH = '1月-10月'
GROUP BY
  CHANNEL
ORDER BY
  `货运量（万吨）` ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   CHANNEL AS `航道名称`,   SUM(VOLUME) AS `货运量（万吨）` FROM   hd_nh_dm WHERE   YEAR = 2021   AND MONTH IN ('1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月') GROUP BY   CHANNEL ORDER BY   `货运量（万吨）` ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT `CHANNEL` AS `航道名称`,
  `VOLUME` AS `货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  `YEAR` = 2021
  AND `MONTH` = '1月-10月'
  AND `SEGMENT` = '蔺家坝船闸段';
pred_sql: SELECT DISTINCT   `CHANNEL` AS `航道名称`,   `VOLUME` AS `货运量（万吨）` FROM   hd_nh_dm WHERE   `SEGMENT` = '蔺家坝船闸段'   AND `YEAR` = 2021   AND `MONTH` IN ('1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月');
gold_sql: SELECT DISTINCT
  DISTINCT CHANNEL AS `航道名称`,
  VOLUME AS `货运量（万吨）`
FROM
  HD_NH_DM
WHERE
  YEAR = 2021
  AND MONTH = '1月-10月'
  AND CHANNEL = '徐宝线'
pred_sql: SELECT DISTINCT   CHANNEL AS `航道名称`,   VOLUME AS `货运量（万吨）` FROM   HD_NH_DM WHERE   YEAR = 2021   AND MONTH IN ('1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月')   AND CHANNEL = '徐宝线';
gold_sql: SELECT DISTINCT
  DISTINCT SEGMENT AS `航段`
FROM
  hd_nh_dm
WHERE
  YEAR = 2021
  AND MONTH = '1月-10月'
  AND VOLUME > 300;
pred_sql: SELECT DISTINCT SEGMENT AS `航段` FROM hd_nh_dm WHERE VOLUME > 300   AND YEAR = 2021   AND MONTH IN ('1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月');
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  (
    SELECT
      SUM(CHELL)
    FROM
      gsgl_rmlx
    WHERE
      O_CITY = g1.O_CITY
      AND D_CITY = g1.D_CITY
  ) AS `车流量总和`
FROM
  gsgl_rmlx g1
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_rmlx
  )
ORDER BY
  `车流量总和` ASC
LIMIT
  1;
pred_sql: SELECT   g1.O_CITY AS `起点城市`,   g1.D_CITY AS `终点城市`,   (     SELECT       SUM(CHELL)     FROM       gsgl_rmlx g2     WHERE       g2.O_CITY = g1.O_CITY       AND g2.D_CITY = g1.D_CITY   ) AS `车流量总和` FROM   gsgl_rmlx g1 WHERE   g1.GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_rmlx   ) GROUP BY   g1.O_CITY,   g1.D_CITY ORDER BY   `车流量总和` ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT GUANCZMC AS `观测站名称`
FROM
  PTGL_NPJCX
WHERE
  `YEAR` = 2018
  AND CAR_TYPE_DETILE = '大客'
  AND VOLUME > 100;
pred_sql: SELECT DISTINCT GUANCZMC AS `观测站名称` FROM PTGL_NPJCX WHERE YEAR = 2018 AND CAR_TYPE_DETILE = '大客' AND VOLUME > 100;
gold_sql: SELECT DISTINCT
  DISTINCT GUANCZMC AS `观测站名称`,
  VOLUME AS `货车特大货上行流量`
FROM
  PTGL_NPJCX
WHERE
  YEAR = 2018
  AND CAR_TYPE = '货车'
  AND CAR_TYPE_DETILE = '特大货'
  AND DIRECTION = '上行'
ORDER BY
  VOLUME DESC
LIMIT
  1;
pred_sql: SELECT DISTINCT   GUANCZMC AS `观测站名称`,   VOLUME AS `货车特大货上行流量` FROM   PTGL_NPJCX WHERE   YEAR = 2018   AND CAR_TYPE = '货车'   AND CAR_TYPE_DETILE = '特大货'   AND DIRECTION = '上行' ORDER BY   VOLUME DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT `ROAD_NAME` AS `路线名称`,
  `GUANCZMC` AS `观测站名称`,
  `DIRECTION` AS `方向`,
  SUM(`VOLUME`) AS `货车特大货流量（辆/日）`
FROM
  `PTGL_NPJCX`
WHERE
  `YEAR` = 2018
  AND `CAR_TYPE` = '货车'
  AND `CAR_TYPE_DETILE` = '特大货'
GROUP BY
  `ROAD_NAME`,
  `GUANCZMC`,
  `DIRECTION`;
pred_sql: SELECT DISTINCT   `ROAD_NAME` AS `路线名称`,   `GUANCZMC` AS `观测站名称`,   `DIRECTION` AS `方向`,   SUM(`VOLUME`) AS `货车特大货流量（辆/日）` FROM   `PTGL_NPJCX` WHERE   `YEAR` = 2018   AND `CAR_TYPE` = '货车'   AND `CAR_TYPE_DETILE` = '特大货' GROUP BY   `ROAD_NAME`,   `GUANCZMC`,   `DIRECTION`;
gold_sql: SELECT DISTINCT
  DISTINCT GUANCZMC AS `观测站名称`,
  SUM(VOLUME) AS `客车小客流量`
FROM
  PTGL_NPJCX
WHERE
  YEAR = 2018
  AND CAR_TYPE = '客车'
  AND CAR_TYPE_DETILE = '小客'
GROUP BY
  GUANCZMC
ORDER BY
  `客车小客流量` ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   GUANCZMC AS `观测站名称`,   SUM(VOLUME) AS `客车小客流量` FROM   PTGL_NPJCX WHERE   YEAR = 2018   AND CAR_TYPE = '客车'   AND CAR_TYPE_DETILE = '小客' GROUP BY   GUANCZMC ORDER BY   `客车小客流量` ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT `ROAD_NAME` AS `路线名称`,
  `DIRECTION` AS `方向`,
  `VOLUME` AS `车流量（辆/日）`
FROM
  PTGL_NPJCX
WHERE
  `YEAR` = 2018
  AND `CAR_TYPE_DETILE` = '小货'
  AND `VOLUME` > 800;
pred_sql: SELECT DISTINCT   `ROAD_NAME` AS `路线名称`,   `DIRECTION` AS `方向`,   `VOLUME` AS `车流量（辆/日）` FROM   PTGL_NPJCX WHERE   `CAR_TYPE_DETILE` = '小货'   AND `YEAR` = 2018   AND `VOLUME` > 800;
gold_sql: SELECT DISTINCT
  DISTINCT `GUANCZMC` AS '观测站名称',
  `VOLUME` AS '车流量（辆/日）'
FROM
  `PTGL_NPJCX`
WHERE
  `YEAR` = 2018
  AND `CAR_TYPE_DETILE` = '小货'
  AND `VOLUME` > 1000;
pred_sql: SELECT DISTINCT   `GUANCZMC` AS '观测站名称',   `VOLUME` AS '车流量（辆/日）' FROM   `PTGL_NPJCX` WHERE   `CAR_TYPE_DETILE` = '小货'   AND `YEAR` = 2018   AND `VOLUME` > 1000;
gold_sql: SELECT DISTINCT
  DISTINCT GUANCZMC AS `观测站名称`,
  VOLUME AS `大客流量`
FROM
  PTGL_NPJCX
WHERE
  YEAR = 2018
  AND CAR_TYPE = '客车'
  AND CAR_TYPE_DETILE = '大客';
pred_sql: SELECT DISTINCT   GUANCZMC AS `观测站名称`,   VOLUME AS `大客流量` FROM   PTGL_NPJCX WHERE   YEAR = 2018   AND CAR_TYPE = '客车'   AND CAR_TYPE_DETILE = '大客';
gold_sql: SELECT
  SUM(VOLUME) AS `客车大客流量之和`
FROM
  PTGL_NPJCX
WHERE
  YEAR = 2018
  AND CAR_TYPE = '客车'
  AND CAR_TYPE_DETILE = '大客';
pred_sql: SELECT   SUM(VOLUME) AS `客车大客流量之和` FROM   PTGL_NPJCX WHERE   YEAR = 2018   AND CAR_TYPE = '客车'   AND CAR_TYPE_DETILE = '大客';
gold_sql: SELECT
  `GUANCZMC` AS `观测站名称`,
  `VOLUME` AS `货车特大货流量`
FROM
  `PTGL_NPJCX`
WHERE
  `YEAR` = 2018
  AND `CAR_TYPE` = '货车'
  AND `CAR_TYPE_DETILE` = '特大货'
  AND `VOLUME` > 200;
pred_sql: SELECT   `GUANCZMC` AS `观测站名称`,   `VOLUME` AS `货车特大货流量` FROM   `PTGL_NPJCX` WHERE   `CAR_TYPE` = '货车'   AND `CAR_TYPE_DETILE` = '特大货'   AND `YEAR` = 2018   AND `VOLUME` > 200;
gold_sql: SELECT DISTINCT
  DISTINCT `ROAD_NAME` AS `路线名称`,
  SUM(`VOLUME`) AS `车流量（辆/日）`
FROM
  `PTGL_NPJCX`
WHERE
  `YEAR` = 2018
  AND `CAR_TYPE` = '集装箱'
GROUP BY
  `ROAD_NAME`
ORDER BY
  `车流量（辆/日）` ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   `ROAD_NAME` AS `路线名称`,   SUM(`VOLUME`) AS `车流量（辆/日）` FROM   `PTGL_NPJCX` WHERE   `YEAR` = 2018   AND `CAR_TYPE` = '集装箱' GROUP BY   `ROAD_NAME` ORDER BY   `车流量（辆/日）` ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT GUANCZMC AS `观测站名称`,
  VOLUME AS `客车小客流量`
FROM
  PTGL_NPJCX
WHERE
  YEAR = 2018
  AND CAR_TYPE = '客车'
  AND CAR_TYPE_DETILE = '小客'
ORDER BY
  VOLUME ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   GUANCZMC AS `观测站名称`,   VOLUME AS `客车小客流量` FROM   PTGL_NPJCX WHERE   YEAR = 2018   AND CAR_TYPE = '客车'   AND CAR_TYPE_DETILE = '小客' ORDER BY   VOLUME ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT `ROAD_NAME` AS `路线名称`,
  `VOLUME` AS `中货流量（辆/日）`
FROM
  `PTGL_NPJCX`
WHERE
  `YEAR` = 2018
  AND `CAR_TYPE` = '货车'
  AND `CAR_TYPE_DETILE` = '中货';
pred_sql: SELECT DISTINCT   `ROAD_NAME` AS `路线名称`,   `VOLUME` AS `中货流量（辆/日）` FROM   `PTGL_NPJCX` WHERE   `CAR_TYPE` = '货车'   AND `CAR_TYPE_DETILE` = '中货'   AND `YEAR` = 2018;
gold_sql: SELECT DISTINCT
  DISTINCT ROAD_NAME AS '路线名称',
  MAX(VOLUME) AS '最大车流量'
FROM
  PTGL_NPJCX
WHERE
  YEAR = 2018
  AND CAR_TYPE = '集装箱'
GROUP BY
  ROAD_NAME
ORDER BY
  MAX(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT DISTINCT   ROAD_NAME AS '路线名称',   MAX(VOLUME) AS '最大车流量' FROM   PTGL_NPJCX WHERE   YEAR = 2018   AND CAR_TYPE = '集装箱' GROUP BY   ROAD_NAME ORDER BY   '最大车流量' DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
  AND REXHWL BETWEEN 5000 AND 10000
pred_sql: SELECT DISTINCT XINGZQH AS `行政区划` FROM RXFWZT WHERE REXHWL BETWEEN 5000 AND 10000 AND GCRQ = '2023-01-01' ```
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  ABS(ZIXYWL - TOUSYWL) AS `咨询与投诉差值`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
ORDER BY
  ABS(ZIXYWL - TOUSYWL) ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   ABS(ZIXYWL - TOUSYWL) AS `咨询与投诉差值` FROM   RXFWZT WHERE   GCRQ = '2023-01-01' ORDER BY   `咨询与投诉差值` ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  ROUND(REXHWL / TOUSYWL, 2) AS `热线话务量与投诉业务量比值`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
ORDER BY
  `热线话务量与投诉业务量比值` DESC
LIMIT
  1;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   ROUND(REXHWL / TOUSYWL, 2) AS `热线话务量与投诉业务量比值` FROM   RXFWZT WHERE   GCRQ = '2023-01-01' ORDER BY   `热线话务量与投诉业务量比值` DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  ZIXYWL AS `咨询业务量`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-02-01'
ORDER BY
  ZIXYWL ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   ZIXYWL AS `咨询业务量` FROM   RXFWZT WHERE   GCRQ = '2023-02-01' ORDER BY   ZIXYWL ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  (REXHWL - ZIXYWL) AS `话务量与咨询业务量差值`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-02-01'
ORDER BY
  (REXHWL - ZIXYWL) DESC
LIMIT
  1;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   (REXHWL - ZIXYWL) AS `话务量与咨询业务量差值` FROM   RXFWZT WHERE   GCRQ = '2023-02-01' ORDER BY   `话务量与咨询业务量差值` DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  (ZIXYWL / (ZIXYWL + TOUSYWL)) * 100 AS `咨询业务量比例`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
ORDER BY
  `咨询业务量比例` DESC
LIMIT
  1;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   (ZIXYWL / (ZIXYWL + TOUSYWL)) * 100 AS `咨询业务量比例` FROM   RXFWZT WHERE   GCRQ = '2023-01-01' ORDER BY   `咨询业务量比例` DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
  AND REXHWL BETWEEN 2000 AND 5000
pred_sql: SELECT DISTINCT XINGZQH AS `行政区划` FROM RXFWZT WHERE GCRQ = '2023-01-01' AND REXHWL BETWEEN 2000 AND 5000;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  TOUSYWL AS `投诉业务量`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
ORDER BY
  TOUSYWL ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   TOUSYWL AS `投诉业务量` FROM   RXFWZT WHERE   GCRQ = '2023-01-01' ORDER BY   TOUSYWL ASC LIMIT   1;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  ZIXYWL AS `咨询业务量（起）`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
  AND ZIXYWL > 6000;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   ZIXYWL AS `咨询业务量（起）` FROM   RXFWZT WHERE   GCRQ = '2023-01-01'   AND ZIXYWL > 6000;
gold_sql: SELECT DISTINCT
  DISTINCT XINGZQH AS `行政区划`,
  REXHWL AS `热线话务量（爱尔兰）`
FROM
  RXFWZT
WHERE
  GCRQ = '2023-01-01'
ORDER BY
  REXHWL DESC
LIMIT
  1;
pred_sql: SELECT DISTINCT   XINGZQH AS `行政区划`,   REXHWL AS `热线话务量（爱尔兰）` FROM   RXFWZT WHERE   GCRQ = '2023-01-01' ORDER BY   REXHWL DESC LIMIT   1;
gold_sql: SELECT
  FEIXQDJ,
  COUNT(*) * 1.0 / (
    SELECT
      COUNT(*)
    FROM
      (
        SELECT
          HANGKSNMC
        FROM
          JC_YXZT
        ORDER BY
          JICHBZDL DESC
        LIMIT
          10
      ) AS top10
  ) AS proportion
FROM
  (
    SELECT
      HANGKSNMC,
      FEIXQDJ
    FROM
      JC_YXZT
    ORDER BY
      JICHBZDL DESC
    LIMIT
      10
  ) AS top10_airports
GROUP BY
  FEIXQDJ;
pred_sql: SELECT FEIXQDJ, COUNT(*) * 1.0 / (     SELECT COUNT(*) FROM (         SELECT HANGKSNMC FROM JC_YXZT ORDER BY JICHBZDL DESC LIMIT 10     ) AS top10 ) AS proportion FROM (     SELECT HANGKSNMC, FEIXQDJ FROM JC_YXZT ORDER BY JICHBZDL DESC LIMIT 10 ) AS top10_airports GROUP BY FEIXQDJ;
gold_sql: SELECT DISTINCT
  DISTINCT `KEYZMC` AS '客运站名称'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `ZONGBC` = 210;
pred_sql: SELECT DISTINCT `KEYZMC` AS '客运站名称' FROM `TL_KYZ_YXZT` WHERE `GCRQ` = '2023-11-22' AND `ZONGBC` = 210;
gold_sql: SELECT DISTINCT
  DISTINCT `KEYZMC` AS '客运站名称'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `DAODBC` = 0
  AND `ZONGBC` = 35;
pred_sql: SELECT DISTINCT `KEYZMC` AS '客运站名称' FROM `TL_KYZ_YXZT` WHERE `DAODBC` = 0 AND `ZONGBC` = 35 AND `GCRQ` = '2023-11-22';
gold_sql: SELECT DISTINCT
  DISTINCT `KEYZMC` AS '客运站名称',
  `ZONGBC` AS '总班次（班）'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `ZONGBC` = 16;
pred_sql: SELECT DISTINCT   `KEYZMC` AS '客运站名称',   `ZONGBC` AS '总班次（班）' FROM   `TL_KYZ_YXZT` WHERE   `ZONGBC` = 16   AND `GCRQ` = '2023-11-22';
gold_sql: SELECT DISTINCT
  DISTINCT `KEYZMC` AS '客运站名称'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `DAODBC` = 1;
pred_sql: SELECT DISTINCT `KEYZMC` AS '客运站名称' FROM `TL_KYZ_YXZT` WHERE `DAODBC` = 1 AND `GCRQ` = '2023-11-22';
gold_sql: SELECT DISTINCT
  DISTINCT `KEYZMC` AS '客运站名称'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `ZONGBC` = 148;
pred_sql: SELECT DISTINCT `KEYZMC` AS '客运站名称' FROM `TL_KYZ_YXZT` WHERE `GCRQ` = '2023-11-22' AND `ZONGBC` = 148;
gold_sql: SELECT DISTINCT
  DISTINCT `KEYZMC` AS '客运站名称'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `FASBC` = `DAODBC`;
pred_sql: SELECT DISTINCT `KEYZMC` AS '客运站名称' FROM `TL_KYZ_YXZT` WHERE `GCRQ` = '2023-11-22' AND `FASBC` = `DAODBC`;
gold_sql: SELECT DISTINCT
 DISTINCT `KEYZMC` AS '客运站名称'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `DAODBC` = 4;
pred_sql: SELECT DISTINCT `KEYZMC` AS '客运站名称' FROM `TL_KYZ_YXZT` WHERE `DAODBC` = 4 AND `GCRQ` = '2023-11-22';
gold_sql: SELECT DISTINCT
 DISTINCT `KEYZMC` AS '客运站名称'
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
  AND `DAODBC` = 0
  AND `FASBC` = 0;
pred_sql: SELECT DISTINCT `KEYZMC` AS '客运站名称' FROM `TL_KYZ_YXZT` WHERE `GCRQ` = '2023-11-22' AND `DAODBC` = 0 AND `FASBC` = 0;
gold_sql: SELECT DISTINCT
  DISTINCT `KEYZMC` AS `客运站名称`,
  `ZONGBC` AS `总班次`
FROM
  `TL_KYZ_YXZT`
WHERE
  `GCRQ` = '2023-11-22'
ORDER BY
  `ZONGBC` DESC
LIMIT
  1;
pred_sql: SELECT DISTINCT   `KEYZMC` AS `客运站名称`,   `ZONGBC` AS `总班次` FROM   `TL_KYZ_YXZT` WHERE   `GCRQ` = '2023-11-22' ORDER BY   `ZONGBC` DESC LIMIT   1;
gold_sql: SELECT
  `MAOBSJS` AS `锚泊设计数（个）`
FROM
  `YJGK_YXZT`
WHERE
  `GCRQ` = '2023-11-17';
pred_sql: SELECT   `MAOBSJS` AS `锚泊设计数（个）` FROM   `YJGK_YXZT` WHERE   `GCRQ` = '2023-11-17';
gold_sql: SELECT
  AVG(PER_CAPITA_CONSUMPTION) AS '居民人均生活消费支出平均值（元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS not NULL 
  AND AREA IS NULL;
  ;
pred_sql: SELECT   AVG(PER_CAPITA_CONSUMPTION) AS '居民人均生活消费支出平均值（元）' FROM   PEOPLE_LIFE_TJ WHERE   PROVINCE = '安徽省'   AND YEAR = 2010   AND CITY IS NOT NULL   AND AREA IS NULL;
gold_sql: SELECT
  CITY AS '地级市',
  RETAIL_SALES_TOTAL AS '社会消费品零售总额（亿元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
  AND AREA IS NULL;
pred_sql: SELECT   CITY AS '地级市',   RETAIL_SALES_TOTAL AS '社会消费品零售总额（亿元）' FROM   PEOPLE_LIFE_TJ WHERE   PROVINCE = '安徽省'   AND YEAR = 2010   AND CITY IS NOT NULL   AND AREA IS NULL;
gold_sql: SELECT
  SUM(LOCAL_BUDGET_EXPENDITURE) AS '地方财政一般预算支出总和（亿元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省';
pred_sql: SELECT   SUM(LOCAL_BUDGET_EXPENDITURE) AS '地方财政一般预算支出总和（亿元）' FROM   PEOPLE_LIFE_TJ WHERE   PROVINCE = '安徽省'   AND YEAR = 2010;
gold_sql: SELECT
  `CITY` AS '地级市',
  `FINANCE_REVENUE` AS '财政收入（亿元）'
FROM
  `PEOPLE_LIFE_TJ`
WHERE
  `YEAR` = 2010
  AND `PROVINCE` = '安徽省'
  AND `CITY` IS NOT NULL
   AND `AREA` IS NULL
ORDER BY
  `财政收入（亿元）` DESC
LIMIT
  1;
pred_sql: SELECT   `CITY` AS '地级市',   `FINANCE_REVENUE` AS '财政收入（亿元）' FROM   `PEOPLE_LIFE_TJ` WHERE   `PROVINCE` = '安徽省'   AND `YEAR` = 2010   AND `CITY` IS NOT NULL   AND `AREA` IS NULL ORDER BY   `FINANCE_REVENUE` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS '地级市',
  MIN(FOREIGN_INVESTMENT_USED) AS '实际使用外资（亿美元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  `YEAR` = 2010
  AND `PROVINCE` = '安徽省'
  AND `CITY` IS NOT NULL
  AND `AREA` IS NULL
GROUP BY
  CITY
ORDER BY
  `实际使用外资（亿美元）` ASC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   MIN(FOREIGN_INVESTMENT_USED) AS '实际使用外资（亿美元）' FROM   PEOPLE_LIFE_TJ WHERE   `YEAR` = 2010   AND `PROVINCE` = '安徽省'   AND `CITY` IS NOT NULL   AND `AREA` IS NULL GROUP BY   CITY ORDER BY   `实际使用外资（亿美元）` ASC LIMIT   1;
gold_sql: SELECT
  CITY AS '地级市',
  PER_CAPITA_INCOME AS '人均可支配收入（元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS not NULL
   AND `AREA` IS NULL
ORDER BY
  PER_CAPITA_INCOME DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   PER_CAPITA_INCOME AS '人均可支配收入（元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND CITY IS NOT NULL   AND `AREA` IS NULL ORDER BY   PER_CAPITA_INCOME DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CITY AS '地级市',
  PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
   AND `AREA` IS NULL
ORDER BY
  '居民人均生活消费支出（元）'
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND CITY IS NOT NULL   AND `AREA` IS NULL ORDER BY   PER_CAPITA_CONSUMPTION ASC LIMIT   1;
gold_sql: SELECT
  CITY AS '地级市',
  MIN(RETAIL_SALES_TOTAL) AS '社会消费品零售总额（亿元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
   AND `AREA` IS NULL
GROUP BY
  CITY
ORDER BY
  MIN(RETAIL_SALES_TOTAL) ASC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   MIN(RETAIL_SALES_TOTAL) AS '社会消费品零售总额（亿元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND CITY IS NOT NULL   AND `AREA` IS NULL GROUP BY   CITY ORDER BY   '社会消费品零售总额（亿元）' ASC LIMIT   1;
gold_sql: SELECT
  CITY AS '地级市',
  LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
   AND `AREA` IS NULL
ORDER BY
  LOCAL_BUDGET_EXPENDITURE ASC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND CITY IS NOT NULL   AND `AREA` IS NULL ORDER BY   LOCAL_BUDGET_EXPENDITURE ASC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT  CITY AS '地级市',  FINANCE_REVENUE AS '财政收入（亿元）' FROM  PEOPLE_LIFE_TJ WHERE  YEAR = 2010  AND PROVINCE = '安徽省'    
AND CITY IS NOT NULL
   AND `AREA` IS NULL
ORDER BY  财政收入（亿元） ASC LIMIT 1;
pred_sql: SELECT CITY AS '地级市', FINANCE_REVENUE AS '财政收入（亿元）' FROM PEOPLE_LIFE_TJ WHERE YEAR = 2010 AND PROVINCE = '安徽省' AND CITY IS NOT NULL AND `AREA` IS NULL ORDER BY FINANCE_REVENUE ASC LIMIT 1;
gold_sql: SELECT
  CITY AS '地级市',
  FOREIGN_INVESTMENT_USED AS '实际使用外资（亿美元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
    AND CITY IS NOT NULL
   AND `AREA` IS NULL
ORDER BY
  FOREIGN_INVESTMENT_USED DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   FOREIGN_INVESTMENT_USED AS '实际使用外资（亿美元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND `AREA` IS NULL   AND CITY IS NOT NULL ORDER BY   FOREIGN_INVESTMENT_USED DESC LIMIT   1;
gold_sql: SELECT
  CITY AS '地级市',
  PER_CAPITA_INCOME AS '人均可支配收入（元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
   AND `AREA` IS NULL
ORDER BY
  '人均可支配收入（元）' ASC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   PER_CAPITA_INCOME AS '人均可支配收入（元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND CITY IS NOT NULL   AND `AREA` IS NULL ORDER BY   PER_CAPITA_INCOME ASC LIMIT   1;
gold_sql: SELECT
  CITY AS '地级市',
  PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
   AND `AREA` IS NULL
ORDER BY
  PER_CAPITA_CONSUMPTION DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND CITY IS NOT NULL   AND `AREA` IS NULL ORDER BY   PER_CAPITA_CONSUMPTION DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CITY AS '地级市',
  LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY IS NOT NULL
   AND `AREA` IS NULL
ORDER BY
  LOCAL_BUDGET_EXPENDITURE DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '地级市',   LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = 2010   AND PROVINCE = '安徽省'   AND CITY IS NOT NULL   AND `AREA` IS NULL ORDER BY   LOCAL_BUDGET_EXPENDITURE DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  `O_VOLUME` as `始发量（人/月）`,
  `D_VOLUME` as `到达量（人/月）`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 6
  AND `STATION` = '洪泽';
pred_sql: SELECT   `D_VOLUME` as `到达量（人/月）`,   `O_VOLUME` as `始发量（人/月）` FROM   `GLKY_AD_TJ` WHERE   `STATION` = '洪泽'   AND `YEAR` = 2022   AND `MONTH` = 6;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  `OD` AS `客流量（人/月）`
FROM
  `GLKYL_OD_TJ`
WHERE
  `O_STATION` = '丁山站'
  AND `D_STATION` = '兴化'
  AND `OD` > 150;
pred_sql: SELECT   `MONTH` AS `月份`,   `YEAR` AS `年份`,   `OD` AS `客流量（人/月）` FROM   `GLKYL_OD_TJ` WHERE   `D_STATION` = '兴化'   AND `O_STATION` = '丁山站'   AND `OD` > 150;
gold_sql: SELECT DISTINCT
  DISTINCT `STATION` AS `客运站`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 10
  AND `TOTAL` = 7022;
pred_sql: SELECT DISTINCT `STATION` AS 客运站 FROM GLKY_AD_TJ WHERE YEAR = 2022 AND MONTH = 10 AND TOTAL = 7022;
gold_sql: SELECT DISTINCT
  DISTINCT `STATION` AS `客运站`,
  `D_VOLUME` AS `到达量(人/月)`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 6
  AND `D_VOLUME` = 20954;
pred_sql: SELECT DISTINCT   `STATION` AS `客运站`,   `D_VOLUME` AS `到达量(人/月)` FROM   `GLKY_AD_TJ` WHERE   `YEAR` = 2022   AND `MONTH` = 6   AND `D_VOLUME` = 20954;
gold_sql: SELECT DISTINCT
  DISTINCT `STATION` AS `客运站`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 9
  AND `O_VOLUME` = 36214;
pred_sql: SELECT DISTINCT `STATION` AS 客运站 FROM GLKY_AD_TJ WHERE YEAR = 2022 AND MONTH = 9 AND O_VOLUME = 36214;
gold_sql: SELECT DISTINCT
 DISTINCT  `STATION` AS `客运站`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 11
  AND `D_VOLUME` = 367;
pred_sql: SELECT DISTINCT `STATION` AS `客运站` FROM `GLKY_AD_TJ` WHERE `YEAR` = 2022 AND `MONTH` = 11 AND `D_VOLUME` = 367;
gold_sql: SELECT DISTINCT
  DISTINCT`STATION` AS `客运站`,
  `O_VOLUME` AS `始发量（人/月）`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 6
  AND `O_VOLUME` = 11097;
pred_sql: SELECT DISTINCT   `STATION` AS `客运站`,   `O_VOLUME` AS `始发量（人/月）` FROM   `GLKY_AD_TJ` WHERE   `YEAR` = 2022   AND `MONTH` = 6   AND `O_VOLUME` = 11097;
gold_sql: SELECT DISTINCT
  DISTINCT `STATION` AS `客运站`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 8
  AND `O_VOLUME` = 2040;
pred_sql: SELECT DISTINCT `STATION` AS 客运站 FROM GLKY_AD_TJ WHERE YEAR = 2022 AND MONTH = 8 AND O_VOLUME = 2040;
gold_sql: SELECT DISTINCT
 DISTINCT `STATION` AS '客运站'
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 5
  AND `TOTAL` = 11248;
pred_sql: SELECT DISTINCT `STATION` AS '客运站' FROM `GLKY_AD_TJ` WHERE `YEAR` = 2022 AND `MONTH` = 5 AND `TOTAL` = 11248;
gold_sql: SELECT DISTINCT
  DISTINCT`STATION` AS `客运站`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 10
  AND `D_VOLUME` = 48;
pred_sql: SELECT DISTINCT `STATION` AS 客运站 FROM GLKY_AD_TJ WHERE YEAR = 2022 AND MONTH = 10 AND D_VOLUME = 48;
gold_sql: SELECT DISTINCT
 DISTINCT STATION AS `客运站`
FROM
  GLKY_AD_TJ
WHERE
  YEAR = 2022
  AND MONTH = 11
  AND O_VOLUME = 8418;
pred_sql: SELECT DISTINCT STATION AS `客运站` FROM GLKY_AD_TJ WHERE YEAR = 2022 AND MONTH = 11 AND O_VOLUME = 8418;
gold_sql: SELECT DISTINCT
  DISTINCT`STATION` AS `客运站`
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` = 2022
  AND `MONTH` = 10
  AND `O_VOLUME` = 29397;
pred_sql: SELECT DISTINCT `STATION` AS 客运站 FROM GLKY_AD_TJ WHERE YEAR = 2022 AND MONTH = 10 AND O_VOLUME = 29397;
gold_sql: SELECT
  MAX(
    CASE
      WHEN MONTH = 6 THEN D_VOLUME
      ELSE 0
    END
  ) - MAX(
    CASE
      WHEN MONTH = 9 THEN D_VOLUME
      ELSE 0
    END
  ) AS `到达量之差`
FROM
  GLKY_AD_TJ
WHERE
  YEAR = 2022
  AND STATION = '启东汽车站'
  AND MONTH IN (6, 9);
pred_sql: SELECT    (SELECT D_VOLUME FROM GLKY_AD_TJ WHERE YEAR = 2022 AND STATION = '启东汽车站' AND MONTH = 6) -    (SELECT D_VOLUME FROM GLKY_AD_TJ WHERE YEAR = 2022 AND STATION = '启东汽车站' AND MONTH = 9) AS `到达量之差`;
gold_sql: SELECT DISTINCT
 DISTINCT STATION AS '客运站',
  O_VOLUME AS '始发量（人/月）'
FROM
  GLKY_AD_TJ
WHERE
  YEAR = 2022
  AND MONTH = 11
ORDER BY
  O_VOLUME ASC
LIMIT
  1;
pred_sql: SELECT DISTINCT   STATION AS '客运站',   O_VOLUME AS '始发量（人/月）' FROM   GLKY_AD_TJ WHERE   YEAR = 2022   AND MONTH = 11 ORDER BY   O_VOLUME ASC LIMIT   1;
gold_sql: SELECT
  GJLY AS '国际旅游人次（万人）'
FROM
  JCKMY_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '广东省'
  AND CITY = '潮州市'
  and DISTRICT is NULL
LIMIT
  1;
pred_sql: SELECT   GJLY AS '国际旅游人次（万人）' FROM   JCKMY_TJ WHERE   PROVINCE = '广东省'   AND CITY = '潮州市'   AND YEAR = 2010   AND DISTRICT IS NULL LIMIT   1;
gold_sql: SELECT
  CKMY AS 出口贸易总额
FROM
  JCKMY_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '河南省'
  AND CITY = '南阳市'
  AND DISTRICT is NULL
pred_sql: SELECT CKMY AS 出口贸易总额 FROM JCKMY_TJ WHERE YEAR = 2010 AND PROVINCE = '河南省' AND CITY = '南阳市' AND DISTRICT IS NULL;
gold_sql: SELECT
  SUM(GNLY) AS '国内旅游人次（万人）'
FROM
  JCKMY_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '河北省'

pred_sql: SELECT SUM(GNLY) AS '国内旅游人次（万人）' FROM JCKMY_TJ WHERE PROVINCE = '河北省' AND YEAR = 2010;
gold_sql: SELECT
  JKMY AS `进口贸易总额`
FROM
  JCKMY_TJ
WHERE
  `YEAR` = 2010
  AND PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   JKMY AS `进口贸易总额` FROM   JCKMY_TJ WHERE   PROVINCE = '江苏省'   AND CITY = '南京市'   AND `YEAR` = 2010   AND DISTRICT IS NULL;
gold_sql: SELECT
  SUM(JKMY) AS '进口贸易总额（亿美元）'
FROM
  JCKMY_TJ
WHERE
 YEAR = 2010
 AND PROVINCE = '江苏省'
 AND CITY = '苏州市'
 AND DISTRICT = '常熟市'
pred_sql: SELECT   SUM(JKMY) AS '进口贸易总额（亿美元）' FROM   JCKMY_TJ WHERE   YEAR = 2010   AND PROVINCE = '江苏省'   AND CITY = '苏州市'   AND DISTRICT = '常熟市';
gold_sql: select
  QSHZC as `全社会固定资产投资（亿元）`
from
  JCKMY_TJ
where
  YEAR = '2010'
  and PROVINCE = '江苏省'
  and CITY = '南通市'
  and DISTRICT is null;
pred_sql: select   QSHZC as `全社会固定资产投资（亿元）` from   JCKMY_TJ where   YEAR = '2010'   and PROVINCE = '江苏省'   and CITY = '南通市'   and DISTRICT is null;
gold_sql: SELECT
  CKMY AS '出口贸易总额（亿美元）'
FROM
  JCKMY_TJ
WHERE
  YEAR = '2010'
  AND PROVINCE = '江苏省'
  AND CITY = '连云港市'
  AND DISTRICT IS NULL;
pred_sql: SELECT CKMY AS '出口贸易总额（亿美元）' FROM JCKMY_TJ WHERE YEAR = '2010' AND PROVINCE = '江苏省' AND CITY = '连云港市' AND DISTRICT IS NULL;
gold_sql: SELECT
  `GNLY` AS '国内旅游人次（万人）'
FROM
  `JCKMY_TJ`
WHERE
  `YEAR` = 2010
  AND PROVINCE = '内蒙古自治区'
  AND `CITY` = '通辽市'
   AND DISTRICT IS null
LIMIT
  1;
pred_sql: SELECT   `GNLY` AS '国内旅游人次（万人）' FROM   `JCKMY_TJ` WHERE   PROVINCE = '内蒙古自治区'   AND `CITY` = '通辽市'   AND `YEAR` = 2010   AND DISTRICT IS null LIMIT   1;
gold_sql: SELECT
  `GNLY` AS '国内旅游人次（万人）'
FROM
  `JCKMY_TJ`
WHERE
  `YEAR` = '2010'
  AND `PROVINCE` = '安徽省'
  AND `CITY` = '淮北市'
  AND `DISTRICT` IS NULL;
pred_sql: SELECT   `GNLY` AS '国内旅游人次（万人）' FROM   `JCKMY_TJ` WHERE   `PROVINCE` = '安徽省'   AND `CITY` = '淮北市'   AND `YEAR` = '2010'   AND `DISTRICT` IS NULL;
gold_sql: SELECT
  QSHZC AS '全社会固定资产投资（亿元）'
FROM
  JCKMY_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '广东省'
  AND CITY = '珠海市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   QSHZC AS '全社会固定资产投资（亿元）' FROM   JCKMY_TJ WHERE   PROVINCE = '广东省'   AND CITY = '珠海市'   AND YEAR = 2010   AND DISTRICT IS NULL;
gold_sql: SELECT
  JKMY AS '进口贸易总额（亿美元）'
FROM
  JCKMY_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '江苏省'
  AND CITY = '连云港市'
  AND DISTRICT IS NULL;
pred_sql: SELECT   JKMY AS '进口贸易总额（亿美元）' FROM   JCKMY_TJ WHERE   PROVINCE = '江苏省'   AND CITY = '连云港市'   AND YEAR = 2010   AND DISTRICT IS NULL;
gold_sql: SELECT
  CKMY AS '出口贸易总额（亿美元）'
FROM
  JCKMY_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '上海市'
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT CKMY AS '出口贸易总额（亿美元）' FROM JCKMY_TJ WHERE YEAR = 2010 AND PROVINCE = '上海市' AND CITY IS NULL AND DISTRICT IS NULL;
gold_sql: SELECT
  `GNLY` AS `国内旅游人次（万人）`
FROM
  `JCKMY_TJ`
WHERE
  `YEAR` = 2014
  AND PROVINCE = '江苏省'
  AND `CITY` = '淮安市'
  AND DISTRICT IS NULL
pred_sql: SELECT   `GNLY` AS `国内旅游人次（万人）` FROM   `JCKMY_TJ` WHERE   `YEAR` = 2014   AND `CITY` = '淮安市'   AND PROVINCE = '江苏省'   AND DISTRICT IS NULL;
gold_sql: SELECT
  SUM(QSHZC) AS '全社会固定资产投资（亿元）'
FROM
  JCKMY_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '上海市'
  AND CITY IS null 
  AND DISTRICT IS null;
  
pred_sql: SELECT   SUM(QSHZC) AS '全社会固定资产投资（亿元）' FROM   JCKMY_TJ WHERE   PROVINCE = '上海市'   AND YEAR = 2010   AND CITY IS NULL   AND DISTRICT IS NULL;
gold_sql: SELECT
  CITY AS '地级市'
FROM
  JCKMY_TJ
WHERE
  `YEAR` = 2010
  AND PROVINCE = '江苏省'
  AND GJLY = 0
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT CITY AS '地级市' FROM JCKMY_TJ WHERE `YEAR` = 2010 AND PROVINCE = '江苏省' AND GJLY = 0 AND CITY IS NOT NULL AND DISTRICT IS NULL;
gold_sql: SELECT CHUANZMC AS 船闸名称, SUM(TONGXL) AS 总通行量（艘） FROM CJ_YXZT GROUP BY CHUANZMC ORDER BY 总通行量（艘） DESC LIMIT 1;
pred_sql: SELECT CHUANZMC AS 船闸名称, SUM(TONGXL) AS 总通行量（艘） FROM CJ_YXZT GROUP BY CHUANZMC ORDER BY 总通行量（艘） DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  GUANLDW AS 管理单位,
  SUM(TONGXL) AS 总通行量
FROM
  CJ_YXZT
GROUP BY
  GUANLDW
ORDER BY
  总通行量 ASC
LIMIT
  1;
pred_sql: SELECT   GUANLDW AS 管理单位,   SUM(TONGXL) AS 总通行量 FROM   CJ_YXZT GROUP BY   GUANLDW ORDER BY   总通行量 ASC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT CHUANZMC AS 船闸名称, AVG(PINGJDZSJ) AS 平均待闸时间（小时） FROM CJ_YXZT WHERE GCRQ BETWEEN '2022-01-01' AND '2023-12-31' GROUP BY CHUANZMC ORDER BY 平均待闸时间（小时） DESC LIMIT 1;
pred_sql: SELECT CHUANZMC AS 船闸名称, AVG(PINGJDZSJ) AS 平均待闸时间（小时） FROM CJ_YXZT WHERE GCRQ BETWEEN '2022-01-01' AND '2023-12-31' GROUP BY CHUANZMC ORDER BY AVG(PINGJDZSJ) DESC LIMIT 1;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  SUM(GUOZCBHYL) AS 最高船闸过闸货运量累计值
FROM
  CJ_YXZT
WHERE
  YEAR(GCRQ) = YEAR(CURDATE()) - 1
GROUP BY
  CHUANZMC
ORDER BY
  最高船闸过闸货运量累计值 DESC
LIMIT
  1;
pred_sql: SELECT   CHUANZMC AS 船闸名称,   SUM(GUOZCBHYL) AS 最高船闸过闸货运量累计值 FROM   CJ_YXZT WHERE   YEAR(GCRQ) = YEAR(CURDATE()) - 1 GROUP BY   CHUANZMC ORDER BY   最高船闸过闸货运量累计值 DESC LIMIT   1;
gold_sql: SELECT 
CHUANZMC AS 船闸名称, 
TONGXL AS 每日船舶通过量（艘） 
FROM cj_yxzt 
WHERE GCRQ = (SELECT MAX(GCRQ) FROM cj_yxzt) 
ORDER BY TONGXL DESC LIMIT 1;
pred_sql: SELECT  CHUANZMC AS 船闸名称,  TONGXL AS 每日船舶通过量（艘）  FROM cj_yxzt  WHERE GCRQ = (SELECT MAX(GCRQ) FROM cj_yxzt)  ORDER BY TONGXL DESC  FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  SUM(TONGXL) AS 通行量合计
FROM
  CJ_YXZT
WHERE
  YEAR(GCRQ) = 2023
GROUP BY
  CHUANZMC
HAVING
  SUM(TONGXL) > 0
ORDER BY
  通行量合计 DESC;
pred_sql: SELECT   CHUANZMC AS 船闸名称,   SUM(TONGXL) AS 通行量合计 FROM   CJ_YXZT WHERE   YEAR(GCRQ) = 2023 GROUP BY   CHUANZMC HAVING   SUM(TONGXL) > 0 ORDER BY   通行量合计 DESC;
gold_sql: SELECT
  GUANLDW AS 管理单位,
  PINGJDZSJ AS 平均待闸时间
FROM
  CJ_YXZT
ORDER BY
  PINGJDZSJ ASC
LIMIT
  1;
pred_sql: SELECT   GUANLDW AS 管理单位,   PINGJDZSJ AS 平均待闸时间 FROM   CJ_YXZT ORDER BY   PINGJDZSJ ASC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  MAX(GUOZCBHYL) AS 最大货运量
FROM
  CJ_YXZT
WHERE
  YEAR(GCRQ) = YEAR(CURDATE()) - 1
GROUP BY
  CHUANZMC
ORDER BY
  最大货运量 DESC
LIMIT
  1;
pred_sql: SELECT   CHUANZMC AS 船闸名称,   MAX(GUOZCBHYL) AS 最大货运量 FROM   CJ_YXZT WHERE   YEAR(GCRQ) = YEAR(CURDATE()) - 1 GROUP BY   CHUANZMC ORDER BY   最大货运量 DESC LIMIT   1;
gold_sql: SELECT
  CITY AS '市',
  YEAR AS '年份',
  REGIONAL_GDP AS '生产总值（亿元）'
FROM
  GDP_TJ
WHERE
  PROVINCE = '江苏省'
  AND CITY IS NOT NULL
  and DISTRICT is null
  AND REGIONAL_GDP >= 10
  AND YEAR = (
    SELECT
      MIN(YEAR)
    FROM
      GDP_TJ AS g
    WHERE
      g.PROVINCE = '江苏省'
      AND g.CITY = GDP_TJ.CITY
      AND g.REGIONAL_GDP >= 10
  )
ORDER BY
  YEAR
LIMIT
  1;
pred_sql: SELECT   CITY AS '市',   YEAR AS '年份',   REGIONAL_GDP AS '生产总值（亿元）' FROM   GDP_TJ WHERE   PROVINCE = '江苏省'   AND CITY IS NOT NULL   AND DISTRICT IS NULL   AND REGIONAL_GDP >= 10   AND YEAR IN (     SELECT       MIN(YEAR)     FROM       GDP_TJ AS g     WHERE       g.PROVINCE = '江苏省'       AND g.CITY = GDP_TJ.CITY       AND g.REGIONAL_GDP >= 10   ) ORDER BY   YEAR ASC LIMIT   1;
gold_sql: SELECT
  `YEAR` AS '年份',
  `PRIMARY_INDUSTRY` AS '第一产业（亿元）'
FROM
  `GDP_TJ`
WHERE
  `CITY` = '安庆市'
ORDER BY
  `YEAR` DESC,
  `PRIMARY_INDUSTRY` DESC
LIMIT
  1;
pred_sql: SELECT   `YEAR` AS '年份',   `PRIMARY_INDUSTRY` AS '第一产业（亿元）' FROM   `GDP_TJ` WHERE   `CITY` = '安庆市' ORDER BY   `PRIMARY_INDUSTRY` DESC,   `YEAR` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS `地级市`,
  TERTIARY_INDUSTRY AS `第三产业产值（亿元）`
FROM
  GDP_TJ
WHERE
  PROVINCE = '江苏省'
  AND CITY IS NOT NULL
  AND DISTRICT is null
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      GDP_TJ
  )
ORDER BY
  `第三产业产值（亿元）` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `地级市`,   TERTIARY_INDUSTRY AS `第三产业产值（亿元）` FROM   GDP_TJ WHERE   PROVINCE = '江苏省'   AND CITY IS NOT NULL   AND DISTRICT is null   AND YEAR = (     SELECT       MAX(YEAR)     FROM       GDP_TJ   ) ORDER BY   TERTIARY_INDUSTRY DESC LIMIT   1;
gold_sql: SELECT
  CITY AS `地级市`,
  PER_CAPITA_REGIONAL_GDP AS `人均地区生产总值（元）`
FROM
  GDP_TJ
WHERE
  PROVINCE = '江苏省'
  AND CITY IS NOT NULL
  and DISTRICT is null
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      GDP_TJ
  )
ORDER BY
  PER_CAPITA_REGIONAL_GDP DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `地级市`,   PER_CAPITA_REGIONAL_GDP AS `人均地区生产总值（元）` FROM   GDP_TJ WHERE   PROVINCE = '江苏省'   AND CITY IS NOT NULL   AND DISTRICT IS NULL   AND YEAR = (     SELECT       MAX(YEAR)     FROM       GDP_TJ   ) ORDER BY   PER_CAPITA_REGIONAL_GDP DESC LIMIT   1;
gold_sql: SELECT
  YEAR AS `年份`,
  MONTH AS `月份`,
  O_STATION AS `始发站`,
  D_STATION AS `终点站`,
  OD AS `客流量（人/月）`
FROM
  GLKYL_OD_TJ
WHERE
  (YEAR, OD) IN (
    SELECT
      YEAR,
      MAX(OD)
    FROM
      GLKYL_OD_TJ
    GROUP BY
      YEAR,
      O_STATION,
      D_STATION
  )
ORDER BY
  OD DESC
LIMIT
  1;
pred_sql: SELECT   `年份`,   `月份`,   `始发站`,   `终点站`,   `客流量（人/月）` FROM (   SELECT     YEAR AS `年份`,     MONTH AS `月份`,     O_STATION AS `始发站`,     D_STATION AS `终点站`,     OD AS `客流量（人/月）`,     RANK() OVER (PARTITION BY YEAR ORDER BY OD DESC) AS rank   FROM     GLKYL_OD_TJ ) ranked_data WHERE   rank = 1 ORDER BY   `客流量（人/月）` DESC LIMIT 1;
gold_sql: SELECT
  `D_STATION` AS `终点站`,
  SUM(`OD`) AS `客流量（人/月）总和`
FROM
  `GLKYL_OD_TJ`
WHERE
  `YEAR` IN ('2021', '2022', '2023')
GROUP BY
  `D_STATION`
ORDER BY
  SUM(`OD`) DESC
LIMIT
  1;
pred_sql: SELECT   `D_STATION` AS `终点站`,   SUM(`OD`) AS `客流量（人/月）总和` FROM   `GLKYL_OD_TJ` WHERE   `YEAR` IN (2021, 2022, 2023) GROUP BY   `D_STATION` ORDER BY   `客流量（人/月）总和` DESC LIMIT   1;
gold_sql: SELECT
  O_STATION AS `始发站`,
  D_STATION AS `终点站`,
  MAX(OD) AS `最大的月度客流量`
FROM
  GLKYL_OD_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      GLKYL_OD_TJ
  )
GROUP BY
  O_STATION,
  D_STATION
ORDER BY
  `最大的月度客流量` DESC
LIMIT
  1;
pred_sql: SELECT   D_STATION AS `终点站`,   O_STATION AS `始发站`,   MAX(OD) AS `最大的月度客流量` FROM   GLKYL_OD_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       GLKYL_OD_TJ   ) GROUP BY   D_STATION,   O_STATION ORDER BY   `最大的月度客流量` DESC LIMIT   1;
gold_sql: SELECT
  `O_STATION` AS `始发站`,
  (
    SUM(
      CASE
        WHEN `MONTH` = '6' THEN `OD`
        ELSE 0
      END
    ) - AVG(`OD`)
  ) AS `显著增量`
FROM
  `GLKYL_OD_TJ`
WHERE
  `YEAR` = '2023'
GROUP BY
  `O_STATION`
ORDER BY
  `显著增量` DESC
LIMIT
  1;
pred_sql: SELECT      `O_STATION` AS `始发站`,     (SUM(CASE WHEN `MONTH` = '6' THEN `OD` ELSE 0 END) - AVG(`OD`)) AS `显著增量` FROM      `GLKYL_OD_TJ` WHERE      `YEAR` = '2023' GROUP BY      `O_STATION` ORDER BY      `显著增量` DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS 年份,
  `STATION` AS 客运站,
  `TOTAL` AS 到发总量
FROM
  `GLKY_AD_TJ`
WHERE
  `YEAR` >= 2022
  AND `STATION` IN (
    SELECT
      `STATION`
    FROM
      (
        SELECT
          `YEAR`,
          `STATION`,
          ROW_NUMBER() OVER (
            PARTITION BY
              `YEAR`
            ORDER BY
              `TOTAL` DESC
          ) AS 排名
        FROM
          `GLKY_AD_TJ`
        WHERE
          `YEAR` >= 2022
      ) t
    WHERE
      排名 <= 5
    GROUP BY
      `STATION`
    HAVING
      COUNT(DISTINCT `YEAR`) = 2
  )
ORDER BY
  `YEAR`,
  `TOTAL` DESC;
pred_sql: SELECT   `YEAR` AS 年份,   `STATION` AS 客运站,   `TOTAL` AS 到发总量 FROM   `GLKY_AD_TJ` WHERE   `YEAR` IN (2022, 2023)   AND `STATION` IN (     SELECT       `STATION`     FROM (       SELECT         `YEAR`,         `STATION`,         ROW_NUMBER() OVER (PARTITION BY `YEAR` ORDER BY `TOTAL` DESC) AS 排名       FROM         `GLKY_AD_TJ`       WHERE         `YEAR` IN (2022, 2023)     ) t     WHERE       排名 <= 5     GROUP BY       `STATION`     HAVING       COUNT(DISTINCT `YEAR`) = 2   ) ORDER BY   `YEAR`,   `TOTAL` DESC;
gold_sql: SELECT
  `STATION` AS '客运站',
  `YEAR` AS '年份',
  `MONTH` AS '月份',
  `O_VOLUME` AS '始发量'
FROM
  `GLKY_AD_TJ` a
WHERE
  `O_VOLUME` > 2 * (
    SELECT
      AVG(`O_VOLUME`)
    FROM
      `GLKY_AD_TJ`
    WHERE
      `STATION` = a.`STATION`
      AND `YEAR` = a.`YEAR`
  )
pred_sql: SELECT   a.`STATION` AS '客运站',   a.`YEAR` AS '年份',   a.`MONTH` AS '月份',   a.`O_VOLUME` AS '始发量' FROM   `GLKY_AD_TJ` a WHERE   a.`O_VOLUME` > (     SELECT       2 * AVG(b.`O_VOLUME`)     FROM       `GLKY_AD_TJ` b     WHERE       b.`STATION` = a.`STATION`       AND b.`YEAR` = a.`YEAR`   );
gold_sql: SELECT
  YEAR AS `年份`,
  MONTH AS `月份`,
  STATION AS `客运站`,
  D_VOLUME AS `到达量`
FROM
  GLKY_AD_TJ
WHERE
  (YEAR, D_VOLUME) IN (
    SELECT
      YEAR,
      MAX(D_VOLUME)
    FROM
      GLKY_AD_TJ
    GROUP BY
      YEAR,
      STATION
  )
ORDER BY
  YEAR,
  STATION
pred_sql: SELECT   YEAR AS `年份`,   MONTH AS `月份`,   STATION AS `客运站`,   D_VOLUME AS `到达量` FROM   GLKY_AD_TJ WHERE   (YEAR, D_VOLUME) IN (     SELECT       YEAR,       MAX(D_VOLUME)     FROM       GLKY_AD_TJ     GROUP BY       YEAR,       STATION   ) ORDER BY   YEAR,   STATION;
gold_sql: SELECT
  t1.YEAR AS '年份',
  t1.TOTAL AS '当年到发总量',
  ROUND((t1.TOTAL - t2.TOTAL) / t2.TOTAL * 100, 2) AS '增长率（%）'
FROM
  (
    SELECT
      YEAR,
      SUM(TOTAL) AS TOTAL
    FROM
      glky_ad_tj
    WHERE
      STATION = '洪泽'
    GROUP BY
      YEAR
  ) t1
  JOIN (
    SELECT
      YEAR,
      SUM(TOTAL) AS TOTAL
    FROM
      glky_ad_tj
    WHERE
      STATION = '洪泽'
    GROUP BY
      YEAR
  ) t2 ON t1.YEAR = t2.YEAR + 1
WHERE
  ROUND((t1.TOTAL - t2.TOTAL) / t2.TOTAL * 100, 2) > 10;
pred_sql: SELECT   t1.YEAR AS '年份',   t1.TOTAL AS '当年到发总量',   ROUND((t1.TOTAL - t2.TOTAL) / t2.TOTAL * 100, 2) AS '增长率（%）' FROM   (     SELECT       YEAR,       SUM(TOTAL) AS TOTAL     FROM       glky_ad_tj     WHERE       STATION = '洪泽'     GROUP BY       YEAR   ) t2   JOIN (     SELECT       YEAR,       SUM(TOTAL) AS TOTAL     FROM       glky_ad_tj     WHERE       STATION = '洪泽'     GROUP BY       YEAR   ) t1 ON t1.YEAR = t2.YEAR + 1 WHERE   ROUND((t1.TOTAL - t2.TOTAL) / t2.TOTAL * 100, 2) > 10;
gold_sql: SELECT
  CITY AS 城市,
  HIGHWAY + NATIONAL_ROAD + PROVINCIAL_ROAD + COUNTY_ROAD + TOWNSHIP_ROAD + IFNULL(SPECIAL_PURPOSE_ROAD, 0) + RURAL_ROAD AS 总公路里程
FROM
  GL_LC
WHERE
  YEAR = 2022
ORDER BY
  总公路里程 DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS 城市,   (HIGHWAY + NATIONAL_ROAD + PROVINCIAL_ROAD + COUNTY_ROAD + TOWNSHIP_ROAD + IFNULL(SPECIAL_PURPOSE_ROAD, 0) + RURAL_ROAD) AS 总公路里程 FROM   GL_LC WHERE   YEAR = 2022 GROUP BY   CITY ORDER BY   总公路里程 DESC LIMIT   1;
gold_sql: SELECT
  YEAR AS 年份,
  CITY AS 城市
FROM
  GL_LC
WHERE
  NATIONAL_ROAD > PROVINCIAL_ROAD
ORDER BY
  YEAR ASC
LIMIT
  1;
pred_sql: SELECT   YEAR AS 年份,   CITY AS 城市 FROM   GL_LC WHERE   NATIONAL_ROAD > PROVINCIAL_ROAD ORDER BY   YEAR ASC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CITY AS `城市`,
  COUNTY_ROAD / TOWNSHIP_ROAD AS `县道里程与乡道里程之比`
FROM
  GL_LC
WHERE
  `YEAR` = (
    SELECT
      MAX(YEAR)
    FROM
      GL_LC
  )
ORDER BY
  `县道里程与乡道里程之比` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `城市`,   COUNTY_ROAD / TOWNSHIP_ROAD AS `县道里程与乡道里程之比` FROM   GL_LC WHERE   YEAR = (SELECT MAX(YEAR) FROM GL_LC) ORDER BY   `县道里程与乡道里程之比` DESC LIMIT 1;
gold_sql: SELECT
  CITY AS `城市`,
  RURAL_ROAD / COUNTY_ROAD AS `农村公路里程是县道里程的倍数`
FROM
  GL_LC
WHERE
  CITY = '连云港市'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      GL_LC
    WHERE
      CITY = '连云港市'
  );
pred_sql: SELECT   `城市`,   `农村公路里程是县道里程的倍数` FROM (   SELECT     CITY AS `城市`,     RURAL_ROAD / COUNTY_ROAD AS `农村公路里程是县道里程的倍数`   FROM     GL_LC   WHERE     CITY = '连云港市'     AND `YEAR` = (       SELECT         MAX(`YEAR`)       FROM         GL_LC       WHERE         CITY = '连云港市'     ) ) AS subquery;
gold_sql: SELECT
  SFZMC AS `收费站名称`,
  KECZLL AS `客车总流量`
FROM
  GSGL_CRKSFZ_YXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_CRKSFZ_YXZT
  )
ORDER BY
  KECZLL DESC
LIMIT
  1;
pred_sql: SELECT   `收费站名称`,   `客车总流量` FROM (   SELECT     SFZMC AS `收费站名称`,     KECZLL AS `客车总流量`   FROM     GSGL_CRKSFZ_YXZT   WHERE     GCRQ = (       SELECT         MAX(GCRQ)       FROM         GSGL_CRKSFZ_YXZT     ) ) AS subquery ORDER BY   `客车总流量` DESC LIMIT   1;
gold_sql: SELECT
  t1.SZDQ AS '所在地区'
FROM
  GSGL_CRKSFZ_YXZT t1
  JOIN GSGL_CRKSFZ_YXZT t2 ON t1.SFZMC = t2.SFZMC
  AND t1.SFZBH = t2.SFZBH
WHERE
  YEAR(t1.GCRQ) = 2022
  AND YEAR(t2.GCRQ) = 2023
  AND t2.HUOCZLL > t1.HUOCZLL
GROUP BY
  t1.SZDQ;
pred_sql: SELECT DISTINCT   t1.SZDQ AS '所在地区' FROM   GSGL_CRKSFZ_YXZT t1 JOIN   GSGL_CRKSFZ_YXZT t2 ON t1.SFZMC = t2.SFZMC AND t1.SFZBH = t2.SFZBH WHERE   YEAR(t1.GCRQ) = 2022 AND YEAR(t2.GCRQ) = 2023 AND t2.HUOCZLL > t1.HUOCZLL;
gold_sql: SELECT
  SFZMC AS 收费站名称,
  TONGJLC AS 里程
FROM
  GSGL_CRKSFZ_YXZT
ORDER BY
  TONGJLC DESC
LIMIT
  1;
pred_sql: SELECT   SFZMC AS 收费站名称,   TONGJLC AS 里程 FROM   GSGL_CRKSFZ_YXZT ORDER BY   里程 DESC LIMIT   1;
gold_sql: SELECT
  SFZMC AS `收费站名称`,
  ZONGCLL AS `最高车辆总流量`,
  CHEHZZL AS `最高车货总重量`
FROM
  GSGL_CRKSFZ_YXZT
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31'
ORDER BY
  ZONGCLL DESC,
  CHEHZZL DESC
LIMIT
  1;
pred_sql: SELECT   SFZMC AS `收费站名称`,   ZONGCLL AS `最高车辆总流量`,   CHEHZZL AS `最高车货总重量` FROM   GSGL_CRKSFZ_YXZT WHERE   GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31' ORDER BY   ZONGCLL DESC,   CHEHZZL DESC LIMIT 1;
gold_sql: SELECT
  O_PROVINCE AS `省份`,
  VOLUME / total_volume * 100 AS `流入量占比（%）`
FROM
  (
    SELECT
      O_PROVINCE,
      VOLUME,
      (
        SELECT
          SUM(VOLUME)
        FROM
          GSGL_CRK_ZYSFLR
        WHERE
          GCRQ = (
            SELECT
              MAX(GCRQ)
            FROM
              GSGL_CRK_ZYSFLR
          )
      ) AS total_volume
    FROM
      GSGL_CRK_ZYSFLR
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_CRK_ZYSFLR
      )
  ) AS subquery
ORDER BY
  `流入量占比（%）` DESC
LIMIT
  1;
pred_sql: SELECT   O_PROVINCE AS `省份`,   VOLUME / total_volume * 100 AS `流入量占比（%）` FROM   (     SELECT       O_PROVINCE,       VOLUME,       (         SELECT           SUM(VOLUME)         FROM           GSGL_CRK_ZYSFLR         WHERE           GCRQ = (             SELECT               MAX(GCRQ)             FROM               GSGL_CRK_ZYSFLR           )       ) AS total_volume     FROM       GSGL_CRK_ZYSFLR     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           GSGL_CRK_ZYSFLR       )   ) AS subquery ORDER BY   `流入量占比（%）` DESC LIMIT   1;
gold_sql: SELECT
  O_PROVINCE AS `省份`,
  SUM(VOLUME) AS `流入量（辆/天）`
FROM
  GSGL_CRK_ZYSFLR
WHERE
  YEAR(GCRQ) = YEAR(CURDATE()) - 1
  AND MONTH(GCRQ) = 10
GROUP BY
  O_PROVINCE
ORDER BY
  `流入量（辆/天）` DESC
LIMIT
  1;
pred_sql: SELECT   O_PROVINCE AS `省份`,   SUM(VOLUME) AS `流入量（辆/天）` FROM   GSGL_CRK_ZYSFLR WHERE   GCRQ >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND GCRQ < DATE_SUB(CURDATE(), INTERVAL 1 YEAR - INTERVAL 10 MONTH) GROUP BY   O_PROVINCE ORDER BY   `流入量（辆/天）` DESC LIMIT   1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  SUM(`VOLUME`) AS `总体流入量`
FROM
  `GSGL_CRK_ZYSFLR`
GROUP BY
  `GCRQ`
ORDER BY
  `总体流入量` DESC
LIMIT
  1;
pred_sql: SELECT   `GCRQ` AS `观测日期`,   SUM(`VOLUME`) AS `总体流入量` FROM   `GSGL_CRK_ZYSFLR` GROUP BY   `GCRQ` ORDER BY   `总体流入量` DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  O_PROVINCE AS `省份`,
  SUM(VOLUME) AS `流入量`
FROM
  GSGL_CRK_ZYSFLR
WHERE
  YEAR(GCRQ) = YEAR(CURDATE()) - 1
GROUP BY
  O_PROVINCE
ORDER BY
  `流入量` DESC
LIMIT
  3;
pred_sql: SELECT   O_PROVINCE AS `省份`,   SUM(VOLUME) AS `流入量` FROM   GSGL_CRK_ZYSFLR WHERE   YEAR(GCRQ) = YEAR(CURDATE()) - 1 GROUP BY   O_PROVINCE HAVING   `流入量` <= (     SELECT       MAX(`流入量`)     FROM (       SELECT         O_PROVINCE,         SUM(VOLUME) AS `流入量`       FROM         GSGL_CRK_ZYSFLR       WHERE         YEAR(GCRQ) = YEAR(CURDATE()) - 1       GROUP BY         O_PROVINCE       ORDER BY         `流入量` DESC       LIMIT 3     ) AS top_provinces   ) ORDER BY   `流入量` DESC;
gold_sql: SELECT
  HOUR as `时间段`,
  ROAD_VOLUME as `总在网车流量（辆）`
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  )
ORDER BY
  ROAD_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT   HOUR AS `时间段`,   ROAD_VOLUME AS `总在网车流量（辆）` FROM   GSGL_DMLL_FS WHERE   GCRQ = (SELECT MAX(GCRQ) FROM GSGL_DMLL_FS) ORDER BY   ROAD_VOLUME DESC LIMIT 1;
gold_sql: SELECT
  HOUR AS `客车在网车流量最大的时段`
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  )
ORDER BY
  COACH_ROAD_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT HOUR AS `客车在网车流量最大的时段` FROM GSGL_DMLL_FS WHERE GCRQ = (     SELECT MAX(GCRQ)     FROM GSGL_DMLL_FS ) ORDER BY COACH_ROAD_VOLUME DESC LIMIT 1;
gold_sql: SELECT
  HOUR AS `货车车流量最大的时间段`
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  )
ORDER BY
  TRUNK_ROAD_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT HOUR AS `货车车流量最大的时间段` FROM GSGL_DMLL_FS WHERE GCRQ = (     SELECT MAX(GCRQ)     FROM GSGL_DMLL_FS ) ORDER BY TRUNK_ROAD_VOLUME DESC LIMIT 1;
gold_sql: SELECT
  HOUR AS `时段`,
  MAX(ROAD_VOLUME) AS `年度最高在网车流量`
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY
  HOUR
ORDER BY
  `年度最高在网车流量` DESC
LIMIT
  1;
pred_sql: SELECT   HOUR AS `时段`,   MAX(ROAD_VOLUME) AS `年度最高在网车流量` FROM   GSGL_DMLL_FS WHERE   GCRQ BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY   HOUR ORDER BY   `年度最高在网车流量` DESC LIMIT   1;
gold_sql: SELECT
  `ROAD_TYPE` AS `道路面层`,
  AVG(`TRUCK_UP`) AS `最高月平均货车上行量（辆/日）`
FROM
  `GSGL_DMLL_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `GSGL_DMLL_TJ`
  )
GROUP BY
  `ROAD_TYPE`
ORDER BY
  `最高月平均货车上行量（辆/日）` DESC
LIMIT
  1;
pred_sql: SELECT   `ROAD_TYPE` AS `道路面层`,   AVG(`TRUCK_UP`) AS `最高月平均货车上行量（辆/日）` FROM   `GSGL_DMLL_TJ` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `GSGL_DMLL_TJ`   ) GROUP BY   `ROAD_TYPE` ORDER BY   `最高月平均货车上行量（辆/日）` DESC LIMIT   1;
gold_sql: SELECT
  `ROAD_NAME` AS `断面名称`
FROM
  `GSGL_DMLL_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `GSGL_DMLL_TJ`
  )
  AND `COACH_UP` > `TRUCK_DOWN`
LIMIT
  1;
pred_sql: SELECT   `ROAD_NAME` AS `断面名称` FROM   `GSGL_DMLL_TJ` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `GSGL_DMLL_TJ`   )   AND `COACH_UP` > `TRUCK_DOWN` ORDER BY   `ROAD_NAME` LIMIT   1;
gold_sql: SELECT
  ROAD_TYPE AS `道路面层`,
  AVG(COACH_DOWN) AS `月平均客车下行量`
FROM
  GSGL_DMLL_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      GSGL_DMLL_TJ
  )
GROUP BY
  ROAD_TYPE
ORDER BY
  `月平均客车下行量` DESC
LIMIT
  1;
pred_sql: SELECT   ROAD_TYPE AS `道路面层`,   AVG(COACH_DOWN) AS `月平均客车下行量` FROM   GSGL_DMLL_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       GSGL_DMLL_TJ   ) GROUP BY   ROAD_TYPE ORDER BY   `月平均客车下行量` DESC LIMIT   1;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  (UP_VOLUME + DOWN_VOLUME) AS `上行总量和下行总量之和（辆/日）`
FROM
  GSGL_DMLL_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      GSGL_DMLL_TJ
  )
ORDER BY
  `上行总量和下行总量之和（辆/日）` DESC
LIMIT
  1;
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   (UP_VOLUME + DOWN_VOLUME) AS `上行总量和下行总量之和（辆/日）` FROM   GSGL_DMLL_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       GSGL_DMLL_TJ   ) GROUP BY   ROAD_NAME ORDER BY   SUM(UP_VOLUME + DOWN_VOLUME) DESC LIMIT   1;
gold_sql: SELECT
  HOUR AS `时间段`,
  VOLUME AS `断面流量`
FROM
  GSGL_DMLL_TOP10
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_TOP10
  )
ORDER BY
  `断面流量` DESC
LIMIT
  1;
pred_sql: SELECT   HOUR AS `时间段`,   VOLUME AS `断面流量` FROM   GSGL_DMLL_TOP10 WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMLL_TOP10   ) ORDER BY   VOLUME DESC LIMIT   1;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  HOUR AS `时间段`,
  MAX(VOLUME) AS `峰值流量`
FROM
  GSGL_DMLL_TOP10
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_TOP10
  )
GROUP BY
  ROAD_NAME,
  HOUR
ORDER BY
  `峰值流量` DESC
LIMIT
  1;
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   HOUR AS `时间段`,   MAX(VOLUME) AS `峰值流量` FROM   GSGL_DMLL_TOP10 WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMLL_TOP10   ) GROUP BY   HOUR,   ROAD_NAME ORDER BY   `峰值流量` DESC LIMIT   1;
gold_sql: SELECT
  GSMC AS `高速公路名称`,
  DUANMMC AS `断面名称`,
  HUOCZLL AS `货车总流量`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
ORDER BY
  HUOCZLL DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   GSMC AS `高速公路名称`,   HUOCZLL AS `货车总流量` FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   ) ORDER BY   HUOCZLL DESC LIMIT   1;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  MAX(VOLUME) AS `最高流量`
FROM
  GSGL_DMLL_TOP10
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_TOP10
  )
GROUP BY
  ROAD_NAME
ORDER BY
  `最高流量` DESC
LIMIT
  1;
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   MAX(VOLUME) AS `最高流量` FROM   GSGL_DMLL_TOP10 WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMLL_TOP10   ) GROUP BY   ROAD_NAME ORDER BY   `最高流量` DESC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  KECZLL AS `客车总流量`
FROM
  GSGL_DMYXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMYXZT
  )
AND DUANMMC IS NOT NULL
ORDER BY
  KECZLL DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   KECZLL AS `客车总流量` FROM   GSGL_DMYXZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMYXZT   ) AND DUANMMC IS NOT NULL ORDER BY   KECZLL DESC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  GSMC AS `高速公路名称`,
  TONGJLC AS `里程（公里）`
FROM
  GSGL_DMYXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMYXZT
  )
ORDER BY
  TONGJLC DESC
LIMIT
  1;
pred_sql: SELECT   GSMC AS `高速公路名称`,   DUANMMC AS `断面名称`,   TONGJLC AS `里程（公里）` FROM   GSGL_DMYXZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMYXZT   ) ORDER BY   TONGJLC DESC LIMIT   1;
gold_sql: SELECT
  a.DUANMMC AS `断面名称`,
  a.GSMC AS `高速名称`,
  a.GCRQ AS `观测日期`,
  a.HUOCZLL AS `货车总流量`
FROM
  GSGL_DMYXZT a
  JOIN GSGL_DMYXZT b ON a.DUANMBM = b.DUANMBM
WHERE
  a.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMYXZT
  )
  AND b.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMYXZT
    WHERE
      GCRQ < (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_DMYXZT
      )
  )
  AND a.HUOCZLL > b.HUOCZLL
ORDER BY
  a.HUOCZLL DESC;
pred_sql: SELECT   a.DUANMMC AS `断面名称`,   a.GSMC AS `高速名称`,   a.GCRQ AS `观测日期`,   a.HUOCZLL AS `货车总流量` FROM   GSGL_DMYXZT a   JOIN GSGL_DMYXZT b ON a.DUANMBM = b.DUANMBM WHERE   a.GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMYXZT   )   AND b.GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMYXZT     WHERE       GCRQ < (         SELECT           MAX(GCRQ)         FROM           GSGL_DMYXZT       )   )   AND a.HUOCZLL > b.HUOCZLL ORDER BY   a.HUOCZLL DESC;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  ZONGCLL AS `总车流量（辆/天）`,
  CHEHZZL AS `车货总重量（吨）`
FROM
  GSGL_DMYXZT
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-12-31'
ORDER BY
  ZONGCLL DESC,
  CHEHZZL DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   ZONGCLL AS `总车流量（辆/天）`,   CHEHZZL AS `车货总重量（吨）` FROM   GSGL_DMYXZT WHERE   GCRQ >= '2023-01-01' AND GCRQ <= '2023-12-31' ORDER BY   ZONGCLL DESC,   CHEHZZL DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  LUD AS `路段`,
  YONGDCHENGD AS `拥堵程度`,
  YONGDCHANGD AS `拥堵长度（米）`
FROM
  GSGL_LDYDZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_LDYDZT
  )
  AND YONGDCHENGD = '严重拥堵'
ORDER BY
  YONGDCHANGD DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS `路段`,   YONGDCHENGD AS `拥堵程度`,   YONGDCHANGD AS `拥堵长度（米）` FROM   GSGL_LDYDZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_LDYDZT   )   AND YONGDCHENGD = '严重拥堵' ORDER BY   YONGDCHANGD DESC LIMIT   1;
gold_sql: SELECT
  LUD AS '路段',
  QIDZH AS '起点桩号',
  ZHONGDZH AS '终点桩号',
  YONGDCHANGD AS '拥堵长度（米）'
FROM
  gsgl_ldydzt
ORDER BY
  YONGDCHANGD DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS '路段',   QIDZH AS '起点桩号',   ZHONGDZH AS '终点桩号',   YONGDCHANGD AS '拥堵长度（米）' FROM   gsgl_ldydzt ORDER BY   YONGDCHANGD DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  LUD AS 路段,
  CHIXSJ AS 最短持续时间
FROM
  gsgl_ldydzt
ORDER BY
  CHIXSJ ASC
LIMIT
  1;
pred_sql: SELECT   LUD AS 路段,   CHIXSJ AS 最短持续时间 FROM   gsgl_ldydzt ORDER BY   CHIXSJ ASC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  LUD AS '路段',
  COUNT(*) AS '拥堵次数'
FROM
  GSGL_LDYDZT
WHERE
  YEAR(GCRQ) = 2023
GROUP BY
  LUD
ORDER BY
  '拥堵次数' DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS '路段',   COUNT(*) AS '拥堵次数' FROM   GSGL_LDYDZT WHERE   YEAR(GCRQ) = 2023 GROUP BY   LUD ORDER BY   '拥堵次数' DESC LIMIT   1;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  LUWCTL AS `高速公路路网畅通率`
FROM
  GSGL_LWYDZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_LWYDZT
  )
ORDER BY
  LUWCTL DESC
LIMIT
  1;
pred_sql: SELECT   XINGZQH AS `行政区划`,   LUWCTL AS `高速公路路网畅通率` FROM   GSGL_LWYDZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_LWYDZT   ) ORDER BY   LUWCTL DESC LIMIT   1;
gold_sql: SELECT
  XINGZQH AS '行政区划',
  GCRQ AS '观测日期',
  LUWCTL AS '路网畅通率',
  HUANBI AS '环比'
FROM
  GSGL_LWYDZT
WHERE
  GCRQ BETWEEN '2023-07-01' AND '2023-07-31'
  AND HUANBI < 0;
pred_sql: SELECT   XINGZQH AS '行政区划',   GCRQ AS '观测日期',   LUWCTL AS '路网畅通率',   HUANBI AS '环比' FROM   GSGL_LWYDZT WHERE   GCRQ >= '2023-07-01' AND GCRQ <= '2023-07-31'   AND HUANBI < 0;
gold_sql: SELECT
  a.XINGZQH AS '行政区划',
  a.LUWCTL AS '当前路网畅通率',
  b.LUWCTL AS '之前路网畅通率',
  a.LUWCTL - b.LUWCTL AS '畅通率变化'
FROM
  PTGL_LWYDZT a
  JOIN PTGL_LWYDZT b ON a.XINGZQH = b.XINGZQH
WHERE
  a.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      PTGL_LWYDZT
  )
  AND b.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      PTGL_LWYDZT
    WHERE
      GCRQ < (
        SELECT
          MAX(GCRQ)
        FROM
          PTGL_LWYDZT
      )
  )
  AND a.LUWCTL > b.LUWCTL;
pred_sql: SELECT   a.XINGZQH AS '行政区划',   a.LUWCTL AS '当前路网畅通率',   b.LUWCTL AS '之前路网畅通率',   a.LUWCTL - b.LUWCTL AS '畅通率变化' FROM   PTGL_LWYDZT a,   PTGL_LWYDZT b WHERE   a.XINGZQH = b.XINGZQH   AND a.GCRQ = (     SELECT       MAX(GCRQ)     FROM       PTGL_LWYDZT   )   AND b.GCRQ = (     SELECT       MAX(GCRQ)     FROM       PTGL_LWYDZT     WHERE       GCRQ < (         SELECT           MAX(GCRQ)         FROM           PTGL_LWYDZT       )   )   AND a.LUWCTL > b.LUWCTL;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  LUWCTL AS `最高路网畅通率`
FROM
  GSGL_LWYDZT
ORDER BY
  LUWCTL DESC
LIMIT
  1;
pred_sql: SELECT   XINGZQH AS `行政区划`,   LUWCTL AS `最高路网畅通率` FROM   GSGL_LWYDZT ORDER BY   LUWCTL DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  O_PROVINCE AS `起点省份`,
  SUM(CHELL) AS `客一车流量最大`
FROM
  GSGL_OD_FLOW
WHERE
  CHELLX = '客一'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_OD_FLOW
  )
GROUP BY
  O_PROVINCE
ORDER BY
  `客一车流量最大` DESC
LIMIT
  1;
pred_sql: SELECT   O_PROVINCE AS `起点省份`,   SUM(CHELL) AS `客一车流量最大` FROM   GSGL_OD_FLOW WHERE   CHELLX = '客一'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_OD_FLOW   ) GROUP BY   O_PROVINCE ORDER BY   `客一车流量最大` DESC LIMIT   1;
gold_sql: SELECT
  D_PROVINCE AS `终点省份`,
  SUM(CHELL) AS `累积车流量最高`
FROM
  GSGL_OD_FLOW
WHERE
  CHELLX = '货三'
  AND GCRQ <= DATE_FORMAT(NOW() - INTERVAL 1 YEAR, '%Y-12-31')
GROUP BY
  D_PROVINCE
ORDER BY
  `累积车流量最高` DESC
LIMIT
  1;
pred_sql: SELECT   D_PROVINCE AS `终点省份`,   SUM(CHELL) AS `累积车流量最高` FROM   GSGL_OD_FLOW WHERE   CHELLX = '货三'   AND GCRQ <= DATE_FORMAT(NOW() - INTERVAL 1 YEAR, '%Y-12-31') GROUP BY   D_PROVINCE ORDER BY   `累积车流量最高` DESC LIMIT   1;
gold_sql: SELECT
  D_CITY AS `终点城市`,
  SUM(CHELL) AS `专一车流量`
FROM
  GSGL_OD_FLOW
WHERE
  CHELLX = '专一'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_OD_FLOW
  )
GROUP BY
  D_CITY
HAVING
  `专一车流量` > (
    SELECT
      AVG(CHELL)
    FROM
      GSGL_OD_FLOW
    WHERE
      D_CITY = GSGL_OD_FLOW.D_CITY
      AND GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_OD_FLOW
      )
  )
pred_sql: SELECT   D_CITY AS `终点城市`,   SUM(CHELL) AS `专一车流量` FROM   GSGL_OD_FLOW WHERE   CHELLX = '专一'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_OD_FLOW   ) GROUP BY   D_CITY HAVING   `专一车流量` > (     SELECT       AVG(CHELL)     FROM       GSGL_OD_FLOW AS sub     WHERE       sub.D_CITY = GSGL_OD_FLOW.D_CITY       AND sub.GCRQ = (         SELECT           MAX(GCRQ)         FROM           GSGL_OD_FLOW       )   ) ```
gold_sql: SELECT
  `O_PROVINCE` AS `入口省份`,
  MAX(`VOLUME`) AS `最大车流量（辆/月）`
FROM
  `GSGL_OD_FLOW_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `GSGL_OD_FLOW_TJ`
  )
  AND `MONTH` = (
    SELECT
      MAX(`MONTH`)
    FROM
      `GSGL_OD_FLOW_TJ`
  )
  AND `CAR_TYPE` = '客车'
GROUP BY
  `O_PROVINCE`
ORDER BY
  `最大车流量（辆/月）` DESC
LIMIT
  1;
pred_sql: SELECT   `O_PROVINCE` AS `入口省份`,   MAX(`VOLUME`) AS `最大车流量（辆/月）` FROM   `GSGL_OD_FLOW_TJ` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `GSGL_OD_FLOW_TJ`   )   AND `MONTH` = (     SELECT       MAX(`MONTH`)     FROM       `GSGL_OD_FLOW_TJ`   )   AND `CAR_TYPE` = '客车' GROUP BY   `O_PROVINCE` ORDER BY   `最大车流量（辆/月）` DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS '入口城市',
  SUM(VOLUME) AS '车流量总数'
FROM
  GSGL_OD_FLOW_TJ
GROUP BY
  O_CITY
ORDER BY
  SUM(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT   O_CITY AS '入口城市',   SUM(VOLUME) AS '车流量总数' FROM   GSGL_OD_FLOW_TJ GROUP BY   O_CITY ORDER BY   '车流量总数' DESC LIMIT   1;
gold_sql: SELECT
  `D_PROVINCE` AS `出口省份`,
  SUM(`VOLUME_YEAR`) AS `累计车流量`
FROM
  `GSGL_OD_FLOW_TJ`
WHERE
  `CAR_TYPE` = '货车'
  AND `YEAR` = 2023
GROUP BY
  `D_PROVINCE`
ORDER BY
  `累计车流量` DESC
LIMIT
  1;
pred_sql: SELECT   `D_PROVINCE` AS `出口省份`,   SUM(`VOLUME_YEAR`) AS `累计车流量` FROM   `GSGL_OD_FLOW_TJ` WHERE   `CAR_TYPE` = '货车'   AND `YEAR` = 2023 GROUP BY   `D_PROVINCE` ORDER BY   `累计车流量` DESC LIMIT   1;
gold_sql: SELECT
  `D_CITY` AS `出口城市`
FROM
  `GSGL_OD_FLOW_TJ`
WHERE
  `CAR_TYPE` = '客车'
  AND `MONTH` = (
    SELECT
      MAX(`MONTH`)
    FROM
      `GSGL_OD_FLOW_TJ`
  )
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `GSGL_OD_FLOW_TJ`
  )
GROUP BY
  `D_CITY`
HAVING
  SUM(`VOLUME`) > (
    SELECT
      AVG(`VOLUME`)
    FROM
      `GSGL_OD_FLOW_TJ`
    WHERE
      `D_CITY` = `GSGL_OD_FLOW_TJ`.`D_CITY`
      AND `MONTH` = (
        SELECT
          MAX(`MONTH`)
        FROM
          `GSGL_OD_FLOW_TJ`
      )
      AND `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          `GSGL_OD_FLOW_TJ`
      )
  )
pred_sql: SELECT DISTINCT `D_CITY` AS `出口城市` FROM `GSGL_OD_FLOW_TJ` WHERE `CAR_TYPE` = '客车'   AND (`MONTH`, `YEAR`) = (     SELECT `MONTH`, `YEAR`     FROM `GSGL_OD_FLOW_TJ`     ORDER BY `YEAR` DESC, `MONTH` DESC     LIMIT 1   ) GROUP BY `D_CITY` HAVING SUM(`VOLUME`) > (   SELECT AVG(`VOLUME`)   FROM `GSGL_OD_FLOW_TJ` AS sub   WHERE sub.`D_CITY` = `GSGL_OD_FLOW_TJ`.`D_CITY`     AND (sub.`MONTH`, sub.`YEAR`) = (       SELECT `MONTH`, `YEAR`       FROM `GSGL_OD_FLOW_TJ`       ORDER BY `YEAR` DESC, `MONTH` DESC       LIMIT 1     ) );
gold_sql: SELECT
  O_CITY AS `起点城市`,
  SUM(CHELL) AS `总车流量`
FROM
  GSGL_RMLX
GROUP BY
  O_CITY
ORDER BY
  `总车流量` DESC
LIMIT
  1;
pred_sql: SELECT   O_CITY AS `起点城市`,   SUM(CHELL) AS `总车流量` FROM   GSGL_RMLX GROUP BY   O_CITY ORDER BY   `总车流量` DESC LIMIT   1;
gold_sql: SELECT
  D_CITY AS '终点城市'
FROM
  GSGL_RMLX
WHERE
  YEAR(GCRQ) = YEAR(CURDATE()) - 1
GROUP BY
  D_CITY
HAVING
  SUM(CHELL) > (
    SELECT
      SUM(CHELL)
    FROM
      GSGL_RMLX AS subquery
    WHERE
      subquery.D_CITY = GSGL_RMLX.D_CITY
      AND YEAR(subquery.GCRQ) = YEAR(CURDATE()) - 1
      AND subquery.GCRQ = (
        SELECT
          MIN(GCRQ)
        FROM
          GSGL_RMLX AS min_date_subquery
        WHERE
          min_date_subquery.D_CITY = GSGL_RMLX.D_CITY
          AND YEAR(min_date_subquery.GCRQ) = YEAR(CURDATE()) - 1
      )
  )
pred_sql: SELECT D_CITY AS '终点城市' FROM GSGL_RMLX WHERE YEAR(GCRQ) = YEAR(CURDATE()) - 1 GROUP BY D_CITY HAVING SUM(CHELL) > (     SELECT SUM(CHELL)     FROM GSGL_RMLX AS subquery     WHERE subquery.D_CITY = GSGL_RMLX.D_CITY       AND YEAR(subquery.GCRQ) = YEAR(CURDATE()) - 1       AND subquery.GCRQ = (         SELECT MIN(GCRQ)         FROM GSGL_RMLX AS min_date_subquery         WHERE min_date_subquery.D_CITY = GSGL_RMLX.D_CITY           AND YEAR(min_date_subquery.GCRQ) = YEAR(CURDATE()) - 1       ) ) ORDER BY D_CITY;
gold_sql: SELECT
  `D_CITY` AS `终点城市`
FROM
  `GSGL_RMLX`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `GSGL_RMLX`
  )
GROUP BY
  `D_CITY`
HAVING
  SUM(`CHELL`) > AVG(`CHELL`);
pred_sql: SELECT D_CITY AS 终点城市 FROM GSGL_RMLX WHERE GCRQ = (SELECT MAX(GCRQ) FROM GSGL_RMLX) GROUP BY D_CITY HAVING SUM(CHELL) > (     SELECT AVG(CHELL)     FROM GSGL_RMLX     WHERE GCRQ = (SELECT MAX(GCRQ) FROM GSGL_RMLX) );
gold_sql: SELECT
  CHANNEL AS 航道名称,
  MAX(VOLUME) AS 最大货运量
FROM
  HD_NH_DM
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HD_NH_DM
  )
GROUP BY
  CHANNEL
ORDER BY
  最大货运量 DESC
LIMIT
  1;
pred_sql: SELECT   CHANNEL AS 航道名称,   MAX(VOLUME) AS 最大货运量 FROM   HD_NH_DM WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HD_NH_DM   ) GROUP BY   CHANNEL ORDER BY   最大货运量 DESC LIMIT   1;
gold_sql: SELECT
  SEGMENT AS '航段',
  MONTH AS '月份',
  VOLUME AS '货运量（万吨）'
FROM
  HD_NH_DM
WHERE
  (YEAR, VOLUME) IN (
    SELECT
      YEAR,
      MAX(VOLUME)
    FROM
      HD_NH_DM
    GROUP BY
      YEAR,
      MONTH
  )
pred_sql: SELECT   SEGMENT AS '航段',   MONTH AS '月份',   VOLUME AS '货运量（万吨）' FROM   HD_NH_DM WHERE   (YEAR, VOLUME) IN (     SELECT       YEAR,       MAX(VOLUME)     FROM       HD_NH_DM     GROUP BY       YEAR,       MONTH   );
gold_sql: SELECT
  CHANNEL AS 航道名称,
  SUM(VOLUME) AS 累计货运量
FROM
  HD_NH_DM
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HD_NH_DM
  )
GROUP BY
  CHANNEL
ORDER BY
  累计货运量 DESC
LIMIT
  1;
pred_sql: SELECT   CHANNEL AS 航道名称,   SUM(VOLUME) AS 累计货运量 FROM   HD_NH_DM WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HD_NH_DM   ) GROUP BY   CHANNEL ORDER BY   累计货运量 DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT      CHUANZMC AS 船闸名称,     GCRQ AS 观测日期,     GUOZCBHYL AS 过闸船舶货运量（吨） FROM      CJ_YXZT a WHERE      GUOZCBHYL > (         SELECT              AVG(GUOZCBHYL)          FROM              CJ_YXZT b          WHERE              a.CHUANZMC = b.CHUANZMC          GROUP BY              YEAR(b.GCRQ), MONTH(b.GCRQ)     );
pred_sql: SELECT      CHUANZMC AS 船闸名称,      GCRQ AS 观测日期,      GUOZCBHYL AS 过闸船舶货运量（吨） FROM      CJ_YXZT a WHERE      GUOZCBHYL > (         SELECT              AVG(GUOZCBHYL)         FROM              CJ_YXZT b         WHERE              a.CHUANZMC = b.CHUANZMC         GROUP BY              YEAR(b.GCRQ), MONTH(b.GCRQ)     ) ORDER BY      GUOZCBHYL DESC LIMIT 1;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  SUM(`VOLUME`) AS `最大货运量（吨）`
FROM
  hd_nh_od
WHERE
  `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
  AND (`YEAR`, `MONTH`) = (
    SELECT
      MAX(`YEAR`),
      MAX(`MONTH`)
    FROM
      hd_nh_od
  )
GROUP BY
  `CARGO`
ORDER BY
  `最大货运量（吨）` DESC
LIMIT
  1;
pred_sql: SELECT   `CARGO` AS `货物种类`,   SUM(`VOLUME`) AS `最大货运量（吨）` FROM   hd_nh_od WHERE   `O_DISTRICTS` = '南京城区'   AND `D_DISTRICTS` = '南京城区'   AND (`YEAR`, `MONTH`) IN (     SELECT       MAX(`YEAR`),       MAX(`MONTH`)     FROM       hd_nh_od   ) GROUP BY   `CARGO` ORDER BY   `最大货运量（吨）` DESC LIMIT   1;
gold_sql: SELECT
  DIRECTION AS 航向
FROM
  HD_NH_OD
WHERE
  (YEAR, MONTH, VOLUME) IN (
    SELECT
      YEAR,
      MONTH,
      MAX(VOLUME)
    FROM
      HD_NH_OD
    GROUP BY
      YEAR,
      MONTH
  );
pred_sql: SELECT DIRECTION AS 航向 FROM HD_NH_OD WHERE (YEAR, MONTH, VOLUME) IN (     SELECT YEAR, MONTH, MAX(VOLUME)     FROM HD_NH_OD     GROUP BY YEAR, MONTH );
gold_sql: SELECT
  `CARGO` AS `货种`,
  SUM(`VOLUME`) AS `累计货运量`
FROM
  hd_nh_od
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_nh_od
  )
GROUP BY
  `CARGO`
ORDER BY
  `累计货运量` DESC
LIMIT
  1;
pred_sql: SELECT   `CARGO` AS `货种`,   SUM(`VOLUME`) AS `累计货运量` FROM   hd_nh_od WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_nh_od   ) GROUP BY   `CARGO` ORDER BY   `累计货运量` DESC LIMIT   1;
gold_sql: SELECT
  `O_DISTRICTS` AS `起点区县`,
  `CARGO` AS `货种`,
  `VOLUME` AS `货运量`
FROM
  `HD_NH_OD` a
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `HD_NH_OD`
  )
  AND `MONTH` = (
    SELECT
      MAX(`MONTH`)
    FROM
      `HD_NH_OD`
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          `HD_NH_OD`
      )
  )
  AND `VOLUME` > (
    SELECT
      AVG(`VOLUME`)
    FROM
      `HD_NH_OD` b
    WHERE
      a.CARGO = b.CARGO
  )
pred_sql: SELECT   `O_DISTRICTS` AS `起点区县`,   `CARGO` AS `货种`,   `VOLUME` AS `货运量` FROM   `HD_NH_OD` a WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `HD_NH_OD`   )   AND `MONTH` = (     SELECT       MAX(`MONTH`)     FROM       `HD_NH_OD`     WHERE       `YEAR` = (         SELECT           MAX(`YEAR`)         FROM           `HD_NH_OD`       )   )   AND `VOLUME` > (     SELECT       AVG(`VOLUME`)     FROM       `HD_NH_OD` b     WHERE       a.CARGO = b.CARGO   );
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  (
    SUM(`VOLUME`) - LAG(SUM(`VOLUME`)) OVER (
      PARTITION BY
        `O_CITY`
      ORDER BY
        `YEAR`
    )
  ) AS `货运量增长（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` BETWEEN 2019 AND 2023
GROUP BY
  `O_CITY`,
  `YEAR`
ORDER BY
  `货运量增长（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   `O_CITY` AS `起点城市`,   (     SUM(`VOLUME`) - LAG(SUM(`VOLUME`)) OVER (       PARTITION BY         `O_CITY`       ORDER BY         `YEAR`     )   ) AS `货运量增长（万吨）` FROM   hd_yjyh_od WHERE   `YEAR` BETWEEN 2019 AND 2023 GROUP BY   `O_CITY`,   `YEAR` ORDER BY   `货运量增长（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  (
    `VOLUME` - LAG(`VOLUME`) OVER (
      PARTITION BY
        `CARGO`
      ORDER BY
        `YEAR`
    )
  ) AS `货运量增长（万吨）`
FROM
  `HD_YJYH_OD`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `HD_YJYH_OD`
  )
ORDER BY
  `货运量增长（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   `CARGO` AS `货物种类`,   (     `VOLUME` - LAG(`VOLUME`) OVER (       PARTITION BY         `CARGO`       ORDER BY         `YEAR`     )   ) AS `货运量增长（万吨）` FROM   `HD_YJYH_OD` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `HD_YJYH_OD`   ) GROUP BY   `CARGO`, `VOLUME` ORDER BY   `货运量增长（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  D_PROVINCE AS '终点省份',
  SUM(VOLUME) AS '货运量（万吨）'
FROM
  HD_YJYH_OD
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HD_YJYH_OD
  )
GROUP BY
  D_PROVINCE
ORDER BY
  SUM(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT   D_PROVINCE AS '终点省份',   SUM(VOLUME) AS '货运量（万吨）' FROM   HD_YJYH_OD WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HD_YJYH_OD   ) GROUP BY   D_PROVINCE ORDER BY   '货运量（万吨）' DESC LIMIT   1;
gold_sql: SELECT
  `O_COUNTRY` AS `起点国家`,
  SUM(`VOLUME`) AS `总货运量（万吨）`,
  MAX(`YEAR`) - MIN(`YEAR`) AS `年份跨度`,
  ABS(MAX(`VOLUME`) - MIN(`VOLUME`)) AS `货运量变化`
FROM
  hd_yjyh_od
GROUP BY
  `O_COUNTRY`
ORDER BY
  `货运量变化` ASC
LIMIT
  1;
pred_sql: SELECT   `O_COUNTRY` AS `起点国家`,   SUM(`VOLUME`) AS `总货运量（万吨）`,   MAX(`YEAR`) - MIN(`YEAR`) AS `年份跨度`,   ABS(MAX(`VOLUME`) - MIN(`VOLUME`)) AS `货运量变化` FROM   hd_yjyh_od GROUP BY   `O_COUNTRY` ORDER BY   `货运量变化` ASC LIMIT   1;
gold_sql: SELECT
  `HANGDMC` AS '航道名称'
FROM
  hd_yxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      hd_yxzt
  )
  AND `HANGDXZDJ` = '一级航道';
pred_sql: SELECT   `HANGDMC` AS '航道名称' FROM   hd_yxzt WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       hd_yxzt   )   AND `HANGDXZDJ` = '一级航道';
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  MAX(`HANGDZDSS` - `ZUIDTHSS`) AS `通航水深变化最大值`
FROM
  hd_yxzt
WHERE
  YEAR(`GCRQ`) = YEAR(CURDATE()) - 1
GROUP BY
  `HANGDMC`
ORDER BY
  `通航水深变化最大值` DESC
LIMIT
  1;
pred_sql: SELECT   `HANGDMC` AS `航道名称`,   MAX(`HANGDZDSS` - `ZUIDTHSS`) AS `通航水深变化最大值` FROM   hd_yxzt WHERE   YEAR(`GCRQ`) = YEAR(CURDATE()) - 1 GROUP BY   `HANGDMC` ORDER BY   `通航水深变化最大值` DESC LIMIT   1;
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  MIN(`HANGDZDSS` - `ZUIDTHSS`) AS `水深差值`
FROM
  `HD_YXZT`
WHERE
  `GCRQ` BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY
  `HANGDMC`
ORDER BY
  `水深差值` ASC
LIMIT
  1;
pred_sql: SELECT   `HANGDMC` AS `航道名称`,   MIN(`HANGDZDSS` - `ZUIDTHSS`) AS `水深差值` FROM   `HD_YXZT` WHERE   `GCRQ` >= '2023-01-01' AND `GCRQ` <= '2023-12-31' GROUP BY   `HANGDMC` ORDER BY   `水深差值` ASC LIMIT   1;
gold_sql: SELECT
  `HANGDMC` AS '航道名称',
  `GCRQ` AS '观测日期',
  `HANGDDK` / `HANGDMK` AS '航道底宽与航道面宽之比'
FROM
  `HD_YXZT`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `HD_YXZT`
  )
ORDER BY
  `HANGDDK` / `HANGDMK` DESC
LIMIT
  1;
pred_sql: SELECT   `HANGDMC` AS '航道名称',   `GCRQ` AS '观测日期',   `HANGDDK` / `HANGDMK` AS '航道底宽与航道面宽之比' FROM   `HD_YXZT` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `HD_YXZT`   ) ORDER BY   `航道底宽与航道面宽之比` DESC LIMIT   1;
gold_sql: SELECT
  CONCAT(YEAR, '年', LPAD(MONTH, 2, '0'), '月') AS '月份',
  SUM(FLIGHTS) AS '航班数量'
FROM
  HK_HX
GROUP BY
  YEAR,
  MONTH
ORDER BY
  SUM(FLIGHTS) DESC
LIMIT
  1;
pred_sql: SELECT   CONCAT(YEAR, '年', LPAD(MONTH, 2, '0'), '月') AS '月份',   SUM(FLIGHTS) AS '航班数量' FROM   HK_HX GROUP BY   YEAR,   MONTH ORDER BY   '航班数量' DESC LIMIT   1;
gold_sql: SELECT
  O_AIRPORT AS `出发机场`,
  SUM(
    CASE
      WHEN YEAR = 2023 THEN FLIGHTS
      ELSE 0
    END
  ) - SUM(
    CASE
      WHEN YEAR = 2022 THEN FLIGHTS
      ELSE 0
    END
  ) AS `航班数增长`
FROM
  HK_HX
GROUP BY
  O_AIRPORT
ORDER BY
  `航班数增长` DESC
LIMIT
  1;
pred_sql: SELECT      O_AIRPORT AS `出发机场`,     (SUM(CASE WHEN YEAR = 2023 THEN FLIGHTS ELSE 0 END) - SUM(CASE WHEN YEAR = 2022 THEN FLIGHTS ELSE 0 END)) AS `航班数增长` FROM      HK_HX GROUP BY      O_AIRPORT ORDER BY      `航班数增长` DESC LIMIT 1;
gold_sql: SELECT
  D_AIRPORT AS '到达机场',
  SUM(FLIGHTS) AS '航班数量'
FROM
  hk_hx
WHERE
  YEAR = 2023
GROUP BY
  D_AIRPORT
ORDER BY
  SUM(FLIGHTS) DESC
LIMIT
  1;
pred_sql: SELECT   D_AIRPORT AS '到达机场',   COUNT(FLIGHTS) AS '航班数量' FROM   hk_hx WHERE   YEAR = 2023 GROUP BY   D_AIRPORT ORDER BY   COUNT(FLIGHTS) DESC LIMIT   1;
gold_sql: SELECT
  当前月份表.`MONTH` AS `月份`,
  (当前月份表.`FLIGHTS` - 上个月份表.`FLIGHTS`) AS `航班数变化`
FROM
  (
    SELECT
      `YEAR`,
      `MONTH`,
      SUM(`FLIGHTS`) AS `FLIGHTS`
    FROM
      `HK_HX`
    WHERE
      `YEAR` = 2023
    GROUP BY
      `YEAR`,
      `MONTH`
  ) AS 当前月份表
  LEFT JOIN (
    SELECT
      `YEAR`,
      `MONTH`,
      SUM(`FLIGHTS`) AS `FLIGHTS`
    FROM
      `HK_HX`
    WHERE
      `YEAR` = 2023
    GROUP BY
      `YEAR`,
      `MONTH`
  ) AS 上个月份表 ON 当前月份表.`MONTH` = 上个月份表.`MONTH` + 1
ORDER BY
  `航班数变化` ASC
LIMIT
  1;
pred_sql: SELECT   当前月份表.`MONTH` AS `月份`,   (当前月份表.`FLIGHTS` - IFNULL(上个月份表.`FLIGHTS`, 0)) AS `航班数变化` FROM   (     SELECT       `YEAR`,       `MONTH`,       SUM(`FLIGHTS`) AS `FLIGHTS`     FROM       `HK_HX`     WHERE       `YEAR` = 2023     GROUP BY       `YEAR`,       `MONTH`   ) AS 当前月份表   LEFT JOIN (     SELECT       `YEAR`,       `MONTH`,       SUM(`FLIGHTS`) AS `FLIGHTS`     FROM       `HK_HX`     WHERE       `YEAR` = 2023     GROUP BY       `YEAR`,       `MONTH`   ) AS 上个月份表 ON 当前月份表.`MONTH` = 上个月份表.`MONTH` + 1 ORDER BY   `航班数变化` ASC LIMIT   1;
gold_sql: SELECT
  CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS '航线',
  SUM(HANGBL) AS '航班量'
FROM
  HK_KYLX
WHERE
  GCRQ BETWEEN DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        HK_KYLX
    ),
    INTERVAL 6 DAY
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      HK_KYLX
  )
GROUP BY
  LUXQDCSMC,
  LUXZDCSMC
ORDER BY
  `航班量` DESC
LIMIT
  1;
pred_sql: SELECT   CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS '航线',   SUM(HANGBL) AS '航班量' FROM   HK_KYLX WHERE   GCRQ >= (     SELECT       MAX(GCRQ) - INTERVAL 6 DAY     FROM       HK_KYLX   ) GROUP BY   LUXQDCSMC,   LUXZDCSMC ORDER BY   `航班量` DESC LIMIT   1;
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市`,
  SUM(`ZUOWS`) AS `航线座位总数`
FROM
  `HK_KYLX`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `HK_KYLX`
  )
GROUP BY
  `LUXQDCSMC`
ORDER BY
  `航线座位总数` DESC
LIMIT
  1;
pred_sql: SELECT   `LUXQDCSMC` AS `起点城市`,   SUM(`ZUOWS`) AS `航线座位总数` FROM   `HK_KYLX` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `HK_KYLX`   ) GROUP BY   `LUXQDCSMC` ORDER BY   `航线座位总数` DESC LIMIT   1;
gold_sql: SELECT
  LUXZDCSMC AS 终点城市,
  (
    SUM(
      CASE
        WHEN YEAR(GCRQ) = YEAR(CURDATE()) - 1 THEN ZUOWS
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN YEAR(GCRQ) = YEAR(CURDATE()) - 2 THEN ZUOWS
        ELSE 0
      END
    )
  ) AS 座位数增长
FROM
  HK_KYLX
GROUP BY
  LUXZDCSMC
ORDER BY
  座位数增长 DESC
LIMIT
  1;
pred_sql: SELECT   LUXZDCSMC AS 终点城市,   (     SUM(       CASE         WHEN YEAR(GCRQ) = YEAR(CURDATE()) - 1 THEN ZUOWS         ELSE 0       END     ) - SUM(       CASE         WHEN YEAR(GCRQ) = YEAR(CURDATE()) - 2 THEN ZUOWS         ELSE 0       END     )   ) AS 座位数增长 FROM   HK_KYLX GROUP BY   LUXZDCSMC ORDER BY   座位数增长 DESC LIMIT   1;
gold_sql: SELECT
  CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS '航线',
  ZUOWS / HANGBL AS '座位总数与航班量之比'
FROM
  HK_KYLX
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      HK_KYLX
  )
ORDER BY
  ZUOWS / HANGBL DESC
LIMIT
  1;
pred_sql: SELECT   CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS '航线',   ZUOWS / HANGBL AS '座位总数与航班量之比' FROM   HK_KYLX WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       HK_KYLX   ) GROUP BY   LUXQDCSMC, LUXZDCSMC ORDER BY   '座位总数与航班量之比' DESC LIMIT   1;
gold_sql: SELECT
  o_city AS '起点城市',
  d_city AS '终点城市',
  SUM(PASSENGER) AS '旅客量（万/人）'
FROM
  HK_OD
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_OD
  )
GROUP BY
  o_city,
  d_city
ORDER BY
  SUM(PASSENGER) DESC
LIMIT
  1;
pred_sql: SELECT   d_city AS '终点城市',   o_city AS '起点城市',   SUM(PASSENGER) AS '旅客量（万/人）' FROM   HK_OD WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HK_OD   ) GROUP BY   d_city,   o_city ORDER BY   SUM(PASSENGER) DESC LIMIT   1;
gold_sql: SELECT
  `MONTH` AS `月份`,
  (
    SUM(
      CASE
        WHEN `YEAR` = 2023 THEN `PASSENGER`
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN `YEAR` = 2022 THEN `PASSENGER`
        ELSE 0
      END
    )
  ) AS `旅客量增长`
FROM
  `HK_OD`
GROUP BY
  `MONTH`
ORDER BY
  `旅客量增长` DESC
LIMIT
  1;
pred_sql: SELECT      `MONTH` AS `月份`,     (SUM(CASE WHEN `YEAR` = 2023 THEN `PASSENGER` ELSE 0 END) - SUM(CASE WHEN `YEAR` = 2022 THEN `PASSENGER` ELSE 0 END)) AS `旅客量增长` FROM      `HK_OD` GROUP BY      `MONTH` ORDER BY      `旅客量增长` DESC LIMIT 1;
gold_sql: SELECT
  `MONTH` AS '月份',
  SUM(`PASSENGER`) AS '航班旅客量（万/人）'
FROM
  `HK_OD`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      HK_OD
  )
GROUP BY
  `MONTH`
ORDER BY
  SUM(`PASSENGER`) DESC
LIMIT
  1;
pred_sql: SELECT   `MONTH` AS '月份',   SUM(`PASSENGER`) AS '航班旅客量（万/人）' FROM   `HK_OD` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `HK_OD`   ) GROUP BY   `MONTH` ORDER BY   SUM(`PASSENGER`) DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  SUM(PASSENGER) AS '旅客量（万/人）'
FROM
  HK_OD
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_OD
  )
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  SUM(PASSENGER) DESC
LIMIT
  1;
pred_sql: SELECT   D_CITY AS '终点城市',   O_CITY AS '起点城市',   SUM(PASSENGER) AS '旅客量（万/人）' FROM   HK_OD WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HK_OD   ) GROUP BY   D_CITY,   O_CITY ORDER BY   SUM(PASSENGER) DESC LIMIT   1;
gold_sql: SELECT
  O_AIRPORT AS '起点城市',
  D_AIRPORT AS '终点城市',
  SUM(FLIGHTS) AS '航班数'
FROM
  HK_HX
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_HX
  )
GROUP BY
  O_AIRPORT,
  D_AIRPORT
ORDER BY
  SUM(FLIGHTS) DESC
LIMIT
  1;
pred_sql: SELECT   D_AIRPORT AS '终点城市',   O_AIRPORT AS '起点城市',   SUM(FLIGHTS) AS '航班数' FROM   HK_HX WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HK_HX   ) GROUP BY   D_AIRPORT,   O_AIRPORT ORDER BY   SUM(FLIGHTS) DESC LIMIT   1;
gold_sql: SELECT
  YEAR AS '年份',
  MONTH AS '月份',
  MAX(PASSENGER) - MIN(PASSENGER) AS '波动量'
FROM
  HK_OD_SJXL
GROUP BY
  YEAR,
  MONTH
ORDER BY
  '波动量' DESC
LIMIT
  1;
pred_sql: SELECT   YEAR AS '年份',   MONTH AS '月份',   (MAX(PASSENGER) - MIN(PASSENGER)) AS '波动量' FROM   HK_OD_SJXL GROUP BY   YEAR,   MONTH ORDER BY   '波动量' DESC LIMIT   1;
gold_sql: SELECT
  AIT_ROUTE_TYPE AS '航线类型',
  SUM(PASSENGER) AS '旅客量（人/月）'
FROM
  HK_OD_SJXL
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_OD_SJXL
  )
  AND O_PROVINCE = '江苏省'
GROUP BY
  AIT_ROUTE_TYPE
ORDER BY
  '旅客量（人/月）' DESC
LIMIT
  1;
pred_sql: SELECT   AIT_ROUTE_TYPE AS '航线类型',   SUM(PASSENGER) AS '旅客量（人/月）' FROM   HK_OD_SJXL WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HK_OD_SJXL   )   AND O_PROVINCE = '江苏省' GROUP BY   AIT_ROUTE_TYPE ORDER BY   SUM(PASSENGER) DESC LIMIT   1;
gold_sql: SELECT
  AIT_ROUTE_TYPE AS '航线类型',
  SUM(PASSENGER) AS '旅客量（人/月）'
FROM
  HK_OD_SJXL
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_OD_SJXL
  )
GROUP BY
  AIT_ROUTE_TYPE
ORDER BY
  SUM(PASSENGER) DESC
LIMIT
  1;
pred_sql: SELECT   AIT_ROUTE_TYPE AS '航线类型',   SUM(PASSENGER) AS '旅客量（人/月）' FROM   HK_OD_SJXL WHERE   YEAR = (SELECT MAX(YEAR) FROM HK_OD_SJXL) GROUP BY   AIT_ROUTE_TYPE ORDER BY   '旅客量（人/月）' DESC LIMIT   1;
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市名称`,
  SUM(`ZUOWS`) AS `总座位数`
FROM
  `HK_KYLX`
WHERE
  `GCRQ` BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY
  `LUXQDCSMC`
ORDER BY
  `总座位数` DESC
LIMIT
  1;
pred_sql: SELECT   `LUXQDCSMC` AS `起点城市名称`,   SUM(`ZUOWS`) AS `总座位数` FROM   `HK_KYLX` WHERE   `GCRQ` >= '2023-01-01' AND `GCRQ` <= '2023-12-31' GROUP BY   `LUXQDCSMC` ORDER BY   `总座位数` DESC LIMIT   1;
gold_sql: SELECT
  `GCRQ` AS '观测日期',
  `LUXQDCSMC` AS '路线起点城市名称',
  `LUXZDCSMC` AS '路线终点城市名称',
  SUM(`ZUOWS`) AS '座位数（个）'
FROM
  `HK_KYLX`
GROUP BY
  `GCRQ`,
  `LUXQDCSMC`,
  `LUXZDCSMC`
ORDER BY
  SUM(`ZUOWS`) DESC
LIMIT
  1;
pred_sql: SELECT   `GCRQ` AS '观测日期',   `LUXQDCSMC` AS '路线起点城市名称',   `LUXZDCSMC` AS '路线终点城市名称',   SUM(`ZUOWS`) AS '座位数（个）' FROM   `HK_KYLX` GROUP BY   `GCRQ`,   `LUXQDCSMC`,   `LUXZDCSMC` ORDER BY   `座位数（个）` DESC LIMIT   1;
gold_sql: SELECT
  CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS '航线',
  MAX(BANCZL) - MIN(BANCZL) AS '班次总量变化'
FROM
  HK_RMKYLX
WHERE
  GCRQ BETWEEN DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        HK_RMKYLX
    ),
    INTERVAL 1 MONTH
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      HK_RMKYLX
  )
GROUP BY
  LUXQDCSMC,
  LUXZDCSMC
ORDER BY
  `班次总量变化` DESC
LIMIT
  1;
pred_sql: SELECT   CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS '航线',   MAX(BANCZL) - MIN(BANCZL) AS '班次总量变化' FROM   HK_RMKYLX WHERE   GCRQ BETWEEN (     SELECT       MAX(GCRQ) - INTERVAL 1 MONTH     FROM       HK_RMKYLX   ) AND (     SELECT       MAX(GCRQ)     FROM       HK_RMKYLX   ) GROUP BY   LUXQDCSMC,   LUXZDCSMC ORDER BY   `班次总量变化` DESC LIMIT   1;
gold_sql: SELECT
  `ROAD_NAME`,
  `VOLUME` AS `货车流量`
FROM
  hy_dmll
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT   `ROAD_NAME`,   `VOLUME` AS `货车流量` FROM   hy_dmll WHERE   `VOLUME` > 12 ORDER BY   `VOLUME` DESC LIMIT   1;
gold_sql: SELECT
  ROAD_NAME AS '断面名称',
  ROAD_LENGTH AS '路段长度（千米）'
FROM
  HY_DMLL
WHERE
  ROAD_TYPE = '高速公路'
ORDER BY
  ROAD_LENGTH DESC
LIMIT
  1;
pred_sql: SELECT   ROAD_NAME AS '断面名称',   ROAD_LENGTH AS '路段长度（千米）' FROM   HY_DMLL WHERE   ROAD_TYPE = '高速公路' ORDER BY   ROAD_LENGTH DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  AVG(`ROAD_WIDE`) AS `平均宽度（米）`
FROM
  hy_dmll
WHERE
  `LOAD` > 12000;
pred_sql: SELECT AVG(ROAD_WIDE) AS 平均宽度米 FROM hy_dmll WHERE LOAD > 12000;
gold_sql: SELECT
  '区域' AS `货车停驻点区域`,
  MAX(LONGITUDE) - MIN(LONGITUDE) AS `经度范围`
FROM
  HY_TZD
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      HY_TZD
  )
GROUP BY
  LATITUDE
ORDER BY
  `经度范围` DESC
LIMIT
  1;
pred_sql: SELECT   '区域' AS `货车停驻点区域`,   MAX(LONGITUDE) - MIN(LONGITUDE) AS `经度范围` FROM   HY_TZD WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       HY_TZD   ) GROUP BY   LATITUDE ORDER BY   `经度范围` DESC LIMIT   1;
gold_sql: SELECT
  LATITUDE AS `纬度`,
  STAY_NUM AS `停驻统计`
FROM
  HY_TZD
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      HY_TZD
  )
ORDER BY
  STAY_NUM DESC
LIMIT
  1;
pred_sql: SELECT   LATITUDE AS `纬度`,   STAY_NUM AS `停驻统计` FROM   HY_TZD WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       HY_TZD   ) ORDER BY   STAY_NUM DESC LIMIT   1;
gold_sql: SELECT
  LONGITUDE AS `经度`,
  LATITUDE AS `纬度`,
  STAY_NUM AS `停驻数量`
FROM
  HY_TZD
ORDER BY
  STAY_NUM DESC
LIMIT
  1;
pred_sql: SELECT   LATITUDE AS `纬度`,   LONGITUDE AS `经度`,   STAY_NUM AS `停驻数量` FROM   HY_TZD ORDER BY   STAY_NUM DESC LIMIT   1;
gold_sql: SELECT 
    `LONGITUDE` AS `经度`, 
    `LATITUDE` AS `纬度`,
    SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND DATE_SUB(CURDATE(), INTERVAL 6 MONTH) THEN `STAY_NUM` ELSE 0 END) AS `前半年停驻点数量`,
    SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() THEN `STAY_NUM` ELSE 0 END) AS `后半年停驻点数量`,
    ABS(SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND DATE_SUB(CURDATE(), INTERVAL 6 MONTH) THEN `STAY_NUM` ELSE 0 END) - 
        SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() THEN `STAY_NUM` ELSE 0 END)) AS `停驻点数量变化`
FROM 
    `HY_TZD`
WHERE 
    `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()
GROUP BY 
    `LONGITUDE`, `LATITUDE`
ORDER BY 
    `停驻点数量变化` DESC
LIMIT 1;

pred_sql: SELECT      `LATITUDE` AS `纬度`,     `LONGITUDE` AS `经度`,     SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() THEN `STAY_NUM` ELSE 0 END) AS `后半年停驻点数量`,     SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND DATE_SUB(CURDATE(), INTERVAL 6 MONTH) THEN `STAY_NUM` ELSE 0 END) AS `前半年停驻点数量`,     ABS(SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() THEN `STAY_NUM` ELSE 0 END) -          SUM(CASE WHEN `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND DATE_SUB(CURDATE(), INTERVAL 6 MONTH) THEN `STAY_NUM` ELSE 0 END)) AS `停驻点数量变化` FROM      `HY_TZD` WHERE      `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY      `LATITUDE`, `LONGITUDE` ORDER BY      `停驻点数量变化` DESC LIMIT 1;
gold_sql: SELECT
  CITY AS `地级市`,
  SUM(QSHZC) AS `固定资产投资总额（亿元）`
FROM
  JCKMY_TJ
WHERE
  PROVINCE = '江苏省'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  CITY
ORDER BY
  `固定资产投资总额（亿元）` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `地级市`,   SUM(QSHZC) AS `固定资产投资总额（亿元）` FROM   JCKMY_TJ WHERE   PROVINCE = '江苏省'   AND CITY IS NOT NULL   AND DISTRICT IS NULL GROUP BY   CITY ORDER BY   `固定资产投资总额（亿元）` DESC LIMIT   1;
gold_sql: SELECT
  PROVINCE AS `省份`,
  SUM(GJLY) AS `国际旅游人次`
FROM
  JCKMY_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      JCKMY_TJ
  )
GROUP BY
  PROVINCE
ORDER BY
  `国际旅游人次` DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS `省份`,   SUM(GJLY) AS `国际旅游人次` FROM   JCKMY_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       JCKMY_TJ   ) GROUP BY   PROVINCE ORDER BY   `国际旅游人次` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS `地级市`,
  JKMY AS `进口贸易总额（亿美元）`
FROM
  JCKMY_TJ
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      JCKMY_TJ
  )
  AND CITY IS NOT NULL
ORDER BY
  `进口贸易总额（亿美元）` DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `地级市`,   JKMY AS `进口贸易总额（亿美元）` FROM   JCKMY_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       JCKMY_TJ   )   AND CITY IS NOT NULL ORDER BY   JKMY DESC LIMIT   1;
gold_sql: SELECT 
    PROVINCE AS '省份',
    ((SUM(CKMY * GNLY) - SUM(CKMY) * SUM(GNLY) / COUNT(*)) / 
    SQRT((SUM(CKMY * CKMY) - SUM(CKMY) * SUM(CKMY) / COUNT(*)) * 
         (SUM(GNLY * GNLY) - SUM(GNLY) * SUM(GNLY) / COUNT(*)))) AS '出口贸易总额与国内旅游人次相关性'
FROM 
    JCKMY_TJ
GROUP BY 
    PROVINCE
ORDER BY 
    ((SUM(CKMY * GNLY) - SUM(CKMY) * SUM(GNLY) / COUNT(*)) / 
    SQRT((SUM(CKMY * CKMY) - SUM(CKMY) * SUM(CKMY) / COUNT(*)) * 
         (SUM(GNLY * GNLY) - SUM(GNLY) * SUM(GNLY) / COUNT(*)))) DESC
LIMIT 1;

pred_sql: SELECT      PROVINCE AS '省份',     ((SUM(CKMY * GNLY) - SUM(CKMY) * SUM(GNLY) / COUNT(*)) /      SQRT((SUM(CKMY * CKMY) - SUM(CKMY) * SUM(CKMY) / COUNT(*)) *           (SUM(GNLY * GNLY) - SUM(GNLY) * SUM(GNLY) / COUNT(*)))) AS '出口贸易总额与国内旅游人次相关性' FROM      JCKMY_TJ GROUP BY      PROVINCE ORDER BY      '出口贸易总额与国内旅游人次相关性' DESC LIMIT 1;
gold_sql: SELECT
  HANGKSNMC AS '机场名称',
  SUOZQY AS '所在区域',
  IATA AS '国际航空运输协会代码',
  FEIXQDJ AS '飞行区等级'
FROM
  JC_YXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      JC_YXZT
  )
ORDER BY
  FEIXQDJ DESC
LIMIT
  1;
pred_sql: SELECT   IATA AS '国际航空运输协会代码',   HANGKSNMC AS '机场名称',   SUOZQY AS '所在区域',   FEIXQDJ AS '飞行区等级' FROM   JC_YXZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       JC_YXZT   ) ORDER BY   FEIXQDJ DESC LIMIT   1;
gold_sql: SELECT
  HANGKSNMC AS '机场名称',
  SUM(ZONGBC) AS '总班次'
FROM
  JC_YXZT
WHERE
  SUOZQY = '南京'
GROUP BY
  HANGKSNMC
ORDER BY
  SUM(ZONGBC) DESC;
pred_sql: SELECT   HANGKSNMC AS '机场名称',   SUM(ZONGBC) AS '总班次' FROM   JC_YXZT WHERE   SUOZQY = '南京' GROUP BY   HANGKSNMC ORDER BY   '总班次' DESC;
gold_sql: SELECT
  HANGKSNMC AS '航空枢纽名称',
  JICHBZDL AS '机场航班准点率'
FROM
  jc_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      jc_yxzt
  )
ORDER BY
  CAST(JICHBZDL AS DECIMAL(10, 2)) DESC
LIMIT
  1;
pred_sql: SELECT   HANGKSNMC AS '航空枢纽名称',   JICHBZDL AS '机场航班准点率' FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       jc_yxzt   ) ORDER BY   CAST(JICHBZDL AS DECIMAL(10, 2)) DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  HANGKSNMC AS 航空枢纽名称,
  PINGJYWSJ AS 平均延误时间_分钟
FROM
  jc_yxzt
ORDER BY
  PINGJYWSJ
LIMIT
  1;
pred_sql: SELECT   HANGKSNMC AS 航空枢纽名称,   PINGJYWSJ AS 平均延误时间_分钟 FROM   jc_yxzt ORDER BY   PINGJYWSJ ASC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  PROVINCE AS '省份',
  LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      PEOPLE_LIFE_TJ
  )
ORDER BY
  LOCAL_BUDGET_EXPENDITURE DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS '省份',   LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）' FROM   PEOPLE_LIFE_TJ WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       PEOPLE_LIFE_TJ   ) ORDER BY   LOCAL_BUDGET_EXPENDITURE DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  AREA AS '县级市',
  PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）'
FROM
  PEOPLE_LIFE_TJ
WHERE
  AREA IS NOT NULL
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      PEOPLE_LIFE_TJ
  )
ORDER BY
  PER_CAPITA_CONSUMPTION DESC
LIMIT
  1;
pred_sql: SELECT   AREA AS '县级市',   PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出（元）' FROM   PEOPLE_LIFE_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       PEOPLE_LIFE_TJ   )   AND AREA IS NOT NULL ORDER BY   PER_CAPITA_CONSUMPTION DESC LIMIT   1;
gold_sql: SELECT
  `CITY` AS '地级市',
  `PER_CAPITA_INCOME` AS '人均可支配收入（元）'
FROM
  `PEOPLE_LIFE_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `PEOPLE_LIFE_TJ`
  )
  AND `CITY` IS NOT NULL
ORDER BY
  `PER_CAPITA_INCOME` DESC
LIMIT
  1;
pred_sql: SELECT   `CITY` AS '地级市',   `PER_CAPITA_INCOME` AS '人均可支配收入（元）' FROM   `PEOPLE_LIFE_TJ` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `PEOPLE_LIFE_TJ`   )   AND `CITY` IS NOT NULL ORDER BY   `PER_CAPITA_INCOME` DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CITY AS `地级市`,
  FOREIGN_INVESTMENT_USED AS `实际使用外资（亿美元）`
FROM
  people_life_tj
WHERE
  CITY IS NOT NULL
ORDER BY
  FOREIGN_INVESTMENT_USED DESC
LIMIT
  1;
pred_sql: SELECT   `地级市`,   `实际使用外资（亿美元）` FROM (   SELECT     CITY AS `地级市`,     FOREIGN_INVESTMENT_USED AS `实际使用外资（亿美元）`   FROM     people_life_tj   WHERE     CITY IS NOT NULL ) AS subquery ORDER BY   `实际使用外资（亿美元）` DESC LIMIT 1;
gold_sql: SELECT
  L_TYPE AS `设施类别`,
  COUNT(*) AS `数量`
FROM
  POI
WHERE
  CITY = '南京市'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  )
GROUP BY
  L_TYPE
ORDER BY
  `数量` DESC
LIMIT
  1;
pred_sql: SELECT   L_TYPE AS `设施类别`,   COUNT(*) AS `数量` FROM   POI WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       POI   )   AND CITY = '南京市' GROUP BY   L_TYPE ORDER BY   `数量` DESC LIMIT   1;
gold_sql: SELECT
  M_TYPE AS 种类,
  COUNT(*) AS POI数量
FROM
  POI
WHERE
  L_TYPE = '生活服务'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  )
GROUP BY
  M_TYPE
ORDER BY
  POI数量 DESC
LIMIT
  1;
pred_sql: SELECT   M_TYPE AS 种类,   COUNT(*) AS POI数量 FROM   POI WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       POI   )   AND L_TYPE = '生活服务' GROUP BY   M_TYPE ORDER BY   POI数量 DESC LIMIT   1;
gold_sql: SELECT
  PROVINCE AS '省份',
  COUNT(*) AS '消费类POI增长数量'
FROM
  POI
WHERE
  L_TYPE = '购物消费'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      POI
  )
GROUP BY
  PROVINCE
ORDER BY
  `消费类POI增长数量` DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS '省份',   COUNT(*) AS '消费类POI增长数量' FROM   POI WHERE   L_TYPE = '购物消费'   AND YEAR = (     SELECT       MAX(YEAR)     FROM       POI   ) GROUP BY   PROVINCE ORDER BY   `消费类POI增长数量` DESC LIMIT   1;
gold_sql: SELECT
  PROVINCE AS 省份,
  (MAX(COUNT_MEDICAL_POIS) - MIN(COUNT_MEDICAL_POIS)) AS 数量变化
FROM
  (
    SELECT
      PROVINCE,
      YEAR,
      COUNT(*) AS COUNT_MEDICAL_POIS
    FROM
      POI
    WHERE
      L_TYPE = '医疗保健'
    GROUP BY
      PROVINCE,
      YEAR
  ) AS MedicalPOIsPerYear
GROUP BY
  PROVINCE
ORDER BY
  数量变化 DESC
LIMIT
  1;
pred_sql: SELECT   province AS 省份,   (MAX(medical_pois_count) - MIN(medical_pois_count)) AS 数量变化 FROM   (     SELECT       province,       year,       COUNT(*) AS medical_pois_count     FROM       POI     WHERE       l_type = '医疗保健'     GROUP BY       province,       year   ) AS MedicalPOIsPerYear GROUP BY   province ORDER BY   数量变化 DESC LIMIT   1;
gold_sql: SELECT
  `NUM` AS `车辆总量（辆）`
FROM
  ptgl_dmll_tj
WHERE
  `MONTH` = '7'
  AND `GUANCZMC` LIKE '%无锡G312新安%'
pred_sql: SELECT   `NUM` AS `车辆总量（辆）` FROM   ptgl_dmll_tj WHERE   `GUANCZMC` LIKE '%无锡G312新安%'   AND `MONTH` = '7' ```
gold_sql: SELECT
  `BIG_TRUCK` AS `大货车数量`,
  `SMALL_TRUCK` AS `小货车数量`
FROM
  `ptgl_dmll_tj`
WHERE
  `DIRECTION` = 'S'
ORDER BY
  `YEAR` DESC,
  `MONTH` DESC
LIMIT
  1;
pred_sql: SELECT   `SMALL_TRUCK` AS `小货车数量`,   `BIG_TRUCK` AS `大货车数量` FROM   `ptgl_dmll_tj` WHERE   `DIRECTION` = 'S' ORDER BY   `MONTH` DESC,   `YEAR` DESC LIMIT   1;
gold_sql: SELECT
  t.YEAR AS '年份',
  t.MONTH AS '月份',
  SUM(t.MOTOR_VEHICLE) AS '机动车辆总数（辆/月）'
FROM
  PTGL_DMLL_TJ t
WHERE
  t.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      PTGL_DMLL_TJ
  )
GROUP BY
  t.YEAR,
  t.MONTH
ORDER BY
  t.MONTH;
pred_sql: SELECT   t.YEAR AS '年份',   t.MONTH AS '月份',   SUM(t.MOTOR_VEHICLE) AS '机动车辆总数（辆/月）' FROM   PTGL_DMLL_TJ t WHERE   t.YEAR = (     SELECT       MAX(YEAR)     FROM       PTGL_DMLL_TJ   ) GROUP BY   t.MONTH,   t.YEAR ORDER BY   t.MONTH;
gold_sql: SELECT
  `MOTORCYCLE` / `PASSENGER_CAR` AS `摩托车与客车数量比例`
FROM
  ptgl_dmll_tj
WHERE
  `GUANCZMC` like '%常州S241小陈庄%'
ORDER BY
  `YEAR` DESC,
  `MONTH` DESC
LIMIT
  1;
pred_sql: SELECT   `PASSENGER_CAR` / `MOTORCYCLE` AS `摩托车与客车数量比例` FROM   ptgl_dmll_tj WHERE   `GUANCZMC` LIKE '%常州S241小陈庄%' ORDER BY   `MONTH` DESC,   `YEAR` DESC LIMIT   1;
gold_sql: SELECT
  AVG(COACH_UP) AS `平均上行客车数量`
FROM
  PTGL_GCZNPJL
WHERE
  GUANCZMC = '苏州S339太仓东';
pred_sql: SELECT AVG(COACH_UP) AS `平均上行客车数量` FROM PTGL_GCZNPJL WHERE GUANCZMC = '苏州S339太仓东';
gold_sql: SELECT
  `TRUCK_DOWN` - `TRUCK_UP` AS '货车年均下行流量与上行流量差异'
FROM
  `PTGL_GCZNPJL`
WHERE
  `ROAD_NAME` = '纪百线'
ORDER BY
  `YEAR` DESC
LIMIT
  1;
pred_sql: SELECT   (`TRUCK_DOWN` - `TRUCK_UP`) AS '货车年均下行流量与上行流量差异' FROM   `PTGL_GCZNPJL` WHERE   `ROAD_NAME` = '纪百线' ORDER BY   `YEAR` DESC LIMIT   1;
gold_sql: SELECT
  `UP_VOLUME` AS `上行总量（辆/日）`
FROM
  PTGL_GCZNPJL
WHERE
  `ROAD_ID` = 'G205'
  AND `GUANCZMC` LIKE '%新街%'
ORDER BY
  `YEAR` DESC
LIMIT
  1;
pred_sql: SELECT   `UP_VOLUME` AS `上行总量（辆/日）` FROM   PTGL_GCZNPJL WHERE   `GUANCZMC` LIKE '%新街%'   AND `ROAD_ID` = 'G205' ORDER BY   `YEAR` DESC LIMIT   1;
gold_sql: SELECT
  MONTH AS '月份',
  COACH_DOWN AS '客车下行'
FROM
  PTGL_GCZYPJL
WHERE
  ROAD_NAME = '纪百线'
ORDER BY
  `YEAR` DESC,
  MONTH DESC;
pred_sql: SELECT   `MONTH` AS '月份',   COACH_DOWN AS '客车下行' FROM   PTGL_GCZYPJL WHERE   ROAD_NAME = '纪百线' ORDER BY   `YEAR` DESC,   `MONTH` DESC;
gold_sql: SELECT
  MONTH AS '月份',
  TRUCK_UP AS '货车上行（辆/日）'
FROM
  PTGL_GCZYPJL
WHERE
  ROAD_ID = 'S339'
  AND GUANCZMC = '苏州S339太仓东'
ORDER BY
  CAST(YEAR AS UNSIGNED) DESC,
  CAST(MONTH AS UNSIGNED)
pred_sql: SELECT   MONTH AS '月份',   TRUCK_UP AS '货车上行（辆/日）' FROM   PTGL_GCZYPJL WHERE   GUANCZMC = '苏州S339太仓东'   AND ROAD_ID = 'S339' ORDER BY   CAST(YEAR AS UNSIGNED) DESC,   CAST(MONTH AS UNSIGNED) ```
gold_sql: SELECT
  YEAR AS '年份',
  MONTH AS '月份',
  SUM(DOWN_VOLUME) AS '月平均下行车辆总数'
FROM
  PTGL_GCZYPJL
WHERE
  ROAD_NAME = '纪百线'
GROUP BY
  YEAR,
  MONTH
ORDER BY
  YEAR,
  MONTH;
pred_sql: SELECT   MONTH AS '月份',   YEAR AS '年份',   SUM(DOWN_VOLUME) AS '月平均下行车辆总数' FROM   PTGL_GCZYPJL WHERE   ROAD_NAME = '纪百线' GROUP BY   MONTH,   YEAR ORDER BY   YEAR,   MONTH;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  COACH_UP + COACH_DOWN AS `客车流量`,
  TRUCK_UP + TRUCK_DOWN AS `货车流量`,
  (COACH_UP + COACH_DOWN) / (TRUCK_UP + TRUCK_DOWN) AS `客货车流量比例`
FROM
  PTGL_GCZYPJL
WHERE
  GUANCZMC = '苏州S339太仓东'
ORDER BY
  CAST(`YEAR` AS UNSIGNED),
  CAST(`MONTH` AS UNSIGNED);
pred_sql: SELECT   `YEAR` AS `年份`,   `MONTH` AS `月份`,   (COACH_UP + COACH_DOWN) AS `客车流量`,   (TRUCK_UP + TRUCK_DOWN) AS `货车流量`,   (COACH_UP + COACH_DOWN) / (TRUCK_UP + TRUCK_DOWN) AS `客货车流量比例` FROM   PTGL_GCZYPJL WHERE   GUANCZMC = '苏州S339太仓东' ORDER BY   CAST(`YEAR` AS UNSIGNED),   CAST(`MONTH` AS UNSIGNED);
gold_sql: SELECT
  LUD AS 高速路段,
  CHIXSJ AS 拥堵持续时间
FROM
  gsgl_ldydzt
WHERE
  GCRQ = '2023-07-21'
ORDER BY
  CHIXSJ DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS 高速路段,   CHIXSJ AS 拥堵持续时间 FROM   gsgl_ldydzt WHERE   GCRQ = '2023-07-21' ORDER BY   CHIXSJ DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  LUD AS `路段`,
  QIDZH AS `起点桩号`,
  ZHONGDZH AS `终点桩号`,
  SUM(YONGDCHANGD) AS `总拥堵长度`
FROM
  PTGL_LDYDZT
GROUP BY
  LUD,
  QIDZH,
  ZHONGDZH
ORDER BY
  `总拥堵长度` DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS `路段`,   QIDZH AS `起点桩号`,   ZHONGDZH AS `终点桩号`,   SUM(YONGDCHANGD) AS `总拥堵长度` FROM   PTGL_LDYDZT GROUP BY   ZHONGDZH,   QIDZH,   LUD ORDER BY   `总拥堵长度` DESC LIMIT   1;
gold_sql: SELECT
  GCRQ AS '观测日期'
FROM
  PTGL_LDYDZT
WHERE
  LUD LIKE '%G104%'
GROUP BY
  GCRQ
ORDER BY
  SUM(CHIXSJ) DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS '观测日期' FROM   PTGL_LDYDZT WHERE   LUD LIKE '%G104%' GROUP BY   GCRQ ORDER BY   SUM(CHIXSJ) DESC LIMIT   1;
gold_sql: SELECT
  LUD AS `路段`,
  COUNT(*) AS `拥堵次数`
FROM
  GSGL_LDYDZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_LDYDZT
  )
  AND YONGDCHENGD = '严重拥堵'
GROUP BY
  LUD
ORDER BY
  `拥堵次数` DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS `路段`,   COUNT(*) AS `拥堵次数` FROM   GSGL_LDYDZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_LDYDZT   )   AND YONGDCHENGD = '严重拥堵' GROUP BY   LUD ORDER BY   `拥堵次数` DESC LIMIT   1;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  LUWCTL AS 公路网络畅通率
FROM
  PTGL_LWYDZT
WHERE
  GCRQ = '2023-07-27'
ORDER BY
  LUWCTL ASC
LIMIT
  1;
pred_sql: SELECT   XINGZQH AS 行政区划,   LUWCTL AS 公路网络畅通率 FROM   PTGL_LWYDZT WHERE   GCRQ = '2023-07-27' ORDER BY   LUWCTL DESC LIMIT   1;
gold_sql: SELECT
  AVG(LUWCTL) AS '平均路网畅通率'
FROM
  PTGL_LWYDZT
WHERE
  GCRQ BETWEEN '2023-07-01' AND '2023-07-31'
  AND XINGZQH = '3201';
pred_sql: SELECT   AVG(LUWCTL) AS '平均路网畅通率' FROM   PTGL_LWYDZT WHERE   XINGZQH = '3201'   AND GCRQ BETWEEN '2023-07-01' AND '2023-07-31';
gold_sql: SELECT
  GCRQ AS 观测日期,
  LUWCTL AS 路网畅通率
FROM
  PTGL_LWYDZT
WHERE
  GCRQ IN ('2023-07-28', '2023-07-29')
ORDER BY
  GCRQ;
pred_sql: SELECT   GCRQ AS 观测日期,   LUWCTL AS 路网畅通率 FROM   PTGL_LWYDZT WHERE   GCRQ IN ('2023-07-28', '2023-07-29') ORDER BY   GCRQ ASC;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  HUANBI AS 环比变化
FROM
  PTGL_LWYDZT
WHERE
  XINGZQH = '3211'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      PTGL_LWYDZT
  );
pred_sql: SELECT   XINGZQH AS 行政区划,   HUANBI AS 环比变化 FROM   PTGL_LWYDZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       PTGL_LWYDZT   )   AND XINGZQH = '3211';
gold_sql: SELECT
  t1.路线名称,
  t1.观测站名称,
  t1.方向,
  t1.货车车流量 AS '截至2018年货车流量',
  (t1.货车车流量 - t2.货车车流量) AS '与前年变化量'
FROM
  (
    SELECT
      ROAD_NAME AS '路线名称',
      GUANCZMC AS '观测站名称',
      DIRECTION AS '方向',
      SUM(VOLUME) AS '货车车流量'
    FROM
      PTGL_NPJCX
    WHERE
      YEAR = 2018
      AND CAR_TYPE = '货车'
    GROUP BY
      ROAD_NAME,
      GUANCZMC,
      DIRECTION
  ) t1
  LEFT JOIN (
    SELECT
      ROAD_NAME AS '路线名称',
      GUANCZMC AS '观测站名称',
      DIRECTION AS '方向',
      SUM(VOLUME) AS '货车车流量'
    FROM
      PTGL_NPJCX
    WHERE
      YEAR = 2017
      AND CAR_TYPE = '货车'
    GROUP BY
      ROAD_NAME,
      GUANCZMC,
      DIRECTION
  ) t2 ON t1.路线名称 = t2.路线名称
  AND t1.观测站名称 = t2.观测站名称
  AND t1.方向 = t2.方向
ORDER BY
  t1.货车车流量 DESC
LIMIT
  1;
pred_sql: SELECT   t1.路线名称,   t1.观测站名称,   t1.方向,   t1.货车车流量 AS '截至2018年货车流量',   (t1.货车车流量 - COALESCE(t2.货车车流量, 0)) AS '与前年变化量' FROM   (     SELECT       ROAD_NAME AS '路线名称',       GUANCZMC AS '观测站名称',       DIRECTION AS '方向',       SUM(VOLUME) AS '货车车流量'     FROM       PTGL_NPJCX     WHERE       YEAR = 2018       AND CAR_TYPE = '货车'     GROUP BY       ROAD_NAME,       GUANCZMC,       DIRECTION   ) t1   LEFT JOIN (     SELECT       ROAD_NAME AS '路线名称',       GUANCZMC AS '观测站名称',       DIRECTION AS '方向',       SUM(VOLUME) AS '货车车流量'     FROM       PTGL_NPJCX     WHERE       YEAR = 2017       AND CAR_TYPE = '货车'     GROUP BY       ROAD_NAME,       GUANCZMC,       DIRECTION   ) t2 ON t1.路线名称 = t2.路线名称   AND t1.观测站名称 = t2.观测站名称   AND t1.方向 = t2.方向 ORDER BY   t1.货车车流量 DESC LIMIT   1;
gold_sql: SELECT
  (
    SUM(
      CASE
        WHEN CAR_TYPE = '货车' THEN VOLUME
        ELSE 0
      END
    ) / SUM(
      CASE
        WHEN CAR_TYPE = '客车' THEN VOLUME
        ELSE 0
      END
    )
  ) AS `货车与客车比例`
FROM
  PTGL_NPJCX
WHERE
  GUANCZMC = '苏州S339太仓东'
  AND DIRECTION = '上行'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      PTGL_NPJCX
  );
pred_sql: SELECT   (     SUM(       CASE         WHEN CAR_TYPE = '货车' THEN VOLUME         ELSE 0       END     ) / NULLIF(SUM(       CASE         WHEN CAR_TYPE = '客车' THEN VOLUME         ELSE 0       END     ), 0)   ) AS `货车与客车比例` FROM   PTGL_NPJCX WHERE   GUANCZMC = '苏州S339太仓东'   AND DIRECTION = '上行'   AND YEAR = (     SELECT       MAX(YEAR)     FROM       PTGL_NPJCX   );
gold_sql: SELECT
  YEAR AS `年份`,
  SUM(VOLUME) AS `最大流量`
FROM
  PTGL_NPJCX
WHERE
  ROAD_ID = 'S339'
  AND CAR_TYPE = '集装箱'
GROUP BY
  YEAR
ORDER BY
  `最大流量` DESC
LIMIT
  1;
pred_sql: SELECT   YEAR AS `年份`,   SUM(VOLUME) AS `最大流量` FROM   PTGL_NPJCX WHERE   CAR_TYPE = '集装箱'   AND ROAD_ID = 'S339' GROUP BY   YEAR ORDER BY   `最大流量` DESC LIMIT   1;
gold_sql: SELECT
  CAR_TYPE AS 车型,
  SUM(VOLUME) AS 总数量
FROM
  PTGL_NPJCX
WHERE
  CAR_TYPE IN ('货车', '集装箱')
GROUP BY
  CAR_TYPE
ORDER BY
  总数量 DESC;
pred_sql: SELECT   CAR_TYPE AS 车型,   SUM(VOLUME) AS 总数量 FROM   PTGL_NPJCX WHERE   CAR_TYPE IN ('集装箱', '货车') GROUP BY   CAR_TYPE ORDER BY   总数量 DESC;
gold_sql: SELECT
  CITY as `地级市`,
  YEAR as `年份`,
  CZ_RK as `常住人口（万人）`
FROM
  RK_TJ
WHERE
  PROVINCE = '江苏省'
  AND CITY is not null
  AND DISTRICT is null
ORDER BY
  CITY,
  YEAR;
pred_sql: SELECT   CITY as `地级市`,   YEAR as `年份`,   CZ_RK as `常住人口（万人）` FROM   RK_TJ WHERE   PROVINCE = '江苏省'   AND CITY is not null   AND DISTRICT is null ORDER BY   YEAR,   CITY;
gold_sql: SELECT
  '去年' AS `年份`,
  SUM(`CITY_RK`) AS `城镇人口（万人）`
FROM
  `RK_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`) - 1
    FROM
      `RK_TJ`
  )
  AND `CITY` = '南京市'
UNION ALL
SELECT
  '今年' AS `年份`,
  SUM(`CITY_RK`) AS `城镇人口（万人）`
FROM
  `RK_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `RK_TJ`
  )
  AND `CITY` = '南京市'
pred_sql: SELECT   CASE WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM `RK_TJ`) THEN '去年' ELSE '今年' END AS `年份`,   SUM(`CITY_RK`) AS `城镇人口（万人）` FROM   `RK_TJ` WHERE   `YEAR` IN ((SELECT MAX(`YEAR`) - 1 FROM `RK_TJ`), (SELECT MAX(`YEAR`) FROM `RK_TJ`))   AND `CITY` = '南京市' GROUP BY   `YEAR` ORDER BY   `YEAR`;
gold_sql: SELECT
  `DISTRICT` AS `县级市`,
  (`HJ_RK` / `CZ_RK`) AS `户籍人口比例`
FROM
  `RK_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `RK_TJ`
  )
  AND `PROVINCE` = '江苏省'
  AND `CITY` IS NOT NULL
  AND `DISTRICT` IS NOT NULL
ORDER BY
  `户籍人口比例` DESC
LIMIT
  1;
pred_sql: SELECT   `DISTRICT` AS `县级市`,   (`HJ_RK` / `CZ_RK`) AS `户籍人口比例` FROM   `RK_TJ` WHERE   `PROVINCE` = '江苏省'   AND `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `RK_TJ`   )   AND `DISTRICT` IS NOT NULL   AND `CITY` IS NOT NULL ORDER BY   `户籍人口比例` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS `地级市`,
  PROVINCE AS `省份`,
  (CZ_RK - CITY_RK) AS `常住人口与城镇人口差异`
FROM
  RK_TJ
WHERE
  CITY IS NOT NULL
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      RK_TJ
  )
ORDER BY
  ABS(CZ_RK - CITY_RK) DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `地级市`,   PROVINCE AS `省份`,   (CZ_RK - CITY_RK) AS `常住人口与城镇人口差异` FROM   RK_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       RK_TJ   )   AND CITY IS NOT NULL ORDER BY   ABS(CZ_RK - CITY_RK) DESC LIMIT   1;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  SUM(REXHWL) AS `电话呼叫总量（爱尔兰）`
FROM
  RXFWZT
WHERE
  GCRQ BETWEEN DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        RXFWZT
    ),
    INTERVAL 1 MONTH
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      RXFWZT
  )
GROUP BY
  XINGZQH
ORDER BY
  `电话呼叫总量（爱尔兰）` DESC;
pred_sql: SELECT   XINGZQH AS `行政区划`,   SUM(REXHWL) AS `电话呼叫总量（爱尔兰）` FROM   RXFWZT WHERE   GCRQ >= DATE_SUB(     (       SELECT         MAX(GCRQ)       FROM         RXFWZT     ),     INTERVAL 1 MONTH   ) GROUP BY   XINGZQH ORDER BY   `电话呼叫总量（爱尔兰）` DESC;
gold_sql: SELECT
  GCRQ AS `日期`,
  REXHWL AS `热线话务量（爱尔兰）`
FROM
  RXFWZT
WHERE
  GCRQ = (
    SELECT
      GCRQ
    FROM
      RXFWZT
    ORDER BY
      REXHWL DESC,
      GCRQ DESC
    LIMIT
      1
  );
pred_sql: SELECT   GCRQ AS `日期`,   REXHWL AS `热线话务量（爱尔兰）` FROM   RXFWZT ORDER BY   REXHWL DESC,   GCRQ DESC LIMIT 1;
gold_sql: SELECT
  (MAX(ZIXYWL) / MAX(REXHWL)) * 100 AS `咨询问题占比(%)`
FROM
  RXFWZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      RXFWZT
  );
pred_sql: SELECT   (MAX(ZIXYWL) / MAX(REXHWL)) * 100 AS `咨询问题占比(%)` FROM   RXFWZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       RXFWZT   );
gold_sql: SELECT
  XINGZQH AS 行政区划,
  TOUSYWL AS 投诉业务量
FROM
  RXFWZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      RXFWZT
  )
ORDER BY
  投诉业务量 DESC
LIMIT
  1;
pred_sql: SELECT   XINGZQH AS 行政区划,   TOUSYWL AS 投诉业务量 FROM   RXFWZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       RXFWZT   ) ORDER BY   投诉业务量 DESC LIMIT   1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `DRTXL` AS `当日内河航道通行量`,
  `DRLLHB` AS `当日通行量环比`
FROM
  `R_CZ_Z`
WHERE
  DATE_FORMAT(`GCRQ`, '%Y-%m') = '2023-11'
ORDER BY
  `GCRQ` ASC;
pred_sql: SELECT   `GCRQ` AS `观测日期`,   `DRTXL` AS `当日内河航道通行量`,   `DRLLHB` AS `当日通行量环比` FROM   `R_CZ_Z` WHERE   `GCRQ` >= '2023-11-01' AND `GCRQ` < '2023-12-01' ORDER BY   `GCRQ`;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `DRTXL` AS `船舶当日内河航道通行量`
FROM
  `R_CZ_Z`
ORDER BY
  `DRTXL` DESC
LIMIT
  1
pred_sql: SELECT   `GCRQ` AS `观测日期`,   `DRTXL` AS `船舶当日内河航道通行量` FROM   `R_CZ_Z` ORDER BY   `DRTXL` DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  GCRQ AS 观测日期,
  DRLLHB AS 日通行量环比变化率
FROM
  r_cz_z
WHERE
  DRLLHB = (
    SELECT
      MAX(DRLLHB)
    FROM
      r_cz_z
  )
pred_sql: SELECT   GCRQ AS 观测日期,   DRLLHB AS 日通行量环比变化率 FROM   r_cz_z WHERE   DRLLHB = (     SELECT       MAX(DRLLHB)     FROM       r_cz_z   ) ORDER BY   GCRQ DESC LIMIT 1;
gold_sql: SELECT
  MAX(
    CASE
      WHEN MONTH(GCRQ) = 11
      AND YEAR(GCRQ) = 2023 THEN MONTH_FSZL
    END
  ) AS '2023年11月份累计发送总量（万人次）',
  MAX(
    CASE
      WHEN MONTH(GCRQ) = 10
      AND YEAR(GCRQ) = 2023 THEN MONTH_FSZL
    END
  ) AS '2023年10月份累计发送总量（万人次）'
FROM
  r_glkyl_z
WHERE
  YEAR(GCRQ) = 2023
  AND MONTH(GCRQ) IN (10, 11);
pred_sql: SELECT   MAX(     CASE       WHEN MONTH(GCRQ) = 11 THEN MONTH_FSZL     END   ) AS '2023年11月份累计发送总量（万人次）',   MAX(     CASE       WHEN MONTH(GCRQ) = 10 THEN MONTH_FSZL     END   ) AS '2023年10月份累计发送总量（万人次）' FROM   r_glkyl_z WHERE   YEAR(GCRQ) = 2023   AND MONTH(GCRQ) IN (10, 11);
gold_sql: SELECT
  r1.`FSZL` - r2.`FSZL` AS '发送总量变化（万人次）'
FROM
  `R_GLKYL_Z` r1,
  (
    SELECT
      `FSZL`
    FROM
      `R_GLKYL_Z`
    WHERE
      `GCRQ` = (
        SELECT
          `GCRQ`
        FROM
          `R_GLKYL_Z`
        WHERE
          `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
        ORDER BY
          `GCRQ` DESC
        LIMIT
          1
      )
  ) r2
WHERE
  r1.`GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `R_GLKYL_Z`
  );
pred_sql: SELECT   r1.`FSZL` - r2.`FSZL` AS '发送总量变化（万人次）' FROM   `R_GLKYL_Z` r1,   (     SELECT       `FSZL`     FROM       `R_GLKYL_Z`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`)         FROM           `R_GLKYL_Z`         WHERE           `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)       )   ) r2 WHERE   r1.`GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `R_GLKYL_Z`   );
gold_sql: SELECT
  IF(ABS(本周上座率 - 上周上座率) > 0.1, '有显著波动', '无显著波动') AS '波动情况'
FROM
  (
    SELECT
      (
        SELECT
          AVG(`SZL`)
        FROM
          `r_glkyl_z`
        WHERE
          YEARWEEK(`GCRQ`, 1) = YEARWEEK(CURDATE(), 1)
      ) AS 本周上座率,
      (
        SELECT
          AVG(`SZL`)
        FROM
          `r_glkyl_z`
        WHERE
          YEARWEEK(`GCRQ`, 1) = YEARWEEK(CURDATE(), 1) - 1
      ) AS 上周上座率
  ) AS 上座率波动;
pred_sql: SELECT   CASE     WHEN ABS(本周上座率 - 上周上座率) > 0.1 THEN '有显著波动'     ELSE '无显著波动'   END AS '波动情况' FROM   (     SELECT       (         SELECT           AVG(`SZL`)         FROM           `r_glkyl_z`         WHERE           YEARWEEK(`GCRQ`, 1) = YEARWEEK(CURDATE(), 1)       ) AS 本周上座率,       (         SELECT           AVG(`SZL`)         FROM           `r_glkyl_z`         WHERE           YEARWEEK(`GCRQ`, 1) = YEARWEEK(CURDATE(), 1) - 1       ) AS 上周上座率   ) AS 上座率波动;
gold_sql: SELECT
  '2023-11-30' AS `日期`,
  `今天`.`DRKYLHB` AS `今天公路客运量环比`,
  `昨天`.`DRKYLHB` AS `昨天公路客运量环比`,
  (
    (`今天`.`DRKYLHB` - `昨天`.`DRKYLHB`) / `昨天`.`DRKYLHB`
  ) * 100 AS `环比变化百分比`
FROM
  (
    SELECT
      `DRKYLHB`
    FROM
      `R_GLKYL_Z`
    WHERE
      `GCRQ` = '2023-11-30'
  ) AS `今天`,
  (
    SELECT
      `DRKYLHB`
    FROM
      `R_GLKYL_Z`
    WHERE
      `GCRQ` = '2023-11-29'
  ) AS `昨天`;
pred_sql: SELECT   '2023-11-30' AS `日期`,   `今天`.`DRKYLHB` AS `今天公路客运量环比`,   `昨天`.`DRKYLHB` AS `昨天公路客运量环比`,   (     (`今天`.`DRKYLHB` - `昨天`.`DRKYLHB`) / `昨天`.`DRKYLHB`   ) * 100 AS `环比变化百分比` FROM   (     SELECT       `DRKYLHB`     FROM       `R_GLKYL_Z`     WHERE       `GCRQ` = '2023-11-30'   ) AS `今天`,   (     SELECT       `DRKYLHB`     FROM       `R_GLKYL_Z`     WHERE       `GCRQ` = '2023-11-29'   ) AS `昨天`;
gold_sql: SELECT
  `GSGL_JTLL` AS `总体车流量`
FROM
  `R_GSGL_Z`
WHERE
  `GCRQ` = '2023-11-30'
pred_sql: SELECT   `GSGL_JTLL` AS `总体车流量` FROM   `R_GSGL_Z` WHERE   `GCRQ` = '2023-11-30' ```
gold_sql: SELECT
  SHFX_JTLL AS `上海方向高速车流量（万辆/天）`
FROM
  R_GSGL_Z
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      R_GSGL_Z
  )
pred_sql: SELECT   `上海方向高速车流量（万辆/天）` FROM (   SELECT     SHFX_JTLL AS `上海方向高速车流量（万辆/天）`,     GCRQ   FROM     R_GSGL_Z ) AS subquery WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       R_GSGL_Z   );
gold_sql: SELECT
  XSSD AS `平均行驶速度`
FROM
  R_GSGL_Z
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      R_GSGL_Z
  );
pred_sql: SELECT   XSSD AS `平均行驶速度` FROM   R_GSGL_Z WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       R_GSGL_Z   );
gold_sql: SELECT
  MAX(SHFX_JTLL) as `最高往上海方向车流量`
FROM
  R_GSGL_Z;
pred_sql: SELECT   MAX(SHFX_JTLL) AS `最高往上海方向车流量` FROM   R_GSGL_Z;
gold_sql: SELECT
  GCRQ AS `日期`,
  TQ AS `天气情况`
FROM
  R_JBXX_Z
WHERE
  YEAR(GCRQ) = YEAR(NOW()) - 1
  AND MONTH(GCRQ) = 11
  AND XQ <> '星期六'
  AND XQ <> '星期日'
ORDER BY
  FIELD(TQ, '雨', '雪', '雾', '阴', '多云', '晴')
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `日期`,   TQ AS `天气情况` FROM   R_JBXX_Z WHERE   YEAR(GCRQ) = YEAR(NOW()) - 1   AND MONTH(GCRQ) = 11   AND XQ NOT IN ('星期六', '星期日') ORDER BY   FIELD(TQ, '雨', '雪', '雾', '阴', '多云', '晴') LIMIT   1;
gold_sql: SELECT
  `XQ` AS `星期`,
  `TQ` AS `天气`
FROM
  `R_JBXX_Z`
WHERE
  `GCRQ` = '2023-11-30';
pred_sql: SELECT   `TQ` AS `天气`,   `XQ` AS `星期` FROM   `R_JBXX_Z` WHERE   `GCRQ` = '2023-11-30';
gold_sql: SELECT
  TQ AS `今天天气`,
  (
    SELECT
      TQ
    FROM
      R_JBXX_Z
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          R_JBXX_Z
      ) - INTERVAL 1 DAY
  ) AS `昨天天气`
FROM
  R_JBXX_Z
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      R_JBXX_Z
  );
pred_sql: SELECT   (     SELECT       TQ     FROM       R_JBXX_Z     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           R_JBXX_Z       ) - INTERVAL 1 DAY   ) AS `昨天天气`,   TQ AS `今天天气` FROM   R_JBXX_Z WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       R_JBXX_Z   );
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `TQ` AS `天气`
FROM
  `R_JBXX_Z`
WHERE
  `GCRQ` = '2023-11-28';
pred_sql: SELECT   `TQ` AS `天气`,   `GCRQ` AS `观测日期` FROM   `R_JBXX_Z` WHERE   `GCRQ` = '2023-11-28';
gold_sql: SELECT
  t1.GCRQ AS '当天日期',
  t1.PTGL_DML AS '当天车流量（辆/天）',
  t2.GCRQ AS '上个月同一天日期',
  t2.PTGL_DML AS '上个月同一天车流量（辆/天）',
  (t1.PTGL_DML - t2.PTGL_DML) AS '车流量变化（辆/天）'
FROM
  (
    SELECT
      *
    FROM
      R_PTGL_Z
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          R_PTGL_Z
      )
  ) t1
  LEFT JOIN R_PTGL_Z t2 ON DATE_FORMAT(t1.GCRQ, '%d') = DATE_FORMAT(t2.GCRQ, '%d')
  AND t2.GCRQ = DATE_SUB(t1.GCRQ, INTERVAL 1 MONTH)
pred_sql: SELECT   t1.GCRQ AS '当天日期',   t1.PTGL_DML AS '当天车流量（辆/天）',   t2.GCRQ AS '上个月同一天日期',   t2.PTGL_DML AS '上个月同一天车流量（辆/天）',   (t1.PTGL_DML - t2.PTGL_DML) AS '车流量变化（辆/天）' FROM   R_PTGL_Z t1   LEFT JOIN R_PTGL_Z t2 ON DATE_FORMAT(t1.GCRQ, '%d') = DATE_FORMAT(t2.GCRQ, '%d')   AND t2.GCRQ = DATE_SUB(t1.GCRQ, INTERVAL 1 MONTH) WHERE   t1.GCRQ = (     SELECT       MAX(GCRQ)     FROM       R_PTGL_Z   );
gold_sql: SELECT
  GCRQ AS '观测日期',
  PTGL_DML AS '普通公路断面量（辆/天）'
FROM
  R_PTGL_Z
WHERE
  MONTH(GCRQ) = 11
  AND YEAR(GCRQ) = 2023
ORDER BY
  PTGL_DML DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS '观测日期',   PTGL_DML AS '普通公路断面量（辆/天）' FROM   R_PTGL_Z WHERE   YEAR(GCRQ) = 2023   AND MONTH(GCRQ) = 11 ORDER BY   PTGL_DML DESC LIMIT   1;
gold_sql: SELECT
  (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ = '2023-11-30'
  ) AS '今日普通公路平均行驶速度（千米/小时）',
  (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ = DATE_SUB('2023-11-30', INTERVAL 1 YEAR)
  ) AS '去年同期普通公路平均行驶速度（千米/小时）',
  (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ = '2023-11-30'
  ) - (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ = DATE_SUB('2023-11-30', INTERVAL 1 YEAR)
  ) AS '行驶速度变化（千米/小时）'
FROM
  r_ptgl_z
LIMIT
  1;
pred_sql: SELECT   (     SELECT       AVG(XSSD)     FROM       r_ptgl_z     WHERE       GCRQ = '2023-11-30'   ) AS '今日普通公路平均行驶速度（千米/小时）',   (     SELECT       AVG(XSSD)     FROM       r_ptgl_z     WHERE       GCRQ = DATE_SUB('2023-11-30', INTERVAL 1 YEAR)   ) AS '去年同期普通公路平均行驶速度（千米/小时）',   (     SELECT       AVG(XSSD) - (         SELECT           AVG(XSSD)         FROM           r_ptgl_z         WHERE           GCRQ = DATE_SUB('2023-11-30', INTERVAL 1 YEAR)       )     FROM       r_ptgl_z     WHERE       GCRQ = '2023-11-30'   ) AS '行驶速度变化（千米/小时）' FROM   r_ptgl_z LIMIT   1;
gold_sql: SELECT
  c.观测周 AS 观测周,
  c.路网畅通率 AS 本周路网畅通率,
  (c.路网畅通率 - d.路网畅通率) AS 畅通率变化
FROM
  (
    SELECT
      YEARWEEK(GCRQ, 1) AS 观测周,
      AVG(LWCTL) AS 路网畅通率
    FROM
      R_PTGL_Z
    WHERE
      GCRQ BETWEEN '2023-11-20' AND '2023-11-26'
    GROUP BY
      YEARWEEK(GCRQ, 1)
  ) c
  JOIN (
    SELECT
      YEARWEEK(GCRQ, 1) AS 观测周,
      AVG(LWCTL) AS 路网畅通率
    FROM
      R_PTGL_Z
    WHERE
      GCRQ BETWEEN '2023-11-13' AND '2023-11-19'
    GROUP BY
      YEARWEEK(GCRQ, 1)
  ) d ON c.观测周 - 1 = d.观测周;
pred_sql: SELECT   c.观测周 AS 观测周,   c.路网畅通率 AS 本周路网畅通率,   (c.路网畅通率 - d.路网畅通率) AS 畅通率变化 FROM   (     SELECT       YEARWEEK(GCRQ, 1) AS 观测周,       AVG(LWCTL) AS 路网畅通率     FROM       R_PTGL_Z     WHERE       GCRQ BETWEEN '2023-11-13' AND '2023-11-19'     GROUP BY       YEARWEEK(GCRQ, 1)   ) d   JOIN (     SELECT       YEARWEEK(GCRQ, 1) AS 观测周,       AVG(LWCTL) AS 路网畅通率     FROM       R_PTGL_Z     WHERE       GCRQ BETWEEN '2023-11-20' AND '2023-11-26'     GROUP BY       YEARWEEK(GCRQ, 1)   ) c ON c.观测周 = d.观测周 + 1;
gold_sql: SELECT
  COALESCE(
    (
      SELECT
        DRHWL
      FROM
        r_rxhw_z
      WHERE
        GCRQ = '2024-07-22'
    ),
    0
  ) - COALESCE(
    (
      SELECT
        DRHWL
      FROM
        r_rxhw_z
      WHERE
        GCRQ = '2024-07-15'
    ),
    0
  ) AS `电话话务量变化值`
pred_sql: SELECT   COALESCE(     (       SELECT         DRHWL       FROM         r_rxhw_z       WHERE         GCRQ = '2024-07-22'     ),     0   ) - COALESCE(     (       SELECT         DRHWL       FROM         r_rxhw_z       WHERE         GCRQ = '2024-07-15'     ),     0   ) AS `电话话务量变化值`;
gold_sql: SELECT
  COALESCE(
    (
      SELECT
        DYLJHWL
      FROM
        R_RXHW_Z
      WHERE
        GCRQ = (
          SELECT
            MAX(GCRQ)
          FROM
            R_RXHW_Z
          WHERE
            GCRQ >= DATE_FORMAT(NOW(), '%Y-%m-01')
            AND GCRQ < DATE_ADD(DATE_FORMAT(NOW(), '%Y-%m-01'), INTERVAL 1 MONTH)
        )
    ),
    0
  ) AS `本月累计话务量`,
  COALESCE(
    (
      SELECT
        DYLJHWL
      FROM
        R_RXHW_Z
      WHERE
        GCRQ = (
          SELECT
            MAX(GCRQ)
          FROM
            R_RXHW_Z
          WHERE
            GCRQ >= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 YEAR), '%Y-%m-01')
            AND GCRQ < DATE_ADD(
              DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 YEAR), '%Y-%m-01'),
              INTERVAL 1 MONTH
            )
        )
    ),
    0
  ) AS `去年同期累计话务量`
pred_sql: SELECT   COALESCE(     (       SELECT         DYLJHWL       FROM         R_RXHW_Z       WHERE         GCRQ = (           SELECT             MAX(GCRQ)           FROM             R_RXHW_Z           WHERE             GCRQ >= DATE_FORMAT(NOW(), '%Y-%m-01')             AND GCRQ < DATE_ADD(DATE_FORMAT(NOW(), '%Y-%m-01'), INTERVAL 1 MONTH)         )     ),     0   ) AS `去年同期累计话务量`,   COALESCE(     (       SELECT         DYLJHWL       FROM         R_RXHW_Z       WHERE         GCRQ = (           SELECT             MAX(GCRQ)           FROM             R_RXHW_Z           WHERE             GCRQ >= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 YEAR), '%Y-%m-01')             AND GCRQ < DATE_ADD(               DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 YEAR), '%Y-%m-01'),               INTERVAL 1 MONTH             )         )     ),     0   ) AS `本月累计话务量` ```
gold_sql: SELECT
  r1.GCRQ AS "日期",
  r1.DRHWL AS "话务量（爱尔兰）",
  r1.DRHB AS "话务量环比"
FROM
  (
    SELECT
      *
    FROM
      r_rxhw_z
    WHERE
      GCRQ = '2023-11-30'
  ) r1
  JOIN (
    SELECT
      *
    FROM
      r_rxhw_z
    WHERE
      GCRQ = '2023-11-29'
  ) r2 ON r1.id != r2.id;
pred_sql: SELECT   r1.GCRQ AS "日期",   r1.DRHWL AS "话务量（爱尔兰）",   r1.DRHB AS "话务量环比" FROM   (     SELECT       *     FROM       r_rxhw_z     WHERE       GCRQ = '2023-11-30'   ) r1   CROSS JOIN (     SELECT       *     FROM       r_rxhw_z     WHERE       GCRQ = '2023-11-29'   ) r2 ON r1.id != r2.id;
gold_sql: SELECT
  (DRHWL / DYLJHWL) * 100 AS '电话话务总量占比'
FROM
  r_rxhw_z
WHERE
  GCRQ = '2023-11-30';
pred_sql: SELECT   (DRHWL / DYLJHWL) * 100 AS '电话话务总量占比' FROM   r_rxhw_z WHERE   GCRQ = '2023-11-30';
gold_sql: SELECT
  (
    SELECT
      `ZBC`
    FROM
      `r_tlbc_z`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `r_tlbc_z`
      )
  ) AS '今天铁路总班次',
  (
    SELECT
      `ZBC`
    FROM
      `r_tlbc_z`
    WHERE
      `GCRQ` = DATE_SUB(
        (
          SELECT
            MAX(`GCRQ`)
          FROM
            `r_tlbc_z`
        ),
        INTERVAL 1 WEEK
      )
  ) AS '上周同期铁路总班次'
pred_sql: SELECT   (     SELECT       `ZBC`     FROM       `r_tlbc_z`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`)         FROM           `r_tlbc_z`       )   ) AS '今天铁路总班次',   (     SELECT       `ZBC`     FROM       `r_tlbc_z`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`) - INTERVAL 1 WEEK         FROM           `r_tlbc_z`       )   ) AS '上周同期铁路总班次' ```
gold_sql: SELECT
  (
    SELECT
      SUM(DDBC) AS '本月铁路到达班次'
    FROM
      R_TLBC_Z
    WHERE
      GCRQ BETWEEN '2023-11-30' AND '2024-07-01'
  ) AS '本月铁路到总班次',
  (
    SELECT
      SUM(DDBC) AS '上月铁路到达班次'
    FROM
      R_TLBC_Z
    WHERE
      GCRQ BETWEEN '2023-10-01' AND '2023-10-31'
  ) AS '上月铁路到总班次';
pred_sql: SELECT   (     SELECT       SUM(DDBC) AS '本月铁路到总班次'     FROM       R_TLBC_Z     WHERE       GCRQ BETWEEN '2023-11-30' AND '2024-07-01'   ) AS '本月铁路到总班次',   (     SELECT       SUM(DDBC) AS '上月铁路到总班次'     FROM       R_TLBC_Z     WHERE       GCRQ BETWEEN '2023-10-01' AND '2023-10-31'   ) AS '上月铁路到总班次' FROM DUAL;
gold_sql: SELECT
  (
    SELECT
      `FSBC`
    FROM
      `r_tlbc_z`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `r_tlbc_z` AS sub1
      )
  ) AS '今天发送班次',
  (
    SELECT
      `FSBC`
    FROM
      `r_tlbc_z`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `r_tlbc_z` AS sub2
      ) - INTERVAL 1 DAY
  ) AS '昨天发送班次';
pred_sql: SELECT   (     SELECT       `FSBC`     FROM       `r_tlbc_z`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`) - INTERVAL 1 DAY         FROM           `r_tlbc_z` AS sub2       ) + INTERVAL 1 DAY   ) AS '昨天发送班次',   (     SELECT       `FSBC`     FROM       `r_tlbc_z`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`)         FROM           `r_tlbc_z` AS sub1       )   ) AS '今天发送班次';
gold_sql: SELECT
  (
    SELECT
      `ZBC`
    FROM
      `R_TLBC_Z`
    WHERE
      `GCRQ` = CURDATE()
  ) AS '今年铁路总班次',
  (
    SELECT
      `ZBC`
    FROM
      `R_TLBC_Z`
    WHERE
      `GCRQ` = CURDATE() - INTERVAL 1 YEAR
  ) AS '去年同期铁路总班次',
  (
    SELECT
      `ZBC`
    FROM
      `R_TLBC_Z`
    WHERE
      `GCRQ` = CURDATE()
  ) - (
    SELECT
      `ZBC`
    FROM
      `R_TLBC_Z`
    WHERE
      `GCRQ` = CURDATE() - INTERVAL 1 YEAR
  ) AS '铁路总班次差异'
pred_sql: SELECT   (     SELECT       `ZBC`     FROM       `R_TLBC_Z`     WHERE       `GCRQ` = CURDATE() - INTERVAL 1 YEAR   ) AS '去年同期铁路总班次',   (     SELECT       `ZBC`     FROM       `R_TLBC_Z`     WHERE       `GCRQ` = CURDATE()   ) AS '今年铁路总班次',   (     SELECT       `ZBC`     FROM       `R_TLBC_Z`     WHERE       `GCRQ` = CURDATE()   ) - (     SELECT       `ZBC`     FROM       `R_TLBC_Z`     WHERE       `GCRQ` = CURDATE() - INTERVAL 1 YEAR   ) AS '铁路总班次差异' ```
gold_sql: SELECT
  COUNT(DISTINCT a.CITY) - COUNT(DISTINCT b.CITY) AS `城市数量变化`
FROM
  tl_dm a
  LEFT JOIN tl_dm b ON a.CITY = b.CITY
  AND b.YEAR = a.YEAR - 1
WHERE
  a.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      tl_dm
  ) - 1
  AND a.ROAD_NAME = '宁安城际'
  AND b.ROAD_NAME = '宁安城际';
pred_sql: SELECT   (COUNT(DISTINCT CASE WHEN a.YEAR = (SELECT MAX(YEAR) FROM tl_dm) - 1 THEN a.CITY END) -     COUNT(DISTINCT CASE WHEN b.YEAR = (SELECT MAX(YEAR) FROM tl_dm) - 2 THEN b.CITY END)) AS `城市数量变化` FROM   tl_dm a   LEFT JOIN tl_dm b ON a.CITY = b.CITY WHERE   a.ROAD_NAME = '宁安城际'   AND b.ROAD_NAME = '宁安城际';
gold_sql: SELECT
  (
    SELECT
      SUM(OD)
    FROM
      TL_DM
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          TL_DM
      )
  ) - (
    SELECT
      SUM(OD)
    FROM
      TL_DM
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`) - 1
        FROM
          TL_DM
      )
  ) AS `铁路断面货运总量差异`
pred_sql: SELECT SUM(CASE WHEN `YEAR` = (SELECT MAX(`YEAR`) FROM TL_DM) THEN OD ELSE 0 END) -         SUM(CASE WHEN `YEAR` = (SELECT MAX(`YEAR`) - 1 FROM TL_DM) THEN OD ELSE 0 END) AS `铁路断面货运总量差异` FROM TL_DM;
gold_sql: SELECT
  D_STATION AS '终点站',
  SUM(
    CASE
      WHEN YEAR = '2024' THEN OD
      ELSE 0
    END
  ) AS '今年客流量',
  SUM(
    CASE
      WHEN YEAR = '2023' THEN OD
      ELSE 0
    END
  ) AS '去年客流量',
  SUM(
    CASE
      WHEN YEAR = '2024' THEN OD
      ELSE 0
    END
  ) - SUM(
    CASE
      WHEN YEAR = '2023' THEN OD
      ELSE 0
    END
  ) AS '客流量变化'
FROM
  GLKYL_OD_TJ
WHERE
  O_STATION = '上海市'
GROUP BY
  D_STATION
HAVING
  '客流量变化' != 0
ORDER BY
  '客流量变化' DESC;
pred_sql: SELECT   D_STATION AS '终点站',   SUM(CASE WHEN YEAR = '2024' THEN OD ELSE 0 END) AS '今年客流量',   SUM(CASE WHEN YEAR = '2023' THEN OD ELSE 0 END) AS '去年客流量',   (SUM(CASE WHEN YEAR = '2024' THEN OD ELSE 0 END) - SUM(CASE WHEN YEAR = '2023' THEN OD ELSE 0 END)) AS '客流量变化' FROM   GLKYL_OD_TJ WHERE   O_STATION = '上海市' GROUP BY   D_STATION HAVING   '客流量变化' != 0 ORDER BY   '客流量变化' DESC;
gold_sql: SELECT
  YEAR AS '年份',
  SUM(OD) AS '客流量（人/月）'
FROM
  TL_DM
WHERE
  ROAD_NAME = '京沪高速铁路'
GROUP BY
  YEAR
ORDER BY
  YEAR DESC;
pred_sql: SELECT   YEAR AS '年份',   SUM(OD) AS '客流量（人/月）' FROM   TL_DM WHERE   ROAD_NAME = '京沪高速铁路' GROUP BY   YEAR ORDER BY   YEAR;
gold_sql: SELECT
  c.`LUXZDCSMC` AS `终点城市`,
  SUM(c.`BANCZL`) AS `本周班次总量`,
  SUM(l.`BANCZL`) AS `上周班次总量`,
  SUM(c.`BANCZL`) - SUM(l.`BANCZL`) AS `班次总量变化`
FROM
  `TL_KYLX` c
  LEFT JOIN `TL_KYLX` l ON c.`LUXZDCSMC` = l.`LUXZDCSMC`
  AND c.`LUXQDCSMC` = '苏州市'
  AND l.`LUXQDCSMC` = '苏州市'
  AND l.`GCRQ` BETWEEN '2024-07-15' AND '2024-07-21'
WHERE
  c.`GCRQ` BETWEEN '2024-07-22' AND '2024-07-28'
GROUP BY
  c.`LUXZDCSMC`;
pred_sql: SELECT   c.`LUXZDCSMC` AS `终点城市`,   SUM(c.`BANCZL`) AS `本周班次总量`,   SUM(l.`BANCZL`) AS `上周班次总量`,   SUM(c.`BANCZL`) - SUM(l.`BANCZL`) AS `班次总量变化` FROM   `TL_KYLX` l   RIGHT JOIN `TL_KYLX` c ON c.`LUXZDCSMC` = l.`LUXZDCSMC`   AND c.`LUXQDCSMC` = '苏州市'   AND l.`LUXQDCSMC` = '苏州市'   AND l.`GCRQ` BETWEEN '2024-07-15' AND '2024-07-21' WHERE   c.`GCRQ` BETWEEN '2024-07-22' AND '2024-07-28' GROUP BY   c.`LUXZDCSMC`;
gold_sql: SELECT
  SUM(BANCZL) AS `班次总量`
FROM
  TL_KYLX
WHERE
  LUXQDCSMC = '南通市'
  AND LUXZDCSMC = '扬州市'
  AND GCRQ BETWEEN '2023-07-22' AND '2024-07-21';
pred_sql: SELECT   SUM(BANCZL) AS `班次总量` FROM   TL_KYLX WHERE   GCRQ BETWEEN '2023-07-22' AND '2024-07-21'   AND LUXQDCSMC = '南通市'   AND LUXZDCSMC = '扬州市';
gold_sql: SELECT
  GCRQ AS `观测日期`,
  SUM(BANCZL) AS `班次总量`
FROM
  TL_KYLX
WHERE
  LUXQDCSMC = '南通市'
  AND GCRQ >= DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        TL_KYLX
    ),
    INTERVAL 3 MONTH
  )
GROUP BY
  GCRQ
ORDER BY
  GCRQ;
pred_sql: SELECT   GCRQ AS `观测日期`,   SUM(BANCZL) AS `班次总量` FROM   TL_KYLX WHERE   LUXQDCSMC = '南通市'   AND GCRQ >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY   GCRQ ORDER BY   GCRQ;
gold_sql: SELECT
  SUM(OD) AS '宁安城际线路的OD量'
FROM
  TL_DM
WHERE
  ROAD_NAME = '宁安城际'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      TL_DM
  );
pred_sql: SELECT   SUM(OD) AS '宁安城际线路的OD量' FROM   TL_DM WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       TL_DM   )   AND ROAD_NAME = '宁安城际';
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_PROVINCE AS `终点省份`,
  SUM(PASSENGER) AS `客流量（人/月）`
FROM
  TL_OD
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      TL_OD
  )
  AND O_PROVINCE = '江苏省'
  AND D_PROVINCE != '江苏省'
GROUP BY
  O_CITY,
  D_PROVINCE;
pred_sql: SELECT   D_PROVINCE AS `终点省份`,   O_CITY AS `起点城市`,   SUM(PASSENGER) AS `客流量（人/月）` FROM   TL_OD WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       TL_OD   )   AND O_PROVINCE = '江苏省'   AND D_PROVINCE != '江苏省' GROUP BY   D_PROVINCE,   O_CITY;
gold_sql: SELECT
  CITY AS `城市`,
  ABS(CZ_RK - HJ_RK) AS `常住人口与户籍人口差距(万人)`
FROM
  RK_TJ
WHERE
  YEAR = 2018
  AND CITY IS NOT NULL
ORDER BY
  ABS(CZ_RK - HJ_RK) DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS `城市`,   ABS(CZ_RK - HJ_RK) AS `常住人口与户籍人口差距(万人)` FROM   RK_TJ WHERE   YEAR = 2018   AND CITY IS NOT NULL ORDER BY   `常住人口与户籍人口差距(万人)` DESC LIMIT   1;
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  SUM(`PASSENGER`) AS `乘客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND `O_PROVINCE` = '江苏省'
  AND `D_PROVINCE` = '江苏省'
GROUP BY
  `O_CITY`,
  `D_CITY`;
pred_sql: SELECT   `D_CITY` AS `终点城市`,   `O_CITY` AS `起点城市`,   SUM(`PASSENGER`) AS `乘客流量（人/月）` FROM   tl_od WHERE   `YEAR` = '2018'   AND `O_PROVINCE` = '江苏省'   AND `D_PROVINCE` = '江苏省' GROUP BY   `D_CITY`,   `O_CITY`;
gold_sql: SELECT
  O_PROVINCE AS `起点省份`,
  SUM(PASSENGER) AS `总客流量（人/月）`
FROM
  tl_od
WHERE
  YEAR = '2018'
  AND D_CITY = '无锡市'
GROUP BY
  O_PROVINCE
ORDER BY
  `总客流量（人/月）` DESC
LIMIT
  1;
pred_sql: SELECT   O_PROVINCE AS `起点省份`,   SUM(PASSENGER) AS `总客流量（人/月）` FROM   tl_od WHERE   YEAR = '2018'   AND D_CITY = '无锡市' GROUP BY   O_PROVINCE ORDER BY   `总客流量（人/月）` DESC LIMIT   1;
gold_sql: SELECT
  current.MONTH AS `月份`,
  current.D_CITY AS `到达城市`,
  (current.OD_SUM - IFNULL(previous.OD_SUM, 0)) AS `OD量增长数`
FROM
  (
    SELECT
      MONTH,
      D_CITY,
      SUM(OD) AS OD_SUM
    FROM
      TL_OD_SJXL
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          TL_OD_SJXL
      )
      AND O_CITY = '淮安市'
    GROUP BY
      MONTH,
      D_CITY
  ) AS current
  LEFT JOIN (
    SELECT
      MONTH,
      D_CITY,
      SUM(OD) AS OD_SUM
    FROM
      TL_OD_SJXL
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          TL_OD_SJXL
        WHERE
          YEAR < (
            SELECT
              MAX(YEAR)
            FROM
              TL_OD_SJXL
          )
      )
      AND O_CITY = '淮安市'
    GROUP BY
      MONTH,
      D_CITY
  ) AS previous ON current.MONTH = previous.MONTH
  AND current.D_CITY = previous.D_CITY
ORDER BY
  `OD量增长数` DESC;
pred_sql: SELECT   current.MONTH AS `月份`,   current.D_CITY AS `到达城市`,   (current.OD_SUM - IFNULL(previous.OD_SUM, 0)) AS `OD量增长数` FROM   (     SELECT       MONTH,       D_CITY,       SUM(OD) AS OD_SUM     FROM       TL_OD_SJXL     WHERE       YEAR = (         SELECT           MAX(YEAR)         FROM           TL_OD_SJXL       )       AND O_CITY = '淮安市'     GROUP BY       MONTH,       D_CITY   ) AS current   LEFT JOIN (     SELECT       MONTH,       D_CITY,       SUM(OD) AS OD_SUM     FROM       TL_OD_SJXL     WHERE       YEAR = (         SELECT           MAX(YEAR) - 1         FROM           TL_OD_SJXL       )       AND O_CITY = '淮安市'     GROUP BY       MONTH,       D_CITY   ) AS previous ON current.MONTH = previous.MONTH   AND current.D_CITY = previous.D_CITY ORDER BY   `OD量增长数` DESC;
gold_sql: SELECT
  t1.O_CITY AS '起点城市',
  t1.D_CITY AS '终点城市',
  ABS(t1.OD - t2.OD) AS '客流量变化量'
FROM
  TL_OD_SJXL t1
  JOIN TL_OD_SJXL t2 ON t1.O_CITY = t2.O_CITY
  AND t1.D_CITY = t2.D_CITY
  AND t1.MONTH = t2.MONTH
  AND t1.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      TL_OD_SJXL
  )
  AND t2.YEAR = (
    (
      SELECT
        MAX(YEAR)
      FROM
        TL_OD_SJXL
    ) - 1
  )
ORDER BY
  '客流量变化量' DESC
LIMIT
  1;
pred_sql: SELECT   t1.O_CITY AS '起点城市',   t1.D_CITY AS '终点城市',   ABS(t1.OD - t2.OD) AS '客流量变化量' FROM   TL_OD_SJXL t1   JOIN TL_OD_SJXL t2 ON t1.O_CITY = t2.O_CITY   AND t1.D_CITY = t2.D_CITY   AND t1.MONTH = t2.MONTH   AND t1.YEAR = (     SELECT       MAX(YEAR)     FROM       TL_OD_SJXL   )   AND t2.YEAR = (     (       SELECT         MAX(YEAR)       FROM         TL_OD_SJXL     ) - 1   ) ORDER BY   '客流量变化量' DESC LIMIT   1;
gold_sql: SELECT
  LUXQDCSMC AS `起点城市`,
  SUM(BANCZL) AS `总班次`
FROM
  tl_kylx
GROUP BY
  LUXQDCSMC
ORDER BY
  `总班次` DESC
LIMIT
  1;
pred_sql: SELECT   LUXQDCSMC AS `起点城市`,   SUM(BANCZL) AS `总班次` FROM   tl_kylx GROUP BY   LUXQDCSMC ORDER BY   `总班次` DESC LIMIT   1;
gold_sql: SELECT
  `LUXQDCSMC` AS `路线起点城市`,
  `LUXZDCSMC` AS `路线终点城市`,
  SUM(`BANCZL`) AS `班次总量`
FROM
  `tl_kylx`
WHERE
  `GCRQ` >= DATE_SUB(
    (
      SELECT
        MAX(`GCRQ`)
      FROM
        `tl_kylx`
    ),
    INTERVAL 1 MONTH
  )
GROUP BY
  `LUXQDCSMC`,
  `LUXZDCSMC`
ORDER BY
  `班次总量` DESC
LIMIT
  1;
pred_sql: SELECT   `LUXQDCSMC` AS `路线起点城市`,   `LUXZDCSMC` AS `路线终点城市`,   SUM(`BANCZL`) AS `班次总量` FROM   `tl_kylx` WHERE   `GCRQ` >= (     SELECT       MAX(`GCRQ`) - INTERVAL 1 MONTH     FROM       `tl_kylx`   ) GROUP BY   `LUXZDCSMC`,   `LUXQDCSMC` ORDER BY   `班次总量` DESC LIMIT   1;
gold_sql: SELECT
  `QIDCS` AS '起点城市',
  `ZHONGDCS` AS '终点城市',
  `BANCZL` AS '班次总量（班）',
  `PAIM` AS '排名'
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
  )
ORDER BY
  `PAIM` ASC
LIMIT
  5;
pred_sql: SELECT   `QIDCS` AS '起点城市',   `ZHONGDCS` AS '终点城市',   `BANCZL` AS '班次总量（班）',   `PAIM` AS '排名' FROM   `tl_rmkylx` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `tl_rmkylx`   ) ORDER BY   `PAIM` ASC LIMIT   5;
gold_sql: SELECT
  this_week.`QIDCS` AS '起点城市',
  this_week.`ZHONGDCS` AS '终点城市',
  this_week.`PAIM` AS '本周排名',
  last_week.`PAIM` AS '上周排名',
  this_week.`PAIM` - last_week.`PAIM` AS '排名变化'
FROM
  (
    SELECT
      *
    FROM
      `TL_RMKYLX`
    WHERE
      `GCRQ` = '2023-11-23'
  ) this_week
  LEFT JOIN (
    SELECT
      *
    FROM
      `TL_RMKYLX`
    WHERE
      `GCRQ` = '2023-11-19'
  ) last_week ON this_week.`QIDCS` = last_week.`QIDCS`
  AND this_week.`ZHONGDCS` = last_week.`ZHONGDCS`
WHERE
  this_week.`PAIM` != last_week.`PAIM`;
pred_sql: SELECT   this_week.`QIDCS` AS '起点城市',   this_week.`ZHONGDCS` AS '终点城市',   this_week.`PAIM` AS '本周排名',   last_week.`PAIM` AS '上周排名',   this_week.`PAIM` - last_week.`PAIM` AS '排名变化' FROM   (     SELECT       *     FROM       `TL_RMKYLX`     WHERE       `GCRQ` = '2023-11-23'   ) last_week   RIGHT JOIN (     SELECT       *     FROM       `TL_RMKYLX`     WHERE       `GCRQ` = '2023-11-19'   ) this_week ON this_week.`QIDCS` = last_week.`QIDCS`   AND this_week.`ZHONGDCS` = last_week.`ZHONGDCS` WHERE   this_week.`PAIM` != last_week.`PAIM`;
gold_sql: SELECT
  PROVINCE AS `省份`,
  SUM(GKTT) AS `年度港口货物吞吐量（万吨）`
FROM
  TRANSPORTATION_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      TRANSPORTATION_TJ
  )
GROUP BY
  PROVINCE
ORDER BY
  `年度港口货物吞吐量（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   PROVINCE AS `省份`,   SUM(GKTT) AS `年度港口货物吞吐量（万吨）` FROM   TRANSPORTATION_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       TRANSPORTATION_TJ   ) GROUP BY   PROVINCE ORDER BY   `年度港口货物吞吐量（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  CITY AS '县级市',
  MAX(GLHY) AS '公路货运量（万吨）'
FROM
  TRANSPORTATION_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      TRANSPORTATION_TJ
  )
  AND PROVINCE = '江苏省'
  AND DISTRICT IS NOT NULL
GROUP BY
  CITY
ORDER BY
  '公路货运量（万吨）' DESC
LIMIT
  1;
pred_sql: SELECT   CITY AS '县级市',   MAX(GLHY) AS '公路货运量（万吨）' FROM   TRANSPORTATION_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       TRANSPORTATION_TJ   )   AND PROVINCE = '江苏省'   AND DISTRICT IS NOT NULL GROUP BY   CITY ORDER BY   2 DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  SUM(CHELL) AS `总车流量`
FROM
  GSGL_RMLX
WHERE
  GCRQ BETWEEN (
    SELECT
      MAX(GCRQ) - INTERVAL 1 MONTH
    FROM
      GSGL_RMLX
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_RMLX
  )
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  SUM(CHELL) DESC
LIMIT
  1;
pred_sql: SELECT   D_CITY AS `终点城市`,   O_CITY AS `起点城市`,   SUM(CHELL) AS `总车流量` FROM   GSGL_RMLX WHERE   GCRQ >= (     SELECT       MAX(GCRQ) - INTERVAL 1 MONTH     FROM       GSGL_RMLX   ) AND GCRQ <= (     SELECT       MAX(GCRQ)     FROM       GSGL_RMLX   ) GROUP BY   D_CITY,   O_CITY ORDER BY   `总车流量` DESC LIMIT   1;
gold_sql: SELECT
  PROVINCE AS '省份',
  TLHY / GLHY AS '铁路货运量与公路货运量比例'
FROM
  transportation_tj
WHERE
  YEAR = 2010
  AND PROVINCE IS NOT NULL
  
  AND DISTRICT IS NULL
ORDER BY
  ABS(TLHY - GLHY) DESC;
pred_sql: SELECT   PROVINCE AS '省份',   TLHY / GLHY AS '铁路货运量与公路货运量比例' FROM   transportation_tj WHERE   YEAR = 2010   AND PROVINCE IS NOT NULL   AND DISTRICT IS NULL ORDER BY   ABS(TLHY - GLHY) DESC;
gold_sql: SELECT
  `GCRQ` AS '日期',
  `MAOBSJS` AS '设计锚泊数（个）',
  `MAOBJHS` AS '计划锚泊数（个）',
  (`MAOBJHS` - `MAOBSJS`) AS '差距（个）'
FROM
  yjgk_yxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      yjgk_yxzt
  );
pred_sql: SELECT   `GCRQ` AS '日期',   `MAOBSJS` AS '设计锚泊数（个）',   `MAOBJHS` AS '计划锚泊数（个）',   (`MAOBJHS` - `MAOBSJS`) AS '差距（个）' FROM   yjgk_yxzt WHERE   `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt);
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `GUOJ` AS `过境船舶数量`
FROM
  YJGK_YXZT
ORDER BY
  `GCRQ` DESC
LIMIT
  2;
pred_sql: SELECT   `GUOJ` AS `过境船舶数量`,   `GCRQ` AS `观测日期` FROM   YJGK_YXZT ORDER BY   `GCRQ` DESC LIMIT   2;
gold_sql: SELECT
  GCRQ AS '观测日期',
  JIZXTTL AS '集装箱吞吐量'
FROM
  yjgk_yxzt
ORDER BY
  GCRQ DESC;
pred_sql: SELECT   JIZXTTL AS '集装箱吞吐量',   GCRQ AS '观测日期' FROM   yjgk_yxzt ORDER BY   GCRQ DESC;
gold_sql: SELECT
  QIYZS AS `区域内运营企业总数`
FROM
  YJGK_YXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      YJGK_YXZT
  );
pred_sql: SELECT   QIYZS AS `区域内运营企业总数` FROM   YJGK_YXZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       YJGK_YXZT   );
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  (`CHUANB_WURWJSL` / `NEIH_YUNSCCBS`) AS `污染物接收量与内河运输船舶数比例`
FROM
  `CB_YXQK`
ORDER BY
  `污染物接收量与内河运输船舶数比例`
LIMIT
  1;
pred_sql: SELECT   `GCRQ` AS `观测日期`,   (`CHUANB_WURWJSL` / `NEIH_YUNSCCBS`) AS `污染物接收量与内河运输船舶数比例` FROM   `CB_YXQK` ORDER BY   `污染物接收量与内河运输船舶数比例` ASC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  (WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS) AS `在线船舶数与入网船舶数比例`
FROM
  `cb_yxqk`
ORDER BY
  (WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS) DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   (WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS) AS `在线船舶数与入网船舶数比例` FROM   `cb_yxqk` ORDER BY   `在线船舶数与入网船舶数比例` DESC LIMIT   1;
gold_sql: SELECT
  G1.GCRQ AS '观测日期',
  ROUND(
    (
      (G1.WEIHPCB_ZAIXCBS - G2.WEIHPCB_ZAIXCBS) / G2.WEIHPCB_ZAIXCBS
    ) * 100,
    2
  ) AS '增长率'
FROM
  CB_YXQK G1
  JOIN CB_YXQK G2 ON G1.GCRQ = DATE_ADD(G2.GCRQ, INTERVAL 1 DAY)
ORDER BY
  `增长率` DESC
LIMIT
  1;
pred_sql: SELECT      G1.GCRQ AS '观测日期',     ROUND(         ((G1.WEIHPCB_ZAIXCBS - G2.WEIHPCB_ZAIXCBS) / G2.WEIHPCB_ZAIXCBS) * 100,         2     ) AS '增长率' FROM      CB_YXQK G1 JOIN      CB_YXQK G2 ON G1.GCRQ = DATE_ADD(G2.GCRQ, INTERVAL 1 DAY) ORDER BY      `增长率` DESC LIMIT 1;
gold_sql: SELECT
  DATE_FORMAT(GCRQ, '%Y-%m') AS `月份`,
  (
    SUM(CHUANB_WURWJSL) - LAG(SUM(CHUANB_WURWJSL)) OVER (
      ORDER BY
        DATE_FORMAT(GCRQ, '%Y-%m')
    )
  ) / LAG(SUM(CHUANB_WURWJSL)) OVER (
    ORDER BY
      DATE_FORMAT(GCRQ, '%Y-%m')
  ) * 100 AS `减少率`
FROM
  CB_YXQK
GROUP BY
  DATE_FORMAT(GCRQ, '%Y-%m')
ORDER BY
  `减少率` ASC
LIMIT
  1;
pred_sql: SELECT   DATE_FORMAT(GCRQ, '%Y-%m') AS `月份`,   (     SUM(CHUANB_WURWJSL) - LAG(SUM(CHUANB_WURWJSL)) OVER (       ORDER BY         DATE_FORMAT(GCRQ, '%Y-%m')     )   ) / LAG(SUM(CHUANB_WURWJSL)) OVER (     ORDER BY       DATE_FORMAT(GCRQ, '%Y-%m')   ) * 100 AS `减少率` FROM   CB_YXQK GROUP BY   DATE_FORMAT(GCRQ, '%Y-%m') ORDER BY   `减少率` ASC LIMIT   1;
gold_sql: SELECT
  DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`,
  (
    SUM(`CHUANB_WURWJSL`) / LAG(SUM(`CHUANB_WURWJSL`), 1) OVER (
      ORDER BY
        DATE_FORMAT(`GCRQ`, '%Y-%m')
    ) - 1
  ) * 100 AS `增长率（%）`
FROM
  `CB_YXQK`
GROUP BY
  DATE_FORMAT(`GCRQ`, '%Y-%m')
ORDER BY
  `增长率（%）`
LIMIT
  1;
pred_sql: SELECT      DATE_FORMAT(GCRQ, '%Y-%m') AS 月份,     (SUM(CHUANB_WURWJSL) / LAG(SUM(CHUANB_WURWJSL), 1) OVER (ORDER BY DATE_FORMAT(GCRQ, '%Y-%m')) - 1) * 100 AS 增长率 FROM      CB_YXQK GROUP BY      DATE_FORMAT(GCRQ, '%Y-%m') ORDER BY      增长率 LIMIT 1;
gold_sql: SELECT 
    curr.GCRQ AS 观测日期,
    (curr.CHUANB_WURWJSL - prev.CHUANB_WURWJSL) / prev.CHUANB_WURWJSL AS 船舶污染物接收量减少率,
    (curr.WEIHPCB_ZAIXCBS - prev.WEIHPCB_ZAIXCBS) / prev.WEIHPCB_ZAIXCBS AS 危化品船舶在线船舶数减少率
FROM 
    CB_YXQK curr
JOIN 
    CB_YXQK prev ON curr.id = prev.id + 1
ORDER BY 
    船舶污染物接收量减少率 DESC,
    危化品船舶在线船舶数减少率 DESC
LIMIT 1;

pred_sql: SELECT      curr.GCRQ AS 观测日期,     (prev.CHUANB_WURWJSL - curr.CHUANB_WURWJSL) / prev.CHUANB_WURWJSL AS 船舶污染物接收量减少率,     (prev.WEIHPCB_ZAIXCBS - curr.WEIHPCB_ZAIXCBS) / prev.WEIHPCB_ZAIXCBS AS 危化品船舶在线船舶数减少率 FROM      CB_YXQK curr JOIN      CB_YXQK prev ON curr.id = prev.id + 1 ORDER BY      船舶污染物接收量减少率 ASC,     危化品船舶在线船舶数减少率 ASC LIMIT 1;
gold_sql: SELECT
  `前一天数据`.`GCRQ` AS `前一天日期`,
  `当天数据`.`GCRQ` AS `当天日期`,
  ABS(
    (`当天数据`.`CHUANB_WURWJSL` / `当天数据`.`NEIH_YUNSCCBS`) - (
      `前一天数据`.`CHUANB_WURWJSL` / `前一天数据`.`NEIH_YUNSCCBS`
    )
  ) AS `比例变化`
FROM
  (
    SELECT
      *
    FROM
      `CB_YXQK`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `CB_YXQK`
      )
  ) `当天数据`
  JOIN (
    SELECT
      *
    FROM
      `CB_YXQK`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `CB_YXQK`
        WHERE
          `GCRQ` < (
            SELECT
              MAX(`GCRQ`)
            FROM
              `CB_YXQK`
          )
      )
  ) `前一天数据` ON `当天数据`.`GCRQ` = DATE_ADD(`前一天数据`.`GCRQ`, INTERVAL 1 DAY)
ORDER BY
  `比例变化` DESC
LIMIT
  1;
pred_sql: SELECT   `前一天数据`.`GCRQ` AS `前一天日期`,   `当天数据`.`GCRQ` AS `当天日期`,   ABS(     (`当天数据`.`CHUANB_WURWJSL` / `当天数据`.`NEIH_YUNSCCBS`) - (       `前一天数据`.`CHUANB_WURWJSL` / `前一天数据`.`NEIH_YUNSCCBS`     )   ) AS `比例变化` FROM   (     SELECT       *     FROM       `CB_YXQK`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`)         FROM           `CB_YXQK`       )   ) `当天数据`   JOIN (     SELECT       *     FROM       `CB_YXQK`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`)         FROM           `CB_YXQK`         WHERE           `GCRQ` < (             SELECT               MAX(`GCRQ`)             FROM               `CB_YXQK`           )       )   ) `前一天数据` ON `当天数据`.`GCRQ` = DATE_ADD(`前一天数据`.`GCRQ`, INTERVAL 1 DAY) ORDER BY   `比例变化` DESC LIMIT   1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `WEIHPCB_ZAIXCBS` / `WEIHPCB_RUWCBS` AS `在线船舶数与入网船舶数比例`,
  `CHUANB_WURWJSL` AS `船舶污染物接收量`
FROM
  `CB_YXQK`
ORDER BY
  `在线船舶数与入网船舶数比例` DESC,
  `CHUANB_WURWJSL` ASC
LIMIT
  1;
pred_sql: SELECT   `GCRQ` AS `观测日期`,   (`WEIHPCB_ZAIXCBS` / `WEIHPCB_RUWCBS`) AS `在线船舶数与入网船舶数比例`,   `CHUANB_WURWJSL` AS `船舶污染物接收量` FROM   `CB_YXQK` ORDER BY   `在线船舶数与入网船舶数比例` DESC,   `CHUANB_WURWJSL` ASC LIMIT   1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`
FROM
  `CB_YXQK`
ORDER BY
  `CHUANB_WURWJSL` / `NEIH_YUNSCCBS` ASC,
  `WEIHPCB_RUWCBS` DESC
LIMIT
  1;
pred_sql: SELECT   `GCRQ` AS `观测日期` FROM   `CB_YXQK` ORDER BY   (`CHUANB_WURWJSL` / `NEIH_YUNSCCBS`) ASC,   `WEIHPCB_RUWCBS` DESC LIMIT   1;
gold_sql: SELECT
  `current`.`GCRQ` AS `日期`,
  `current`.`CHUANB_WURWJSL` AS `船舶污染物接收量`,
  (
    (
      `previous`.`CHUANB_WURWJSL` - `current`.`CHUANB_WURWJSL`
    ) / `previous`.`CHUANB_WURWJSL`
  ) * 100 AS `接收量减少率`,
  (
    (
      `previous`.`NEIH_YUNSCCBS` - `current`.`NEIH_YUNSCCBS`
    ) / `previous`.`NEIH_YUNSCCBS`
  ) * 100 AS `内河运输船舶数减少率`
FROM
  `CB_YXQK` `current`
  JOIN `CB_YXQK` `previous` ON DATE_SUB(`current`.`GCRQ`, INTERVAL 1 DAY) = `previous`.`GCRQ`
ORDER BY
  `接收量减少率` DESC,
  `内河运输船舶数减少率` ASC
LIMIT
  1;
pred_sql: SELECT      `current`.`GCRQ` AS `日期`,     `current`.`CHUANB_WURWJSL` AS `船舶污染物接收量`,     (         (             `previous`.`CHUANB_WURWJSL` - `current`.`CHUANB_WURWJSL`         ) / `previous`.`CHUANB_WURWJSL`     ) * 100 AS `接收量减少率`,     (         (             `previous`.`NEIH_YUNSCCBS` - `current`.`NEIH_YUNSCCBS`         ) / `previous`.`NEIH_YUNSCCBS`     ) * 100 AS `内河运输船舶数减少率` FROM      `CB_YXQK` `current` JOIN      `CB_YXQK` `previous` ON DATE_SUB(`current`.`GCRQ`, INTERVAL 1 DAY) = `previous`.`GCRQ` ORDER BY      `接收量减少率` DESC,      `内河运输船舶数减少率` ASC LIMIT 1;
gold_sql: SELECT
  t1.GCRQ AS `观测日期`,
  (
    (t1.WEIHPCB_ZAIXCBS - t2.WEIHPCB_ZAIXCBS) / t2.WEIHPCB_ZAIXCBS
  ) * 100 AS `危化品船舶在线船舶数增长率`,
  (
    (t2.CHUANB_WURWJSL - t1.CHUANB_WURWJSL) / t2.CHUANB_WURWJSL
  ) * 100 AS `船舶污染物接收量减少率`
FROM
  CB_YXQK t1
  JOIN CB_YXQK t2 ON t1.GCRQ = DATE_ADD(t2.GCRQ, INTERVAL 1 DAY)
ORDER BY
  `危化品船舶在线船舶数增长率` DESC,
  `船舶污染物接收量减少率` ASC
LIMIT
  1;
pred_sql: SELECT   t1.GCRQ AS `观测日期`,   (     (t1.WEIHPCB_ZAIXCBS - t2.WEIHPCB_ZAIXCBS) / t2.WEIHPCB_ZAIXCBS   ) * 100 AS `危化品船舶在线船舶数增长率`,   (     (t2.CHUANB_WURWJSL - t1.CHUANB_WURWJSL) / t2.CHUANB_WURWJSL   ) * 100 AS `船舶污染物接收量减少率` FROM   CB_YXQK t1   JOIN CB_YXQK t2 ON t1.GCRQ = DATE_ADD(t2.GCRQ, INTERVAL -1 DAY) ORDER BY   `危化品船舶在线船舶数增长率` DESC,   `船舶污染物接收量减少率` ASC LIMIT   1;
gold_sql: SELECT
  a.GCRQ AS `观测日期`,
  a.WEIHPCB_ZAIXCBS / a.WEIHPCB_RUWCBS AS `在线与入网比例`
FROM
  CB_YXQK a
  JOIN CB_YXQK b ON b.GCRQ = DATE_SUB(a.GCRQ, INTERVAL 1 DAY)
WHERE
  ABS(
    (a.WEIHPCB_ZAIXCBS / a.WEIHPCB_RUWCBS) - (b.WEIHPCB_ZAIXCBS / b.WEIHPCB_RUWCBS)
  ) = (
    SELECT
      MIN(
        ABS(
          (c.WEIHPCB_ZAIXCBS / c.WEIHPCB_RUWCBS) - (d.WEIHPCB_ZAIXCBS / d.WEIHPCB_RUWCBS)
        )
      )
    FROM
      CB_YXQK c
      JOIN CB_YXQK d ON d.GCRQ = DATE_SUB(c.GCRQ, INTERVAL 1 DAY)
  )
ORDER BY
  a.NEIH_YUNSCCBS DESC
LIMIT
  1;
pred_sql: SELECT    a.GCRQ AS `观测日期`,   a.WEIHPCB_ZAIXCBS / a.WEIHPCB_RUWCBS AS `在线与入网比例` FROM    CB_YXQK a JOIN    CB_YXQK b ON b.GCRQ = DATE_SUB(a.GCRQ, INTERVAL 1 DAY) WHERE    ABS(     (a.WEIHPCB_ZAIXCBS / a.WEIHPCB_RUWCBS) - (b.WEIHPCB_ZAIXCBS / b.WEIHPCB_RUWCBS)   ) = (     SELECT        MIN(         ABS(           (c.WEIHPCB_ZAIXCBS / c.WEIHPCB_RUWCBS) - (d.WEIHPCB_ZAIXCBS / d.WEIHPCB_RUWCBS)         )       )     FROM        CB_YXQK c     JOIN        CB_YXQK d ON d.GCRQ = DATE_SUB(c.GCRQ, INTERVAL 1 DAY)   ) ORDER BY    a.NEIH_YUNSCCBS DESC LIMIT 1;
gold_sql: SELECT
  `GCRQ` AS `日期`,
  (
    (
      `CHUANB_WURWJSL` - LAG(`CHUANB_WURWJSL`) OVER (
        ORDER BY
          `GCRQ`
      )
    ) / LAG(`CHUANB_WURWJSL`) OVER (
      ORDER BY
        `GCRQ`
    )
  ) * 100 AS `船舶污染物接收量减少率`,
  (
    (
      `WEIHPCB_ZAIXCBS` - LAG(`WEIHPCB_ZAIXCBS`) OVER (
        ORDER BY
          `GCRQ`
      )
    ) / LAG(`WEIHPCB_ZAIXCBS`) OVER (
      ORDER BY
        `GCRQ`
    )
  ) * 100 AS `危化品船舶在线船舶数减少率`
FROM
  `CB_YXQK`
ORDER BY
  `船舶污染物接收量减少率` DESC,
  `危化品船舶在线船舶数减少率` DESC
LIMIT
  1;
pred_sql: SELECT      `GCRQ` AS `日期`,     (         (             `CHUANB_WURWJSL` - LAG(`CHUANB_WURWJSL`) OVER (ORDER BY `GCRQ`)         ) / LAG(`CHUANB_WURWJSL`) OVER (ORDER BY `GCRQ`)     ) * 100 AS `船舶污染物接收量减少率`,     (         (             `WEIHPCB_ZAIXCBS` - LAG(`WEIHPCB_ZAIXCBS`) OVER (ORDER BY `GCRQ`)         ) / LAG(`WEIHPCB_ZAIXCBS`) OVER (ORDER BY `GCRQ`)     ) * 100 AS `危化品船舶在线船舶数减少率` FROM      `CB_YXQK` ORDER BY      `船舶污染物接收量减少率` DESC,      `危化品船舶在线船舶数减少率` DESC LIMIT 1;
gold_sql: SELECT
  t1.GCRQ AS '观测日期',
  (
    (t1.WEIHPCB_ZAIXCBS - t2.WEIHPCB_ZAIXCBS) / t2.WEIHPCB_ZAIXCBS
  ) * 100 AS '危化品船舶在线船舶数增长率',
  (
    (t1.NEIH_YUNSCCBS - t2.NEIH_YUNSCCBS) / t2.NEIH_YUNSCCBS
  ) * 100 AS '内河运输船舶数增长率'
FROM
  CB_YXQK t1
  JOIN CB_YXQK t2 ON t1.GCRQ = t2.GCRQ + INTERVAL 1 DAY
ORDER BY
  (
    (t1.WEIHPCB_ZAIXCBS - t2.WEIHPCB_ZAIXCBS) / t2.WEIHPCB_ZAIXCBS
  ) * 100 DESC,
  (
    (t1.NEIH_YUNSCCBS - t2.NEIH_YUNSCCBS) / t2.NEIH_YUNSCCBS
  ) * 100 DESC
LIMIT
  1;
pred_sql: SELECT   t1.GCRQ AS '观测日期',   (     (t1.WEIHPCB_ZAIXCBS - t2.WEIHPCB_ZAIXCBS) / t2.WEIHPCB_ZAIXCBS   ) * 100 AS '危化品船舶在线船舶数增长率',   (     (t1.NEIH_YUNSCCBS - t2.NEIH_YUNSCCBS) / t2.NEIH_YUNSCCBS   ) * 100 AS '内河运输船舶数增长率' FROM   CB_YXQK t1   JOIN CB_YXQK t2 ON t1.GCRQ = t2.GCRQ + INTERVAL 1 DAY ORDER BY   (     (t1.WEIHPCB_ZAIXCBS - t2.WEIHPCB_ZAIXCBS) / t2.WEIHPCB_ZAIXCBS   ) DESC,   (     (t1.NEIH_YUNSCCBS - t2.NEIH_YUNSCCBS) / t2.NEIH_YUNSCCBS   ) DESC LIMIT   1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `船舶污染物接收量与内河运输船舶数比例`
FROM
  (
    SELECT
      `GCRQ`,
      `CHUANB_WURWJSL` / `NEIH_YUNSCCBS` AS `船舶污染物接收量与内河运输船舶数比例`,
      LAG(`CHUANB_WURWJSL` / `NEIH_YUNSCCBS`, 1) OVER (
        ORDER BY
          `GCRQ`
      ) AS `前一天比例`
    FROM
      `CB_YXQK`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `CB_YXQK`
      )
  ) AS subquery
ORDER BY
  ABS(`船舶污染物接收量与内河运输船舶数比例` - `前一天比例`)
LIMIT
  1;
pred_sql: SELECT   `GCRQ` AS `观测日期`,   `船舶污染物接收量与内河运输船舶数比例` FROM   (     SELECT       `GCRQ`,       `CHUANB_WURWJSL` / `NEIH_YUNSCCBS` AS `船舶污染物接收量与内河运输船舶数比例`,       LAG(`CHUANB_WURWJSL` / `NEIH_YUNSCCBS`, 1) OVER (         ORDER BY           `GCRQ`       ) AS `前一天比例`     FROM       `CB_YXQK`     WHERE       `GCRQ` = (         SELECT           MAX(`GCRQ`)         FROM           `CB_YXQK`       )   ) AS subquery ORDER BY   ABS(`船舶污染物接收量与内河运输船舶数比例` - `前一天比例`) ASC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS AS `危化品船舶在线船舶数与入网船舶数的比例`
FROM
  CB_YXQK
WHERE
  GCRQ = (
    SELECT
      GCRQ
    FROM
      (
        SELECT
          GCRQ,
          WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS - LAG(WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS) OVER (
            ORDER BY
              GCRQ
          ) AS `比例变化`
        FROM
          CB_YXQK
      ) AS subquery
    ORDER BY
      `比例变化` DESC
    LIMIT
      1
  );
pred_sql: SELECT      GCRQ AS `观测日期`,     WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS AS `危化品船舶在线船舶数与入网船舶数的比例` FROM      CB_YXQK WHERE      GCRQ = (         SELECT              GCRQ         FROM (             SELECT                  GCRQ,                 WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS - LAG(WEIHPCB_ZAIXCBS / WEIHPCB_RUWCBS) OVER (ORDER BY GCRQ) AS `比例变化`             FROM                  CB_YXQK         ) AS subquery         ORDER BY              `比例变化` DESC         LIMIT 1     );
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `CHUANB_WURWJSL` / `NEIH_YUNSCCBS` AS `船舶污染物接收量与内河运输船舶数的比例`,
  `WEIHPCB_ZAIXCBS` / `WEIHPCB_RUWCBS` AS `危化品船舶在线船舶数与入网船舶数的比例`
FROM
  `CB_YXQK`
ORDER BY
  `船舶污染物接收量与内河运输船舶数的比例` ASC,
  `危化品船舶在线船舶数与入网船舶数的比例` ASC
LIMIT
  1
pred_sql: SELECT   `GCRQ` AS `观测日期`,   `CHUANB_WURWJSL` / `NEIH_YUNSCCBS` AS `船舶污染物接收量与内河运输船舶数的比例`,   `WEIHPCB_ZAIXCBS` / `WEIHPCB_RUWCBS` AS `危化品船舶在线船舶数与入网船舶数的比例` FROM   `CB_YXQK` ORDER BY   `船舶污染物接收量与内河运输船舶数的比例` ASC,   `危化品船舶在线船舶数与入网船舶数的比例` ASC LIMIT   1;
gold_sql: SELECT 
    GCRQ AS 观测日期,
    CHUANB_WURWJSL AS 船舶污染物接收量,
    (CHUANB_WURWJSL - LAG(CHUANB_WURWJSL) OVER (ORDER BY GCRQ)) / LAG(CHUANB_WURWJSL) OVER (ORDER BY GCRQ) AS 船舶污染物接收量减少率,
    WEIHPCB_ZAIXCBS AS 危化品船舶在线船舶数,
    (WEIHPCB_ZAIXCBS - LAG(WEIHPCB_ZAIXCBS) OVER (ORDER BY GCRQ)) / LAG(WEIHPCB_ZAIXCBS) OVER (ORDER BY GCRQ) AS 危化品船舶在线船舶数减少率
FROM 
    CB_YXQK
ORDER BY 
    船舶污染物接收量减少率 DESC,
    危化品船舶在线船舶数减少率 DESC
LIMIT 1;

pred_sql: SELECT      GCRQ AS 观测日期,     CHUANB_WURWJSL AS 船舶污染物接收量,     (CHUANB_WURWJSL - LAG(CHUANB_WURWJSL) OVER (ORDER BY GCRQ)) / LAG(CHUANB_WURWJSL) OVER (ORDER BY GCRQ) AS 船舶污染物接收量减少率,     WEIHPCB_ZAIXCBS AS 危化品船舶在线船舶数,     (WEIHPCB_ZAIXCBS - LAG(WEIHPCB_ZAIXCBS) OVER (ORDER BY GCRQ)) / LAG(WEIHPCB_ZAIXCBS) OVER (ORDER BY GCRQ) AS 危化品船舶在线船舶数减少率 FROM      CB_YXQK ORDER BY      危化品船舶在线船舶数减少率 DESC,     船舶污染物接收量减少率 DESC LIMIT 1;
gold_sql: SELECT
  curr.GCRQ AS '观测日期',
  (
    (curr.WEIHPCB_ZAIXCBS - prev.WEIHPCB_ZAIXCBS) / prev.WEIHPCB_ZAIXCBS * 100
  ) AS '危化品船舶在线船舶数增长率',
  (
    (curr.NEIH_YUNSCCBS - prev.NEIH_YUNSCCBS) / prev.NEIH_YUNSCCBS * 100
  ) AS '内河运输船舶数增长率'
FROM
  CB_YXQK curr
  JOIN CB_YXQK prev ON prev.GCRQ = DATE_SUB(curr.GCRQ, INTERVAL 1 DAY)
ORDER BY
  (
    (curr.WEIHPCB_ZAIXCBS - prev.WEIHPCB_ZAIXCBS) / prev.WEIHPCB_ZAIXCBS * 100
  ) DESC,
  (
    (curr.NEIH_YUNSCCBS - prev.NEIH_YUNSCCBS) / prev.NEIH_YUNSCCBS * 100
  ) DESC
LIMIT
  1;
pred_sql: SELECT   curr.GCRQ AS '观测日期',   (     (curr.WEIHPCB_ZAIXCBS - prev.WEIHPCB_ZAIXCBS) / prev.WEIHPCB_ZAIXCBS * 100   ) AS '危化品船舶在线船舶数增长率',   (     (curr.NEIH_YUNSCCBS - prev.NEIH_YUNSCCBS) / prev.NEIH_YUNSCCBS * 100   ) AS '内河运输船舶数增长率' FROM   CB_YXQK prev   JOIN CB_YXQK curr ON curr.GCRQ = DATE_ADD(prev.GCRQ, INTERVAL 1 DAY) ORDER BY   (     (curr.WEIHPCB_ZAIXCBS - prev.WEIHPCB_ZAIXCBS) / prev.WEIHPCB_ZAIXCBS * 100   ) DESC,   (     (curr.NEIH_YUNSCCBS - prev.NEIH_YUNSCCBS) / prev.NEIH_YUNSCCBS * 100   ) DESC LIMIT   1;
gold_sql: SELECT
  DATE_FORMAT(GCRQ, '%Y-%m') AS `月份`,
  SUM(VOLUME) AS `流入流量`
FROM
  GSGL_CRK_ZYSFLR
WHERE
  YEAR(GCRQ) <= 2024
GROUP BY
  DATE_FORMAT(GCRQ, '%Y-%m')
ORDER BY
  `流入流量` ASC
LIMIT
  1;
pred_sql: SELECT   DATE_FORMAT(GCRQ, '%Y-%m') AS `月份`,   SUM(VOLUME) AS `流入流量` FROM   GSGL_CRK_ZYSFLR WHERE   YEAR(GCRQ) <= 2024 GROUP BY   DATE_FORMAT(GCRQ, '%Y-%m') ORDER BY   `流入流量` ASC LIMIT   1;
gold_sql: SELECT
  VOLUME / total_volume * 100 AS `流量第一省份占总量比例（%）`
FROM
  (
    SELECT
      VOLUME,
      (
        SELECT
          SUM(VOLUME)
        FROM
          GSGL_CRK_ZYSFLR
        WHERE
          GCRQ = (
            SELECT
              MAX(GCRQ)
            FROM
              GSGL_CRK_ZYSFLR
          )
      ) AS total_volume
    FROM
      GSGL_CRK_ZYSFLR
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_CRK_ZYSFLR
      )
    ORDER BY
      VOLUME DESC
    LIMIT
      1
  ) AS subquery;
pred_sql: SELECT      (VOLUME / total_volume) * 100 AS `流量第一省份占总量比例（%）` FROM (     SELECT          VOLUME,         (SELECT SUM(VOLUME) FROM GSGL_CRK_ZYSFLR WHERE GCRQ = (SELECT MAX(GCRQ) FROM GSGL_CRK_ZYSFLR)) AS total_volume     FROM          GSGL_CRK_ZYSFLR     WHERE          GCRQ = (SELECT MAX(GCRQ) FROM GSGL_CRK_ZYSFLR)     ORDER BY          VOLUME DESC     LIMIT 1 ) AS subquery;
gold_sql: SELECT 
    curr.GCRQ AS 观测日期,
    curr.SFZMC AS 收费站名称,
    (curr.ZONGCLL - prev.ZONGCLL) AS 车流量增长量,
    ((curr.ZONGCLL - prev.ZONGCLL) / prev.ZONGCLL) * 100 AS 车流量增长率
FROM 
    GSGL_CRKSFZ_YXZT curr
JOIN 
    GSGL_CRKSFZ_YXZT prev ON curr.SFZBH = prev.SFZBH AND DATE_ADD(prev.GCRQ, INTERVAL 1 DAY) = curr.GCRQ
ORDER BY 
    车流量增长量 DESC,
    车流量增长率 DESC
LIMIT 1;
pred_sql: SELECT      curr.GCRQ AS 观测日期,     curr.SFZMC AS 收费站名称,     (curr.ZONGCLL - prev.ZONGCLL) AS 车流量增长量,     ((curr.ZONGCLL - prev.ZONGCLL) / prev.ZONGCLL) * 100 AS 车流量增长率 FROM      GSGL_CRKSFZ_YXZT prev JOIN      GSGL_CRKSFZ_YXZT curr ON curr.SFZBH = prev.SFZBH AND DATE_ADD(prev.GCRQ, INTERVAL 1 DAY) = curr.GCRQ ORDER BY      车流量增长量 DESC,     车流量增长率 DESC LIMIT 1;
gold_sql: SELECT
  t1.SFZMC as `收费站名称`,
  ABS(t1.ZONGCLL - t2.ZONGCLL) as `车流量变化`
FROM
  GSGL_CRKSFZ_YXZT t1
  JOIN GSGL_CRKSFZ_YXZT t2 ON t1.SFZBH = t2.SFZBH
  AND t1.GCRQ = DATE_ADD(t2.GCRQ, INTERVAL 1 DAY)
ORDER BY
  `车流量变化` DESC
LIMIT
  1;
pred_sql: SELECT   t1.SFZMC AS `收费站名称`,   ABS(t1.ZONGCLL - t2.ZONGCLL) AS `车流量变化` FROM   GSGL_CRKSFZ_YXZT t1   JOIN GSGL_CRKSFZ_YXZT t2 ON t1.SFZBH = t2.SFZBH   AND t1.GCRQ = DATE_ADD(t2.GCRQ, INTERVAL 1 DAY) ORDER BY   `车流量变化` DESC LIMIT   1;
gold_sql: SELECT
  GSBM AS `高速公路编号`,
  SUM(CHEHZZL) AS `总车货重量（吨）`
FROM
  GSGL_CRKSFZ_YXZT
GROUP BY
  GSBM
pred_sql: SELECT   GSBM AS `高速公路编号`,   SUM(CHEHZZL) AS `总车货重量（吨）` FROM   GSGL_CRKSFZ_YXZT GROUP BY   GSBM;
gold_sql: SELECT
  ROUND(
    100 * SUM(TRUNK_ROAD_VOLUME) / SUM(ROAD_VOLUME),
    2
  ) AS `货车流量占总流量百分比`
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  );
pred_sql: SELECT   ROUND(     100 * (SUM(TRUNK_ROAD_VOLUME) / SUM(ROAD_VOLUME)),     2   ) AS `货车流量占总流量百分比` FROM   GSGL_DMLL_FS WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMLL_FS   );
gold_sql: SELECT
  SUM(
    CASE
      WHEN HOUR BETWEEN 6 AND 9  THEN ROAD_VOLUME
      ELSE 0
    END
  ) AS `早高峰车流量`,
  SUM(
    CASE
      WHEN HOUR BETWEEN 17 AND 19  THEN ROAD_VOLUME
      ELSE 0
    END
  ) AS `晚高峰车流量`
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  );
pred_sql: SELECT   SUM(CASE WHEN HOUR BETWEEN 6 AND 9 THEN ROAD_VOLUME ELSE 0 END) AS `早高峰车流量`,   SUM(CASE WHEN HOUR BETWEEN 17 AND 19 THEN ROAD_VOLUME ELSE 0 END) AS `晚高峰车流量` FROM   GSGL_DMLL_FS WHERE   GCRQ = (SELECT MAX(GCRQ) FROM GSGL_DMLL_FS);
gold_sql: SELECT
  HOUR AS `车流量最高的时段`
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  )
ORDER BY
  ROAD_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT HOUR AS `车流量最高的时段` FROM GSGL_DMLL_FS WHERE GCRQ = (     SELECT MAX(GCRQ)     FROM GSGL_DMLL_FS ) ORDER BY ROAD_VOLUME DESC LIMIT 1;
gold_sql: SELECT
  HOUR AS '时段',
  ROAD_VOLUME AS '总车流量',
  COACH_ROAD_VOLUME AS '客车流量',
  TRUNK_ROAD_VOLUME AS '货车流量'
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  )
ORDER BY
  HOUR;
pred_sql: SELECT   HOUR AS '时段',   ROAD_VOLUME AS '总车流量',   COACH_ROAD_VOLUME AS '客车流量',   TRUNK_ROAD_VOLUME AS '货车流量' FROM   GSGL_DMLL_FS WHERE   GCRQ = (SELECT MAX(GCRQ) FROM GSGL_DMLL_FS) ORDER BY   HOUR;
gold_sql: SELECT
  AVG(
    CASE
      WHEN DAYOFWEEK(`GCRQ`) IN (1, 7) THEN `TRUNK_ROAD_VOLUME`
      ELSE 0
    END
  ) AS `周末货车流量`,
  AVG(
    CASE
      WHEN DAYOFWEEK(`GCRQ`) NOT IN(1, 7) THEN `TRUNK_ROAD_VOLUME`
      ELSE 0
    END
  ) AS `工作日货车流量`
FROM
  `GSGL_DMLL_FS`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `GSGL_DMLL_FS`
  );
pred_sql: SELECT   AVG(     CASE       WHEN DAYOFWEEK(`GCRQ`) IN (1, 7) THEN `TRUNK_ROAD_VOLUME`       ELSE 0     END   ) AS `周末货车流量`,   AVG(     CASE       WHEN DAYOFWEEK(`GCRQ`) NOT IN (1, 7) THEN `TRUNK_ROAD_VOLUME`       ELSE 0     END   ) AS `工作日货车流量` FROM   `GSGL_DMLL_FS` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `GSGL_DMLL_FS`   );
gold_sql: SELECT
  HOUR AS '时段',
  STDDEV(ROAD_VOLUME) AS '每小时车流量标准差',
  CASE
    WHEN HOUR BETWEEN 7 AND 9  THEN '早高峰'
    WHEN HOUR BETWEEN 17 AND 19  THEN '晚高峰'
    ELSE '非高峰'
  END AS '拥挤度时段'
FROM
  GSGL_DMLL_FS
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_FS
  )
GROUP BY
  HOUR;
pred_sql: SELECT   HOUR AS '时段',   STDDEV(ROAD_VOLUME) AS '每小时车流量标准差',   CASE     WHEN HOUR IN (7, 8, 9) THEN '早高峰'     WHEN HOUR IN (17, 18, 19) THEN '晚高峰'     ELSE '非高峰'   END AS '拥挤度时段' FROM   GSGL_DMLL_FS WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMLL_FS   ) GROUP BY   HOUR;
gold_sql: SELECT
  SFZMC AS `收费站名称`,
  MAX(ZONGCLL) AS `出入口总流量`
FROM
  GSGL_CRKSFZ_YXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_CRKSFZ_YXZT
  )
GROUP BY
  SFZMC
ORDER BY
  `出入口总流量` DESC
LIMIT
  1;
pred_sql: SELECT   `收费站名称`,   `出入口总流量` FROM (   SELECT     SFZMC AS `收费站名称`,     MAX(ZONGCLL) AS `出入口总流量`   FROM     GSGL_CRKSFZ_YXZT   WHERE     GCRQ = (       SELECT         MAX(GCRQ)       FROM         GSGL_CRKSFZ_YXZT     )   GROUP BY     SFZMC ) AS subquery ORDER BY   `出入口总流量` DESC LIMIT   1;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  YEAR AS `年份`,
  VOLUME AS `总量（辆/日）`,
  ROUND(
    (
      VOLUME - LAG(VOLUME) OVER (
        PARTITION BY
          ROAD_NAME
        ORDER BY
          YEAR
      )
    ) / LAG(VOLUME) OVER (
      PARTITION BY
        ROAD_NAME
      ORDER BY
        YEAR
    ) * 100,
    2
  ) AS `变化率(%)`
FROM
  GSGL_DMLL_TJ
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      GSGL_DMLL_TJ
  )
ORDER BY
  ROAD_NAME,
  YEAR;
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   YEAR AS `年份`,   VOLUME AS `总量（辆/日）`,   ROUND(     (       VOLUME - LAG(VOLUME) OVER (         PARTITION BY           ROAD_NAME         ORDER BY           YEAR       )     ) / LAG(VOLUME) OVER (       PARTITION BY         ROAD_NAME       ORDER BY         YEAR     ) * 100,     2   ) AS `变化率(%)` FROM   GSGL_DMLL_TJ WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       GSGL_DMLL_TJ   ) ORDER BY   ROAD_NAME,   YEAR;
gold_sql: SELECT
  `ROAD_TYPE` AS '道路类型',
  `ROAD_NAME` AS '断面名称',
  (`UP_VOLUME` / `DOWN_VOLUME`) AS '上下行流量比例'
FROM
  `GSGL_DMLL_TJ`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `GSGL_DMLL_TJ`
  );
pred_sql: SELECT   `ROAD_NAME` AS '断面名称',   `ROAD_TYPE` AS '道路类型',   (`DOWN_VOLUME` / `UP_VOLUME`) AS '上下行流量比例' FROM   `GSGL_DMLL_TJ` WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       `GSGL_DMLL_TJ`   );
gold_sql: SELECT
  `ROAD_NAME` AS `断面名称`,
  `YEAR` AS `年份`,
  SUM(`VOLUME`) AS `年度总流量`
FROM
  `GSGL_DMLL_TJ`
GROUP BY
  `ROAD_NAME`,
  `YEAR`
ORDER BY
  `ROAD_NAME`,
  `YEAR`;
pred_sql: SELECT   `YEAR` AS `年份`,   `ROAD_NAME` AS `断面名称`,   SUM(`VOLUME`) AS `年度总流量` FROM   `GSGL_DMLL_TJ` GROUP BY   `YEAR`,   `ROAD_NAME` ORDER BY   `断面名称`,   `年份`;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  SUM(VOLUME) AS `最高流量`
FROM
  GSGL_DMLL_TOP10
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_TOP10
  )
GROUP BY
  ROAD_NAME
ORDER BY
  `最高流量` DESC;
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   SUM(VOLUME) AS `最高流量` FROM   GSGL_DMLL_TOP10 WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMLL_TOP10   ) GROUP BY   ROAD_NAME ORDER BY   `最高流量` DESC;
gold_sql: SELECT
  HOUR AS `时间段`,
  VOLUME AS `断面流量`
FROM
  GSGL_DMLL_TOP10
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_TOP10
  )
ORDER BY
  HOUR;
pred_sql: SELECT   HOUR AS `时间段`,   VOLUME AS `断面流量` FROM   GSGL_DMLL_TOP10 WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMLL_TOP10   ) ORDER BY   HOUR;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  HOUR AS `高峰时段`,
  VOLUME AS `流量`
FROM
  GSGL_DMLL_TOP10
WHERE
  (ROAD_NAME, VOLUME) IN (
    SELECT
      ROAD_NAME,
      MAX(VOLUME)
    FROM
      GSGL_DMLL_TOP10
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_DMLL_TOP10
      )
    GROUP BY
      ROAD_NAME
  );
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   HOUR AS `高峰时段`,   VOLUME AS `流量` FROM   GSGL_DMLL_TOP10 WHERE   (ROAD_NAME, VOLUME) IN (     SELECT       ROAD_NAME,       MAX(VOLUME)     FROM       GSGL_DMLL_TOP10     GROUP BY       ROAD_NAME     HAVING       GCRQ = (         SELECT           MAX(GCRQ)         FROM           GSGL_DMLL_TOP10       )   );
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  HOUR AS `时间段`,
  MAX(VOLUME) - MIN(VOLUME) AS `流量波动量`
FROM
  GSGL_DMLL_TOP10
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMLL_TOP10
  )
GROUP BY
  ROAD_NAME,
  HOUR
ORDER BY
  `流量波动量` DESC;
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   HOUR AS `时间段`,   (MAX(VOLUME) - MIN(VOLUME)) AS `流量波动量` FROM   GSGL_DMLL_TOP10 WHERE   GCRQ = (SELECT MAX(GCRQ) FROM GSGL_DMLL_TOP10) GROUP BY   HOUR,   ROAD_NAME ORDER BY   `流量波动量` DESC;
gold_sql: SELECT
  `ROAD_NAME` AS '断面名称',
  `GCRQ` AS '观测日期',
  STDDEV(`VOLUME`) AS '流量标准差'
FROM
  `GSGL_DMLL_TOP10`
GROUP BY
  `ROAD_NAME`,
  `GCRQ`;
pred_sql: SELECT   `GCRQ` AS '观测日期',   `ROAD_NAME` AS '断面名称',   STDDEV(`VOLUME`) AS '流量标准差' FROM   `GSGL_DMLL_TOP10` GROUP BY   `GCRQ`,   `ROAD_NAME`;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  HOUR AS `最高流量时段`
FROM
  GSGL_DMLL_TOP10
WHERE
  (ROAD_NAME, VOLUME) IN (
    SELECT
      ROAD_NAME,
      MAX(VOLUME)
    FROM
      GSGL_DMLL_TOP10
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_DMLL_TOP10
      )
    GROUP BY
      ROAD_NAME
  );
pred_sql: SELECT   ROAD_NAME AS `断面名称`,   HOUR AS `最高流量时段` FROM   GSGL_DMLL_TOP10 WHERE   (ROAD_NAME, VOLUME) IN (     SELECT       ROAD_NAME,       MAX(VOLUME)     FROM       GSGL_DMLL_TOP10     GROUP BY       ROAD_NAME     HAVING       GCRQ = (         SELECT           MAX(GCRQ)         FROM           GSGL_DMLL_TOP10       )   );
gold_sql: SELECT
  DUANMMC AS '断面名称',
  KECZLL / HUOCZLL AS '客车总流量与货车总流量比例'
FROM
  GSGL_DMYXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_DMYXZT
  );
pred_sql: SELECT   DUANMMC AS '断面名称',   KECZLL / HUOCZLL AS '客车总流量与货车总流量比例' FROM   GSGL_DMYXZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_DMYXZT   );
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  (SUM(ZONGCLL) / COUNT(*)) AS `日均总车流量`
FROM
  GSGL_DMYXZT
GROUP BY
  DUANMMC
ORDER BY
  `日均总车流量` DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   (SUM(ZONGCLL) / COUNT(*)) AS `日均总车流量` FROM   GSGL_DMYXZT GROUP BY   DUANMMC ORDER BY   `日均总车流量` DESC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  MAX(CHEHZZL) - MIN(CHEHZZL) AS `车货总重量变化（吨）`
FROM
  GSGL_DMYXZT
GROUP BY
  DUANMMC
ORDER BY
  `车货总重量变化（吨）` DESC
LIMIT
  1;
pred_sql: SELECT   DUANMMC AS `断面名称`,   (MAX(CHEHZZL) - MIN(CHEHZZL)) AS `车货总重量变化（吨）` FROM   GSGL_DMYXZT GROUP BY   DUANMMC ORDER BY   `车货总重量变化（吨）` DESC LIMIT   1;
gold_sql: SELECT
  DUANMMC AS 断面名称,
  CHEHZZL AS 车货总重量,
  TONGJLC AS 道路里程
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  );
pred_sql: SELECT   TONGJLC AS 道路里程,   DUANMMC AS 断面名称,   CHEHZZL AS 车货总重量 FROM   gsgl_dmyxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_dmyxzt   );
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号
FROM
  gsgl_ldydzt
WHERE
  YONGDCHENGD = '缓行'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
  );
pred_sql: SELECT   ZHONGDZH AS 终点桩号,   QIDZH AS 起点桩号,   LUD AS 路段 FROM   gsgl_ldydzt WHERE   YONGDCHENGD = '缓行'   AND GCRQ = (     SELECT       MAX(GCRQ)     FROM       gsgl_ldydzt   );
gold_sql: SELECT
  DATE_FORMAT(GCRQ, '%H:00-%H:59') AS '时间段',
  COUNT(*) AS '出现次数'
FROM
  gsgl_ldydzt
WHERE
  YONGDCHANGD = (
    SELECT
      MAX(YONGDCHANGD)
    FROM
      gsgl_ldydzt
  )
GROUP BY
  DATE_FORMAT(GCRQ, '%H:00-%H:59')
ORDER BY
  出现次数 DESC;
pred_sql: SELECT   DATE_FORMAT(GCRQ, '%H:00-%H:59') AS '时间段',   COUNT(*) AS '出现次数' FROM   gsgl_ldydzt WHERE   YONGDCHANGD = (     SELECT       MAX(YONGDCHANGD)     FROM       gsgl_ldydzt   ) GROUP BY   DATE_FORMAT(GCRQ, '%H:00-%H:59') ORDER BY   '出现次数' DESC;
gold_sql: SELECT
  LUD AS `路段`,
  COUNT(*) AS `拥堵情况次数`,
  GROUP_CONCAT(
    DISTINCT DATE_FORMAT(GCRQ, '%Y-%u')
    ORDER BY
      GCRQ
  ) AS `拥堵周`
FROM
  GSGL_LDYDZT
GROUP BY
  LUD
HAVING
  COUNT(DISTINCT DATE_FORMAT(GCRQ, '%Y-%u')) > 1
ORDER BY
  `拥堵情况次数` DESC;
pred_sql: SELECT   LUD AS `路段`,   COUNT(*) AS `拥堵情况次数`,   GROUP_CONCAT(     DISTINCT DATE_FORMAT(GCRQ, '%Y-%u')     ORDER BY       GCRQ   ) AS `拥堵周` FROM   GSGL_LDYDZT GROUP BY   LUD HAVING   COUNT(DISTINCT DATE_FORMAT(GCRQ, '%Y-%u')) > 1 ORDER BY   `拥堵情况次数` DESC;
gold_sql: SELECT
  LUD AS '路段',
  MIN(GCRQ) AS '拥堵开始日期',
  MAX(GCRQ) AS '拥堵结束日期',
  COUNT(*) AS '连续天数'
FROM
  (
    SELECT
      LUD,
      GCRQ,
      @rn := IF(
        @prev_lud = LUD
        AND @prev_gcrq = DATE_ADD(GCRQ, INTERVAL -1 DAY),
        @rn + 1,
        1
      ) AS rn,
      @prev_lud := LUD,
      @prev_gcrq := GCRQ
    FROM
      (
        SELECT
          *
        FROM
          GSGL_LDYDZT
        ORDER BY
          LUD,
          GCRQ
      ) t1,
      (
        SELECT
          @rn := 0,
          @prev_lud := NULL,
          @prev_gcrq := NULL
      ) t2
  ) t
GROUP BY
  LUD,
  rn
HAVING
  COUNT(*) > 1
pred_sql: SELECT   LUD AS '路段',   MIN(GCRQ) AS '拥堵开始日期',   MAX(GCRQ) AS '拥堵结束日期',   COUNT(*) AS '连续天数' FROM   (     SELECT       LUD,       GCRQ,       @rn := IF(         @prev_lud = LUD         AND @prev_gcrq = DATE_SUB(GCRQ, INTERVAL 1 DAY),         @rn + 1,         1       ) AS rn,       @prev_lud := LUD,       @prev_gcrq := GCRQ     FROM       (         SELECT           *         FROM           GSGL_LDYDZT         ORDER BY           LUD,           GCRQ       ) t1,       (         SELECT           @rn := 0,           @prev_lud := NULL,           @prev_gcrq := NULL       ) t2   ) t GROUP BY   LUD,   rn HAVING   COUNT(*) > 1;
gold_sql: SELECT
  XINGZQH AS '行政区划',
  GCRQ AS '观测日期',
  LUWCTL AS '路网畅通率',
  HUANBI AS '环比'
FROM
  GSGL_LWYDZT
WHERE
  GCRQ >= DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        GSGL_LWYDZT
    ),
    INTERVAL 7 DAY
  )
  AND HUANBI < 0;
pred_sql: SELECT   XINGZQH AS '行政区划',   GCRQ AS '观测日期',   LUWCTL AS '路网畅通率',   HUANBI AS '环比' FROM   GSGL_LWYDZT WHERE   GCRQ >= (     SELECT       MAX(GCRQ) - INTERVAL 7 DAY     FROM       GSGL_LWYDZT   )   AND HUANBI < 0;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  LUWCTL AS `路网畅通率`
FROM
  GSGL_LWYDZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_LWYDZT
  )
ORDER BY
  LUWCTL DESC
LIMIT
  1;
pred_sql: SELECT   XINGZQH AS `行政区划`,   LUWCTL AS `路网畅通率` FROM   GSGL_LWYDZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_LWYDZT   ) ORDER BY   LUWCTL DESC LIMIT   1;
gold_sql: SELECT
  XINGZQH AS '行政区划',
  LUWCTL AS '路网畅通率',
  HUANBI AS '环比'
FROM
  GSGL_LWYDZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_LWYDZT
  )
ORDER BY
  HUANBI ASC
LIMIT
  1;
pred_sql: SELECT   XINGZQH AS '行政区划',   LUWCTL AS '路网畅通率',   HUANBI AS '环比' FROM   GSGL_LWYDZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_LWYDZT   ) ORDER BY   HUANBI DESC LIMIT   1;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  HUANBI AS `环比`
FROM
  GSGL_LWYDZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_LWYDZT
  )
  AND HUANBI > 0
ORDER BY
  HUANBI ASC;
pred_sql: SELECT   `行政区划`,   `环比` FROM (   SELECT     XINGZQH AS `行政区划`,     HUANBI AS `环比`   FROM     GSGL_LWYDZT   WHERE     GCRQ = (       SELECT         MAX(GCRQ)       FROM         GSGL_LWYDZT     )     AND HUANBI > 0 ) AS subquery ORDER BY   `环比` ASC;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  COUNT(*) AS `工作日路网畅通率次数`
FROM
  GSGL_LWYDZT
WHERE
  DAYOFWEEK(GCRQ) BETWEEN 2 AND 6
GROUP BY
  XINGZQH
ORDER BY
  `工作日路网畅通率次数` DESC
LIMIT
  1;
pred_sql: SELECT   XINGZQH AS `行政区划`,   COUNT(*) AS `工作日路网畅通率次数` FROM   GSGL_LWYDZT WHERE   GCRQ >= '2' AND GCRQ <= '6' GROUP BY   XINGZQH ORDER BY   `工作日路网畅通率次数` DESC LIMIT   1;
gold_sql: SELECT
  O_PROVINCE AS `起点省份`,
  D_PROVINCE AS `终点省份`,
  CHELL AS `车流量`
FROM
  GSGL_OD_FLOW
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_OD_FLOW
  )
ORDER BY
  CHELL DESC
LIMIT
  1;
pred_sql: SELECT   D_PROVINCE AS `终点省份`,   O_PROVINCE AS `起点省份`,   CHELL AS `车流量` FROM   GSGL_OD_FLOW WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_OD_FLOW   ) ORDER BY   CHELL DESC LIMIT   1;
gold_sql: SELECT
  O_PROVINCE AS `起点省份`,
  D_PROVINCE AS `终点省份`,
  SUM(CHELL) AS `客车类型车流量`
FROM
  gsgl_od_flow
WHERE
  CHELLX LIKE '客%'
GROUP BY
  O_PROVINCE,
  D_PROVINCE
ORDER BY
  `客车类型车流量` DESC
LIMIT
  1;
pred_sql: SELECT   D_PROVINCE AS `终点省份`,   O_PROVINCE AS `起点省份`,   SUM(CHELL) AS `客车类型车流量` FROM   gsgl_od_flow WHERE   CHELLX LIKE '客%' GROUP BY   D_PROVINCE,   O_PROVINCE ORDER BY   `客车类型车流量` DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  CHELL AS `车流量`
FROM
  GSGL_OD_FLOW
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_OD_FLOW
  )
  AND CHELLX LIKE '客%'
ORDER BY
  CHELL DESC
LIMIT
  1;
pred_sql: SELECT   D_CITY AS `终点城市`,   O_CITY AS `起点城市`,   CHELL AS `车流量` FROM   GSGL_OD_FLOW WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_OD_FLOW   )   AND CHELLX LIKE '客%' ORDER BY   CHELL DESC LIMIT   1;
gold_sql: SELECT
  O_DISTRICTS AS `起点地区`,
  D_DISTRICTS AS `终点地区`,
  (
    SUM(
      CASE
        WHEN GCRQ = (
          SELECT
            MAX(GCRQ)
          FROM
            GSGL_OD_FLOW
        ) THEN CHELL
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN GCRQ = (
          SELECT
            MAX(GCRQ)
          FROM
            GSGL_OD_FLOW
        ) - INTERVAL 1 DAY THEN CHELL
        ELSE 0
      END
    )
  ) / SUM(
    CASE
      WHEN GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_OD_FLOW
      ) - INTERVAL 1 DAY THEN CHELL
      ELSE 0
    END
  ) AS `车流量环比`
FROM
  GSGL_OD_FLOW
WHERE
  GCRQ IN (
    (
      SELECT
        MAX(GCRQ)
      FROM
        GSGL_OD_FLOW
    ),
    (
      SELECT
        MAX(GCRQ)
      FROM
        GSGL_OD_FLOW
    ) - INTERVAL 1 DAY
  )
GROUP BY
  O_DISTRICTS,
  D_DISTRICTS
ORDER BY
  `车流量环比` DESC
LIMIT
  1;
pred_sql: SELECT   O_DISTRICTS AS `起点地区`,   D_DISTRICTS AS `终点地区`,   (     SUM(       CASE         WHEN GCRQ = (           SELECT             MAX(GCRQ)           FROM             GSGL_OD_FLOW         ) THEN CHELL         ELSE 0       END     ) - SUM(       CASE         WHEN GCRQ = (           SELECT             MAX(GCRQ)           FROM             GSGL_OD_FLOW         ) - INTERVAL 1 DAY THEN CHELL         ELSE 0       END     )   ) / SUM(     CASE       WHEN GCRQ = (         SELECT           MAX(GCRQ)         FROM           GSGL_OD_FLOW       ) - INTERVAL 1 DAY THEN CHELL       ELSE 0     END   ) AS `车流量环比` FROM   GSGL_OD_FLOW WHERE   GCRQ IN (     (       SELECT         MAX(GCRQ)       FROM         GSGL_OD_FLOW     ),     (       SELECT         MAX(GCRQ)       FROM         GSGL_OD_FLOW     ) - INTERVAL 1 DAY   ) GROUP BY   O_DISTRICTS,   D_DISTRICTS ORDER BY   `车流量环比` DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  CHELLX AS `车辆类型`,
  CHELL AS `车流量`
FROM
  GSGL_OD_FLOW
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_OD_FLOW
  )
ORDER BY
  CHELL DESC
LIMIT
  1;
pred_sql: SELECT   D_CITY AS `终点城市`,   O_CITY AS `起点城市`,   CHELL AS `车流量`,   CHELLX AS `车辆类型` FROM   GSGL_OD_FLOW WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_OD_FLOW   ) ORDER BY   CHELL DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  MIN(CHELL) AS `最低车流量`
FROM
  GSGL_RMLX
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      GSGL_RMLX
  )
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  `最低车流量` ASC
LIMIT
  1;
pred_sql: SELECT   D_CITY AS `终点城市`,   O_CITY AS `起点城市`,   MIN(CHELL) AS `最低车流量` FROM   GSGL_RMLX WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       GSGL_RMLX   ) GROUP BY   D_CITY,   O_CITY ORDER BY   `最低车流量` ASC LIMIT   1;
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  `CHELL` AS `车流量`
FROM
  `GSGL_RMLX`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `GSGL_RMLX`
  )
ORDER BY
  `CHELL` DESC
LIMIT
  1;
pred_sql: SELECT   `D_CITY` AS `终点城市`,   `O_CITY` AS `起点城市`,   `CHELL` AS `车流量` FROM   `GSGL_RMLX` WHERE   `GCRQ` = (     SELECT       MAX(`GCRQ`)     FROM       `GSGL_RMLX`   ) ORDER BY   `CHELL` DESC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `日期`,
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  MIN(CHELL) AS `最低车流量`
FROM
  gsgl_rmlx
GROUP BY
  GCRQ,
  O_CITY,
  D_CITY
ORDER BY
  `最低车流量` ASC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `日期`,   O_CITY AS `起点城市`,   D_CITY AS `终点城市`,   CHELL AS `最低车流量` FROM   gsgl_rmlx ORDER BY   CHELL ASC LIMIT   1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  MAX(CHELL) AS '车流量最高'
FROM
  GSGL_RMLX
WHERE
  DAYOFWEEK(GCRQ) BETWEEN 2 AND 6
GROUP BY
  O_CITY
ORDER BY
  `车流量最高` DESC
LIMIT
  1;
pred_sql: SELECT   O_CITY AS '起点城市',   MAX(CHELL) AS '车流量最高' FROM   GSGL_RMLX WHERE   GCRQ BETWEEN 2 AND 6 GROUP BY   O_CITY ORDER BY   `车流量最高` DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  SUM(CHELL) AS `总车流量`
FROM
  GSGL_RMLX
WHERE
  MONTH(GCRQ) IN (9, 10, 11)
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  `总车流量` DESC
LIMIT
  1;
pred_sql: SELECT   D_CITY AS `终点城市`,   O_CITY AS `起点城市`,   SUM(CHELL) AS `总车流量` FROM   GSGL_RMLX WHERE   GCRQ IN (9, 10, 11) GROUP BY   D_CITY,   O_CITY ORDER BY   `总车流量` DESC LIMIT   1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  CHELL AS `车流量`
FROM
  gsgl_rmlx
ORDER BY
  CHELL DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS `观测日期`,   O_CITY AS `起点城市`,   D_CITY AS `终点城市`,   CHELL AS `车流量` FROM   gsgl_rmlx ORDER BY   CHELL DESC LIMIT   1;
gold_sql: SELECT
  CHANNEL AS `航道名称`,
  SEGMENT AS `航段`,
  SUM(VOLUME) AS `货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  YEAR = 2021
GROUP BY
  CHANNEL,
  SEGMENT
ORDER BY
  `货运量（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   SEGMENT AS `航段`,   CHANNEL AS `航道名称`,   SUM(VOLUME) AS `货运量（万吨）` FROM   hd_nh_dm WHERE   YEAR = 2021 GROUP BY   SEGMENT,   CHANNEL ORDER BY   `货运量（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  SEGMENT AS `航段`,
  MAX(VOLUME) AS `货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  YEAR = '2021'
GROUP BY
  SEGMENT
ORDER BY
  `货运量（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   SEGMENT AS `航段`,   MAX(VOLUME) AS `货运量（万吨）` FROM   hd_nh_dm WHERE   YEAR = '2021' GROUP BY   SEGMENT ORDER BY   `货运量（万吨）` DESC LIMIT   1;
gold_sql: SELECT DISTINCT
  `CARGO` AS `货物种类`
FROM
  `HD_NH_OD`
pred_sql: SELECT DISTINCT `CARGO` AS 货物种类 FROM HD_NH_OD;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  SUM(`VOLUME`) AS `总货运量（吨）`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
GROUP BY
  `YEAR`,
  `MONTH`
ORDER BY
  `MONTH`;
pred_sql: SELECT   `MONTH` AS `月份`,   `YEAR` AS `年份`,   SUM(`VOLUME`) AS `总货运量（吨）` FROM   hd_nh_od WHERE   `YEAR` = '2020' GROUP BY   `MONTH`,   `YEAR` ORDER BY   `MONTH`;
gold_sql: SELECT
  O_CITY AS `最常见的起点城市`,
  D_CITY AS `最常见的终点城市`
FROM
  HD_NH_OD
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  COUNT(*) DESC
LIMIT
  1;
pred_sql: SELECT   D_CITY AS `最常见的终点城市`,   O_CITY AS `最常见的起点城市` FROM   HD_NH_OD GROUP BY   D_CITY,   O_CITY ORDER BY   COUNT(*) DESC LIMIT   1;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  SUM(
    CASE
      WHEN `DIRECTION` = '上行' THEN `VOLUME`
      ELSE 0
    END
  ) AS `上行运输量`,
  SUM(
    CASE
      WHEN `DIRECTION` = '下行' THEN `VOLUME`
      ELSE 0
    END
  ) AS `下行运输量`
FROM
  hd_nh_od
WHERE
  (`YEAR`, `MONTH`) = (
    SELECT
      `YEAR`,
      `MONTH`
    FROM
      hd_nh_od
    ORDER BY
      `YEAR` DESC,
      `MONTH` DESC
    LIMIT
      1
  )
GROUP BY
  `CARGO`
ORDER BY
  (`上行运输量` + `下行运输量`) DESC;
pred_sql: SELECT   `CARGO` AS `货物种类`,   SUM(CASE WHEN `DIRECTION` = '上行' THEN `VOLUME` ELSE 0 END) AS `上行运输量`,   SUM(CASE WHEN `DIRECTION` = '下行' THEN `VOLUME` ELSE 0 END) AS `下行运输量` FROM   hd_nh_od WHERE   (`YEAR`, `MONTH`) IN (     SELECT       `YEAR`,       `MONTH`     FROM       hd_nh_od     ORDER BY       `YEAR` DESC,       `MONTH` DESC     LIMIT       1   ) GROUP BY   `CARGO` ORDER BY   (`上行运输量` + `下行运输量`) DESC;
gold_sql: SELECT
  SUM(
    CASE
      WHEN `DIRECTION` = '上行' THEN `VOLUME`
      ELSE 0
    END
  ) AS '由南向北/由东向西总货运量',
  SUM(
    CASE
      WHEN `DIRECTION` = '下行' THEN `VOLUME`
      ELSE 0
    END
  ) AS '由北向南/由西向东总货运量'
FROM
  `HD_NH_OD`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `HD_NH_OD`
  );
pred_sql: SELECT   SUM(CASE WHEN `DIRECTION` = '上行' THEN `VOLUME` ELSE 0 END) AS '由南向北/由东向西总货运量',   SUM(CASE WHEN `DIRECTION` = '下行' THEN `VOLUME` ELSE 0 END) AS '由北向南/由西向东总货运量' FROM   `HD_NH_OD` WHERE   `YEAR` = (SELECT MAX(`YEAR`) FROM `HD_NH_OD`);
gold_sql: SELECT
  `CARGO` AS `货种`,
  `D_CONTINENT` AS `终点洲`,
  SUM(`VOLUME`) AS `运货量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_yjyh_od
  )
GROUP BY
  `CARGO`,
  `D_CONTINENT`
ORDER BY
  `运货量（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT   `D_CONTINENT` AS `终点洲`,   `CARGO` AS `货种`,   SUM(`VOLUME`) AS `运货量（万吨）` FROM   hd_yjyh_od WHERE   `YEAR` = (     SELECT       MAX(`YEAR`)     FROM       hd_yjyh_od   ) GROUP BY   `D_CONTINENT`,   `CARGO` ORDER BY   `运货量（万吨）` DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  SUM(VOLUME) AS `总运输量（万吨）`
FROM
  HD_YJYH_OD
WHERE
  YEAR >= YEAR(CURDATE()) - 5
GROUP BY
  O_CITY,
  D_CITY;
pred_sql: SELECT   D_CITY AS `终点城市`,   O_CITY AS `起点城市`,   SUM(VOLUME) AS `总运输量（万吨）` FROM   HD_YJYH_OD WHERE   YEAR >= YEAR(CURDATE()) - 5 GROUP BY   D_CITY,   O_CITY;
gold_sql: SELECT DISTINCT
  `CARGO` AS `主要货物种类`
FROM
  HD_YJYH_OD
pred_sql: SELECT DISTINCT `CARGO` AS `主要货物种类` FROM HD_YJYH_OD;
gold_sql: SELECT
  `YEAR` AS `年份`,
  COUNT(DISTINCT `CARGO`) AS `货物种类数量`
FROM
  HD_YJYH_OD
GROUP BY
  `YEAR`
ORDER BY
  `YEAR` ASC;
pred_sql: SELECT   `YEAR`,   COUNT(DISTINCT `CARGO`) AS `货物种类数量` FROM   HD_YJYH_OD GROUP BY   `YEAR` ORDER BY   `YEAR`;
gold_sql: SELECT
  COALESCE(O_PROVINCE, O_COUNTRY, '未知') AS `起点`,
  COALESCE(D_PROVINCE, D_COUNTRY, '未知') AS `终点`,
  SUM(VOLUME) AS `货物运输量（万吨）`
FROM
  HD_YJYH_OD
GROUP BY
  COALESCE(O_PROVINCE, O_COUNTRY, '未知'),
  COALESCE(D_PROVINCE, D_COUNTRY, '未知')
pred_sql: SELECT   COALESCE(D_PROVINCE, D_COUNTRY, '未知') AS `终点`,   COALESCE(O_PROVINCE, O_COUNTRY, '未知') AS `起点`,   SUM(VOLUME) AS `货物运输量（万吨）` FROM   HD_YJYH_OD GROUP BY   COALESCE(D_PROVINCE, D_COUNTRY, '未知'),   COALESCE(O_PROVINCE, O_COUNTRY, '未知') ```
gold_sql: SELECT
  `HANGDMC` AS '航道名称',
  `HANGDDMMC` AS '航道断面名称',
  SUM(`DUANMHYZL`) AS '断面货运总量（万吨）',
  (
    SUM(`DUANMHYZL`) / (
      SELECT
        SUM(`DUANMHYZL`)
      FROM
        hd_yxzt
      WHERE
        `HANGDMC` = A.`HANGDMC`
    )
  ) * 100 AS '货运总量占比（%）'
FROM
  hd_yxzt A
GROUP BY
  `HANGDMC`,
  `HANGDDMMC`
pred_sql: SELECT   `HANGDDMMC` AS '航道断面名称',   `HANGDMC` AS '航道名称',   SUM(`DUANMHYZL`) AS '断面货运总量（万吨）',   (     SUM(`DUANMHYZL`) / (       SELECT         SUM(`DUANMHYZL`)       FROM         hd_yxzt B       WHERE         B.`HANGDMC` = A.`HANGDMC`     )   ) * 100 AS '货运总量占比（%）' FROM   hd_yxzt A GROUP BY   `HANGDDMMC`,   `HANGDMC`;
gold_sql: SELECT
  `HANGDDMMC` AS '航道断面名称',
  MAX(`DUANMHYZL`) AS '最大货运总量（万吨）'
FROM
  `HD_YXZT`
GROUP BY
  `HANGDDMMC`;
pred_sql: SELECT   `HANGDDMMC` AS '航道断面名称',   MAX(`DUANMHYZL`) AS '最大货运总量（万吨）' FROM   `HD_YXZT` GROUP BY   `HANGDDMMC`;
gold_sql: SELECT
  季节.观测日期,
  季节.航道名称,
  季节.季节,
  季节.货运总量 AS '货运总量（万吨）',
  可通行航道数.可通行航道数 AS '可通行至少1000吨级船舶的航道条数'
FROM
  (
    SELECT
      `GCRQ` AS '观测日期',
      `HANGDMC` AS '航道名称',
      CASE
        WHEN MONTH(`GCRQ`) IN (12, 1, 2) THEN '冬季'
        WHEN MONTH(`GCRQ`) IN (3, 4, 5) THEN '春季'
        WHEN MONTH(`GCRQ`) IN (6, 7, 8) THEN '夏季'
        ELSE '秋季'
      END AS '季节',
      SUM(`DUANMHYZL`) AS '货运总量'
    FROM
      `HD_YXZT`
    GROUP BY
      `GCRQ`,
      `HANGDMC`,
      `季节`
  ) AS 季节
  CROSS JOIN (
    SELECT
      COUNT(DISTINCT `HANGDMC`) AS '可通行航道数'
    FROM
      `HD_YXZT`
    WHERE
      `HANGDXZDJ` IN ('三级航道', '二级航道', '一级航道')
  ) AS 可通行航道数;
pred_sql: SELECT   季节.观测日期,   季节.航道名称,   季节.季节,   季节.货运总量 AS '货运总量（万吨）',   可通行航道数.可通行航道数 AS '可通行至少1000吨级船舶的航道条数' FROM   (     SELECT       `GCRQ` AS '观测日期',       `HANGDMC` AS '航道名称',       CASE         WHEN MONTH(`GCRQ`) IN (12, 1, 2) THEN '冬季'         WHEN MONTH(`GCRQ`) IN (3, 4, 5) THEN '春季'         WHEN MONTH(`GCRQ`) IN (6, 7, 8) THEN '夏季'         ELSE '秋季'       END AS '季节',       SUM(`DUANMHYZL`) AS '货运总量'     FROM       `HD_YXZT`     GROUP BY       `GCRQ`,       `HANGDMC`,       `季节`   ) AS 季节   CROSS JOIN (     SELECT       COUNT(DISTINCT `HANGDMC`) AS '可通行航道数'     FROM       `HD_YXZT`     WHERE       `HANGDXZDJ` IN ('三级航道', '二级航道', '一级航道')   ) AS 可通行航道数;
gold_sql: SELECT
  SUM(
    CASE
      WHEN MONTH IN (12, 1, 2) THEN FLIGHTS
      ELSE 0
    END
  ) AS '冬季航班数',
  SUM(FLIGHTS) - SUM(
    CASE
      WHEN MONTH IN (12, 1, 2) THEN FLIGHTS
      ELSE 0
    END
  ) AS '非冬季航班数'
FROM
  HK_HX
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_HX
  );
pred_sql: SELECT   SUM(CASE WHEN MONTH IN (12, 1, 2) THEN FLIGHTS ELSE 0 END) AS '冬季航班数',   SUM(FLIGHTS) - SUM(CASE WHEN MONTH IN (12, 1, 2) THEN FLIGHTS ELSE 0 END) AS '非冬季航班数' FROM   HK_HX WHERE   YEAR = (SELECT MAX(YEAR) FROM HK_HX);
gold_sql: SELECT
  O_AIRPORT AS 出发机场,
  D_AIRPORT AS 到达机场
FROM
  HK_HX
WHERE
  YEAR = 2023
  AND CONCAT(O_AIRPORT, '-', D_AIRPORT) NOT IN(
    SELECT DISTINCT
      CONCAT(O_AIRPORT, '-', D_AIRPORT)
    FROM
      HK_HX
    WHERE
      YEAR < 2023
  );
pred_sql: SELECT DISTINCT   O_AIRPORT AS 出发机场,   D_AIRPORT AS 到达机场 FROM   HK_HX WHERE   YEAR = 2023   AND NOT EXISTS (     SELECT 1     FROM HK_HX AS sub     WHERE sub.YEAR < 2023       AND sub.O_AIRPORT = HK_HX.O_AIRPORT       AND sub.D_AIRPORT = HK_HX.D_AIRPORT   );
gold_sql: SELECT
  COUNT(*) AS 航线数量
FROM
  HK_KYLX
WHERE
  GCRQ = '2023-07-22'
  AND ZUOWS > 200;
pred_sql: SELECT   COUNT(*) AS 航线数量 FROM   HK_KYLX WHERE   GCRQ = '2023-07-22'   AND ZUOWS > 200;
gold_sql: SELECT
  CONCAT(LUXQDCSMC, '到', LUXZDCSMC) AS '航线',
  (MAX(HANGBL) - MIN(HANGBL)) AS '航班量增长幅度'
FROM
  HK_KYLX
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      HK_KYLX
  )
GROUP BY
  LUXQDCSMC,
  LUXZDCSMC
ORDER BY
  `航班量增长幅度` DESC
LIMIT
  1;
pred_sql: SELECT   CONCAT(LUXQDCSMC, '到', LUXZDCSMC) AS '航线',   (MAX(HANGBL) - MIN(HANGBL)) AS '航班量增长幅度' FROM   HK_KYLX WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       HK_KYLX   ) GROUP BY   LUXQDCSMC,   LUXZDCSMC ORDER BY   `航班量增长幅度` DESC LIMIT   1;
gold_sql: SELECT
  GCRQ AS 观测日期,
  SUM(ZUOWS) AS 座位总数
FROM
  HK_KYLX
WHERE
  LUXQDCSMC = '南京'
GROUP BY
  GCRQ
ORDER BY
  座位总数 DESC
LIMIT
  1;
pred_sql: SELECT   GCRQ AS 观测日期,   SUM(ZUOWS) AS 座位总数 FROM   HK_KYLX WHERE   LUXQDCSMC = '南京' GROUP BY   GCRQ ORDER BY   SUM(ZUOWS) DESC LIMIT   1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  AVG(PASSENGER) AS '平均旅客量（万/人）'
FROM
  HK_OD
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_OD
  )
GROUP BY
  O_CITY
ORDER BY
  AVG(PASSENGER) DESC
LIMIT
  1;
pred_sql: SELECT   O_CITY AS '起点城市',   AVG(PASSENGER) AS '平均旅客量（万/人）' FROM   HK_OD WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HK_OD   ) GROUP BY   O_CITY ORDER BY   '平均旅客量（万/人）' DESC LIMIT   1;
gold_sql: SELECT
  D_AIRPORT AS '到达机场',
  MAX(FLIGHTS) AS '航班数（次/月）'
FROM
  HK_HX
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      HK_HX
  )
  AND MONTH = (
    SELECT
      MAX(MONTH)
    FROM
      HK_HX
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          HK_HX
      )
  )
GROUP BY
  D_AIRPORT
ORDER BY
  MAX(FLIGHTS) DESC
LIMIT
  1;
pred_sql: SELECT   D_AIRPORT AS '到达机场',   MAX(FLIGHTS) AS '航班数（次/月）' FROM   HK_HX WHERE   YEAR = (     SELECT       MAX(YEAR)     FROM       HK_HX   )   AND MONTH = (     SELECT       MAX(MONTH)     FROM       HK_HX     WHERE       YEAR = (         SELECT           MAX(YEAR)         FROM           HK_HX       )   ) GROUP BY   D_AIRPORT ORDER BY   '航班数（次/月）' DESC LIMIT   1;
gold_sql: SELECT
  CASE
    WHEN LATITUDE < 0 THEN '南半球'
    ELSE '北半球'
  END AS '半球',
  SUM(STAY_NUM) AS '货车停驻点数量'
FROM
  HY_TZD
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      HY_TZD
  )
GROUP BY
  半球
ORDER BY
  '货车停驻点数量' DESC
LIMIT
  1;
pred_sql: SELECT   CASE     WHEN LATITUDE < 0 THEN '南半球'     ELSE '北半球'   END AS '半球',   SUM(STAY_NUM) AS '货车停驻点数量' FROM   HY_TZD WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       HY_TZD   ) GROUP BY   CASE     WHEN LATITUDE < 0 THEN '南半球'     ELSE '北半球'   END ORDER BY   SUM(STAY_NUM) DESC LIMIT   1;
gold_sql: SELECT
  `STAY_NUM` AS `停驻数量`
FROM
  `HY_TZD`
ORDER BY
  `LATITUDE` ASC,
  `GCRQ` DESC
LIMIT
  1;
pred_sql: SELECT   `STAY_NUM` AS `停驻数量` FROM   `HY_TZD` ORDER BY   `GCRQ` DESC,   `LATITUDE` ASC LIMIT   1;
gold_sql: SELECT
  HANGKSNMC AS '航空枢纽名称',
  JICHBZDL AS '机场航班准点率'
FROM
  jc_yxzt
WHERE
  JICHBZDL = (
    SELECT
      MAX(CAST(JICHBZDL AS DECIMAL(10, 2)))
    FROM
      jc_yxzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          jc_yxzt
      )
  )
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      jc_yxzt
  );
pred_sql: SELECT   HANGKSNMC AS '航空枢纽名称',   JICHBZDL AS '机场航班准点率' FROM   jc_yxzt WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       jc_yxzt   )   AND JICHBZDL = (     SELECT       MAX(CAST(JICHBZDL AS DECIMAL(10, 2)))     FROM       jc_yxzt     WHERE       GCRQ = (         SELECT           MAX(GCRQ)         FROM           jc_yxzt       )   );
gold_sql: SELECT
  HANGKSNMC AS '机场名称',
  MAX(SUBSTRING(FEIXQDJ, 1, 1)) AS '最长基准飞行场地等级'
FROM
  JC_YXZT
GROUP BY
  HANGKSNMC
ORDER BY
  '最长基准飞行场地等级' DESC
LIMIT
  1;
pred_sql: SELECT   HANGKSNMC AS '机场名称',   MAX(SUBSTRING(FEIXQDJ, 1, 1)) AS '最长基准飞行场地等级' FROM   JC_YXZT GROUP BY   HANGKSNMC ORDER BY   '最长基准飞行场地等级' DESC LIMIT   1;
gold_sql: SELECT
  LUD AS '路段',
  QIDZH AS '起点桩号',
  ZHONGDZH AS '终点桩号',
  YONGDCHANGD AS '拥堵长度（米）'
FROM
  PTGL_LDYDZT
ORDER BY
  YONGDCHANGD DESC
LIMIT
  1;
pred_sql: SELECT   LUD AS '路段',   QIDZH AS '起点桩号',   ZHONGDZH AS '终点桩号',   YONGDCHANGD AS '拥堵长度（米）' FROM   PTGL_LDYDZT ORDER BY   YONGDCHANGD DESC FETCH FIRST 1 ROWS ONLY;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  PINGJDZSJ AS 平均待闸时间
FROM
  CJ_YXZT
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      CJ_YXZT
  )
  AND PINGJDZSJ <= 6;
pred_sql: SELECT   CHUANZMC AS 船闸名称,   PINGJDZSJ AS 平均待闸时间 FROM   CJ_YXZT WHERE   GCRQ = (     SELECT       MAX(GCRQ)     FROM       CJ_YXZT   )   AND PINGJDZSJ <= 6;
gold_sql: SELECT
  `CHELL` AS `车流量`
FROM
  `gsgl_rmlx`
WHERE
  `GCRQ` = '2023-11-16'
  AND `O_CITY` = '无锡市'
  AND `D_CITY` = '苏州市';
pred_sql: SELECT `CHELL` AS '车流量'  FROM gsgl_rmlx  WHERE `GCRQ` = '2023-11-16' AND `O_CITY` = '无锡市' AND `D_CITY` = '苏州市';
gold_sql: SELECT
  O_CITY as `起点城市`,
  D_CITY as `终点城市`,
  MAX(CHELL) as `最大车流量`
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-04-04' AND '2024-05-04'
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  `最大车流量` DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`CHELL`) AS '车流量总和' FROM `gsgl_rmlx` WHERE `GCRQ` BETWEEN '2024-05-04' AND '2024-06-04' GROUP BY `O_CITY`, `D_CITY` ORDER BY `车流量总和` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观察日期,
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  CHELL AS 车流量
FROM
  gsgl_rmlx
WHERE
  GCRQ = '2024-05-26'
ORDER BY
  CHELL DESC
LIMIT
  5;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量（辆/天）' FROM gsgl_rmlx WHERE `GCRQ` = '2024-05-26' ORDER BY `CHELL` DESC LIMIT 5;
gold_sql: SELECT
  `GCRQ` AS `观测日期`
FROM
  `gsgl_rmlx`
WHERE
  `O_CITY` = '无锡市'
  AND `D_CITY` = '苏州市'
  AND `CHELL` > 50000;
pred_sql: SELECT `GCRQ` AS '日期'  FROM gsgl_rmlx  WHERE `O_CITY` = '无锡市' AND `D_CITY` = '苏州市' AND `CHELL` > 50000;
gold_sql: SELECT
  O_CITY AS '起点城市',
  `CHELL` AS `车流量`
FROM
  `gsgl_rmlx`
WHERE
  `GCRQ` = '2023-11-16'
  AND `D_CITY` = '苏州市';
pred_sql: SELECT `CHELL` AS '车流量（辆/天）'  FROM gsgl_rmlx  WHERE `GCRQ` = '2023-11-16' AND `D_CITY` LIKE '%苏州%';
gold_sql: SELECT
  D_CITY AS 终点城市,
  `CHELL` AS `车流量`
FROM
  `gsgl_rmlx`
WHERE
  `GCRQ` = '2023-11-17'
  AND `O_CITY` = '无锡市'
ORDER BY
  `CHELL` DESC;
pred_sql: SELECT `GCRQ` AS '观测日期', `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量（辆/天）'  FROM gsgl_rmlx  WHERE `GCRQ` = '2023-11-17' AND `O_CITY` = '无锡市'  ORDER BY `CHELL` DESC;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  MAX(CHELL) AS `最大车流量`
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-05-28' AND '2024-06-03'
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  MAX(CHELL) DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`CHELL`) AS '总车流量' FROM `gsgl_rmlx` WHERE `GCRQ` BETWEEN '2024-05-28' AND '2024-06-03' GROUP BY `O_CITY`, `D_CITY` ORDER BY `总车流量` DESC LIMIT 1;
gold_sql: SELECT `GCRQ` AS `观测日期`, CHELL AS '车流量' FROM `gsgl_rmlx` WHERE `O_CITY` = '无锡市' AND `D_CITY` = '苏州市' ORDER BY `CHELL` ASC LIMIT 1;
pred_sql: SELECT `GCRQ` AS '日期', MIN(`CHELL`) AS '最小车流量' FROM `gsgl_rmlx` WHERE `O_CITY` = '无锡市' AND `D_CITY` = '苏州市' GROUP BY `GCRQ` ORDER BY `最小车流量` ASC LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观察日期,
  O_CITY As 起点城市,
  D_CITY AS 终点城市,
  CHELL AS 车流量
FROM
  gsgl_rmlx
ORDER BY
  CHELL DESC
LIMIT
  5;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量（辆/天）'  FROM gsgl_rmlx  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_rmlx)  ORDER BY `CHELL` DESC  LIMIT 5;
gold_sql: SELECT
  AVG(CHELL) AS '平均车流量'
FROM
  `gsgl_rmlx`
WHERE
  `O_CITY` = '无锡市'
  AND `D_CITY` = '苏州市'
  AND `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT AVG(`CHELL`) AS '平均车流量' FROM `gsgl_rmlx` WHERE `O_CITY` = '无锡市' AND `D_CITY` = '苏州市' AND `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  GCRQ AS 观测日期,
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  CHELL AS 车流量
FROM
  gsgl_rmlx
WHERE
  O_CITY = '苏州市'
ORDER BY
  GCRQ DESC;
pred_sql: SELECT `GCRQ` AS '观测日期', `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量（辆/天）'  FROM gsgl_rmlx  WHERE `O_CITY` = '苏州市'  ORDER BY `GCRQ` DESC;
gold_sql: SELECT
  GCRQ AS 观测日期,
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  CHELL AS 车流量
FROM
  gsgl_rmlx
WHERE
  CHELL BETWEEN 50000 AND 60000;
pred_sql: SELECT `GCRQ` AS '观测日期', `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量（辆/天）'  FROM gsgl_rmlx  WHERE `CHELL` BETWEEN 50000 AND 60000;
gold_sql: SELECT
  GCRQ AS 观测日期,
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  CHELL AS 车流量
FROM
  gsgl_rmlx
ORDER BY
  CHELL ASC
LIMIT
  5;
pred_sql: SELECT `GCRQ` AS '观测日期', `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量（辆/天）'  FROM gsgl_rmlx  ORDER BY `CHELL` ASC  LIMIT 5;
gold_sql: SELECT O_CITY AS '起点城市', D_CITY AS '终点城市', CHELL AS '车流量'  FROM gsgl_rmlx  WHERE GCRQ = '2023-11-16'  ORDER BY CHELL DESC  LIMIT 1;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量' FROM gsgl_rmlx WHERE `GCRQ` = '2023-11-16' ORDER BY `CHELL` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  MAX(CHELL) - MIN(CHELL) AS '增长量'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN (
    SELECT
      MAX(GCRQ) - INTERVAL 1 MONTH
    FROM
      gsgl_rmlx
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_rmlx
  )
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  '增长量' DESC
LIMIT
  1;
pred_sql: SELECT      `O_CITY` AS `起点城市`,      `D_CITY` AS `终点城市`,      SUM(`CHELL`) AS `车流量增长量` FROM      gsgl_rmlx WHERE      `GCRQ` BETWEEN CURDATE() - INTERVAL 1 MONTH AND CURDATE() GROUP BY      `O_CITY`,      `D_CITY` ORDER BY      `车流量增长量` DESC;
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  CHELL AS '车流量(辆/天)'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-03'
  AND CHELL > 10000;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`CHELL`) AS '总车流量' FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-03' GROUP BY `O_CITY`, `D_CITY` HAVING SUM(`CHELL`) > 10000;
gold_sql: SELECT
  (
    SELECT
      `CHELL` AS 车流量
    FROM
      `gsgl_rmlx`
    WHERE
      `GCRQ` = '2023-11-16'
      AND `O_CITY` = '无锡市'
      AND `D_CITY` = '苏州市'
  ) AS `从无锡市到苏州市的车流量`,
  (
    SELECT
      `CHELL`
    FROM
      `gsgl_rmlx`
    WHERE
      `GCRQ` = '2023-11-16'
      AND `O_CITY` = '苏州市'
      AND `D_CITY` = '无锡市'
  ) AS `从苏州市到无锡市的车流量`;
pred_sql: SELECT      CASE          WHEN SUM(CASE WHEN `O_CITY` = '无锡市' AND `D_CITY` = '苏州市' THEN `CHELL` ELSE 0 END) > SUM(CASE WHEN `O_CITY` = '苏州市' AND `D_CITY` = '无锡市' THEN `CHELL` ELSE 0 END) THEN '从无锡市到苏州市的车流量更大'         ELSE '从苏州市到无锡市的车流量更大'     END AS `比较结果` FROM      `gsgl_rmlx` WHERE      `GCRQ` = '2023-11-16';
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  MAX(CHELL) - MIN(CHELL) AS '增幅'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  '增幅' DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, MAX(`CHELL`) AS '最高车流量' FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY `O_CITY`, `D_CITY` ORDER BY `最高车流量` DESC LIMIT 1;
gold_sql: SELECT
  SUM(CHELL) AS '上周末车流量总和'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-05-04' AND '2024-05-05';
pred_sql: SELECT SUM(`CHELL`) AS '上周末车流量总和' FROM `gsgl_rmlx` WHERE `GCRQ` IN ('2024-06-01', '2024-06-02');
gold_sql: SELECT O_CITY AS '起点城市', D_CITY AS '终点城市', CHELL AS '车流量' FROM gsgl_rmlx  WHERE GCRQ = '2023-11-16'  AND ABS(CHELL - (SELECT AVG(CHELL) FROM gsgl_rmlx WHERE GCRQ = '2023-11-16')) =  (SELECT MIN(ABS(CHELL - sub.avg_chell)) FROM gsgl_rmlx,  (SELECT AVG(CHELL) AS avg_chell FROM gsgl_rmlx WHERE GCRQ = '2023-11-16') sub  WHERE GCRQ = '2023-11-16');
pred_sql: SELECT `O_CITY`, `D_CITY`, `CHELL` AS '车流量' FROM gsgl_rmlx WHERE `GCRQ` = '2023-11-16' ORDER BY ABS(`CHELL` - (SELECT AVG(`CHELL`) FROM gsgl_rmlx WHERE `GCRQ` = '2023-11-16')) LIMIT 1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  STD(CHELL) AS '车流量标准差'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2023-06-04' AND '2024-06-03'
GROUP BY
  O_CITY,
  D_CITY
HAVING
  STD(CHELL) <= (
    SELECT
      AVG(STD(CHELL))
    FROM
      (
        SELECT
          STD(CHELL)
        FROM
          gsgl_rmlx
        WHERE
          GCRQ BETWEEN '2023-06-04' AND '2024-06-03'
        GROUP BY
          O_CITY,
          D_CITY
      ) AS subquery
  )
ORDER BY
  STD(CHELL) ASC;
pred_sql: SELECT `O_CITY`, `D_CITY` FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2023-06-04' AND '2024-06-03' GROUP BY `O_CITY`, `D_CITY` HAVING MAX(`CHELL`) - MIN(`CHELL`) <= 10;
gold_sql: SELECT
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  MAX(CHELL) AS '最高车流量'
FROM
  gsgl_rmlx
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  MAX(CHELL) DESC
LIMIT
  10;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`CHELL`) AS '总车流量' FROM gsgl_rmlx WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_rmlx) GROUP BY `O_CITY`, `D_CITY` ORDER BY `总车流量` DESC LIMIT 10;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  CHELL AS 终点城市
FROM
  gsgl_rmlx
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_rmlx
  )
ORDER BY
  CHELL DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '起点城市', MAX(`CHELL`) AS '最高车流量' FROM gsgl_rmlx WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_rmlx) GROUP BY `O_CITY` ORDER BY `最高车流量` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  MAX(CHELL) - MIN(CHELL) AS '增长量'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN (
    SELECT
      MAX(GCRQ) - INTERVAL 7 DAY
    FROM
      gsgl_rmlx
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_rmlx
  )
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  '增长量' DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, MAX(`CHELL`) AS '最高车流量' FROM gsgl_rmlx WHERE `GCRQ` BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE() GROUP BY `O_CITY`, `D_CITY` ORDER BY `最高车流量` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  CHELL AS '最低车流量'
FROM
  gsgl_rmlx
ORDER BY
  CHELL ASC
LIMIT
  5;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量（辆/天）'  FROM gsgl_rmlx  ORDER BY `CHELL` ASC  LIMIT 5;
gold_sql: SELECT
  t1.O_CITY AS '起点城市',
  t1.D_CITY AS '终点城市',
  ABS(t1.CHELL - t2.CHELL) AS '车流量变化量'
FROM
  gsgl_rmlx t1
  JOIN gsgl_rmlx t2 ON t1.O_CITY = t2.O_CITY
  AND t1.D_CITY = t2.D_CITY
WHERE
  t1.GCRQ = '2024-04-08'
  AND t2.GCRQ = '2024-03-08'
ORDER BY
  ABS(t1.CHELL - t2.CHELL) DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, MAX(`CHELL`) - MIN(`CHELL`) AS `车流量变化` FROM gsgl_rmlx WHERE `GCRQ` = '2024-04-08' GROUP BY `O_CITY`, `D_CITY` ORDER BY `车流量变化` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY 起点城市,
  D_CITY 终点城市,
  MAX(CHELL) - MIN(CHELL) AS '波动最大'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2023-06-04' AND '2024-06-03'
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  '波动最大' DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, MAX(`CHELL`) - MIN(`CHELL`) AS `车流量波动` FROM `gsgl_rmlx` WHERE `GCRQ` BETWEEN '2023-06-04' AND '2024-06-03' GROUP BY `O_CITY`, `D_CITY` ORDER BY `车流量波动` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  CHELL AS '最大车流量'
FROM
  gsgl_rmlx
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_rmlx
    WHERE
      GCRQ < CURDATE()
  )
ORDER BY
  CHELL DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', MAX(`CHELL`) AS '最大车流量' FROM gsgl_rmlx WHERE `GCRQ` = CURDATE() - INTERVAL 1 DAY GROUP BY `O_CITY`, `D_CITY` ORDER BY `最大车流量` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS '日期',
  AVG(CHELL) AS '平均车流量'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-06-02' AND '2024-06-08'
GROUP BY
  GCRQ
ORDER BY
  AVG(CHELL) DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', AVG(`CHELL`) AS '平均车流量' FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-06-02' AND '2024-06-08' GROUP BY `GCRQ` ORDER BY AVG(`CHELL`) DESC LIMIT 1;
gold_sql: SELECT
  SUM(CHELL) as `上周日总车流量`
FROM
  gsgl_rmlx
WHERE
  GCRQ = '2024-06-02';
pred_sql: SELECT SUM(`CHELL`) AS `上周日高速公路总车流量` FROM `gsgl_rmlx` WHERE `GCRQ` = '2024-06-02';
gold_sql: SELECT day1.O_CITY AS '起点城市', day1.D_CITY AS '终点城市' FROM gsgl_rmlx day1 JOIN gsgl_rmlx day2 ON day1.O_CITY = day2.O_CITY AND day1.D_CITY = day2.D_CITY JOIN gsgl_rmlx day3 ON day2.O_CITY = day3.O_CITY AND day2.D_CITY = day3.D_CITY  WHERE day1.GCRQ = '2023-11-20' AND day2.GCRQ = '2023-11-21' AND day3.GCRQ = '2023-11-22'   AND day1.CHELL < day2.CHELL AND day2.CHELL < day3.CHELL;
pred_sql: SELECT `O_CITY`, `D_CITY` FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2023-11-20' AND '2023-11-23' GROUP BY `O_CITY`, `D_CITY` HAVING COUNT(DISTINCT `GCRQ`) = 4 AND SUM(CASE WHEN `GCRQ` = '2023-11-20' THEN `CHELL` ELSE 0 END) < SUM(CASE WHEN `GCRQ` = '2023-11-21' THEN `CHELL` ELSE 0 END) AND SUM(CASE WHEN `GCRQ` = '2023-11-21' THEN `CHELL` ELSE 0 END) < SUM(CASE WHEN `GCRQ` = '2023-11-22' THEN `CHELL` ELSE 0 END) AND SUM(CASE WHEN `GCRQ` = '2023-11-22' THEN `CHELL` ELSE 0 END) < SUM(CASE WHEN `GCRQ` = '2023-11-23' THEN `CHELL` ELSE 0 END);
gold_sql: SELECT
  this_week.O_CITY AS 起点城市,
  this_week.D_CITY As 终点城市,
  (last_week.CHELL - this_week.CHELL) AS '下降最多车流量'
FROM
  (
    SELECT
      O_CITY,
      D_CITY,
      CHELL,
      GCRQ
    FROM
      gsgl_rmlx
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_rmlx
        WHERE
          GCRQ < DATE_SUB(CURDATE(), INTERVAL 1 WEEK)
      )
  ) AS last_week
  INNER JOIN (
    SELECT
      O_CITY,
      D_CITY,
      CHELL,
      GCRQ
    FROM
      gsgl_rmlx
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_rmlx
        WHERE
          GCRQ < CURDATE()
          AND GCRQ >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)
      )
  ) AS this_week ON last_week.O_CITY = this_week.O_CITY
  AND last_week.D_CITY = this_week.D_CITY
ORDER BY
  (last_week.CHELL - this_week.CHELL) DESC
LIMIT
  1;
pred_sql: SELECT      `O_CITY`,      `D_CITY`,      MAX(`CHELL`) AS `本周车流量`,      (SELECT MAX(`CHELL`) FROM gsgl_rmlx WHERE YEARWEEK(`GCRQ`, 1) = YEARWEEK(CURDATE(), 1) - 1) AS `上周车流量`,      MAX(`CHELL`) - (SELECT MAX(`CHELL`) FROM gsgl_rmlx WHERE YEARWEEK(`GCRQ`, 1) = YEARWEEK(CURDATE(), 1) - 1) AS `车流量下降量` FROM      gsgl_rmlx WHERE      YEARWEEK(`GCRQ`, 1) = YEARWEEK(CURDATE(), 1) GROUP BY      `O_CITY`,      `D_CITY` ORDER BY      `车流量下降量` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  CHELL AS '车流量最高'
FROM
  gsgl_rmlx
WHERE
  GCRQ = '2024-04-08'
ORDER BY
  CHELL DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, MAX(`CHELL`) AS '最高车流量' FROM gsgl_rmlx WHERE `GCRQ` = '2024-05-04' GROUP BY `O_CITY`, `D_CITY` ORDER BY `最高车流量` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  CHELL AS '车流量'
FROM
  gsgl_rmlx
WHERE
  GCRQ = '2024-06-04'
  AND CHELL > 50000;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', `CHELL` AS '车流量'  FROM gsgl_rmlx  WHERE `GCRQ` = '2024-06-04' AND `CHELL` > 50000;
gold_sql: SELECT O_CITY AS '起点城市', D_CITY AS '终点城市', AVG(CHELL) AS '平均车流量'  FROM gsgl_rmlx  WHERE GCRQ BETWEEN '2024-01-01' AND '2024-03-31'  GROUP BY O_CITY, D_CITY  ORDER BY AVG(CHELL) ASC  LIMIT 1;
pred_sql: SELECT `O_CITY`, `D_CITY`, AVG(`CHELL`) AS '平均车流量' FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY `O_CITY`, `D_CITY` ORDER BY AVG(`CHELL`) ASC LIMIT 1;
gold_sql: SELECT      a.O_CITY AS '起点城市',      a.D_CITY AS '终点城市',      (a.CHELL - b.CHELL) AS '增长量' FROM      gsgl_rmlx a JOIN      gsgl_rmlx b ON      a.O_CITY = b.O_CITY AND a.D_CITY = b.D_CITY WHERE      a.GCRQ BETWEEN '2024-04-01' AND '2024-04-30'     AND b.GCRQ BETWEEN '2023-04-01' AND '2023-04-30'     AND a.CHELL > b.CHELL ORDER BY      '增长量' DESC;
pred_sql: SELECT      `O_CITY` AS '起点城市',      `D_CITY` AS '终点城市',      SUM(CASE WHEN `GCRQ` BETWEEN '2023-04-01' AND '2023-04-30' THEN `CHELL` ELSE 0 END) AS '去年同期车流量',      SUM(CASE WHEN `GCRQ` BETWEEN '2022-04-01' AND '2022-04-30' THEN `CHELL` ELSE 0 END) AS '前年同期车流量',      (SUM(CASE WHEN `GCRQ` BETWEEN '2023-04-01' AND '2023-04-30' THEN `CHELL` ELSE 0 END) - SUM(CASE WHEN `GCRQ` BETWEEN '2022-04-01' AND '2022-04-30' THEN `CHELL` ELSE 0 END)) AS '车流量增长量' FROM      gsgl_rmlx GROUP BY      `O_CITY`,      `D_CITY` HAVING      `车流量增长量` > 0;
gold_sql: SELECT
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  MAX(CHELL) - MIN(CHELL) AS '波动量'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-05-28' AND '2024-06-03'
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  波动量 DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, MAX(`CHELL`) - MIN(`CHELL`) AS `车流量波动值` FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-05-28' AND '2024-06-03' GROUP BY `O_CITY`, `D_CITY` ORDER BY `车流量波动值` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  MIN(CHELL) AS '最少车流量'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-06-03' AND '2024-06-09'
ORDER BY
  CHELL ASC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, SUM(`CHELL`) AS `总车流量` FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-06-03' AND '2024-06-09' GROUP BY `O_CITY`, `D_CITY` ORDER BY `总车流量` ASC LIMIT 1;
gold_sql: SELECT GCRQ AS `车流量最高的日期`, SUM(CHELL) AS `总车流量` FROM gsgl_rmlx GROUP BY GCRQ ORDER BY `总车流量` DESC LIMIT 1;
pred_sql: SELECT `GCRQ` AS '日期', SUM(`CHELL`) AS '总车流量' FROM gsgl_rmlx GROUP BY `GCRQ` ORDER BY SUM(`CHELL`) DESC LIMIT 1;
gold_sql: SELECT
  yesterday.O_CITY AS '起点城市',
  yesterday.D_CITY AS '终点城市',
  (yesterday.CHELL - today.CHELL) AS '车流量下降'
FROM
  (
    SELECT
      O_CITY,
      D_CITY,
      CHELL
    FROM
      gsgl_rmlx
    WHERE
      GCRQ = '2024-06-03'
  ) AS yesterday
  INNER JOIN (
    SELECT
      O_CITY,
      D_CITY,
      CHELL
    FROM
      gsgl_rmlx
    WHERE
      GCRQ = '2024-06-04'
  ) AS today ON yesterday.O_CITY = today.O_CITY
  AND yesterday.D_CITY = today.D_CITY
WHERE
  yesterday.CHELL > today.CHELL;
pred_sql: SELECT      `O_CITY` AS '起点城市',      `D_CITY` AS '终点城市',      SUM(CASE WHEN `GCRQ` = '2024-06-03' THEN `CHELL` ELSE 0 END) AS '昨天车流量',      SUM(CASE WHEN `GCRQ` = '2024-06-04' THEN `CHELL` ELSE 0 END) AS '今天车流量' FROM      gsgl_rmlx WHERE      `GCRQ` IN ('2024-06-03', '2024-06-04') GROUP BY      `O_CITY`,      `D_CITY` HAVING      `今天车流量` < `昨天车流量`;
gold_sql: SELECT    O_CITY AS `起点城市`,    D_CITY AS `终点城市` FROM    gsgl_rmlx  WHERE    GCRQ BETWEEN '2024-05-01' AND '2024-05-07' GROUP BY    O_CITY,    D_CITY HAVING    COUNT(DISTINCT GCRQ) = 7;
pred_sql: SELECT `O_CITY`, `D_CITY` FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-07' GROUP BY `O_CITY`, `D_CITY` HAVING COUNT(DISTINCT `GCRQ`) = 7;
gold_sql: SELECT
  O_CITY AS '起点城市',
  D_CITY AS '终点城市',
  STDDEV(CHELL) AS '最稳定标准差'
FROM
  gsgl_rmlx
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-30'
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  STDDEV(CHELL) ASC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, `D_CITY`, STDDEV(`CHELL`) AS 车流量标准差 FROM gsgl_rmlx WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30' GROUP BY `O_CITY`, `D_CITY` ORDER BY 车流量标准差 ASC LIMIT 1;
gold_sql: SELECT
  `HANGDDK` AS `航道底宽`
FROM
  hd_yxzt
WHERE
  `GCRQ` = '2023-11-16'
  AND `HANGDMC` = '京杭运河'
  AND `QIDMC` = '邵伯船闸'
  AND `ZHONGDMC` = '盐邵船闸';
pred_sql: SELECT `HANGDDK` AS '航道底宽' FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` = '京杭运河' AND `HANGDUANMC` = '邵伯船闸至盐邵船闸段';
gold_sql: SELECT `GCRQ` AS `观测日期` FROM hd_yxzt WHERE `HANGDMC` = '京杭运河' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸' AND `ZUIDTHSS` = 0 ORDER BY `GCRQ` DESC LIMIT 1;
pred_sql: SELECT `GCRQ` AS '观测日期'  FROM hd_yxzt  WHERE `HANGDMC` = '京杭运河'    AND `QIDMC` = '邵伯船闸'    AND `ZHONGDMC` = '盐邵船闸'    AND `ZUIDTHSS` = 0;
gold_sql: SELECT `GCRQ` AS `观测日期`, `ZUIDTHSS` AS `最低通航水深` FROM hd_yxzt WHERE `HANGDMC` = '京杭运河' AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸' ORDER BY `GCRQ` DESC;
pred_sql: SELECT `GCRQ` AS '观测日期', `ZUIDTHSS` AS '最低通航水深'  FROM hd_yxzt  WHERE `HANGDMC` = '京杭运河' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸';
gold_sql: SELECT `QIDMC` AS `起点名称`, `ZHONGDMC` AS `终点名称`, `HANGDMC` AS `航道名称`, MIN(`ZUIDTHSS`) AS `最低通航水深` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` = '京杭运河' GROUP BY `QIDMC`, `ZHONGDMC`, `HANGDMC`;
pred_sql: SELECT      `QIDMC` AS '起点名称',      `ZHONGDMC` AS '重点名称',      `HANGDMC` AS '航道名称',      MIN(`ZUIDTHSS`) AS '最低通航水深' FROM      `hd_yxzt` WHERE      `GCRQ` = '2023-11-16' AND `HANGDMC` LIKE '%京杭运河%' GROUP BY      `QIDMC`, `ZHONGDMC`, `HANGDMC`;
gold_sql: SELECT `HANGDMC` AS `航道名称`, `ZUIDTHSS` AS `最低通航水深` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `ZUIDTHSS` > 0;
pred_sql: SELECT `HANGDMC` AS '航道名称' FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `ZUIDTHSS` > 0;
gold_sql: SELECT SUM(`ZUIDTHSS`) AS `最低通航水深总和` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16';
pred_sql: SELECT SUM(`ZUIDTHSS`) AS '最低通航水深总和' FROM `hd_yxzt` WHERE `GCRQ` = '2023-11-16';
gold_sql: SELECT
  `HANGDXZDJ` AS `航道现状等级`
FROM
  hd_yxzt
WHERE
  `GCRQ` = '2023-11-16'
  AND `HANGDMC` = '京杭运河'
  AND `QIDMC` = '邵伯船闸'
  AND `ZHONGDMC` = '盐邵船闸';
pred_sql: SELECT `HANGDXZDJ` AS '航道现状等级'  FROM hd_yxzt  WHERE `GCRQ` = '2023-11-16'  AND `HANGDMC` = '京杭运河'  AND `QIDMC` = '邵伯船闸'  AND `ZHONGDMC` = '盐邵船闸';
gold_sql: SELECT
  `HANGDXZDJ` AS `航道现状等级`
FROM
  hd_yxzt
WHERE
  `GCRQ` = '2023-11-16'
  AND `HANGDMC` = '京杭运河'
  AND `QIDMC` = '邵伯船闸'
  AND `ZHONGDMC` = '盐邵船闸';
pred_sql: SELECT `HANGDXZDJ` AS '航道现状等级'  FROM hd_yxzt  WHERE `GCRQ` = '2023-11-16'  AND `HANGDMC` = '京杭运河'  AND `QIDMC` = '邵伯船闸'  AND `ZHONGDMC` = '盐邵船闸';
gold_sql: SELECT `HANGDUANMC` AS `航段名称`, `HANGDXZDJ` AS `航道现状等级` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` = '京杭运河';
pred_sql: SELECT `HANGDMC` AS '航道名称', `HANGDUANMC` AS '航段名称', `HANGDXZDJ` AS '航道现状等级' FROM hd_yxzt WHERE `GCRQ` = '2023-11-16';
gold_sql: SELECT `HANGDZDSS` AS `航道最大水深` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` = '京杭运河' AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)';
pred_sql: SELECT `HANGDZDSS` AS '航道最大水深' FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` = '京杭运河' AND `HANGDUANMC` = '邵伯船闸至盐邵船闸段';
gold_sql: SELECT
  `HANGDMC` AS `航道名称`,
  `HANGDUANMC` AS `航段名称`,
  `HANGDZDSS` AS `航道最大水深`
FROM
  hd_yxzt
WHERE
  `GCRQ` = '2023-11-16'
  AND `HANGDMC` = '京杭运河';
pred_sql: SELECT `HANGDMC` AS '航道名称', `HANGDUANMC` AS '航段名称', `HANGDZDSS` AS '航道最大水深'  FROM hd_yxzt  WHERE `GCRQ` = '2023-11-16';
gold_sql: SELECT `HANGDMK` AS `航道面宽` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)';
pred_sql: SELECT `HANGDMK` AS '航道面宽' FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` = '京杭运河' AND `HANGDUANMC` = '邵伯船闸至盐邵船闸段';
gold_sql: SELECT `HANGDMC` AS `航道名称`, `HANGDUANMC` AS `航段名称`, `HANGDMK` AS `航道面宽` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` = '京杭运河';
pred_sql: SELECT `HANGDMC` AS '航道名称', `HANGDUANMC` AS '航段名称', `HANGDMK` AS '航道面宽'  FROM hd_yxzt  WHERE `GCRQ` = '2023-11-16';
gold_sql: SELECT `HANGDMC` AS `航道名称`, `HANGDUANMC` AS `航段名称`, `HANGDDMMC` AS `航道断面名称` FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `HANGDMC` LIKE '京杭运河%';
pred_sql: SELECT `HANGDDUANMC` AS '航道断面名称' FROM hd_yxzt WHERE `GCRQ` = '2023-11-16';
gold_sql: SELECT
  `HANGDXZDJ` AS `航道现状等级`
FROM
  hd_yxzt
WHERE
  `GCRQ` = '2023-11-16'
  AND `HANGDMC` = '京杭运河'
  AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)';
pred_sql: SELECT `HANGDXZDJ` AS '航道现状等级' FROM hd_yxzt WHERE `GCRQ` = '2023-11-16' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸';
gold_sql: SELECT GCRQ AS `观测日期`, HANGDZDSS AS `航道最大水深`  FROM hd_yxzt  WHERE HANGDMC = '京杭运河'  AND HANGDUANMC = '京杭运河(邵伯船闸至盐邵船闸段)'  AND GCRQ > DATE_SUB((SELECT MAX(GCRQ) FROM hd_yxzt), INTERVAL 1 YEAR)  ORDER BY GCRQ;
pred_sql: SELECT MAX(`HANGDZDSS`) AS '最大航道水深' FROM `hd_yxzt` WHERE `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND `HANGDMC` = '京杭运河' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸';
gold_sql: SELECT
  COUNT(*) AS `断面数量`
FROM
  hd_yxzt
WHERE
  `HANGDMC` = '京杭运河'
  AND `HANGDXZDJ` = '三级航道';
pred_sql: SELECT COUNT(DISTINCT `HANGDDMMC`) AS '三级航道断面数量' FROM `hd_yxzt` WHERE `HANGDXZDJ` = '三级';
gold_sql: SELECT `HANGDDK` >= 45 AS `是否满足航道底宽要求` FROM hd_yxzt WHERE `HANGDMC` = '京杭运河' AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)' AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM hd_yxzt WHERE `HANGDMC` = '京杭运河' AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)');
pred_sql: SELECT      `HANGDMC` AS '航道名称',      `HANGDUANMC` AS '航段名称',      `QIDMC` AS '起点名称',      `ZHONGDMC` AS '终点名称',      `HANGDXZDJ` AS '航道现状等级',      `ZUIDTHSS` AS '最低通航水深（米）',      `HANGDZDSS` AS '航道最大水深（米）',      `HANGDDK` AS '航道底宽（米）',      `HANGDMK` AS '航道面宽（米）',      `HANGDDMMC` AS '航道断面名称',      `DUANMHYZL` AS '断面货运总量（万吨）' FROM      hd_yxzt WHERE      `HANGDMC` = '京杭运河' AND      `QIDMC` = '邵伯船闸' AND      `ZHONGDMC` = '盐邵船闸' AND      `GCRQ` = (SELECT MAX(`GCRQ`) FROM hd_yxzt);
gold_sql: SELECT
  `HANGDDMMC` AS `航道断面`,
  MAX(`DUANMHYZL`) AS `货运总量`
FROM
  hd_yxzt
WHERE
  `HANGDMC` = '京杭运河'
GROUP BY
  `HANGDDMMC`
ORDER BY
  `货运总量` DESC
LIMIT
  1;
pred_sql: SELECT `HANGDMC` AS '航道名称', SUM(`DUANMHYZL`) AS '货运总量' FROM hd_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM hd_yxzt) GROUP BY `HANGDMC` ORDER BY SUM(`DUANMHYZL`) DESC LIMIT 1;
gold_sql: SELECT
  a.`HANGDDK` AS `最新底宽`,
  b.`HANGDDK` AS `年初底宽`,
  (a.`HANGDDK` - b.`HANGDDK`) > 0 AS `是否改善`
FROM
  (
    SELECT
      `HANGDDK`
    FROM
      hd_yxzt
    WHERE
      `HANGDMC` = '京杭运河'
      AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)'
      AND `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          hd_yxzt
        WHERE
          `HANGDMC` = '京杭运河'
          AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)'
      )
  ) a
  CROSS JOIN (
    SELECT
      `HANGDDK`
    FROM
      hd_yxzt
    WHERE
      `HANGDMC` = '京杭运河'
      AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)'
      AND YEAR(`GCRQ`) = YEAR(CURDATE())
      AND `GCRQ` = (
        SELECT
          MIN(`GCRQ`)
        FROM
          hd_yxzt
        WHERE
          `HANGDMC` = '京杭运河'
          AND `HANGDUANMC` = '京杭运河(邵伯船闸至盐邵船闸段)'
          AND YEAR(`GCRQ`) = YEAR(CURDATE())
      )
  ) b;
pred_sql: SELECT `HANGDDK` AS '航道底宽' FROM hd_yxzt WHERE `HANGDMC` = '京杭运河' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸' ORDER BY `GCRQ` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  DUANMHYZL AS `断面货运总量（万吨）`
FROM
  hd_yxzt
WHERE
  HANGDMC = '京杭运河'
  AND HANGDUANMC = '京杭运河(邵伯船闸至盐邵船闸段)'
  AND GCRQ BETWEEN '2024-03-04' AND '2024-06-03'
ORDER BY
  GCRQ;
pred_sql: SELECT SUM(`DUANMHYZL`) AS `货运总量变化` FROM `hd_yxzt` WHERE `GCRQ` BETWEEN '2024-03-04' AND '2024-06-03' AND `HANGDMC` = '京杭运河' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸';
gold_sql: SELECT
  YEAR(GCRQ) AS `年份`,
  SUM(DUANMHYZL) AS `总断面货运总量（万吨）`
FROM
  hd_yxzt
WHERE
  HANGDMC = '京杭运河'
  AND HANGDUANMC = '京杭运河(邵伯船闸至盐邵船闸段)'
  AND GCRQ >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR)
GROUP BY
  YEAR(GCRQ)
ORDER BY
  YEAR(GCRQ);
pred_sql: SELECT `HANGDMC`, `HANGDUANMC`, `QIDMC`, `ZHONGDMC`, SUM(`DUANMHYZL`) AS '货运总量' FROM hd_yxzt WHERE `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND `HANGDMC` = '京杭运河' AND `QIDMC` = '邵伯船闸' AND `ZHONGDMC` = '盐邵船闸' GROUP BY `HANGDMC`, `HANGDUANMC`, `QIDMC`, `ZHONGDMC`;
gold_sql: SELECT    YEAR(GCRQ) AS `年份`,   SUM(DUANMHYZL) AS `年度断面货运总量（万吨）` FROM    hd_yxzt  WHERE    HANGDMC = '京杭运河'    AND HANGDUANMC = '京杭运河(邵伯船闸至盐邵船闸段)'   AND YEAR(GCRQ) BETWEEN '2023' AND '2024' GROUP BY    YEAR(GCRQ) ORDER BY    YEAR(GCRQ);
pred_sql: SELECT      `HANGDMC`,      `HANGDUANMC`,      `QIDMC`,      `ZHONGDMC`,      SUM(`DUANMHYZL`) AS `货运总量` FROM      hd_yxzt WHERE      `HANGDMC` LIKE '%京杭运河%'      AND `QIDMC` = '邵伯船闸'      AND `ZHONGDMC` = '盐邵船闸'      AND `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY      `HANGDMC`,      `HANGDUANMC`,      `QIDMC`,      `ZHONGDMC`;
gold_sql: SELECT      `HANGDUANMC` AS `航段名称`,      `QIDMC` AS `起点名称`,      `ZHONGDMC` AS `终点名称`,      `HANGDXZDJ` AS `航道现状等级`,      `ZUIDTHSS` AS `最低通航水深（米）`,      `HANGDZDSS` AS `航道最大水深（米）`,      `HANGDDK` AS `航道底宽（米）`,      `HANGDMK` AS `航道面宽（米）`,      `HANGDDMMC` AS `航道断面名称`,      `DUANMHYZL` AS `断面货运总量（万吨）` FROM      hd_yxzt WHERE      `HANGDMC` = '京杭运河'     AND `GCRQ` = '2023-11-16';
pred_sql: SELECT `HANGDMC` AS '航道名称', `HANGDUANMC` AS '航段名称', `QIDMC` AS '起点名称', `ZHONGDMC` AS '终点名称', `HANGDXZDJ` AS '航道现状等级', `ZUIDTHSS` AS '最低通航水深（米）', `HANGDZDSS` AS '航道最大水深（米）', `HANGDDK` AS '航道底宽（米）', `HANGDMK` AS '航道面宽（米）', `HANGDDMMC` AS '航道断面名称', `DUANMHYZL` AS '断面货运总量（万吨）' FROM `HD_YXZT` WHERE `GCRQ` = '2023-11-16';
gold_sql: SELECT * FROM hd_yxzt WHERE HANGDDMMC = '邵伯船闸';
pred_sql: SELECT `HANGDMC` AS '航道名称', `HANGDUANMC` AS '航段名称', `QIDMC` AS '起点名称', `ZHONGDMC` AS '终点名称', `HANGDXZDJ` AS '航道现状等级', `ZUIDTHSS` AS '最低通航水深（米）', `HANGDZDSS` AS '航道最大水深（米）', `HANGDDK` AS '航道底宽（米）', `HANGDMK` AS '航道面宽（米）', `HANGDDMMC` AS '航道断面名称', `DUANMHYZL` AS '断面货运总量（万吨）' FROM `hd_yxzt` WHERE `HANGDDMMC` = '邵伯船闸';
gold_sql: SELECT
  `HANGDMC` AS 航道名称
FROM
  hd_yxzt
WHERE
  `HANGDXZDJ` = '三级航道'
GROUP BY
  `HANGDMC`;
pred_sql: SELECT `HANGDMC` AS '航道名称' FROM hd_yxzt WHERE `HANGDXZDJ` = '三级';
gold_sql: SELECT DISTINCT(`HANGDMC`) AS `航道名称` FROM hd_yxzt WHERE `DUANMHYZL` > 100;
pred_sql: SELECT `HANGDMC` AS '航道名称', SUM(`DUANMHYZL`) AS '货运总量' FROM hd_yxzt GROUP BY `HANGDMC` HAVING SUM(`DUANMHYZL`) > 100;
gold_sql: SELECT `HANGDMC` AS `航道名称`, `HANGDUANMC` AS `航段名称`, `HANGDMK` AS `航道面宽`, `HANGDDK` AS `航道底宽` FROM hd_yxzt WHERE `HANGDMK` > `HANGDDK`;
pred_sql: SELECT `HANGDMC` AS '航道名称', `HANGDUANMC` AS '航段名称', `QIDMC` AS '起点名称', `ZHONGDMC` AS '终点名称', `HANGDXZDJ` AS '航道现状等级', `ZUIDTHSS` AS '最低通航水深（米）', `HANGDZDSS` AS '航道最大水深（米）', `HANGDDK` AS '航道底宽（米）', `HANGDMK` AS '航道面宽（米）', `HANGDDMMC` AS '航道断面名称', `DUANMHYZL` AS '断面货运总量（万吨）' FROM `hd_yxzt` WHERE `HANGDMK` > `HANGDDK`;
gold_sql: SELECT
  `HANGDMC` AS 航道名称,
  COUNT(DISTINCT `HANGDUANMC`) AS `航段数量`
FROM
  hd_yxzt
GROUP BY
  `HANGDMC`;
pred_sql: SELECT `HANGDMC` AS '航道名称', COUNT(DISTINCT `HANGDUANMC`) AS '航段数量' FROM `hd_yxzt` GROUP BY `HANGDMC`;
gold_sql: SELECT `HANGDMC` AS `航道名称`, `HANGDUANMC` AS `航段名称`,`HANGDXZDJ` AS `航道现状等级`, `ZUIDTHSS` AS `最低通航水深`, `HANGDZDSS` AS `航道最大水深`, `HANGDDK` AS `航道底宽`, `HANGDMK` AS `航道面宽`, `DUANMHYZL` AS `断面货运总量`  FROM hd_yxzt  WHERE `HANGDDMMC` = '' OR `HANGDDMMC` IS NULL;
pred_sql: SELECT `HANGDMC`, `HANGDUANMC`, `QIDMC`, `ZHONGDMC`, `HANGDXZDJ`, `ZUIDTHSS`, `HANGDZDSS`, `HANGDDK`, `HANGDMK` FROM `hd_yxzt` WHERE `HANGDDMMC` IS NULL OR `HANGDDMMC` = '';
gold_sql: SELECT `HANGDMC` AS `航道名称`, `HANGDDK` AS `航道底宽` FROM hd_yxzt WHERE `HANGDDK` > 50;
pred_sql: SELECT `HANGDMC`, `HANGDUANMC`, `HANGDDK`  FROM hd_yxzt  WHERE `HANGDDK` > 50;
gold_sql: SELECT COUNT(DISTINCT `HANGDDMMC`) AS `不同的航道断面数量` FROM hd_yxzt WHERE `HANGDMC` LIKE '%长江%';
pred_sql: SELECT COUNT(DISTINCT `HANGDDMMC`) AS '不同航道断面数量' FROM `hd_yxzt`;
gold_sql: SELECT `HANGDMC` AS '航道名称', MAX(`GCRQ`) AS '观测日期', AVG(`DUANMHYZL`) AS '平均断面货运总量（万吨）' FROM hd_yxzt GROUP BY `HANGDMC`;
pred_sql: SELECT      `HANGDMC` AS '航道名称',      `GCRQ` AS '观测日期',      AVG(`DUANMHYZL`) AS '平均断面货运总量' FROM      hd_yxzt GROUP BY      `HANGDMC`, `GCRQ`;
gold_sql: SELECT
  `HANGDMC` AS 航道名称
FROM
  hd_yxzt
WHERE
  `QIDMC` LIKE '%宝应%'
  OR `ZHONGDMC` LIKE '%宝应%'
GROUP BY
  `HANGDMC`;
pred_sql: SELECT `HANGDMC` AS '航道名称', `QIDMC` AS '起点名称', `ZHONGDMC` AS '终点名称' FROM `hd_yxzt` WHERE `QIDMC` LIKE '%宝应%' OR `ZHONGDMC` LIKE '%宝应%';
gold_sql: SELECT
  `HANGDMC` AS 航道名称,
  MAX(`HANGDZDSS`) - MIN(`HANGDZDSS`) AS `水深差值`
FROM
  hd_yxzt
GROUP BY
  `HANGDMC`;
pred_sql: SELECT HANGDMC AS '航道名称', MAX(HANGDXZDJ) - MIN(HANGDXZDJ) AS '最大水深差值' FROM hd_yxzt GROUP BY HANGDMC;
gold_sql: SELECT AVG(VOLUME) AS 'S339国省干线2018年日平均交通量' FROM ptgl_gczypjl WHERE YEAR='2018' AND ROAD_ID='S339';
pred_sql: SELECT AVG(`VOLUME`) AS '2018年S339国省干线全年的日平均交通量' FROM `ptgl_gczypjl` WHERE `YEAR` = 2018 AND `ROAD_ID` = 'S339';
gold_sql: SELECT
  COACH_DOWN AS 客车下行量
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = '2018'
  AND GUANCZMC = '苏州S339太仓东';
pred_sql: SELECT `COACH_DOWN` AS '客车下行量' FROM ptgl_gcznpjl WHERE `YEAR` = 2018 AND `ROAD_NAME` LIKE '%苏州S339太仓东观测站%';
gold_sql: SELECT
  `GUANCZMC` AS `观测站名称`,
  `TRUCK_UP` AS `货车上行量`
FROM
  `PTGL_GCZNPJL`
WHERE
  `YEAR` = 2018
ORDER BY
  `TRUCK_UP` DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`TRUCK_UP`) AS '货车上行总量' FROM `ptgl_gcznpjl` WHERE `YEAR` = 2018 GROUP BY `GUANCZMC` ORDER BY SUM(`TRUCK_UP`) DESC LIMIT 1;
gold_sql: SELECT
  VOLUME AS '上月日均交通量'
FROM
  ptgl_gczypjl
WHERE
  `YEAR` = '2024'
  AND `MONTH` = '5'
  AND ROAD_NAME = '纪百线';
pred_sql: SELECT AVG(`VOLUME`) AS '上月纪百线日均交通量' FROM `ptgl_gczypjl` WHERE `YEAR` = 2024 AND `MONTH` = '05';
gold_sql: SELECT
  SUM(COACH_UP + COACH_DOWN) AS '客车总量',
  SUM(UP_VOLUME + DOWN_VOLUME) AS '总交通量',
  (
    SUM(COACH_UP + COACH_DOWN) / SUM(UP_VOLUME + DOWN_VOLUME)
  ) * 100 AS '客车流量占比(%)'
FROM
  ptgl_gczypjl
WHERE
  `YEAR` = '2024'
  AND `MONTH` = '05'
  AND ROAD_ID = 'S339';
pred_sql: SELECT CONCAT(ROUND((SUM(`COACH_UP`) + SUM(`COACH_DOWN`)) / (SUM(`VOLUME`)) * 100, 2), '%') AS `客车流量占比` FROM `ptgl_gczypjl` WHERE `YEAR` = 2024 AND `MONTH` = '05';
gold_sql: SELECT
  `GUANCZMC` AS `观测站名称`,
  `TRUCK_DOWN` AS `货车下行量`
FROM
  `PTGL_GCZNPJL`
WHERE
  `YEAR` = (YEAR(CURDATE()) - 1)
  AND `TRUCK_DOWN` > 2435;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', `TRUCK_DOWN` AS '货车下行量'  FROM `ptgl_gcznpjl`  WHERE `YEAR` = YEAR(CURDATE()) - 1 AND `TRUCK_DOWN` > 2435;
gold_sql: SELECT
  (UP_VOLUME - DOWN_VOLUME) AS 上行总量与下行总量的差值
FROM
  ptgl_gcznpjl
WHERE
  `ROAD_ID` = 'S339'
  AND GUANCZMC = '苏州S339太仓东'
ORDER BY
  `YEAR` DESC
LIMIT
  1;
pred_sql: SELECT `UP_VOLUME` - `DOWN_VOLUME` AS '太仓东观测站S339年上行与下行总量差值' FROM ptgl_gcznpjl WHERE `YEAR` = 2023 AND `GUANCZMC` LIKE '%太仓东%';
gold_sql: SELECT
  VOLUME AS 交通量
FROM
  ptgl_gcznpjl
WHERE
  `ROAD_ID` = 'S339'
  AND GUANCZMC = '苏州S339太仓东'
ORDER BY
  CAST(`YEAR` AS UNSIGNED) DESC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', `ROAD_NAME` AS '路线名称', `GUANCZMC` AS '观测站名称', `VOLUME` AS '总量（辆/日）'  FROM ptgl_gcznpjl  WHERE `ROAD_NAME` LIKE '%S339%' AND `GUANCZMC` = '苏州S339太仓东观测站'  ORDER BY `YEAR` DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS 年份,
  SUM(`TRUCK_DOWN`) AS `货车总下行量`
FROM
  ptgl_gcznpjl
WHERE
  `ROAD_ID` = 'G205'
  AND `GUANCZMC` LIKE '%东双沟%'
GROUP BY
  `YEAR`
ORDER BY
  `货车总下行量` ASC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', SUM(`TRUCK_DOWN`) AS '货车下行总量' FROM ptgl_gcznpjl WHERE `ROAD_NAME` LIKE '%G205%' AND `GUANCZMC` = '东双沟观测站' GROUP BY `YEAR` ORDER BY SUM(`TRUCK_DOWN`) ASC LIMIT 1;
gold_sql: SELECT
  `GUANCZMC` AS 观测站名称,
  `VOLUME` AS 交通量
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = YEAR(CURDATE()) -1
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', MAX(`VOLUME`) AS '最大交通量' FROM ptgl_gcznpjl WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM ptgl_gcznpjl) GROUP BY `GUANCZMC` ORDER BY `最大交通量` DESC LIMIT 1;
gold_sql: SELECT
  ROAD_ID AS 道路编号,
  `YEAR` As 年份,
  SUM(COACH_UP + COACH_DOWN) AS '日均客车流量'
FROM
  ptgl_gcznpjl
WHERE
  ROAD_ID = 'S339'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      ptgl_gcznpjl
  )
GROUP BY
  ROAD_ID,
  `YEAR`;
pred_sql: SELECT AVG(`COACH_UP` + `COACH_DOWN`) AS '日均客车流量' FROM ptgl_gczypjl WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM ptgl_gczypjl);
gold_sql: SELECT
  GUANCZMC As 观测站名称,
  VOLUME AS 交通量
FROM
  ptgl_gcznpjl
WHERE
  `ROAD_ID` = 'S339'
  AND `YEAR` = (
    SELECT
      MAX(CAST(`YEAR` AS UNSIGNED))
    FROM
      ptgl_gcznpjl
  )
ORDER BY
  GUANCZMC;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', `VOLUME` AS '交通量'  FROM ptgl_gcznpjl  WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM ptgl_gcznpjl) AND `ROAD_NAME` LIKE '%S339国省干线%';
gold_sql: SELECT
  `VOLUME` AS `总车流量`
FROM
  `ptgl_gcznpjl`
WHERE
  `GUANCZMC` = '徐州S121王林'
  AND `YEAR` = 2024;
pred_sql: SELECT SUM(`VOLUME`) AS '总车流量' FROM `ptgl_gcznpjl` WHERE `GUANCZMC` = '徐州S121王林观测站' AND `YEAR` = 2024;
gold_sql: SELECT
  YEAR AS 年份,
  MONTH AS 月份
FROM
  PTGL_DMLL_TJ
WHERE
  GUANCZMC LIKE '%无锡G312新安%'
ORDER BY
  NUM DESC
LIMIT
  1;
pred_sql: SELECT `MONTH` AS '月份', SUM(`NUM`) AS '总车流量' FROM `ptgl_dmll_tj` WHERE `GUANCZMC` = '无锡G312新安观测站' GROUP BY `MONTH` ORDER BY SUM(`NUM`) DESC LIMIT 1;
gold_sql: SELECT
  COACH_UP AS 客车上行量
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = '2018'
  AND ROAD_ID = 'S339';
pred_sql: SELECT `COACH_UP` AS '客车上行量' FROM ptgl_gcznpjl WHERE `YEAR` = 2018 AND `ROAD_ID` = 'S339';
gold_sql: SELECT
  AVG(VOLUME) AS `平均车流量`
FROM
  PTGL_GCZNPJL
WHERE
  `YEAR` = 2018
  AND `ROAD_NAME` = '纪百线';
pred_sql: SELECT `GUANCZMC` AS '观测站名称', AVG(`VOLUME`) AS '平均车流量' FROM `ptgl_gcznpjl` WHERE `YEAR` = 2018 GROUP BY `GUANCZMC`;
gold_sql: SELECT
  GUANCZMC AS 观测站名称,
  TRUCK_DOWN AS 货车下行数量
FROM
  ptgl_gcznpjl
WHERE
  `ROAD_ID` = 'S339'
  AND `YEAR` = '2018'
ORDER BY
  `YEAR` DESC,
  id DESC
pred_sql: SELECT SUM(`TRUCK_DOWN`) AS '货车下行数量' FROM `ptgl_gcznpjl` WHERE `YEAR` = 2018 AND `ROAD_ID` = 'S339';
gold_sql: SELECT
  `GUANCZMC` AS 观测站名称,
  (`COACH_UP` + `COACH_DOWN`) AS `客车上下行总量`
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = '2018'
ORDER BY
  `客车上下行总量` DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`COACH_UP` + `COACH_DOWN`) AS '客车上下行总量' FROM `ptgl_gcznpjl` WHERE `YEAR` = 2018 GROUP BY `GUANCZMC` ORDER BY `客车上下行总量` DESC LIMIT 1;
gold_sql: SELECT
  guanczmc AS 观察站名称,
  total_coach_2018 AS 2018年客车总量,
  total_coach_2019 AS 2019年客车总量
FROM
  (
    SELECT
      guanczmc,
      SUM(
        CASE
          WHEN `YEAR` = '2018' THEN COACH_UP + COACH_DOWN
        END
      ) AS total_coach_2018,
      SUM(
        CASE
          WHEN `YEAR` = '2019' THEN COACH_UP + COACH_DOWN
        END
      ) AS total_coach_2019
    FROM
      ptgl_gcznpjl
    WHERE
      ROAD_ID = 'G233'
      AND (
        `YEAR` = '2018'
        OR `YEAR` = '2019'
      )
    GROUP BY
      guanczmc
    HAVING
      SUM(
        CASE
          WHEN `YEAR` = '2019' THEN COACH_UP + COACH_DOWN
        END
      ) < SUM(
        CASE
          WHEN `YEAR` = '2018' THEN COACH_UP + COACH_DOWN
        END
      )
  ) AS combined;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`VOLUME`) AS '2019年客车总量' FROM `ptgl_gcznpjl` WHERE `YEAR` = 2019 AND `ROAD_ID` LIKE 'G233%' GROUP BY `GUANCZMC` HAVING SUM(`VOLUME`) < (SELECT SUM(`VOLUME`) FROM `ptgl_gcznpjl` WHERE `YEAR` = 2018 AND `ROAD_ID` LIKE 'G233%' GROUP BY `GUANCZMC`);
gold_sql: SELECT
  ROAD_NAME AS 道路名称,
  GUANCZMC AS 观测站名称,
  TRUCK_DOWN AS 货车下行数量
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      ptgl_gcznpjl
  )
ORDER BY
  TRUCK_DOWN DESC
LIMIT
  1;
pred_sql: SELECT `ROAD_NAME` AS '国省干线路段', SUM(`TRUCK_DOWN`) AS '货车下行数量' FROM ptgl_gcznpjl WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM ptgl_gcznpjl) GROUP BY `ROAD_NAME` ORDER BY SUM(`TRUCK_DOWN`) DESC LIMIT 1;
gold_sql: SELECT
  `ROAD_NAME` AS 道路名称,
  ABS(`COACH_UP` - `COACH_DOWN`) AS `客车上下行差值`
FROM
  ptgl_gcznpjl
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      ptgl_gcznpjl
  )
ORDER BY
  `客车上下行差值` ASC;
pred_sql: SELECT `ROAD_NAME` AS '路线名称', ABS(SUM(`COACH_UP` - `COACH_DOWN`)) AS '客车上下行最不均衡值' FROM `ptgl_gcznpjl` GROUP BY `ROAD_NAME` ORDER BY `客车上下行最不均衡值` DESC LIMIT 1;
gold_sql: SELECT
  VOLUME_MOUNTH AS `月均车流量`
FROM
  gsgl_od_flow_tj
WHERE
  `MONTH` = '10'
  AND `O_CITY` = '淮安市'
  AND `O_DISTRICTS` = '盱眙县'
  AND `D_CITY` = '扬州市'
  AND `D_DISTRICTS` = '仪征市'
  AND `CAR_TYPE` = '客车'
  AND `YEAR` = CONCAT(YEAR(CURDATE()) - 1);
pred_sql: SELECT AVG(`VOLUME_MOUNTH`) AS '月均车流量' FROM `GSGL_OD_FLOW_TJ` WHERE `YEAR` = YEAR(CURDATE()) - 1   AND `MONTH` = '10'   AND `O_PROVINCE` = '淮安市'   AND `O_CITY` = ''   AND `O_DISTRICTS` = '盱眙县'   AND `D_PROVINCE` = '扬州市'   AND `D_CITY` = '仪征市'   AND `D_DISTRICTS` = '';
gold_sql: SELECT
  `MONTH` AS 月份,
  MAX(VOLUME_MOUNTH) AS `货车流量`
FROM
  gsgl_od_flow_tj
WHERE
  `YEAR` = '2023'
  AND O_PROVINCE = '安徽省'
  AND D_PROVINCE = '江苏省'
  AND CAR_TYPE = '货车'
GROUP BY
  `MONTH`
ORDER BY
  `货车流量` DESC
LIMIT
  1;
pred_sql: SELECT `MONTH` AS '月份', SUM(`VOLUME_MOUNTH`) AS '车流量' FROM gsgl_od_flow_tj WHERE `YEAR` = '2023' AND `O_PROVINCE` = '安徽省' AND `D_PROVINCE` = '江苏省' GROUP BY `MONTH` ORDER BY SUM(`VOLUME_MOUNTH`) DESC LIMIT 1;
gold_sql: SELECT      `O_PROVINCE` AS `省份`,     MAX(`VOLUME`) AS `最大高速公路入口车流量（辆/天）` FROM      gsgl_crk_zysflr WHERE      `GCRQ` BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY      `O_PROVINCE` ORDER BY      `最大高速公路入口车流量（辆/天）` DESC LIMIT 1;
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`VOLUME`) AS '车流量' FROM gsgl_crk_zysflr WHERE `GCRQ` BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY `O_PROVINCE` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT      O_DISTRICTS AS `入口区县`,     SUM(VOLUME_MOUNTH) AS `流入车流量（辆）` FROM      gsgl_od_flow_tj WHERE      GCRQ BETWEEN '2024-05-07' AND '2024-05-09'     AND VOLUME_MOUNTH > 2000 GROUP BY      O_DISTRICTS HAVING      SUM(VOLUME_MOUNTH) > 2000;
pred_sql: SELECT `O_DISTRICTS` AS '区县', SUM(`VOLUME_MOUNTH`) AS '流入车流量' FROM `gsgl_od_flow_tj` WHERE `GCRQ` BETWEEN '2024-05-07' AND '2024-05-09' GROUP BY `O_DISTRICTS` HAVING SUM(`VOLUME_MOUNTH`) > 2000;
gold_sql: SELECT
  D_PROVINCE AS 出口省,
  D_CITY AS 出口市,
  D_DISTRICTS 出口县区,
  SUM(VOLUME_MOUNTH) AS 出口车流量
FROM
  gsgl_od_flow_tj
WHERE
  `MONTH` = '10'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      gsgl_od_flow_tj
  )
GROUP BY
  D_PROVINCE,
  D_CITY,
  D_DISTRICTS
ORDER BY
  出口车流量 ASC
LIMIT
  1;
pred_sql: SELECT `D_DISTRICTS` AS '区县', SUM(`VOLUME_MOUNTH`) AS '出口车流量' FROM `gsgl_od_flow_tj` WHERE `YEAR` = YEAR(CURDATE()) AND `MONTH` = '10' GROUP BY `D_DISTRICTS` ORDER BY `出口车流量` ASC LIMIT 1;
gold_sql: SELECT      `O_PROVINCE` AS `省份`,      `O_CITY` AS `城市`,      `O_DISTRICTS` AS `区县`,     SUM(`VOLUME_MOUNTH`) AS `10月份客车流量（辆）` FROM      gsgl_od_flow_tj WHERE      `CAR_TYPE` = '客车'     AND `YEAR` = '2023'     AND `MONTH` = '10' GROUP BY      `O_PROVINCE`, `O_CITY`, `O_DISTRICTS` ORDER BY      `10月份客车流量（辆）` DESC LIMIT 10;
pred_sql: SELECT `O_PROVINCE` AS '省份', `O_CITY` AS '城市', `O_DISTRICTS` AS '区县', SUM(`VOLUME_MOUNTH`) AS '车流量' FROM `gsgl_od_flow_tj` WHERE `YEAR` = '2023' AND `MONTH` = '10' AND `CAR_TYPE` = '客车' GROUP BY `O_PROVINCE`, `O_CITY`, `O_DISTRICTS` ORDER BY `车流量` DESC LIMIT 10;
gold_sql: SELECT
  `CAR_TYPE` AS 车辆类型,
  `VOLUME` AS `车流量`
FROM
  gsgl_od_flow_tj
WHERE
  `GCRQ` = '2023-10-01'
  AND `O_PROVINCE` = '江苏省'
  AND `O_DISTRICTS` = '盱眙县'
  AND `D_CITY` = '扬州市'
  AND `D_DISTRICTS` = '仪征市';
pred_sql: SELECT `CAR_TYPE` AS '车型', SUM(`VOLUME`) AS '车流量' FROM `gsgl_od_flow_tj` WHERE `GCRQ` = '2023-10-01' AND `O_PROVINCE` = '江苏省' AND `O_CITY` = '仪征市' AND `D_DISTRICTS` = '盱眙县' GROUP BY `CAR_TYPE`;
gold_sql: SELECT      MAX(CASE WHEN `MONTH` = '09' THEN VOLUME_MOUNTH END) AS `上月车流量`,     MAX(CASE WHEN `MONTH` = '10' THEN VOLUME_MOUNTH END) AS `本月车流量` FROM      gsgl_od_flow_tj  WHERE      `YEAR` = '2023'      AND `O_CITY` = '淮安市'      AND `O_DISTRICTS` = '盱眙县'      AND `D_CITY` = '扬州市'      AND `D_DISTRICTS` = '仪征市'      AND `CAR_TYPE` = '客车'     AND (`MONTH` = '09' OR `MONTH` = '10');
pred_sql: SELECT `VOLUME_MOUNTH` AS '2023年10月车流量', LAG(`VOLUME_MOUNTH`, 1) OVER (ORDER BY `GCRQ`) AS '2023年9月车流量' FROM `gsgl_od_flow_tj` WHERE `YEAR` = '2023' AND `MONTH` = '10' AND `O_PROVINCE` = '江苏省' AND `O_CITY` = '淮安市' AND `O_DISTRICTS` = '盱眙县' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '扬州市' AND `D_DISTRICTS` = '仪征市' AND `CAR_TYPE` = '客车';
gold_sql: SELECT
  `O_PROVINCE` AS `省份`,
  (
    SUM(
      CASE
        WHEN `MONTH` = '10' THEN `VOLUME_MOUNTH`
        ELSE 0
      END
    )
  ) AS `本月货车流量`,
  (
    SUM(
      CASE
        WHEN `MONTH` = '09' THEN `VOLUME_MOUNTH`
        ELSE 0
      END
    )
  ) AS `上月货车流量`,
  (
    SUM(
      CASE
        WHEN `MONTH` = '10' THEN `VOLUME_MOUNTH`
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN `MONTH` = '09' THEN `VOLUME_MOUNTH`
        ELSE 0
      END
    )
  ) / NULLIF(
    SUM(
      CASE
        WHEN `MONTH` = '09' THEN `VOLUME_MOUNTH`
        ELSE 0
      END
    ),
    0
  ) AS `增幅`
FROM
  gsgl_od_flow_tj
WHERE
  `CAR_TYPE` = '货车'
  AND `YEAR` = '2023'
  AND (
    `MONTH` = '10'
    OR `MONTH` = '09'
  )
GROUP BY
  `O_PROVINCE`
ORDER BY
  `增幅` DESC
LIMIT
  1;
pred_sql: SELECT      `O_PROVINCE` AS `省份`,     SUM(CASE WHEN `MONTH` = '2023-10' THEN `VOLUME_MOUNTH` ELSE 0 END) AS `2023年10月车流量`,     SUM(CASE WHEN `MONTH` = '2023-09' THEN `VOLUME_MOUNTH` ELSE 0 END) AS `2023年09月车流量`,     ((SUM(CASE WHEN `MONTH` = '2023-10' THEN `VOLUME_MOUNTH` ELSE 0 END) - SUM(CASE WHEN `MONTH` = '2023-09' THEN `VOLUME_MOUNTH` ELSE 0 END)) / SUM(CASE WHEN `MONTH` = '2023-09' THEN `VOLUME_MOUNTH` ELSE 0 END)) * 100 AS `增幅百分比` FROM      `gsgl_od_flow_tj` WHERE      `CAR_TYPE` = '高速公路货车' AND (`MONTH` = '2023-10' OR `MONTH` = '2023-09') GROUP BY      `O_PROVINCE` ORDER BY      `增幅百分比` DESC LIMIT 1;
gold_sql: SELECT    O_CITY AS `城市`,   AVG(VOLUME) AS `平均客车流量` FROM   gsgl_od_flow_tj WHERE   O_PROVINCE = '江苏省' AND   CAR_TYPE = '客车' AND   GCRQ BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY   O_CITY ORDER BY   AVG(VOLUME) DESC;
pred_sql: SELECT `O_CITY` AS '城市', AVG(`VOLUME_MOUNTH`) AS '平均客车流量' FROM `gsgl_od_flow_tj` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31'   AND `O_PROVINCE` = '江苏省'   AND `CAR_TYPE` = '客车' GROUP BY `O_CITY` ORDER BY `平均客车流量` DESC;
gold_sql: SELECT     `O_DISTRICTS` AS `出发区县`,     `D_DISTRICTS` AS `到达区县`,     SUM(`VOLUME_MOUNTH`) AS `货车流量` FROM     gsgl_od_flow_tj WHERE     `YEAR` = '2023'     AND `MONTH` = '10'     AND `CAR_TYPE` = '货车'     AND `O_DISTRICTS` = '新北区' GROUP BY     `D_DISTRICTS` ORDER BY     `货车流量` DESC;
pred_sql: SELECT `D_DISTRICTS` AS '目的地区县', SUM(`VOLUME`) AS '货车流量' FROM `GSGL_OD_FLOW_TJ` WHERE `YEAR` = '2023' AND `MONTH` = '10' AND `O_PROVINCE` LIKE '%新北区%' AND `O_CITY` LIKE '%新北区%' GROUP BY `D_DISTRICTS`;
gold_sql: SELECT      `CAR_TYPE` AS `车型`,     SUM(`VOLUME_MOUNTH`) AS `车流量（辆）`,     (SUM(`VOLUME_MOUNTH`) / (SELECT SUM(`VOLUME_MOUNTH`) FROM gsgl_od_flow_tj WHERE `O_CITY` = '南通市' AND `YEAR` = '2023' AND `MONTH` = '10') * 100) AS `占比（%）` FROM      gsgl_od_flow_tj WHERE      `O_CITY` = '南通市'     AND `YEAR` = '2023'     AND `MONTH` = '10' GROUP BY      `CAR_TYPE` ORDER BY      `车流量（辆）` DESC LIMIT 1;
pred_sql: SELECT `CAR_TYPE`, SUM(`VOLUME_MOUNTH`) AS `总车流量`,         ROUND((SUM(`VOLUME_MOUNTH`) / (SELECT SUM(`VOLUME_MOUNTH`) FROM `gsgl_od_flow_tj` WHERE `YEAR` = '2023' AND `MONTH` = '10' AND `O_CITY` LIKE '%南通%')) * 100, 2) AS `占比` FROM `gsgl_od_flow_tj` WHERE `YEAR` = '2023' AND `MONTH` = '10' AND `O_CITY` LIKE '%南通%' GROUP BY `CAR_TYPE` ORDER BY `占比` DESC LIMIT 1;
gold_sql: SELECT
  SUM(
    CASE
      WHEN DAYOFWEEK(GCRQ) BETWEEN 2 AND 6  THEN CHELL
      ELSE 0
    END
  ) AS `工作日车流量`,
  SUM(
    CASE
      WHEN DAYOFWEEK(GCRQ) IN (1, 7) THEN CHELL
      ELSE 0
    END
  ) AS `周末车流量`
FROM
  gsgl_od_flow
WHERE
  GCRQ >= '2023-11-01'
  AND GCRQ <= '2023-11-30'
  AND O_PROVINCE = '江苏省'
  AND O_CITY = '淮安市'
  AND O_DISTRICTS = '清江浦区'
  AND D_CITY = '仪征市'
  AND CHELLX = '客车'
pred_sql: SELECT `GCRQ`, SUM(CASE WHEN DAYOFWEEK(`GCRQ`) IN (2, 3, 4, 5, 6) THEN `CHELL` ELSE 0 END) AS '工作日客车流量', SUM(CASE WHEN DAYOFWEEK(`GCRQ`) IN (1, 7) THEN `CHELL` ELSE 0 END) AS '周末客车流量' FROM `gsgl_od_flow` WHERE `O_PROVINCE` = '江苏省' AND `O_CITY` = '淮安市' AND `O_DISTRICTS` = '清江浦区' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '仪征市' AND `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY `GCRQ`;
gold_sql: SELECT      `O_CITY` AS `城市`,      SUM(`VOLUME_MOUNTH`) AS `10月份总车流量（辆）` FROM      gsgl_od_flow_tj  WHERE      `YEAR` = '2023'      AND `MONTH` = '10'  GROUP BY      `O_CITY` ORDER BY      `10月份总车流量（辆）` DESC  LIMIT 1;
pred_sql: SELECT `O_CITY` AS '城市', SUM(`VOLUME_MOUNTH`) AS '总车流量' FROM `gsgl_od_flow_tj` WHERE `YEAR` = '2023' AND `MONTH` = '10' GROUP BY `O_CITY` ORDER BY `总车流量` DESC LIMIT 1;
gold_sql: SELECT      GCRQ AS `观测日期`,     CHELLX AS `车辆类型`,     SUM(CHELL) AS `货车流量（辆/天）` FROM      gsgl_od_flow  WHERE      GCRQ = '2023-11-15'      AND D_CITY = '南京市'      AND D_DISTRICTS = '栖霞区'      AND CHELLX LIKE '货%' GROUP BY      GCRQ, CHELLX;
pred_sql: SELECT `CHELL` AS '车流量（辆/天）' FROM gsgl_od_flow WHERE `GCRQ` = '2023-11-15' AND `O_PROVINCE` = '江苏省' AND `O_CITY` = '南京市' AND `O_DISTRICTS` = '栖霞区' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区' AND `CHELLX` = '高速公路货车';
gold_sql: SELECT CHELLX AS `最少车流量的车型` FROM gsgl_od_flow WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow) ORDER BY CHELL ASC LIMIT 1;
pred_sql: SELECT `CHELLX` AS '车型', SUM(`CHELL`) AS '总车流量' FROM gsgl_od_flow WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_od_flow) GROUP BY `CHELLX` ORDER BY SUM(`CHELL`) ASC LIMIT 1;
gold_sql: SELECT
  prev_year.O_DISTRICTS AS '入口区县',
  prev_year.VOLUME_MOUNTH AS '去年车流量',
  this_year.VOLUME_MOUNTH AS '今年车流量',
  (this_year.VOLUME_MOUNTH - prev_year.VOLUME_MOUNTH) AS '增长量'
FROM
  gsgl_od_flow_tj prev_year
  JOIN gsgl_od_flow_tj this_year ON prev_year.O_DISTRICTS = this_year.O_DISTRICTS
WHERE
  prev_year.GCRQ BETWEEN '2023-06-01' AND '2023-06-30'
  AND this_year.GCRQ BETWEEN '2024-06-01' AND '2024-06-30'
ORDER BY
  `增长量` DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS` AS '入口区县', SUM(`VOLUME_MOUNTH`) AS '车流量增长' FROM gsgl_od_flow_tj WHERE `GCRQ` BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY `O_DISTRICTS` ORDER BY `车流量增长` DESC LIMIT 1;
gold_sql: SELECT
  CHELLX AS 最稳定车型,
  AVG(CHELL) AS 平均车流量,
  STDDEV(CHELL) AS 车流量标准差
FROM
  GSGL_OD_FLOW
WHERE
  GCRQ BETWEEN ' 2024-01-01' AND '2024-03-31'
GROUP BY
  CHELLX
ORDER BY
  STDDEV(CHELL) ASC
LIMIT
  1;
pred_sql: SELECT `CHELLX` AS '车型', STDDEV(`CHELL`) AS '标准差' FROM gsgl_od_flow WHERE QUARTER(`GCRQ`) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(`GCRQ`) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) GROUP BY `CHELLX` ORDER BY STDDEV(`CHELL`) ASC LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观察日期
FROM
  r_gsgl_z
WHERE
  SHFX_JTLL > 8
ORDER BY
  GCRQ;
pred_sql: SELECT `GCRQ` AS '日期'  FROM r_gsgl_z  WHERE `SHFX_JTLL` > 8;
gold_sql: SELECT
  GCRQ as `观测日期`,
  RTXZK as `日通行状况`
FROM
  r_gsgl_z
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-03';
pred_sql: SELECT `GCRQ` AS '观测日期', `GSGL_JTLL` AS '高速公路车流量（万辆/天）', `SHFX_JTLL` AS '上海方向高速车流量（万辆/天）', `XSSD` AS '高速公路行驶速度（千米/小时）', `LWCTL` AS '高速公路路网畅通率', `DRLLHB` AS '当日高速公路车流量环比', `GSHYL` AS '高速公路货运量（吨）', `DYLJHYL` AS '当月累计高速公路货运量（吨）', `DRHYLHB` AS '当日高速公路货运量环比', `RTXZK` AS '日通行状况', `CTQK` AS '畅通情况' FROM `r_gsgl_z` WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-03';
gold_sql: SELECT
  GCRQ AS `观测日期`,
  GSGL_JTLL AS `高速公路车流量（万辆/天）`,
  SHFX_JTLL AS `上海方向高速车流量（万辆/天）`,
  XSSD AS `高速公路行驶速度（千米/小时）`,
  LWCTL AS `高速公路路网畅通率`,
  GSHYL AS `高速公路货运量（吨）`,
  RTXZK AS `日通行状况`,
  CTQK AS `畅通情况`
FROM
  R_GSGL_Z
ORDER BY
  XSSD DESC
LIMIT
  5;
pred_sql: SELECT `GCRQ` AS '观测日期', `XSSD` AS '高速公路行驶速度'  FROM r_gsgl_z  ORDER BY `XSSD` DESC  LIMIT 5;
gold_sql: SELECT
  AVG(GSGL_JTLL) as `平均车流量(万辆/天)`
FROM
  r_gsgl_z
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-30';
pred_sql: SELECT AVG(`GSGL_JTLL`) AS '平均车流量' FROM `r_gsgl_z` WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30';
gold_sql: SELECT GCRQ as `车流量最小的日期` FROM r_gsgl_z WHERE GCRQ BETWEEN '2024-04-01' AND '2024-06-30' ORDER BY GSGL_JTLL ASC LIMIT 1;
pred_sql: SELECT `GCRQ` AS '日期', `GSGL_JTLL` AS '高速公路车流量' FROM r_gsgl_z WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-06-30' ORDER BY `GSGL_JTLL` ASC LIMIT 1;
gold_sql: SELECT
  GCRQ AS '观测日期',
  GSGL_JTLL AS '高速公路车流量（万辆/天）',
  SHFX_JTLL AS '上海方向高速车流量（万辆/天）',
  XSSD AS '高速公路行驶速度（千米/小时）',
  LWCTL AS '高速公路路网畅通率',
  DRLLHB AS '当日高速公路车流量环比',
  GSHYL AS '高速公路货运量（吨）',
  DYLJHYL AS '当月累计高速公路货运量（吨）',
  DRHYLHB AS '当日高速公路货运量环比',
  RTXZK AS '日通行状况',
  CTQK AS '畅通情况'
FROM
  R_GSGL_Z
WHERE
  CTQK = '优'
ORDER BY
  GCRQ DESC;
pred_sql: SELECT `GCRQ` AS '观测日期', `GSGL_JTLL` AS '高速公路车流量（万辆/天）', `SHFX_JTLL` AS '上海方向高速车流量（万辆/天）', `XSSD` AS '高速公路行驶速度（千米/小时）', `LWCTL` AS '高速公路路网畅通率', `DRLLHB` AS '当日高速公路车流量环比', `GSHYL` AS '高速公路货运量（吨）', `DYLJHYL` AS '当月累计高速公路货运量（吨）', `DRHYLHB` AS '当日高速公路货运量环比', `RTXZK` AS '日通行状况', `CTQK` AS '畅通情况' FROM `r_gsgl_z` WHERE `CTQK` = '优';
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  r_gsgl_z
WHERE
  GSGL_JTLL > 150
pred_sql: SELECT COUNT(*) AS `超过150万辆/天记录数` FROM `r_gsgl_z` WHERE `GSGL_JTLL` > 150;
gold_sql: SELECT   
    CASE   
        WHEN MONTH(GCRQ) BETWEEN 1 AND 3 THEN 'Q1'   
        WHEN MONTH(GCRQ) BETWEEN 4 AND 6 THEN 'Q2'   
        WHEN MONTH(GCRQ) BETWEEN 7 AND 9 THEN 'Q3'   
        WHEN MONTH(GCRQ) BETWEEN 10 AND 12 THEN 'Q4'   
    END AS '季度',  
    AVG(GSGL_JTLL) as '平均高速公路车流量（万辆/天）'  
FROM r_gsgl_z  
GROUP BY   
    CASE   
        WHEN MONTH(GCRQ) BETWEEN 1 AND 3 THEN 'Q1'   
        WHEN MONTH(GCRQ) BETWEEN 4 AND 6 THEN 'Q2'   
        WHEN MONTH(GCRQ) BETWEEN 7 AND 9 THEN 'Q3'   
        WHEN MONTH(GCRQ) BETWEEN 10 AND 12 THEN 'Q4'   
    END;
pred_sql: SELECT      CONCAT(YEAR(`GCRQ`), ' Q', QUARTER(`GCRQ`)) AS `季度`,     AVG(`GSGL_JTLL`) AS `平均高速公路车流量` FROM      r_gsgl_z GROUP BY      YEAR(`GCRQ`), QUARTER(`GCRQ`);
gold_sql: SELECT
  GCRQ As 观察日期,
  LWCTL AS `高速公路总体畅通率`
FROM
  r_gsgl_z
WHERE
  GSGL_JTLL = (
    SELECT
      MAX(GSGL_JTLL)
    FROM
      r_gsgl_z
  );
pred_sql: SELECT `LWCTL` AS '高速公路总体畅通率'  FROM r_gsgl_z  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM r_gsgl_z);
gold_sql: SELECT EXISTS(SELECT 1 FROM r_gsgl_z WHERE RTXZK = '' OR RTXZK IS NULL) AS '存在空日通行状况记录';
pred_sql: SELECT `RTXZK` FROM r_gsgl_z WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM r_gsgl_z) AND `RTXZK` IS NULL;
gold_sql: SELECT
  GCRQ as `观测日期`,
  GSGL_JTLL as `高速公路车流量`
FROM
  r_gsgl_z
WHERE
  GSGL_JTLL > (
    SELECT
      GSGL_JTLL
    FROM
      r_gsgl_z
    WHERE
      GCRQ = '2024-05-31'
  );
pred_sql: SELECT *  FROM r_gsgl_z  WHERE GCRQ = (SELECT MAX(GCRQ) FROM r_gsgl_z)  AND GSGL_JTLL > (     SELECT SUM(GSGL_JTLL)      FROM r_gsgl_z      WHERE GCRQ BETWEEN '2024-05-01' AND '2024-05-31' );
gold_sql: SELECT      DATE_FORMAT(GCRQ, '%Y-%m-01') AS `每月第一天`,      MAX(GSGL_JTLL) AS `高速公路车流量（万辆/天）` FROM      r_gsgl_z WHERE      GCRQ >= '2023-01-01' AND GCRQ < '2024-01-01' -- 限定2023年的数据 GROUP BY      `每月第一天` ORDER BY      `每月第一天`;
pred_sql: SELECT `GCRQ` AS '观测日期', `GSGL_JTLL` AS '高速公路车流量（万辆/天）'  FROM r_gsgl_z  WHERE `GCRQ` IN (     SELECT MIN(`GCRQ`)      FROM r_gsgl_z      WHERE YEAR(`GCRQ`) = 2023      GROUP BY MONTH(`GCRQ`) );
gold_sql: SELECT
  COUNT(*) AS 高速公路总体行驶速度超过100千米每小时的日期总数
FROM
  r_gsgl_z
WHERE
  XSSD > 100;
pred_sql: SELECT COUNT(DISTINCT `GCRQ`) AS '超过100千米/小时的日期数量' FROM `r_gsgl_z` WHERE `XSSD` > 100;
gold_sql: SELECT GCRQ FROM r_gsgl_z WHERE DRHYLHB > 10;
pred_sql: SELECT `GCRQ` AS '日期' FROM r_gsgl_z WHERE `DRHYLHB` > 10;
gold_sql: SELECT
  COUNT(*) AS 日期总数
FROM
  r_gsgl_z
WHERE
  SHFX_JTLL < 10
  AND XSSD > 80;
pred_sql: SELECT COUNT(DISTINCT `GCRQ`) AS `符合条件的日期数量` FROM `r_gsgl_z` WHERE `SHFX_JTLL` < 10 AND `XSSD` > 80;
gold_sql: SELECT
  GCRQ AS 日期
FROM
  r_gsgl_z
WHERE
  DYLJHYL > 20000
  AND GCRQ BETWEEN '2024-06-01' AND '2024-06-04';
pred_sql: SELECT `GCRQ` AS '日期'  FROM r_gsgl_z  WHERE `DYLJHYL` > 20000  AND `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30';
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  r_gsgl_z
WHERE
  RTXZK LIKE '%拥堵指数较低%'
  AND CTQK = '优';
pred_sql: SELECT `GCRQ` AS '日期' FROM r_gsgl_z WHERE `GSGL_JTLL` < 1000 AND `LWCTL` > 80;
gold_sql: SELECT
  COUNT(GCRQ) AS 日期总数
FROM
  r_gsgl_z
WHERE
  LWCTL < 90;
pred_sql: SELECT COUNT(DISTINCT `GCRQ`) AS `低于90的日期数量` FROM `r_gsgl_z` WHERE `LWCTL` < 90;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  r_gsgl_z
WHERE
  DRLLHB > 5;
pred_sql: SELECT `GCRQ` AS '日期' FROM r_gsgl_z WHERE `DRLLHB` > 5;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  r_gsgl_z
WHERE
  XSSD = (
    SELECT
      MIN(XSSD)
    FROM
      r_gsgl_z
  );
pred_sql: SELECT `GCRQ` AS '日期', MIN(`XSSD`) AS '最低行驶速度' FROM `r_gsgl_z` GROUP BY `GCRQ` ORDER BY `最低行驶速度` ASC LIMIT 1;
gold_sql: SELECT
  COUNT(GCRQ) AS 日期总数
FROM
  r_gsgl_z
WHERE
  DRHYLHB < 0;
pred_sql: SELECT COUNT(*) AS `环比下降日期数量` FROM r_gsgl_z WHERE `DRHYLHB` < 0;
gold_sql: SELECT
  GCRQ 观测日期
FROM
  r_gsgl_z
WHERE
  RTXZK LIKE '%拥堵指数较低%';
pred_sql: SELECT `GCRQ` AS '日期' FROM r_gsgl_z WHERE `CTQK` = '拥堵指数较低';
gold_sql: SELECT
  AVG(GSGL_JTLL) as `日均高速公路车流量`
FROM
  r_gsgl_z
WHERE
  GCRQ BETWEEN '2024-05-27' AND '2024-06-02';
pred_sql: SELECT AVG(`GSGL_JTLL`) AS '日均高速公路车流量' FROM `r_gsgl_z` WHERE `GCRQ` BETWEEN '2024-05-27' AND '2024-06-02';
gold_sql: SELECT
  (
    SELECT
      GSHYL AS 高速公路货运量
    FROM
      r_gsgl_z
    WHERE
      GCRQ = '2024-06-04'
  ) AS '当前高速公路货运量（吨）',
  (
    SELECT
      GSHYL
    FROM
      r_gsgl_z
    WHERE
      GCRQ = '2024-05-28'
  ) AS '上周同日高速公路货运量（吨）',
  (
    SELECT
      GSHYL
    FROM
      r_gsgl_z
    WHERE
      GCRQ = '2024-06-04'
  ) - (
    SELECT
      GSHYL
    FROM
      r_gsgl_z
    WHERE
      GCRQ = '2024-05-28'
  ) AS '货运量变化（吨）'
FROM
  r_gsgl_z;
pred_sql: SELECT      `GCRQ`,      `GSHYL` AS '今日货运量',      LAG(`GSHYL`, 6) OVER (ORDER BY `GCRQ`) AS '上周同日货运量' FROM      r_gsgl_z WHERE      `GCRQ` IN ('2024-06-04', '2024-05-28');
gold_sql: SELECT
  GCRQ AS `日环比车流量增长最大的日期`
FROM
  r_gsgl_z
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-06-04'
ORDER BY
  DRLLHB DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', `DRLLHB` AS '日环比车流量增长' FROM r_gsgl_z WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-06-04' ORDER BY `DRLLHB` DESC LIMIT 1;
gold_sql: SELECT
  MAX(a.GCRQ) AS 路网畅通率连续三天超过百分之95的最近一次日期
FROM
  r_gsgl_z a
  JOIN r_gsgl_z b ON a.GCRQ = DATE_ADD(b.GCRQ, INTERVAL 1 DAY)
  AND b.LWCTL > 95
  JOIN r_gsgl_z c ON b.GCRQ = DATE_ADD(c.GCRQ, INTERVAL 1 DAY)
  AND c.LWCTL > 95
WHERE
  a.LWCTL > 95;
pred_sql: SELECT `GCRQ` AS '观测日期' FROM r_gsgl_z WHERE `LWCTL` > 95 ORDER BY `GCRQ` DESC LIMIT 1;
gold_sql: SELECT AVG(GSGL_JTLL) as `平均车流量` FROM r_gsgl_z WHERE GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT AVG(`GSGL_JTLL`) AS '上个季度平均每天的高速公路车流量' FROM `r_gsgl_z` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  r_gsgl_z
WHERE
  LWCTL < 80
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', `LWCTL` AS '高速公路路网畅通率' FROM r_gsgl_z WHERE `LWCTL` < 80 ORDER BY `GCRQ` DESC LIMIT 1;
gold_sql: SELECT
  MONTH(GCRQ) AS `车流量最高的月份`
FROM
  r_gsgl_z
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-06-04'
GROUP BY
  MONTH(GCRQ)
ORDER BY
  SUM(GSGL_JTLL) DESC
LIMIT
  1;
pred_sql: SELECT DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`, SUM(`GSGL_JTLL`) AS `总车流量` FROM r_gsgl_z WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-06-04' GROUP BY DATE_FORMAT(`GCRQ`, '%Y-%m') ORDER BY `总车流量` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ as `车流量最高的日期`
FROM
  r_gsgl_z
WHERE
  GCRQ BETWEEN '2024-05-27' AND '2024-06-02'
ORDER BY
  GSGL_JTLL DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', SUM(`GSGL_JTLL`) AS '高速公路车流量' FROM r_gsgl_z WHERE `GCRQ` BETWEEN '2024-05-27' AND '2024-06-02' GROUP BY `GCRQ` ORDER BY SUM(`GSGL_JTLL`) DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS '日期',
  STD(XSSD) AS '行驶速度最不稳定'
FROM
  r_gsgl_z
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-04'
GROUP BY
  GCRQ
ORDER BY
  STD(XSSD) DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', STDDEV(`XSSD`) AS '行驶速度标准差' FROM `r_gsgl_z` WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-04' GROUP BY `GCRQ` ORDER BY `行驶速度标准差` DESC LIMIT 1;
gold_sql: SELECT   (SUM(CASE WHEN GCRQ BETWEEN '2024-04-01' AND '2024-05-13' THEN GSHYL ELSE 0 END) / COUNT(DISTINCT CASE WHEN GCRQ BETWEEN '2024-04-01' AND '2024-05-13' THEN MONTH(GCRQ) END)) AS '本季度月均货运量',   (SUM(CASE WHEN GCRQ BETWEEN '2023-04-01' AND '2023-06-30' THEN GSHYL ELSE 0 END) / COUNT(DISTINCT CASE WHEN GCRQ BETWEEN '2023-04-01' AND '2023-06-30' THEN MONTH(GCRQ) END)) AS '去年同季度月均货运量',   ((SUM(CASE WHEN GCRQ BETWEEN '2024-04-01' AND '2024-05-13' THEN GSHYL ELSE 0 END) / COUNT(DISTINCT CASE WHEN GCRQ BETWEEN '2024-04-01' AND '2024-05-13' THEN MONTH(GCRQ) END)) -   (SUM(CASE WHEN GCRQ BETWEEN '2023-04-01' AND '2023-06-30' THEN GSHYL ELSE 0 END) / COUNT(DISTINCT CASE WHEN GCRQ BETWEEN '2023-04-01' AND '2023-06-30' THEN MONTH(GCRQ) END))) /   (SUM(CASE WHEN GCRQ BETWEEN '2023-04-01' AND '2023-06-30' THEN GSHYL ELSE 0 END) / COUNT(DISTINCT CASE WHEN GCRQ BETWEEN '2023-04-01' AND '2023-06-30' THEN MONTH(GCRQ) END)) AS '变化率' FROM r_gsgl_z WHERE GCRQ BETWEEN '2023-04-01' AND '2024-05-13';
pred_sql: SELECT      (SUM(CASE WHEN `GCRQ` BETWEEN '2024-04-01' AND '2024-05-13' THEN `GSHYL` ELSE 0 END) / COUNT(DISTINCT CASE WHEN `GCRQ` BETWEEN '2024-04-01' AND '2024-05-13' THEN `GCRQ` ELSE NULL END)) AS `本季度至今月均货运量`,     (SUM(CASE WHEN `GCRQ` BETWEEN '2023-04-01' AND '2023-06-30' THEN `GSHYL` ELSE 0 END) / COUNT(DISTINCT CASE WHEN `GCRQ` BETWEEN '2023-04-01' AND '2023-06-30' THEN `GCRQ` ELSE NULL END)) AS `去年同季度月均货运量`,     ((SUM(CASE WHEN `GCRQ` BETWEEN '2024-04-01' AND '2024-05-13' THEN `GSHYL` ELSE 0 END) / COUNT(DISTINCT CASE WHEN `GCRQ` BETWEEN '2024-04-01' AND '2024-05-13' THEN `GCRQ` ELSE NULL END)) - (SUM(CASE WHEN `GCRQ` BETWEEN '2023-04-01' AND '2023-06-30' THEN `GSHYL` ELSE 0 END) / COUNT(DISTINCT CASE WHEN `GCRQ` BETWEEN '2023-04-01' AND '2023-06-30' THEN `GCRQ` ELSE NULL END))) AS `变化量` FROM      r_gsgl_z;
gold_sql: SELECT `YEAR` AS `年份`, `VOLUME` AS `货运量（万吨）` FROM hd_nh_dm WHERE `YEAR` = '2021' AND `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段';
pred_sql: SELECT SUM(`VOLUME`) AS '2021年京杭运河蔺家坝船闸段货运量' FROM `hd_nh_dm` WHERE `YEAR` = '2021' AND `SEGMENT` = '蔺家坝船闸段';
gold_sql: SELECT `YEAR` AS `年份`, `MONTH` AS `月份`, MAX(`VOLUME`) AS `最大货运量（万吨）` FROM hd_nh_dm WHERE `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段' GROUP BY `YEAR`, `MONTH` ORDER BY `最大货运量（万吨）` DESC LIMIT 1;
pred_sql: SELECT `YEAR`, `MONTH`  FROM hd_nh_dm  WHERE `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段'  ORDER BY `VOLUME` DESC  LIMIT 1;
gold_sql: SELECT `YEAR` AS `年份`, SUM(`VOLUME`) AS `总货运量（万吨）` FROM hd_nh_dm WHERE `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段' GROUP BY `YEAR` ORDER BY `YEAR`;
pred_sql: SELECT `YEAR` AS '年份', SUM(`VOLUME`) AS '总货运量' FROM hd_nh_dm WHERE `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段' GROUP BY `YEAR`;
gold_sql: SELECT SEGMENT AS `航段`, SUM(VOLUME) AS `货运量（万吨）` FROM hd_nh_dm WHERE YEAR = '2021' AND CHANNEL = '京杭运河' GROUP BY SEGMENT;
pred_sql: SELECT `SEGMENT` AS '航段', SUM(`VOLUME`) AS '货运量（万吨）' FROM hd_nh_dm WHERE `YEAR` = '2021' GROUP BY `SEGMENT`;
gold_sql: SELECT
  SEGMENT AS 区段
FROM
  hd_nh_dm
WHERE
  YEAR = '2021'
  AND VOLUME > 500;
pred_sql: SELECT `SEGMENT` AS '航段'  FROM hd_nh_dm  WHERE `YEAR` = '2021' AND `VOLUME` > 500;
gold_sql: SELECT SUM(VOLUME) AS `货运量总和（万吨）` FROM hd_nh_dm WHERE YEAR = '2021';
pred_sql: SELECT SUM(`VOLUME`) AS `2021年货运量总和` FROM `hd_nh_dm` WHERE `YEAR` = '2021';
gold_sql: SELECT
  YEAR AS `年份`,
  SUM(VOLUME) AS `货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  YEAR BETWEEN '2021' AND '2024'
  AND CHANNEL = '京杭运河'
GROUP BY
  YEAR;
pred_sql: SELECT `YEAR` AS '年份', `MONTH` AS '月份', `CHANNEL` AS '航道名称', `SEGMENT` AS '航段', `VOLUME` AS '货运量（万吨）'  FROM hd_nh_dm  WHERE `YEAR` IN ('2021', '2022', '2023', '2024');
gold_sql: SELECT      (SELECT SUM(VOLUME) FROM hd_nh_dm WHERE YEAR = '2021' AND CHANNEL = '京杭运河') AS `2021年货运量`,     (SELECT SUM(VOLUME) FROM hd_nh_dm WHERE YEAR = '2020' AND CHANNEL = '京杭运河') AS `2020年货运量`,     (SELECT SUM(VOLUME) FROM hd_nh_dm WHERE YEAR = '2021' AND CHANNEL = '京杭运河') -     (SELECT SUM(VOLUME) FROM hd_nh_dm WHERE YEAR = '2020' AND CHANNEL = '京杭运河') AS `变化量` 
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2021' THEN `VOLUME` ELSE 0 END) AS '2021年货运量', SUM(CASE WHEN `YEAR` = '2020' THEN `VOLUME` ELSE 0 END) AS '2020年货运量', (SUM(CASE WHEN `YEAR` = '2021' THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2020' THEN `VOLUME` ELSE 0 END)) AS '变化量' FROM `hd_nh_dm` WHERE `CHANNEL` = '京杭运河';
gold_sql: SELECT SEGMENT AS `航段`, VOLUME AS `货运量（万吨）` FROM hd_nh_dm WHERE YEAR = '2021' AND CHANNEL = '京杭运河' ORDER BY VOLUME ASC LIMIT 1;
pred_sql: SELECT `SEGMENT` AS '航段', MIN(`VOLUME`) AS '最小货运量' FROM hd_nh_dm WHERE `YEAR` = '2021' GROUP BY `SEGMENT` ORDER BY `最小货运量` ASC LIMIT 1;
gold_sql: SELECT
  CHANNEL AS 航段,
  SUM(VOLUME) AS `货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  YEAR = '2021'
GROUP BY
  CHANNEL
ORDER BY
  `货运量（万吨）` DESC;
pred_sql: SELECT `CHANNEL`, `SEGMENT`, SUM(`VOLUME`) AS `货运总量`, RANK() OVER (PARTITION BY `CHANNEL` ORDER BY SUM(`VOLUME`) DESC) AS `排名` FROM hd_nh_dm WHERE `YEAR` = '2021' GROUP BY `CHANNEL`, `SEGMENT` ORDER BY `CHANNEL`, `排名`;
gold_sql: SELECT   CONCAT(ROUND(SUM(CASE WHEN `SEGMENT` IN ('蔺家坝船闸段','解台船闸段') THEN `VOLUME` ELSE 0 END) / SUM(`VOLUME`) * 100, 2), '%') AS `占比` FROM hd_nh_dm WHERE `YEAR` = '2021' AND `CHANNEL` = '京杭运河';
pred_sql: SELECT      (SUM(CASE WHEN `SEGMENT` = '蔺家坝船闸至解台船闸' THEN `VOLUME` ELSE 0 END) / SUM(`VOLUME`)) * 100 AS `2021年京杭运河蔺家坝船闸至解台船闸段的货运量占京杭运河所有航道断面货运量的比例` FROM      hd_nh_dm WHERE      `YEAR` = '2021';
gold_sql: SELECT      SEGMENT AS `航段`,      SUBSTRING_INDEX(         SUBSTRING_INDEX(             GROUP_CONCAT(VOLUME ORDER BY VOLUME SEPARATOR ','),              ',',              CEIL(COUNT(*) / 2)         ),          ',',          -1     ) AS `货运量中位数（万吨）`  FROM hd_nh_dm  WHERE YEAR = '2021' AND CHANNEL = '京杭运河'  GROUP BY SEGMENT;
pred_sql: SELECT `SEGMENT`,         PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY `VOLUME`) AS `中位数货运量` FROM hd_nh_dm WHERE `YEAR` = '2021' GROUP BY `SEGMENT`;
gold_sql: SELECT      '第一季度' AS `时段`,      SUM(CASE WHEN `MONTH` IN ('1月', '2月', '3月') THEN VOLUME ELSE 0 END) AS `货运量（万吨）`  FROM hd_nh_dm  WHERE YEAR = '2021' AND CHANNEL = '京杭运河' UNION ALL SELECT      '第四季度' AS `时段`,      SUM(CASE WHEN `MONTH` IN ('10月', '11月', '12月') THEN VOLUME ELSE 0 END) AS `货运量（万吨）`  FROM hd_nh_dm  WHERE YEAR = '2021' AND CHANNEL = '京杭运河';
pred_sql: SELECT `CHANNEL`, SUM(CASE WHEN `MONTH` IN ('01', '02', '03') THEN `VOLUME` ELSE 0 END) AS `Q1_VOLUME`, SUM(CASE WHEN `MONTH` IN ('10', '11', '12') THEN `VOLUME` ELSE 0 END) AS `Q4_VOLUME` FROM `hd_nh_dm` WHERE `YEAR` = '2021' AND `CHANNEL` = '京杭运河' GROUP BY `CHANNEL`;
gold_sql: SELECT    `MONTH` AS `月份`,    `SEGMENT` AS `断面`,    SUM(VOLUME) AS `货运量（万吨）`  FROM    hd_nh_dm  WHERE    `YEAR` = '2021'    AND `CHANNEL` = '京杭运河'  GROUP BY    `MONTH`, `SEGMENT` ORDER BY    FIELD(`MONTH`, '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'),    `SEGMENT`;
pred_sql: SELECT      `MONTH` AS '月份',      SUM(`VOLUME`) AS '货运量变化情况' FROM      hd_nh_dm WHERE      `YEAR` = '2021' AND `CHANNEL` = '京杭运河' GROUP BY      `MONTH` ORDER BY      `MONTH`;
gold_sql: SELECT
  A.`YEAR` As 年份,
  A.`MONTH` AS 月份,
  CONCAT(
    ROUND(
      (A.`VOLUME` - COALESCE(B.`VOLUME`, 0)) / NULLIF(B.`VOLUME`, 0) * 100,
      2
    ),
    '%'
  ) AS `环比增长率`
FROM
  hd_nh_dm A
  LEFT JOIN hd_nh_dm B ON A.`CHANNEL` = B.`CHANNEL`
  AND A.`SEGMENT` = B.`SEGMENT`
  AND A.`YEAR` = B.`YEAR`
  AND CAST(SUBSTRING_INDEX(A.`MONTH`, '月', 1) AS UNSIGNED) = CAST(SUBSTRING_INDEX(B.`MONTH`, '月', 1) AS UNSIGNED) - 1
WHERE
  A.`CHANNEL` = '京杭运河'
  AND A.`SEGMENT` = '蔺家坝船闸段'
  AND A.`YEAR` = '2021'
  AND CAST(SUBSTRING_INDEX(B.`MONTH`, '月', 1) AS UNSIGNED) IS NOT NULL
ORDER BY
  A.`YEAR`,
  CAST(SUBSTRING_INDEX(A.`MONTH`, '月', 1) AS UNSIGNED);
pred_sql: SELECT      `YEAR`,      `MONTH`,      `SEGMENT`,      (VOLUME - LAG(VOLUME) OVER (PARTITION BY `SEGMENT` ORDER BY `YEAR`, `MONTH`)) / LAG(VOLUME) OVER (PARTITION BY `SEGMENT` ORDER BY `YEAR`, `MONTH`) * 100 AS '环比增长率' FROM      hd_nh_dm WHERE      `YEAR` = '2021' AND `SEGMENT` LIKE '%京杭运河蔺家坝船闸段%' ORDER BY      `YEAR`, `MONTH`;
gold_sql: SELECT
  (B.`VOLUME` - A.`VOLUME`) AS `货运量增长（万吨）`
FROM
  hd_nh_dm A
  JOIN hd_nh_dm B ON A.`YEAR` = B.`YEAR` - 1
  AND A.`MONTH` = B.`MONTH`
  AND A.`CHANNEL` = B.`CHANNEL`
  AND A.`SEGMENT` = B.`SEGMENT`
WHERE
  A.`CHANNEL` = '京杭运河'
  AND A.`SEGMENT` = '蔺家坝船闸段'
  AND B.`YEAR` = '2024'
  AND A.`YEAR` = '2023'
  AND B.`MONTH` = '06'
  AND A.`MONTH` = '06';
pred_sql: SELECT      SUM(CASE WHEN `YEAR` = '2024' THEN `VOLUME` ELSE 0 END) AS '今年货运量',     SUM(CASE WHEN `YEAR` = '2023' THEN `VOLUME` ELSE 0 END) AS '去年货运量',     SUM(CASE WHEN `YEAR` = '2024' THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2023' THEN `VOLUME` ELSE 0 END) AS '增长的货运量' FROM      hd_nh_dm WHERE      `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段';
gold_sql: SELECT `MONTH` AS `月份`, MAX(`VOLUME`) AS `最大货运量（万吨）`  FROM hd_nh_dm  WHERE `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段'  AND `YEAR` = '2024' AND `MONTH` IN ('1月', '2月', '3月')  GROUP BY `MONTH`  ORDER BY `最大货运量（万吨）` DESC, `MONTH` DESC  LIMIT 1;
pred_sql: SELECT `MONTH`, MAX(`VOLUME`) AS '最高货运量' FROM hd_nh_dm WHERE `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段' AND `YEAR` = '2024' AND `MONTH` IN ('01', '02', '03') GROUP BY `MONTH` ORDER BY `最高货运量` DESC LIMIT 1;
gold_sql: SELECT `MONTH` AS `月份` FROM hd_nh_dm WHERE `YEAR` = '2021' AND `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段' AND `VOLUME` > 500;
pred_sql: SELECT `MONTH` AS '月份'  FROM hd_nh_dm  WHERE `YEAR` = '2021' AND `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段' AND `VOLUME` > 500;
gold_sql: SELECT
  `MONTH` AS 月份,
  `VOLUME` AS 货运量
FROM
  hd_nh_dm
WHERE
  `YEAR` = '2021'
  AND `CHANNEL` = '京杭运河'
  AND `SEGMENT` = '蔺家坝船闸段'
  AND `VOLUME` > (
    SELECT
      AVG(`VOLUME`)
    FROM
      hd_nh_dm
    WHERE
      `YEAR` = '2021'
  );
pred_sql: SELECT      `MONTH` AS '月份',      SUM(`VOLUME`) AS '货运量' FROM      hd_nh_dm WHERE      `YEAR` = '2021' AND      `CHANNEL` = '京杭运河' AND      `SEGMENT` = '蔺家坝船闸段' GROUP BY      `MONTH` HAVING      SUM(`VOLUME`) > (         SELECT AVG(`VOLUME`)          FROM hd_nh_dm          WHERE `YEAR` = '2021' AND `CHANNEL` = '京杭运河' AND `SEGMENT` = '蔺家坝船闸段'     );
gold_sql: SELECT
  AVG(`VOLUME`) AS `平均货运量（万吨）`
FROM
  hd_nh_dm
WHERE
  `SEGMENT` = '蔺家坝船闸段'
  AND (
    `YEAR` = '2024'
    AND `MONTH` IN ('03月', '04月', '05月')
  )
  OR (
    `YEAR` = '2024'
    AND `MONTH` = '06月'
    AND day('2024-06-04') <= 4
  );
pred_sql: SELECT AVG(`VOLUME`) AS `平均货运量` FROM `hd_nh_dm` WHERE `SEGMENT` = '蔺家坝船闸段' AND DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01')) BETWEEN '2024-03-04' AND '2024-06-04';
gold_sql: SELECT
  `YEAR` AS '年份'
FROM
  hd_nh_dm
WHERE
  `VOLUME` = (
    SELECT
      MAX(`VOLUME`)
    FROM
      hd_nh_dm
  )
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', SUM(`VOLUME`) AS '总货运量' FROM hd_nh_dm GROUP BY `YEAR` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  (
    SELECT
      SUM(`VOLUME`) AS 货运量
    FROM
      hd_nh_dm
    WHERE
      `SEGMENT` = '蔺家坝船闸段'
      AND `YEAR` = '2024'
      AND MONTH IN ('4月', '5月', '6月')
  ) AS `本季度货运量（万吨）`,
  (
    SELECT
      SUM(`VOLUME`)
    FROM
      hd_nh_dm
    WHERE
      `SEGMENT` = '蔺家坝船闸段'
      AND `YEAR` = '2024'
      AND MONTH IN ('1月', '2月', '3月')
  ) AS `上个季度货运量（万吨）`,
  (
    SELECT
      SUM(`VOLUME`)
    FROM
      hd_nh_dm
    WHERE
      `SEGMENT` = '蔺家坝船闸段'
      AND `YEAR` = '2024'
      AND MONTH IN ('4月', '5月', '6月')
  ) - (
    SELECT
      SUM(`VOLUME`)
    FROM
      hd_nh_dm
    WHERE
      `SEGMENT` = '蔺家坝船闸段'
      AND `YEAR` = '2024'
      AND MONTH IN ('1月', '2月', '3月')
  ) AS `货运量变化（万吨）`
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` IN ('04', '05', '06') THEN `VOLUME` ELSE 0 END) AS '本季度货运量', SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` IN ('01', '02', '03') THEN `VOLUME` ELSE 0 END) AS '上个季度货运量', (SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` IN ('04', '05', '06') THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` IN ('01', '02', '03') THEN `VOLUME` ELSE 0 END)) AS '变化量' FROM `hd_nh_dm` WHERE `CHANNEL` = '蔺家坝' AND `SEGMENT` = '船闸段';
gold_sql: SELECT
  CHANNEL AS 航道
FROM
  (
    SELECT
      CHANNEL,
      MONTH,
      RANK() OVER (
        PARTITION BY
          MONTH
        ORDER BY
          VOLUME DESC
      ) AS rank_within_month
    FROM
      HD_NH_DM
    WHERE
      YEAR = '2023'
  ) AS ranked_channels
GROUP BY
  CHANNEL
HAVING
  COUNT(
    CASE
      WHEN rank_within_month <= 3 THEN 1
      ELSE NULL
    END
  ) = 12
ORDER BY
  CHANNEL;
pred_sql: SELECT `CHANNEL` AS '航道名称' FROM hd_nh_dm WHERE `YEAR` = '2023' GROUP BY `CHANNEL` HAVING COUNT(DISTINCT CASE WHEN `VOLUME` IN (     SELECT `VOLUME`     FROM hd_nh_dm     WHERE `YEAR` = '2023'     ORDER BY `VOLUME` DESC     LIMIT 3 ) THEN `MONTH` END) = 12;
gold_sql: SELECT   
    CHANNEL AS 航道名称  
FROM   
    hd_nh_dm AS current_year  
WHERE   
    YEAR = '2024'  
    AND MONTH = '3月'  
    AND VOLUME = (  
        SELECT MAX(VOLUME)  
        FROM hd_nh_dm AS all_time  
        WHERE   
            all_time.CHANNEL = current_year.CHANNEL  
            AND (  
                all_time.YEAR < '2024'   
                OR (  
                    all_time.YEAR = '2024'   
                    AND all_time.MONTH < '3月'
                )  
            )  
    )  
GROUP BY   
    CHANNEL;
pred_sql: SELECT `CHANNEL` AS '航道名称', SUM(`VOLUME`) AS '货运量' FROM hd_nh_dm WHERE `YEAR` = '2024' AND `MONTH` = '03' GROUP BY `CHANNEL` HAVING SUM(`VOLUME`) = (     SELECT MAX(total_volume)     FROM (         SELECT SUM(`VOLUME`) AS total_volume         FROM hd_nh_dm         WHERE `YEAR` = '2024' AND `MONTH` = '03'         GROUP BY `CHANNEL`     ) AS subquery );
gold_sql: SELECT `MONTH` AS `月份`, `FLIGHTS` AS `航班数` FROM hk_hx WHERE `YEAR` = '2023年' AND `O_AIRPORT` = '南通兴东机场' AND `D_AIRPORT` = '哈尔滨太平机场' ORDER BY `FLIGHTS` DESC LIMIT 1;
pred_sql: SELECT SUM(`FLIGHTS`) AS `2023年南通兴东机场到哈尔滨太平机场的航班数` FROM `hk_hx` WHERE `YEAR` = '2023' AND `O_AIRPORT` = '南通兴东机场' AND `D_AIRPORT` = '哈尔滨太平机场';
gold_sql: SELECT
  `FLIGHTS` AS 航班次数
FROM
  hk_hx
WHERE
  `YEAR` = '2023'
  AND `MONTH` = '6'
  AND `O_AIRPORT` = '南通兴东机场'
  AND `D_AIRPORT` = '哈尔滨太平机场';
pred_sql: SELECT SUM(`FLIGHTS`) AS `航班次数` FROM `hk_hx` WHERE `YEAR` = '2023' AND `MONTH` = '06' AND `O_AIRPORT` = '南通兴东机场' AND `D_AIRPORT` = '哈尔滨太平机场';
gold_sql: SELECT
  (
    SELECT
      FLIGHTS  
    FROM
      HK_HX
    WHERE
      O_AIRPORT = '南通兴东机场'
      AND D_AIRPORT = '哈尔滨太平机场'
      AND `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          HK_HX
      )
  ) / (
    SELECT
      SUM(FLIGHTS)
    FROM
      HK_HX
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          HK_HX
      )
  ) * 100 AS 班次数占比;
pred_sql: SELECT CONCAT(ROUND((SUM(CASE WHEN `O_AIRPORT` = '南通兴东机场' AND `D_AIRPORT` = '哈尔滨太平机场' THEN `FLIGHTS` ELSE 0 END) / SUM(`FLIGHTS`)) * 100, 2), '%') AS `航班百分比` FROM `hk_hx`;
gold_sql: SELECT `FLIGHTS` as 航班次数 FROM hk_hx WHERE `O_AIRPORT` = '南通兴东机场'  AND `D_AIRPORT` = '哈尔滨太平机场'  AND `YEAR` = '2024年'  AND `MONTH` = '2月';
pred_sql: SELECT SUM(`FLIGHTS`) AS `航班次数` FROM `hk_hx` WHERE `YEAR` = '2024' AND `MONTH` = '02' AND `O_AIRPORT` = '南通兴东机场' AND `D_AIRPORT` = '哈尔滨太平机场';
gold_sql: SELECT AVG(FLIGHTS) AS '月均航班次数' FROM hk_hx WHERE `YEAR` = '2023年'   AND O_AIRPORT = '南通兴东机场'   AND D_AIRPORT = '哈尔滨太平机场';
pred_sql: SELECT AVG(`FLIGHTS`) AS '月均航班次数' FROM `hk_hx` WHERE `YEAR` = '2023' AND `O_AIRPORT` = '南通兴东机场' AND `D_AIRPORT` = '哈尔滨太平机场';
gold_sql: SELECT COUNT(DISTINCT CONCAT(O_AIRPORT, '_', D_AIRPORT)) AS `航线总数（个）` FROM hk_hx WHERE YEAR = '2023年'   AND MONTH = '1月'   AND (     O_AIRPORT LIKE '%南京%' OR     O_AIRPORT LIKE '%无锡%' OR     O_AIRPORT LIKE '%徐州%' OR     O_AIRPORT LIKE '%常州%' OR     O_AIRPORT LIKE '%苏州%' OR     O_AIRPORT LIKE '%南通%' OR     O_AIRPORT LIKE '%连云港%' OR     O_AIRPORT LIKE '%淮安%' OR     O_AIRPORT LIKE '%盐城%' OR     O_AIRPORT LIKE '%扬州%' OR     O_AIRPORT LIKE '%镇江%' OR     O_AIRPORT LIKE '%泰州%' OR     O_AIRPORT LIKE '%宿迁%'   );
pred_sql: SELECT SUM(`FLIGHTS`) AS `2023年1月份江苏省机场开通航线总数` FROM `hk_hx` WHERE `YEAR` = '2023' AND `MONTH` = '01' AND (`O_AIRPORT` LIKE '%南京%' OR `O_AIRPORT` LIKE '%无锡%' OR `O_AIRPORT` LIKE '%徐州%' OR `O_AIRPORT` LIKE '%常州%' OR `O_AIRPORT` LIKE '%苏州%' OR `O_AIRPORT` LIKE '%南通%' OR `O_AIRPORT` LIKE '%连云港%' OR `O_AIRPORT` LIKE '%淮安%' OR `O_AIRPORT` LIKE '%盐城%' OR `O_AIRPORT` LIKE '%扬州%' OR `O_AIRPORT` LIKE '%镇江%' OR `O_AIRPORT` LIKE '%泰州%' OR `O_AIRPORT` LIKE '%宿迁%');
gold_sql: SELECT O_AIRPORT, COUNT(D_AIRPORT) AS `开通航线数`  FROM hk_hx  WHERE YEAR = '2023年'  AND (      O_AIRPORT LIKE '%南京%' OR      O_AIRPORT LIKE '%无锡%' OR      O_AIRPORT LIKE '%徐州%' OR      O_AIRPORT LIKE '%常州%' OR      O_AIRPORT LIKE '%苏州%' OR      O_AIRPORT LIKE '%南通%' OR      O_AIRPORT LIKE '%连云港%' OR      O_AIRPORT LIKE '%淮安%' OR      O_AIRPORT LIKE '%盐城%' OR      O_AIRPORT LIKE '%扬州%' OR      O_AIRPORT LIKE '%镇江%' OR      O_AIRPORT LIKE '%泰州%' OR      O_AIRPORT LIKE '%宿迁%'  )  GROUP BY O_AIRPORT  ORDER BY `开通航线数` DESC  LIMIT 1;
pred_sql: SELECT `O_AIRPORT` AS '机场', SUM(`FLIGHTS`) AS '开通航线数' FROM hk_hx WHERE `YEAR` = '2023' AND (`O_AIRPORT` LIKE '%南京%' OR `O_AIRPORT` LIKE '%无锡%' OR `O_AIRPORT` LIKE '%徐州%' OR `O_AIRPORT` LIKE '%常州%' OR `O_AIRPORT` LIKE '%苏州%' OR `O_AIRPORT` LIKE '%南通%' OR `O_AIRPORT` LIKE '%连云港%' OR `O_AIRPORT` LIKE '%淮安%' OR `O_AIRPORT` LIKE '%盐城%' OR `O_AIRPORT` LIKE '%扬州%' OR `O_AIRPORT` LIKE '%镇江%' OR `O_AIRPORT` LIKE '%泰州%' OR `O_AIRPORT` LIKE '%宿迁%') GROUP BY `O_AIRPORT` ORDER BY SUM(`FLIGHTS`) DESC LIMIT 1;
gold_sql: SELECT     SUM(CASE WHEN `YEAR` = '2023年' THEN FLIGHTS ELSE 0 END) AS '今年航班数',     SUM(CASE WHEN `YEAR` = '2022年' THEN FLIGHTS ELSE 0 END) AS '去年航班数',     (SUM(CASE WHEN `YEAR` = '2023年' THEN FLIGHTS ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2022年' THEN FLIGHTS ELSE 0 END)) AS '年度变化量' FROM     hk_hx WHERE     O_AIRPORT = '南通兴东机场';
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2023' THEN `FLIGHTS` ELSE 0 END) AS '2023年南通兴东机场航班数', SUM(CASE WHEN `YEAR` = '2022' THEN `FLIGHTS` ELSE 0 END) AS '2022年南通兴东机场航班数', (SUM(CASE WHEN `YEAR` = '2023' THEN `FLIGHTS` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2022' THEN `FLIGHTS` ELSE 0 END)) AS '相比去年变化' FROM `hk_hx` WHERE `O_AIRPORT` = '南通兴东机场';
gold_sql: SELECT
  CASE
    WHEN MONTH IN ('3月', '4月', '5月') THEN '春季'
    WHEN MONTH IN ('6月', '7月', '8月') THEN '夏季'
    WHEN MONTH IN ('9月', '10月', '11月') THEN '秋季'
    WHEN MONTH IN ('12月', '1月', '2月') THEN '冬季'
  END AS 季节,
  SUM(FLIGHTS) AS 总班次
FROM
  hk_hx
WHERE
  YEAR = '2023年'
  AND O_AIRPORT = '南通兴东机场'
  AND D_AIRPORT = '哈尔滨太平机场'
GROUP BY
  季节
ORDER BY
  季节;
pred_sql: SELECT      CASE          WHEN `MONTH` IN ('3', '4', '5') THEN '春季'         WHEN `MONTH` IN ('6', '7', '8') THEN '夏季'         WHEN `MONTH` IN ('9', '10', '11') THEN '秋季'         ELSE '冬季'     END AS `季节`,     SUM(`FLIGHTS`) AS `航班数` FROM      hk_hx WHERE      `YEAR` = '2023' AND      `O_AIRPORT` = '南通兴东机场' AND      `D_AIRPORT` = '哈尔滨太平机场' GROUP BY      `季节`;
gold_sql: SELECT     O_AIRPORT, SUM(CASE WHEN YEAR = '2023年' THEN FLIGHTS ELSE 0 END) AS `2023年航班数` , SUM(CASE WHEN YEAR = '2022年' THEN FLIGHTS ELSE 0 END) AS `2022年航班数` , (SUM(CASE WHEN YEAR = '2023年' THEN FLIGHTS ELSE 0 END) -       SUM(CASE WHEN YEAR = '2022年' THEN FLIGHTS ELSE 0 END)) AS `增长航班数` FROM     hk_hx GROUP BY     O_AIRPORT ORDER BY     `增长航班数` DESC LIMIT 1;
pred_sql: SELECT      `O_AIRPORT` AS '机场',     SUM(CASE WHEN `YEAR` = '2023' THEN `FLIGHTS` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2022' THEN `FLIGHTS` ELSE 0 END) AS '增长航班数' FROM      hk_hx WHERE      `O_AIRPORT` LIKE '%江苏%' GROUP BY      `O_AIRPORT` ORDER BY      '增长航班数' DESC LIMIT 1;
gold_sql: SELECT
  O_AIRPORT AS 至少有10个航班的出发机场
FROM
  hk_hx
WHERE
  YEAR = '2023年'
GROUP BY
  O_AIRPORT
HAVING
  SUM(FLIGHTS) >= 10;
pred_sql: SELECT `O_AIRPORT` AS '出发机场' FROM hk_hx WHERE `YEAR` = '2023' GROUP BY `O_AIRPORT` HAVING SUM(`FLIGHTS`) >= 10;
gold_sql: SELECT
  SUM(FLIGHTS) AS 航班总数
FROM
  hk_hx
WHERE
  YEAR = '2023年'
  AND MONTH IN ('1月', '2月', '3月')
  AND O_AIRPORT = '南通兴东机场'
  AND D_AIRPORT = '哈尔滨太平机场';
pred_sql: SELECT SUM(`FLIGHTS`) AS `航班总数` FROM `hk_hx` WHERE `YEAR` = '2023' AND `MONTH` IN ('1', '2', '3') AND `O_AIRPORT` = '南通兴东机场' AND `D_AIRPORT` = '哈尔滨太平机场';
gold_sql: SELECT
  D_AIRPORT AS '到达机场',
  SUM(FLIGHTS) AS '航班数量'
FROM
  hk_hx
WHERE
  (
    CONCAT(`YEAR`, LPAD(`MONTH`, 3, '0')) BETWEEN '2024年02月' AND '2024年05月'
  )
GROUP BY
  D_AIRPORT
ORDER BY
  SUM(FLIGHTS) DESC
LIMIT
  1;
pred_sql: SELECT `D_AIRPORT`, SUM(`FLIGHTS`) AS '航班数量' FROM hk_hx WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-03-04' AND '2024-06-04' GROUP BY `D_AIRPORT` ORDER BY SUM(`FLIGHTS`) DESC LIMIT 1;
gold_sql: SELECT
  (
    SELECT
      SUM(FLIGHTS) 
    FROM
      hk_hx
    WHERE
      `YEAR` = '2024年'
      AND `MONTH` = '4月'
  ) AS '上个月航班总数',
  (
    SELECT
      SUM(FLIGHTS)
    FROM
      hk_hx
    WHERE
      `YEAR` = '2024年'
      AND `MONTH` = '3月'
  ) AS '前一个月航班总数',
  (
    SELECT
      SUM(FLIGHTS)
    FROM
      hk_hx
    WHERE
      `YEAR` = '2024年'
      AND `MONTH` = '4月'
  ) - (
    SELECT
      SUM(FLIGHTS)
    FROM
      hk_hx
    WHERE
      `YEAR` = '2024年'
      AND `MONTH` = '3月'
  ) AS '较前一个月变化'
FROM
  DUAL;
pred_sql: SELECT      (SELECT SUM(`FLIGHTS`) FROM `hk_hx` WHERE `YEAR` = '2024' AND `MONTH` = '04') AS `上个月航班总数`,     (SELECT SUM(`FLIGHTS`) FROM `hk_hx` WHERE `YEAR` = '2024' AND `MONTH` = '03') AS `前一个月航班总数`,     CASE          WHEN (SELECT SUM(`FLIGHTS`) FROM `hk_hx` WHERE `YEAR` = '2024' AND `MONTH` = '04') >               (SELECT SUM(`FLIGHTS`) FROM `hk_hx` WHERE `YEAR` = '2024' AND `MONTH` = '03') THEN '增加'         WHEN (SELECT SUM(`FLIGHTS`) FROM `hk_hx` WHERE `YEAR` = '2024' AND `MONTH` = '04') <               (SELECT SUM(`FLIGHTS`) FROM `hk_hx` WHERE `YEAR` = '2024' AND `MONTH` = '03') THEN '减少'         ELSE '无变化'     END AS `变化情况`;
gold_sql: SELECT
  MONTH AS 月份,
  SUM(FLIGHTS) AS 航班数
FROM
  HK_HX
GROUP BY
  MONTH
ORDER BY
   航班数 ASC
LIMIT
  1;
pred_sql: SELECT `MONTH`, MIN(`FLIGHTS`) AS `最少航班数` FROM hk_hx GROUP BY `MONTH` ORDER BY `最少航班数` ASC LIMIT 1;
gold_sql: SELECT DISTINCT
  O_AIRPORT AS 持每月航班数增长的机场名称
FROM
  (
    SELECT
      O_AIRPORT,
      YEAR,
      MONTH,
      FLIGHTS,
      LAG(FLIGHTS, 1, NULL) OVER (
        PARTITION BY
          O_AIRPORT
        ORDER BY
          YEAR,
          MONTH
      ) AS PrevMonthFlights
    FROM
      HK_HX
    WHERE
      YEAR <= (
        SELECT
          MAX(YEAR)
        FROM
          HK_HX
      )
  ) AS RankedFlights
WHERE
  PrevMonthFlights IS NOT NULL
  AND FLIGHTS > PrevMonthFlights
GROUP BY
  O_AIRPORT
HAVING
  COUNT(*) = (
    SELECT
      COUNT(*)
    FROM
      HK_HX
    WHERE
      O_AIRPORT = RankedFlights.O_AIRPORT
      AND YEAR <= (
        SELECT
          MAX(YEAR)
        FROM
          HK_HX
      )
  );
pred_sql: SELECT `O_AIRPORT` AS '机场' FROM hk_hx GROUP BY `O_AIRPORT` HAVING MIN(`FLIGHTS`) < MAX(`FLIGHTS`);
gold_sql: SELECT MONTH, SUM(FLIGHTS) AS '航班总数'  FROM hk_hx  WHERE STR_TO_DATE(CONCAT(YEAR,'-',MONTH),'%Y年-%m月') BETWEEN '2024-02-14' AND '2024-05-14'  GROUP BY MONTH  ORDER BY ABS(SUM(FLIGHTS) - (SELECT AVG(FLIGHTS) FROM (SELECT SUM(FLIGHTS) AS FLIGHTS FROM hk_hx WHERE STR_TO_DATE(CONCAT(YEAR,'-',MONTH),'%Y年-%m月') BETWEEN '2024-02-14' AND '2024-05-14' GROUP BY MONTH) AS AverageFlights)) DESC  LIMIT 1;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`FLIGHTS`) AS '航班总数' FROM hk_hx WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-02-14' AND '2024-05-14' GROUP BY `YEAR`, `MONTH` ORDER BY ABS(SUM(`FLIGHTS`) - (SELECT AVG(`FLIGHTS`) FROM hk_hx WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-02-14' AND '2024-05-14')) DESC LIMIT 1;
gold_sql: SELECT      LUD AS `路段`,      YONGDCHENGD AS `拥堵程度`,      YONGDCHANGD AS `拥堵长度`,      CHIXSJ AS `持续时间` FROM      gsgl_ldydzt  WHERE      GCRQ BETWEEN '2024-04-01' AND '2024-04-30' ORDER BY      CHIXSJ DESC,      YONGDCHANGD DESC  LIMIT 3;
pred_sql: SELECT      `LUD` AS '路段',      `YONGDCHENGD` AS '拥堵程度',      `YONGDCHANGD` AS '拥堵长度（米）',      `CHIXSJ` AS '持续时间（分钟）' FROM      gsgl_ldydzt WHERE      `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' ORDER BY      `CHIXSJ` DESC LIMIT 3;
gold_sql: SELECT   LUD AS `路段`,   YONGDCHENGD AS `拥堵程度`,   YONGDCHANGD AS `拥堵长度`,   CHIXSJ AS `持续时间` FROM   gsgl_ldydzt WHERE   GCRQ BETWEEN '2024-05-07' AND '2024-05-14' ORDER BY   YONGDCHENGD ASC,   YONGDCHANGD ASC,   CHIXSJ ASC LIMIT 3;
pred_sql: SELECT      `LUD` AS '路段',      `YONGDCHENGD` AS '拥堵程度',      `YONGDCHANGD` AS '拥堵长度（米）',      `CHIXSJ` AS '持续时间（分钟）' FROM      gsgl_ldydzt WHERE      `GCRQ` BETWEEN '2024-05-07' AND '2024-05-14' ORDER BY      `YONGDCHANGD` ASC, `CHIXSJ` ASC LIMIT 3;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  YONGDCHANGD As 拥堵长度,
  CHIXSJ AS 持续时间
FROM
  ptgl_ldydzt
WHERE
  YONGDCHENGD = '严重拥堵'
  AND GCRQ BETWEEN '2024-05-07' AND '2024-05-14'
ORDER BY
  YONGDCHANGD DESC,
  CHIXSJ DESC;
pred_sql: SELECT      `LUD` AS '路段',      `QIDZH` AS '起点桩号',      `ZHONGDZH` AS '终点桩号',      `YONGDCHENGD` AS '拥堵程度',      `YONGDCHANGD` AS '拥堵长度（米）',      `CHIXSJ` AS '持续时间（分钟）' FROM      gsgl_ldydzt WHERE      `GCRQ` BETWEEN '2024-05-07' AND '2024-05-14';
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  YONGDCHENGD AS 拥堵程度,
  YONGDCHANGD AS 拥堵长度
FROM
  gsgl_ldydzt
WHERE
  GCRQ = '2023-07-21'
  AND CHIXSJ > 30;
pred_sql: SELECT `LUD` AS '路段'  FROM gsgl_ldydzt  WHERE `GCRQ` = '2023-07-21' AND `CHIXSJ` > 30;
gold_sql: SELECT
  COUNT(*) AS 拥堵次数,
  AVG(CHIXSJ) AS 平均持续时间,
  SUM(YONGDCHANGD) AS 总拥堵长度
FROM
  gsgl_ldydzt
WHERE
  GCRQ BETWEEN '2023-07-01' AND '2023-07-31';
pred_sql: SELECT COUNT(*) AS `拥堵次数`, AVG(`CHIXSJ`) AS `平均持续时间`, SUM(`YONGDCHANGD`) AS `总拥堵长度` FROM `gsgl_ldydzt` WHERE `GCRQ` = '2023-07-01';
gold_sql: SELECT
  LUD AS 路段,
  COUNT(*) AS `发生次数`
FROM
  gsgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-02-14' AND '2024-05-14'
  AND YONGDCHENGD = "严重拥堵"
GROUP BY
  LUD
ORDER BY
  `发生次数` DESC
LIMIT
  1;
pred_sql: SELECT `LUD`, COUNT(*) AS `发生次数` FROM gsgl_ldydzt WHERE `GCRQ` BETWEEN '2024-02-14' AND '2024-05-14'   AND `YONGDCHENGD` = '严重拥堵' GROUP BY `LUD` ORDER BY `发生次数` DESC LIMIT 1;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  CHIXSJ AS 持续时间,
  YONGDCHENGD AS 拥堵程度,
  YONGDCHANGD AS 拥堵长度
FROM
  gsgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_ldydzt
  )
ORDER BY
  CHIXSJ DESC
LIMIT
  1;
pred_sql: SELECT `LUD` AS '路段', `GCRQ` AS '观测日期', `CHIXSJ` AS '持续时间'  FROM gsgl_ldydzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_ldydzt)  ORDER BY `CHIXSJ` DESC  LIMIT 1;
gold_sql: SELECT
  COUNT(*) AS 轻度拥堵”的事件数量
FROM
  gsgl_ldydzt
WHERE
  YONGDCHENGD = '轻度拥堵'
  AND GCRQ BETWEEN '2023-07-01' AND '2023-07-31';
pred_sql: SELECT COUNT(*) AS `轻度拥堵事件数量` FROM `gsgl_ldydzt` WHERE `YONGDCHENGD` = '轻度拥堵' AND `GCRQ` BETWEEN '2023-07-01' AND '2023-07-31';
gold_sql: SELECT    '2023年第二季度' AS 时间段,   COUNT(*) AS 拥堵次数,   AVG(CHIXSJ) AS 平均持续时间,   SUM(YONGDCHANGD) AS 总拥堵长度 FROM gsgl_ldydzt WHERE GCRQ BETWEEN '2023-04-01' AND '2023-06-30' UNION ALL SELECT    '2023年第三季度' AS 时间段,   COUNT(*) AS 拥堵次数,   AVG(CHIXSJ) AS 平均持续时间,   SUM(YONGDCHANGD) AS 总拥堵长度 FROM gsgl_ldydzt WHERE GCRQ BETWEEN '2023-07-01' AND '2023-09-30';
pred_sql: SELECT      `GCRQ`,      `LUD`,      `YONGDCHENGD`,      `YONGDCHANGD`,      `CHIXSJ` FROM      gsgl_ldydzt WHERE      (`GCRQ` BETWEEN '2023-04-01' AND '2023-06-30')     OR (`GCRQ` BETWEEN '2023-07-01' AND '2023-09-30');
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  COUNT(*) AS '拥堵次数'
FROM
  gsgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-04-14' AND '2024-05-14'
GROUP BY
  LUD,
  QIDZH,
  ZHONGDZH
HAVING
  COUNT(*) > 2;
pred_sql: SELECT `LUD`, COUNT(*) AS `拥堵事件次数` FROM gsgl_ldydzt WHERE `GCRQ` BETWEEN '2024-04-14' AND '2024-05-14' GROUP BY `LUD` HAVING `拥堵事件次数` > 2;
gold_sql: SELECT
  COUNT(*) AS 超过60分钟的拥堵事件数量
FROM
  gsgl_ldydzt
WHERE
  GCRQ = '2023-07-21'
  AND CHIXSJ > 60;
pred_sql: SELECT COUNT(*) AS `拥堵事件数量` FROM `gsgl_ldydzt` WHERE `GCRQ` = '2023-07-21' AND `CHIXSJ` > 60;
gold_sql: SELECT
  LUD AS 路段,
  COUNT(*) AS 拥堵次数
FROM
  gsgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-04-14' AND '2024-05-14'
  AND CHIXSJ > (
    SELECT
      AVG(CHIXSJ)
    FROM
      gsgl_ldydzt
    WHERE
      GCRQ BETWEEN '2024-04-14' AND '2024-05-14'
  )
GROUP BY
  LUD
ORDER BY
  拥堵次数 DESC
LIMIT
  1;
pred_sql: SELECT `LUD`, COUNT(*) AS `拥堵事件次数` FROM gsgl_ldydzt WHERE `GCRQ` BETWEEN '2024-04-14' AND '2024-05-14' AND `CHIXSJ` > (     SELECT AVG(`CHIXSJ`)     FROM gsgl_ldydzt     WHERE `GCRQ` BETWEEN '2024-04-14' AND '2024-05-14' ) GROUP BY `LUD` ORDER BY `拥堵事件次数` DESC LIMIT 1;
gold_sql: SELECT LUD, CONCAT(QIDZH, '-', ZHONGDZH) AS 路段, COUNT(*) AS 拥堵次数 FROM gsgl_ldydzt WHERE YONGDCHENGD = '严重拥堵' AND GCRQ BETWEEN '2024-02-14' AND '2024-05-14' GROUP BY LUD, QIDZH, ZHONGDZH ORDER BY 拥堵次数 DESC LIMIT 1;
pred_sql: SELECT `LUD`, COUNT(*) AS `严重拥堵次数` FROM gsgl_ldydzt WHERE `GCRQ` BETWEEN '2024-02-14' AND '2024-05-14' AND `YONGDCHENGD` = '严重拥堵' GROUP BY `LUD` ORDER BY `严重拥堵次数` DESC LIMIT 1;
gold_sql: SELECT
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  YONGDCHENGD AS 拥堵程度,
  YONGDCHANGD AS 拥堵长度,
  CHIXSJ AS 持续时间
FROM
  gsgl_ldydzt
WHERE
  LUD = 'G42'
  AND GCRQ = '2023-07-21'
pred_sql: SELECT `LUD` AS '路段', `YONGDCHENGD` AS '拥堵程度' FROM `gsgl_ldydzt` WHERE `GCRQ` = '2023-07-21' AND `LUD` LIKE '%G42%';
gold_sql: SELECT
  LUD AS 路段,
  AVG(CHIXSJ) AS 平均持续时间
FROM
  gsgl_ldydzt
GROUP BY
  LUD
ORDER BY
  平均持续时间 DESC
LIMIT
  1;
pred_sql: SELECT `LUD` AS '路段', AVG(`CHIXSJ`) AS '平均持续时间' FROM gsgl_ldydzt GROUP BY `LUD` ORDER BY AVG(`CHIXSJ`) DESC LIMIT 1;
gold_sql: SELECT     a.LUD AS '路段',     a.YONGDCHENGD AS '今天拥堵程度',     b.YONGDCHENGD AS '昨天拥堵程度' FROM     (SELECT LUD, YONGDCHENGD FROM GSGL_LDYDZT WHERE GCRQ = '2024-05-14') a JOIN     (SELECT LUD, YONGDCHENGD FROM GSGL_LDYDZT WHERE GCRQ = '2024-05-13') b ON     a.LUD = b.LUD WHERE     (b.YONGDCHENGD = '缓行' AND a.YONGDCHENGD IN ('拥堵', '严重拥堵'))     OR     (b.YONGDCHENGD = '拥堵' AND a.YONGDCHENGD = '严重拥堵');
pred_sql: SELECT      t1.`LUD` AS `路段`,     t1.`YONGDCHENGD` AS `今天拥堵程度`,     t2.`YONGDCHENGD` AS `昨天拥堵程度` FROM      gsgl_ldydzt t1 JOIN      gsgl_ldydzt t2 ON t1.`LUD` = t2.`LUD` WHERE      t1.`GCRQ` = '2024-05-14' AND      t2.`GCRQ` = '2024-05-13' AND      (t1.`YONGDCHENGD` > t2.`YONGDCHENGD` OR t1.`YONGDCHENGD` = '严重拥堵') ORDER BY      t1.`LUD`;
gold_sql: SELECT
  LUD AS '路段'
FROM
  gsgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-05-04' AND '2024-06-03'
GROUP BY
  LUD
HAVING
  COUNT(DISTINCT WEEK(GCRQ)) = 5;
pred_sql: SELECT LUD  FROM gsgl_ldydzt  WHERE GCRQ BETWEEN '2024-05-04' AND '2024-06-03'  GROUP BY LUD  HAVING COUNT(DISTINCT WEEK(GCRQ)) = 4;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH As 起点桩号,
  ZHONGDZH AS 终点桩号,
  CHIXSJ As 持续时间,
  YONGDCHENGD AS 拥堵程度
FROM
  gsgl_ldydzt
WHERE
  YONGDCHENGD = '严重拥堵'
ORDER BY
  CHIXSJ DESC
LIMIT
  1;
pred_sql: SELECT `LUD` AS '路段', SUM(`CHIXSJ`) AS '总持续时间' FROM gsgl_ldydzt GROUP BY `LUD` ORDER BY SUM(`CHIXSJ`) DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观测日期,
  BANCZL AS 班次总量
FROM
  hk_rmkylx
WHERE
  LUXQDCSMC = '深圳'
  AND LUXZDCSMC = '南京'
ORDER BY
  BANCZL DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ`, SUM(`BANCZL`) AS '总班次量' FROM hk_rmkylx WHERE `LUXQDCSMC` = '深圳' AND `LUXZDCSMC` = '南京' OR `LUXQDCSMC` = '南京' AND `LUXZDCSMC` = '深圳' GROUP BY `GCRQ` ORDER BY `总班次量` DESC LIMIT 1;
gold_sql: SELECT `GCRQ` AS `日期`, MIN(`BANCZL`) AS `最少班次总量` FROM `hk_rmkylx` WHERE `GCRQ` BETWEEN '2024-05-11' AND '2024-05-13' GROUP BY `GCRQ` ORDER BY `最少班次总量` ASC LIMIT 1;
pred_sql: SELECT `GCRQ`, SUM(`BANCZL`) AS '总班次量' FROM hk_rmkylx WHERE `GCRQ` BETWEEN '2024-05-11' AND '2024-05-13' GROUP BY `GCRQ` ORDER BY `总班次量` ASC LIMIT 1;
gold_sql: SELECT
  `LUXQDCSMC` AS 路线起点城市名称,
  `PAIM` AS 排名
FROM
  `hk_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `hk_rmkylx`
  )
  AND `LUXZDCSMC` = '南京';
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `PAIM` AS '排名'  FROM hk_rmkylx  WHERE `LUXZDCSMC` = '南京'  ORDER BY `GCRQ` DESC;
gold_sql: SELECT
  `GCRQ` AS 观测日期,
  `LUXQDCSMC` AS 路线起点城市名称,
  `LUXZDCSMC` AS 路线终点城市名称,
  `BANCZL` AS 班次总计,
  `PAIM` AS 排名
FROM
  `hk_rmkylx`
WHERE
  `BANCZL` > 20
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `hk_rmkylx`
  );
pred_sql: SELECT `GCRQ` AS '观测日期', `PAIM` AS '排名'  FROM hk_rmkylx  WHERE `BANCZL` > 20;
gold_sql: SELECT
  `GCRQ`AS 观测日期,
  `LUXQDCSMC` AS 路线起点城市名称,
  `LUXZDCSMC` AS 路线终点城市名称
FROM
  `hk_rmkylx`
WHERE
  `PAIM` <= 3
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `hk_rmkylx`
  );
pred_sql: SELECT `GCRQ` AS '观测日期', `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市'  FROM hk_rmkylx  WHERE `PAIM` <= 3;
gold_sql: SELECT
  `GCRQ` AS 观测日期,
  `LUXQDCSMC` AS 路线起点城市名称,
  `LUXZDCSMC` AS 路线终点城市名称 ,
  `BANCZL` AS 班次总量
FROM
  `hk_rmkylx`
WHERE
  `BANCZL` BETWEEN 10 AND 20;
pred_sql: SELECT `GCRQ` AS '观测日期', `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市'  FROM hk_rmkylx  WHERE `BANCZL` BETWEEN 10 AND 20;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  hk_rmkylx
WHERE
  LUXQDCSMC = '深圳'
  AND LUXZDCSMC = '南京'
  AND PAIM = 1;
pred_sql: SELECT `GCRQ` AS '日期', SUM(`BANCZL`) AS '班次总量' FROM hk_rmkylx WHERE `LUXQDCSMC` = '深圳' AND `LUXZDCSMC` = '南京' GROUP BY `GCRQ` ORDER BY `班次总量` DESC LIMIT 1;
gold_sql: SELECT
  `LUXQDCSMC` AS 路线起点城市名称,
  `LUXZDCSMC` AS 路线终点城市名称
FROM
  `hk_rmkylx`
WHERE
  `PAIM` = 1
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `hk_rmkylx`
  );
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市'  FROM hk_rmkylx  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM hk_rmkylx) AND `PAIM` = 1;
gold_sql: SELECT
  PAIM AS 排名
FROM
  hk_rmkylx
WHERE
  LUXQDCSMC = '深圳'
  AND LUXZDCSMC = '南京'
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT `PAIM` AS '排名'  FROM hk_rmkylx  WHERE `LUXQDCSMC` = '深圳' AND `LUXZDCSMC` = '南京'  ORDER BY `GCRQ` DESC LIMIT 1;
gold_sql: SELECT
  `LUXQDCSMC` AS '起点城市',
  `LUXZDCSMC` AS '终点城市',
  AVG(`BANCZL`) AS '平均班次'
FROM
  `hk_rmkylx`
WHERE
  `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31'
GROUP BY
  `LUXQDCSMC`,
  `LUXZDCSMC`;
pred_sql: SELECT `LUXQDCSMC` AS '路线起点城市名称', `LUXZDCSMC` AS '路线终点城市名称', AVG(`BANCZL`) AS '平均班次' FROM hk_rmkylx WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' GROUP BY `LUXQDCSMC`, `LUXZDCSMC`;
gold_sql: SELECT
  `LUXQDCSMC` AS '起点城市',
  `LUXZDCSMC` AS '终点城市'
FROM
  `hk_rmkylx`
WHERE
  `GCRQ` BETWEEN '2024-05-04' AND '2024-06-03'
  AND `BANCZL` = 0;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`  FROM hk_rmkylx  WHERE `GCRQ` BETWEEN '2024-05-04' AND '2024-06-03'  GROUP BY `LUXQDCSMC`, `LUXZDCSMC`  HAVING SUM(`BANCZL`) = 0;
gold_sql: SELECT
  LUXQDCSMC AS '起点城市',
  LUXZDCSMC AS '终点城市',
  VARIANCE(BANCZL) AS '班次总量波动'
FROM
  hk_rmkylx
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31'
GROUP BY
  LUXQDCSMC,
  LUXZDCSMC
ORDER BY
  VARIANCE(BANCZL) DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`, MAX(`BANCZL`) - MIN(`BANCZL`) AS `波动量` FROM hk_rmkylx WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `波动量` DESC LIMIT 1;
gold_sql: SELECT   
    `LUXQDCSMC` AS '起点城市',   
    `LUXZDCSMC` AS '终点城市',   
    SUM(`BANCZL`) AS '班次总量'   
FROM   
    `hk_rmkylx`   
WHERE   
    (`LUXQDCSMC`, `LUXZDCSMC`, `GCRQ`) IN (  
        SELECT   
            `LUXQDCSMC`,   
            `LUXZDCSMC`,   
            `GCRQ`   
        FROM   
            `hk_rmkylx`   
        WHERE   
            `PAIM` <= 10   
            AND `GCRQ` BETWEEN '2024-01-01' AND '2024-12-31'   
        GROUP BY   
            `LUXQDCSMC`,   
            `LUXZDCSMC`,   
            `GCRQ`   
        HAVING   
            COUNT(*) = (  
                SELECT   
                    COUNT(DISTINCT `GCRQ`)   
                FROM   
                    `hk_rmkylx`   
                WHERE   
                    `GCRQ` BETWEEN '2024-01-01' AND '2024-12-31'  
            )  
    )   
GROUP BY   
    `LUXQDCSMC`,   
    `LUXZDCSMC`;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`  FROM hk_rmkylx  WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-12-31'  GROUP BY `LUXQDCSMC`, `LUXZDCSMC`  HAVING COUNT(DISTINCT `GCRQ`) = 365;
gold_sql: SELECT
  ROAD_NAME AS 路段名称,
  `LOAD` AS 总载重量
FROM
  hy_dmll
WHERE
  ROAD_TYPE = '高速公路'
ORDER BY
  `LOAD` DESC
LIMIT
  1;
pred_sql: SELECT `ROAD_NAME` AS '高速公路名称', SUM(`LOAD`) AS '总载重' FROM hy_dmll WHERE `LOAD` > 12 GROUP BY `ROAD_NAME` ORDER BY `总载重` DESC LIMIT 1;
gold_sql: SELECT
  ROAD_NAME AS 道路名称,
  VOLUME AS '最小交通量'
FROM
  hy_dmll
WHERE
  ROAD_WIDE = 25
ORDER BY
  VOLUME ASC
LIMIT
  1;
pred_sql: SELECT `ROAD_NAME` AS '道路名称', MIN(`VOLUME`) AS '最小交通量' FROM hy_dmll WHERE `ROAD_WIDE` = 25 AND `LOAD` > 12 GROUP BY `ROAD_NAME` ORDER BY `最小交通量` ASC LIMIT 1;
gold_sql: SELECT
  ROAD_NAME AS 道路名称,
  MAX(`LOAD` / `VOLUME`) AS 货车载重和交通量的比例
FROM
  hy_dmll
GROUP BY
  ROAD_NAME
ORDER BY
  货车载重和交通量的比例 DESC
LIMIT
  1;
pred_sql: SELECT      `ROAD_NAME`,      (`LOAD` / `VOLUME`) AS `载重与交通量比例` FROM      hy_dmll ORDER BY      `载重与交通量比例` DESC LIMIT 1;
gold_sql: SELECT
  `ROAD_NAME` AS 名称,
  `LOAD` AS 载重
FROM
  hy_dmll
WHERE
  `LOAD` > 12000
ORDER BY
  ABS(`LOAD` - 100000) ASC
LIMIT
  1;
pred_sql: SELECT `ROAD_NAME` AS '道路名称', ABS(`LOAD` - 100000) AS '载重与100000吨/天的差值' FROM hy_dmll WHERE `LOAD` > 12 ORDER BY `载重与100000吨/天的差值` ASC LIMIT 1;
gold_sql: SELECT
  ROAD_WIDE AS 路段的宽度
FROM
  hy_dmll
WHERE
  ROAD_NAME = '直->吴凇江';
pred_sql: SELECT `ROAD_WIDE` AS '宽度（米）' FROM hy_dmll WHERE `ROAD_NAME` = '直->吴凇江';
gold_sql: SELECT
  `ROAD_TYPE` AS 路段类型
FROM
  hy_dmll
WHERE
  `ROAD_ID` = '1';
pred_sql: SELECT `ROAD_TYPE` AS '道路类型' FROM hy_dmll WHERE `ROAD_ID` = '1';
gold_sql: SELECT
  `ROAD_NAME` AS 路段名称,
  `LOAD` AS `最大载重的路段`
FROM
  hy_dmll
ORDER BY
  `LOAD` DESC
LIMIT
  1;
pred_sql: SELECT `ROAD_NAME` AS '路段名称', MAX(`LOAD`) AS '最大载重' FROM hy_dmll;
gold_sql: SELECT
  ROAD_LENGTH AS 路段路长
FROM
  hy_dmll
WHERE
  ROAD_NAME = '直->吴凇江';
pred_sql: SELECT `ROAD_LENGTH` AS '路长' FROM hy_dmll WHERE `ROAD_NAME` = '直->吴凇江路段';
gold_sql: SELECT
  `VOLUME` AS 12吨以上货车交通量
FROM
  hy_dmll
WHERE
  `ROAD_NAME` = '直->吴凇江'
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT SUM(`VOLUME`) AS `12吨以上货车交通量` FROM `hy_dmll` WHERE `ROAD_NAME` = '直->吴凇江' AND `LOAD` > 12;
gold_sql: SELECT
  ROAD_NAME AS 路段名称
FROM
  hy_dmll
WHERE
  ROAD_LENGTH > 50
  AND `LOAD` >= 12000;
pred_sql: SELECT `ROAD_NAME` AS '道路名称' FROM hy_dmll WHERE `ROAD_LENGTH` > 50 AND `LOAD` > 12;
gold_sql: SELECT
  `ROAD_NAME` AS 路段名称,
  `VOLUME` AS `日均交通量`
FROM
  hy_dmll
WHERE
  `LOAD` > 12000
ORDER BY
  `VOLUME` DESC;
pred_sql: SELECT `ROAD_NAME` AS '道路名称', `VOLUME` AS '日均交通量' FROM hy_dmll WHERE `LOAD` > 12 ORDER BY `VOLUME` DESC;
gold_sql: SELECT `ROAD_NAME` AS 道路名称, AVG(`LOAD`) AS 日均载重 FROM hy_dmll  WHERE `LOAD` > 90000 AND `ROAD_LENGTH` > 0 GROUP BY `ROAD_NAME`;
pred_sql: SELECT `ROAD_NAME` AS '道路名称', SUM(`LOAD`) AS '总载重' FROM hy_dmll WHERE `LOAD` > 120000 GROUP BY `ROAD_NAME` HAVING SUM(`LOAD`) > 90000;
gold_sql: SELECT SUM(NATIONAL_ROAD) AS '2022年南京市国道总里程' FROM gl_lc WHERE `YEAR` = '2022' AND CITY = '南京市';
pred_sql: SELECT SUM(`NATIONAL_ROAD`) AS '国道里程总和' FROM `gl_lc` WHERE `YEAR` = '2022' AND `CITY` = '南京市';
gold_sql: SELECT
  CITY As 市,
  RURAL_ROAD AS 农村公路里程数
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
ORDER BY
  RURAL_ROAD DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '城市', MAX(`RURAL_ROAD`) AS '农村公路里程数' FROM gl_lc WHERE `YEAR` = '2022' GROUP BY `CITY` ORDER BY `RURAL_ROAD` DESC LIMIT 1;
gold_sql: SELECT
  CITY AS 市,
  COUNTY_ROAD AS 县道里程
FROM
  gl_lc
WHERE
  HIGHWAY > 5000;
pred_sql: SELECT `CITY` AS '城市', `COUNTY_ROAD` AS '县道里程'  FROM gl_lc  WHERE `HIGHWAY` > 5000  ORDER BY `YEAR` DESC;
gold_sql: SELECT
  CITY AS 市,
  (PROVINCIAL_ROAD + COUNTY_ROAD) AS 省道和县道总里程
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
ORDER BY
  省道和县道总里程 DESC
LIMIT
  1;
pred_sql: SELECT `CITY`, SUM(`PROVINCIAL_ROAD` + `COUNTY_ROAD`) AS `总里程` FROM `gl_lc` WHERE `YEAR` = '2022' GROUP BY `CITY` ORDER BY `总里程` DESC LIMIT 1;
gold_sql: SELECT
  AVG(HIGHWAY) AS 公路里程平均数
FROM
  gl_lc
WHERE
  `YEAR` = '2022';
pred_sql: SELECT AVG(`HIGHWAY`) AS '平均公路里程' FROM `gl_lc` WHERE `YEAR` = '2022';
gold_sql: SELECT
  CITY AS 市,
  TOWNSHIP_ROAD AS 乡道里程
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
ORDER BY
  TOWNSHIP_ROAD DESC;
pred_sql: SELECT `CITY`, `TOWNSHIP_ROAD` AS '乡道里程'  FROM gl_lc  WHERE `YEAR` = '2022'  ORDER BY `TOWNSHIP_ROAD` DESC;
gold_sql: SELECT
  CITY AS 城市
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
  AND HIGHWAY BETWEEN 7000 AND 10000;
pred_sql: SELECT `CITY` AS '城市', `HIGHWAY` AS '公路里程'  FROM gl_lc  WHERE `YEAR` = '2022' AND `HIGHWAY` BETWEEN 7000 AND 10000;
gold_sql: SELECT
  CITY AS 市,
  (NATIONAL_ROAD + PROVINCIAL_ROAD) AS 国道和省道的总里程
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
ORDER BY
  国道和省道的总里程 ASC
LIMIT
  1;
pred_sql: SELECT `CITY`, SUM(`NATIONAL_ROAD` + `PROVINCIAL_ROAD`) AS `总里程` FROM `GL_LC` WHERE `YEAR` = '2022' GROUP BY `CITY` ORDER BY `总里程` ASC LIMIT 1;
gold_sql: SELECT
  CITY AS 市,
  SPECIAL_PURPOSE_ROAD AS 专用公路里程
FROM
  gl_lc
ORDER BY
  SPECIAL_PURPOSE_ROAD;
pred_sql: SELECT `CITY`, `SPECIAL_PURPOSE_ROAD` AS '专用公路里程'  FROM gl_lc  ORDER BY `SPECIAL_PURPOSE_ROAD` ASC;
gold_sql: SELECT
  CITY AS 市,
  HIGHWAY AS 公路里程
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
ORDER BY
  HIGHWAY DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '城市', MAX(`HIGHWAY`) AS '最长公路里程' FROM gl_lc WHERE `YEAR` = '2022' GROUP BY `CITY` ORDER BY `最长公路里程` DESC LIMIT 1;
gold_sql: SELECT
  SUM(COUNTY_ROAD) + SUM(TOWNSHIP_ROAD) AS 县道和乡道总里程
FROM
  gl_lc
WHERE
  `YEAR` = '2022';
pred_sql: SELECT SUM(`COUNTY_ROAD` + `TOWNSHIP_ROAD`) AS '县道和乡道总里程' FROM `GL_LC` WHERE `YEAR` = '2022';
gold_sql: SELECT
  CITY AS 市 
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
  AND PROVINCIAL_ROAD > 1000;
pred_sql: SELECT `CITY` AS '城市', `PROVINCIAL_ROAD` AS '省道里程'  FROM gl_lc  WHERE `YEAR` = '2022' AND `PROVINCIAL_ROAD` > 1000;
gold_sql: SELECT
  CITY AS 市,
  RURAL_ROAD AS 农村公路里程
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
ORDER BY
  RURAL_ROAD DESC;
pred_sql: SELECT `CITY`, `RURAL_ROAD` AS '农村公路里程'  FROM gl_lc  WHERE `YEAR` = '2022'  ORDER BY `RURAL_ROAD` DESC;
gold_sql: SELECT
  CITY AS 市,
  (NATIONAL_ROAD + PROVINCIAL_ROAD + COUNTY_ROAD) AS 国道、省道和县道总里程
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
ORDER BY
  国道、省道和县道总里程 ASC
LIMIT
  1;
pred_sql: SELECT `CITY`, SUM(`NATIONAL_ROAD` + `PROVINCIAL_ROAD` + `COUNTY_ROAD`) AS `总里程` FROM `GL_LC` WHERE `YEAR` = '2022' GROUP BY `CITY` ORDER BY `总里程` ASC LIMIT 1;
gold_sql: SELECT
  COUNT(CITY) AS 城市数
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
  AND COUNTY_ROAD > 1000;
pred_sql: SELECT COUNT(DISTINCT `CITY`) AS `城市数量` FROM `gl_lc` WHERE `YEAR` = '2022' AND `COUNTY_ROAD` > 1000;
gold_sql: SELECT
  CITY AS 市
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
  AND TOWNSHIP_ROAD > 2000;
pred_sql: SELECT DISTINCT `CITY` AS '城市' FROM gl_lc WHERE `YEAR` = '2022' AND `TOWNSHIP_ROAD` > 2000;
gold_sql: SELECT
  COUNT(CITY) As 城市数
FROM
  gl_lc
WHERE
  `YEAR` = '2022'
  AND HIGHWAY > 10000;
pred_sql: SELECT COUNT(DISTINCT CITY) AS `城市数量` FROM gl_lc WHERE `YEAR` = '2022' AND HIGHWAY > 10000;
gold_sql: SELECT
  a.CITY AS 市,
  (a.HIGHWAY - b.HIGHWAY) AS `今年新增公路里程（公里）`
FROM
  gl_lc a
  JOIN gl_lc b ON a.CITY = b.CITY
  AND b.`YEAR` = '2023'
WHERE
  a.`YEAR` = '2024'
ORDER BY
  (a.HIGHWAY - b.HIGHWAY) DESC
LIMIT
  1;
pred_sql: SELECT `CITY`, SUM(`HIGHWAY`) AS '新增公路里程' FROM gl_lc WHERE `YEAR` = '2024' GROUP BY `CITY` ORDER BY `新增公路里程` DESC LIMIT 1;
gold_sql: SELECT
  AVG(PROVINCIAL_ROAD) AS 省道里程平均值
FROM
  gl_lc
WHERE
  `YEAR` = '2022';
pred_sql: SELECT `CITY`, AVG(`PROVINCIAL_ROAD`) AS '平均省道里程' FROM gl_lc WHERE `YEAR` = '2022' GROUP BY `CITY`;
gold_sql: SELECT
  SUM(CHELL) AS `货车流量总和（辆/两周）`
FROM
  gsgl_od_flow
WHERE
  GCRQ BETWEEN '2024-05-21' AND '2024-06-03'
  AND O_CITY = '泰州市'
  AND O_DISTRICTS = '泰兴市'
  AND D_CITY = '南京市'
  AND D_DISTRICTS = '栖霞区'
  AND CHELLX LIKE '货%';
pred_sql: SELECT SUM(`CHELL`) AS `货车流量总和` FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2024-05-21' AND '2024-06-03'   AND `O_PROVINCE` = '江苏省'   AND `O_CITY` = '泰州市'   AND `O_DISTRICTS` = '泰兴市'   AND `D_PROVINCE` = '江苏省'   AND `D_CITY` = '南京市'   AND `D_DISTRICTS` = '栖霞区'   AND `CHELLX` = '货车';
gold_sql: SELECT SUM(`CHELL`) AS `总流量` FROM `gsgl_od_flow` WHERE `GCRQ` = '2023-11-15' AND `O_PROVINCE` = '江苏省' AND `D_PROVINCE` = '江苏省' AND `CHELLX` = '货三';
pred_sql: SELECT SUM(`CHELL`) AS `总流量` FROM `gsgl_od_flow` WHERE `GCRQ` = '2023-11-15' AND `O_PROVINCE` LIKE '%江苏%' AND `CHELLX` = '货三型';
gold_sql: SELECT sum(CHELL) AS `日均车流量（辆/天）`  FROM gsgl_od_flow  WHERE GCRQ = (SELECT MAX(GCRQ) FROM gsgl_od_flow)   AND O_CITY = '泰州市'    AND D_CITY = '南京市'    AND D_DISTRICTS = '栖霞区';
pred_sql: SELECT AVG(`CHELL`) AS '日均车流量' FROM `gsgl_od_flow` WHERE `O_CITY` = '泰州市' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区' AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM `gsgl_od_flow`);
gold_sql: SELECT
  O_CITY As 出发城市名称,
  SUM(CHELL) AS `车流量（辆/天）`
FROM
  gsgl_od_flow
WHERE
  D_CITY = '南京市'
  AND D_DISTRICTS = '栖霞区'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_od_flow
  )
GROUP BY
  O_CITY
ORDER BY
  `车流量（辆/天）` DESC
LIMIT
  5;
pred_sql: SELECT `O_CITY` AS '出发城市', SUM(`CHELL`) AS '车流量' FROM gsgl_od_flow WHERE `D_PROVINCE` = '江苏省' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区' GROUP BY `O_CITY` ORDER BY SUM(`CHELL`) DESC LIMIT 5;
gold_sql: SELECT
  (
    SELECT
      SUM(CHELL)
    FROM
      GSGL_OD_FLOW
    WHERE
      O_CITY = '泰州市'
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区'
      AND GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_OD_FLOW
      )
  ) AS 泰州市到南京市栖霞区的高速公路车流量,
  (
    SELECT
      SUM(CHELL)
    FROM
      GSGL_OD_FLOW
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_OD_FLOW
      )
  ) AS 总车流量,
  (
    SELECT
      SUM(CHELL)
    FROM
      GSGL_OD_FLOW
    WHERE
      O_CITY = '泰州市'
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区'
      AND GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_OD_FLOW
      )
  ) / (
    SELECT
      SUM(CHELL)
    FROM
      GSGL_OD_FLOW
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          GSGL_OD_FLOW
      )
  ) AS 泰州市到南京市栖霞区的高速公路车流量在所有区间中的占比
FROM
  DUAL;
pred_sql: SELECT SUM(CASE WHEN `O_CITY` = '泰州市' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区' THEN `CHELL` ELSE 0 END) / SUM(`CHELL`) AS `占比` FROM gsgl_od_flow WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_od_flow);
gold_sql: SELECT SUM(`CHELL`) AS `日均流量`  FROM `gsgl_od_flow`  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `gsgl_od_flow`)  AND `O_PROVINCE` = '江苏省' AND `D_PROVINCE` = '江苏省'  AND `O_CITY` != `D_CITY`  AND `CHELLX` LIKE '货%';
pred_sql: SELECT AVG(`CHELL`) AS '江苏省内跨城市货车的高速公路日均流量' FROM `gsgl_od_flow` WHERE `O_PROVINCE` = '江苏省' AND `D_PROVINCE` != '江苏省' AND `CHELLX` = '货车';
gold_sql: SELECT CHELLX AS `最大车流量的车辆类型`  FROM gsgl_od_flow  WHERE O_PROVINCE = '江苏省'    AND O_CITY = '泰州市'    AND D_PROVINCE = '江苏省'    AND D_CITY = '南京市'    AND D_DISTRICTS = '栖霞区'  ORDER BY CHELL DESC  LIMIT 1;
pred_sql: SELECT `CHELLX` AS '车辆类型', SUM(`CHELL`) AS '总车流量' FROM gsgl_od_flow WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_od_flow)   AND `O_PROVINCE` = '江苏省'   AND `O_CITY` = '泰州市'   AND `D_PROVINCE` = '江苏省'   AND `D_CITY` = '南京市'   AND `D_DISTRICTS` = '栖霞区' GROUP BY `CHELLX` ORDER BY SUM(`CHELL`) DESC LIMIT 1;
gold_sql: SELECT
  `D_PROVINCE` AS `终点省份`,
  SUM(`CHELL`) AS `车流量（辆/天）`
FROM
  `gsgl_od_flow`
WHERE
  `GCRQ` = '2024-05-05'
  AND `O_PROVINCE` = '江苏省'
  AND `D_PROVINCE` != '江苏省'
GROUP BY
  `D_PROVINCE`;
pred_sql: SELECT `O_PROVINCE` AS '起点省份', `D_PROVINCE` AS '终点省份', SUM(`CHELL`) AS '车流量（辆/天）' FROM `gsgl_od_flow` WHERE `GCRQ` = '2024-05-05' AND `O_PROVINCE` LIKE '%江苏%' GROUP BY `O_PROVINCE`, `D_PROVINCE`;
gold_sql: SELECT GCRQ AS `观测日期`, SUM(CHELL) AS `货车流量（辆/天）` FROM gsgl_od_flow WHERE GCRQ >= '2024-04-01' AND GCRQ <= '2024-04-30' AND O_CITY = '泰州市' AND D_CITY = '南京市' AND D_DISTRICTS = '栖霞区' AND CHELLX LIKE '货%' GROUP BY GCRQ ORDER BY GCRQ;
pred_sql: SELECT `GCRQ` AS '观测日期', SUM(`CHELL`) AS '货车流量变化趋势' FROM `gsgl_od_flow` WHERE `O_PROVINCE` = '江苏省' AND `O_CITY` = '泰州市' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区' AND `CHELLX` = '货车' AND `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' GROUP BY `GCRQ`;
gold_sql: SELECT
  (
    SELECT
      SUM(CHELL)
    FROM
      gsgl_od_flow
    WHERE
      O_CITY = '泰州市'
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区'
      AND CHELLX LIKE '货%'
      AND GCRQ BETWEEN '2024-04-01' AND '2024-04-30'
  ) / (
    SELECT
      SUM(CHELL)
    FROM
      gsgl_od_flow
    WHERE
      GCRQ BETWEEN '2024-04-01' AND '2024-04-30'
  ) * 100 AS '货车流量百分比'
FROM
  DUAL;
pred_sql: SELECT CONCAT(ROUND((SUM(CASE WHEN `CHELLX` = '货车' THEN `CHELL` ELSE 0 END) / SUM(`CHELL`)) * 100, 2), '%') AS '货车流量百分比' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' AND `O_PROVINCE` = '江苏省' AND `O_CITY` = '泰州市' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区';
gold_sql: SELECT  
    AVG(CASE WHEN DAYOFWEEK(`GCRQ`) IN (1, 7) THEN `CHELL` ELSE 0 END) AS `周末流量`,  
    AVG(CASE WHEN DAYOFWEEK(`GCRQ`) NOT IN (1, 7) THEN `CHELL` ELSE 0 END) AS `工作日流量`  
FROM  
    `gsgl_od_flow`  
WHERE  
    `O_CITY` = '泰州市'  
    AND `O_DISTRICTS` = '泰兴市'  
    AND `CHELLX` LIKE '货%';
pred_sql: SELECT      SUM(CASE WHEN WEEKDAY(`GCRQ`) IN (5, 6) THEN `CHELL` ELSE 0 END) AS '周末出发量',     SUM(CASE WHEN WEEKDAY(`GCRQ`) IN (0, 1, 2, 3, 4) THEN `CHELL` ELSE 0 END) AS '工作日出发量',     SUM(CASE WHEN WEEKDAY(`GCRQ`) IN (5, 6) THEN `CHELL` ELSE 0 END) -      SUM(CASE WHEN WEEKDAY(`GCRQ`) IN (0, 1, 2, 3, 4) THEN `CHELL` ELSE 0 END) AS '差异' FROM      gsgl_od_flow WHERE      `O_PROVINCE` = '江苏省' AND      `O_CITY` = '泰州市' AND      `O_DISTRICTS` = '泰兴市';
gold_sql: SELECT
  QUARTER(GCRQ) AS `季度`,
  AVG(CHELL) AS `季度车流量（辆/天）`
FROM
  gsgl_od_flow
WHERE
  GCRQ BETWEEN '2023-08-15' AND '2024-05-15'
  AND O_PROVINCE = '江苏省'
  AND O_CITY = '泰州市'
  AND D_PROVINCE = '江苏省'
  AND D_CITY = '南京市'
  AND D_DISTRICTS = '栖霞区'
GROUP BY
  QUARTER(GCRQ);
pred_sql: SELECT `GCRQ` AS '观测日期', SUM(`CHELL`) AS '车流量（辆/天）' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2023-08-15' AND '2024-05-15'   AND `O_PROVINCE` = '江苏省'   AND `O_CITY` = '泰州市'   AND `D_PROVINCE` = '江苏省'   AND `D_CITY` = '南京市'   AND `D_DISTRICTS` = '栖霞区' GROUP BY `GCRQ`;
gold_sql: SELECT
  AVG(
    CASE
      WHEN O_DISTRICTS = '泰兴市'
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区' THEN CHELL
      ELSE 0
    END
  ) AS `泰兴市到南京市栖霞区车流量（辆/天）`,
  AVG(
    CASE
      WHEN NOT(
        O_DISTRICTS = '泰兴市'
        AND D_CITY = '南京市'
        AND D_DISTRICTS = '栖霞区'
      ) THEN CHELL
      ELSE 0
    END
  ) AS `其他高速公路车流量（辆/天）`
FROM
  gsgl_od_flow
WHERE
  GCRQ BETWEEN '2024-03-05' AND '2024-06-05';
pred_sql: SELECT SUM(CASE WHEN `O_PROVINCE` = '江苏省' AND `O_CITY` = '泰兴市' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区' THEN `CHELL` ELSE 0 END) AS '泰兴市到南京市栖霞区车流量',        SUM(CASE WHEN `O_PROVINCE` = '江苏省' AND `O_CITY` = '泰兴市' AND (`D_PROVINCE` != '江苏省' OR `D_CITY` != '南京市' OR `D_DISTRICTS` != '栖霞区') THEN `CHELL` ELSE 0 END) AS '同期其他高速公路车流量' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2024-03-05' AND '2024-06-05';
gold_sql: SELECT
  SUM(
    CASE
      WHEN O_CITY = '南京市'
      AND O_DISTRICTS = '栖霞区'
      AND D_CITY = '泰州市'
      AND D_DISTRICTS = '泰兴市' THEN CHELL
      ELSE 0
    END
  ) AS `南京市栖霞区到泰兴市车流量（辆/天）`,
  SUM(
    CASE
      WHEN O_CITY = '泰州市'
      AND O_DISTRICTS = '泰兴市'
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区' THEN CHELL
      ELSE 0
    END
  ) AS `泰兴市到南京市栖霞区车流量（辆/天）`
FROM
  gsgl_od_flow
WHERE
  GCRQ BETWEEN '2024-05-29' AND '2024-06-04';
pred_sql: SELECT      SUM(CASE WHEN `O_CITY` = '南京市' AND `O_DISTRICTS` = '栖霞区' AND `D_CITY` = '泰兴市' THEN `CHELL` ELSE 0 END) AS `南京到泰兴车流量`,     SUM(CASE WHEN `O_CITY` = '泰兴市' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区' THEN `CHELL` ELSE 0 END) AS `泰兴到南京车流量` FROM      gsgl_od_flow WHERE      `GCRQ` BETWEEN '2024-05-29' AND '2024-06-04';
gold_sql: SELECT CHELLX AS `车型`, SUM(CHELL) AS `车流量（辆/天）`  FROM gsgl_od_flow  WHERE GCRQ BETWEEN '2023-11-15' AND '2024-05-15'    AND O_PROVINCE = '江苏省'    AND O_CITY = '泰州市'    AND O_DISTRICTS = '泰兴市'    AND D_PROVINCE = '江苏省'    AND D_CITY = '南京市'    AND D_DISTRICTS = '栖霞区'  GROUP BY CHELLX;
pred_sql: SELECT `CHELLX` AS '车型', SUM(`CHELL`) AS '车流量' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2023-11-15' AND '2024-05-15'   AND `O_PROVINCE` = '江苏省'   AND `O_CITY` = '泰兴市'   AND `D_PROVINCE` = '江苏省'   AND `D_CITY` = '南京市'   AND `D_DISTRICTS` = '栖霞区' GROUP BY `CHELLX`;
gold_sql: SELECT      (SUM(CASE WHEN `CHELLX` LIKE '货%' THEN `CHELL` END) / SUM(`CHELL`)) * 100 AS `货车流量占比` FROM      `gsgl_od_flow`  WHERE      `GCRQ` = '2023-11-15' AND      `O_DISTRICTS` = '泰兴市';
pred_sql: SELECT      (SUM(CASE WHEN `CHELLX` = '货车' THEN `CHELL` ELSE 0 END) / SUM(`CHELL`)) * 100 AS '泰兴市高速公路出发的货车流量占当天总流量的百分比' FROM      gsgl_od_flow WHERE      `GCRQ` = '2023-11-15' AND `O_DISTRICTS` = '泰兴市';
gold_sql: SELECT      (SELECT SUM(CHELL) FROM gsgl_od_flow       WHERE GCRQ BETWEEN '2024-01-01' AND '2024-03-31'       AND O_DISTRICTS = '泰兴市' AND D_CITY = '南京市' AND D_DISTRICTS = '栖霞区')      AS `本季度车流量（辆/天）`,     (SELECT SUM(CHELL) FROM gsgl_od_flow       WHERE GCRQ BETWEEN '2023-10-01' AND '2023-12-31'       AND O_DISTRICTS = '泰兴市' AND D_CITY = '南京市' AND D_DISTRICTS = '栖霞区')      AS `上季度车流量（辆/天）`
pred_sql: SELECT      SUM(CASE WHEN `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' THEN `CHELL` ELSE 0 END) AS `2024年一季度车流量`,     SUM(CASE WHEN `GCRQ` BETWEEN '2023-10-01' AND '2023-12-31' THEN `CHELL` ELSE 0 END) AS `2023年四季度车流量`,     (SUM(CASE WHEN `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' THEN `CHELL` ELSE 0 END) -       SUM(CASE WHEN `GCRQ` BETWEEN '2023-10-01' AND '2023-12-31' THEN `CHELL` ELSE 0 END)) AS `车流量变化量` FROM      gsgl_od_flow WHERE      `O_CITY` = '泰兴市' AND      `D_PROVINCE` = '江苏省' AND      `D_CITY` = '南京市' AND      `D_DISTRICTS` = '栖霞区';
gold_sql: SELECT      O_CITY AS `起点城市`,      SUM(CHELL) AS `货三车流量` FROM      gsgl_od_flow  WHERE      CHELLX = '货三'      AND GCRQ BETWEEN '2024-05-08' AND '2024-05-15' GROUP BY      O_CITY  ORDER BY      `货三车流量` DESC  LIMIT 5;
pred_sql: SELECT `O_CITY` AS '起点城市', SUM(`CHELL`) AS '货三车流量' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2024-05-08' AND '2024-05-15' AND `CHELLX` = '货三车' GROUP BY `O_CITY` ORDER BY `货三车流量` DESC;
gold_sql: SELECT
  O_DISTRICTS as `车流量最大地区`,
  CHELLX as `车辆类型`,
  SUM(CHELL) as `最大车流量`
FROM
  gsgl_od_flow
WHERE
  GCRQ = "2024-05-12"
  AND O_PROVINCE = "江苏省"
GROUP BY
  O_DISTRICTS,
  CHELLX
ORDER BY
  `最大车流量` DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS` AS '地区', `CHELLX` AS '类型', SUM(`CHELL`) AS '车流量' FROM `gsgl_od_flow` WHERE `GCRQ` = '2024-05-12' AND `O_PROVINCE` = '江苏省' GROUP BY `O_DISTRICTS`, `CHELLX` ORDER BY `车流量` DESC LIMIT 1;
gold_sql: SELECT
  AVG(`CHELL`) AS `每天平均车流量`
FROM
  `gsgl_od_flow`
WHERE
  `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31'
  AND `O_DISTRICTS` = '泰兴市';
pred_sql: SELECT AVG(`CHELL`) AS '平均每天从泰兴市出发的高速公路车流量' FROM `gsgl_od_flow` WHERE `O_CITY` = '泰兴市' AND `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  CHELLX AS 车辆类型,
  SUM(CHELL) AS 车流量
FROM
  gsgl_od_flow
WHERE
  O_CITY = '泰州市'
  AND D_CITY = '南京市'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_od_flow
    WHERE
      O_CITY = '泰州市'
      AND D_CITY = '南京市'
  )
GROUP BY
  CHELLX;
pred_sql: SELECT `CHELLX` AS '车辆类型', SUM(`CHELL`) AS '车流量' FROM gsgl_od_flow WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_od_flow)   AND `O_CITY` = '泰州市'   AND `D_CITY` = '南京市' GROUP BY `CHELLX`;
gold_sql: SELECT    O_PROVINCE AS `起点省份`,    SUM(CHELL) AS `货三车流量最大` FROM    gsgl_od_flow  WHERE    O_PROVINCE != '江苏省'    AND D_CITY = '南京市'    AND CHELLX = '货三'    AND GCRQ BETWEEN '2024-04-01' AND '2024-04-30'  GROUP BY    O_PROVINCE  ORDER BY    `货三车流量最大` DESC  LIMIT 1;
pred_sql: SELECT `O_PROVINCE` AS '起点省份', SUM(`CHELL`) AS '总车流量' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30'   AND `D_CITY` = '南京市'   AND `CHELLX` = '货三'   AND `O_PROVINCE` != '江苏省' GROUP BY `O_PROVINCE` ORDER BY `总车流量` DESC LIMIT 1;
gold_sql: SELECT GCRQ AS `观测日期`, MAX(CHELL) AS `最高峰车流量（辆/天）` FROM gsgl_od_flow WHERE O_DISTRICTS = '泰兴市' AND D_DISTRICTS = '栖霞区' AND GCRQ BETWEEN '2024-04-15' AND '2024-05-15' GROUP BY GCRQ ORDER BY `最高峰车流量（辆/天）` DESC LIMIT 1;
pred_sql: SELECT `GCRQ` AS '日期', SUM(`CHELL`) AS '车流量' FROM gsgl_od_flow WHERE `O_CITY` = '泰兴市' AND `D_CITY` = '栖霞区' AND `GCRQ` BETWEEN '2024-04-15' AND '2024-05-15' GROUP BY `GCRQ` ORDER BY SUM(`CHELL`) DESC LIMIT 1;
gold_sql: SELECT
  (
    SELECT
      SUM(CHELL)
    FROM
      gsgl_od_flow
    WHERE
      GCRQ BETWEEN '2024-05-01' AND '2024-05-31'
      AND O_CITY = '泰州市'
    AND O_DISTRICTS IS NULL
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区'
  ) AS `今年车流量`,
  (
    SELECT
      SUM(CHELL)
    FROM
      gsgl_od_flow
    WHERE
      GCRQ BETWEEN '2023-05-01' AND '2023-05-31'
      AND O_CITY = '泰州市'
    AND O_DISTRICTS IS NULL
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区'
  ) AS `去年同期车流量`,
  (
    SELECT
      SUM(CHELL)
    FROM
      gsgl_od_flow
    WHERE
      GCRQ BETWEEN '2024-05-01' AND '2024-05-31'
      AND O_CITY = '泰州市'
    AND O_DISTRICTS IS NULL
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区'
  ) - (
    SELECT
      SUM(CHELL)
    FROM
      gsgl_od_flow
    WHERE
      GCRQ BETWEEN '2023-05-01' AND '2023-05-31'
      AND O_CITY = '泰州市'
    AND O_DISTRICTS IS NULL
      AND D_CITY = '南京市'
      AND D_DISTRICTS = '栖霞区'
  ) AS `车流量增长（辆）`
pred_sql: SELECT SUM(CASE WHEN `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' THEN `CHELL` ELSE 0 END) AS '今年车流量',        SUM(CASE WHEN `GCRQ` BETWEEN '2023-05-01' AND '2023-05-31' THEN `CHELL` ELSE 0 END) AS '去年车流量',        (SUM(CASE WHEN `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' THEN `CHELL` ELSE 0 END) -          SUM(CASE WHEN `GCRQ` BETWEEN '2023-05-01' AND '2023-05-31' THEN `CHELL` ELSE 0 END)) /         SUM(CASE WHEN `GCRQ` BETWEEN '2023-05-01' AND '2023-05-31' THEN `CHELL` ELSE 0 END) * 100 AS '同比增长率' FROM `gsgl_od_flow` WHERE (`O_PROVINCE` = '江苏省' AND `O_CITY` = '泰州市' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '南京市' AND `D_DISTRICTS` = '栖霞区')    OR (`O_PROVINCE` = '江苏省' AND `O_CITY` = '南京市' AND `D_PROVINCE` = '江苏省' AND `D_CITY` = '泰州市' AND `D_DISTRICTS` = '栖霞区');
gold_sql: SELECT
  `DRTXL` AS `内河航道通行量`
FROM
  `r_cz_z`
WHERE
  `GCRQ` = '2024-05-30'
pred_sql: SELECT SUM(`DRTXL`) AS `上个月30号内河航道通行量` FROM `r_cz_z` WHERE `GCRQ` = '2024-05-30';
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  r_cz_z
ORDER BY
  PJDZSJ DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', MAX(`PJDZSJ`) AS '最长平均待闸时间' FROM r_cz_z WHERE `GCRQ` IN (     SELECT MAX(`GCRQ`)     FROM r_cz_z ) GROUP BY `GCRQ`;
gold_sql: SELECT `GCRQ` AS `观测日期`, `DRLLHB` AS `日环比增长` FROM r_cz_z WHERE `GCRQ` BETWEEN '2024-05-08' AND '2024-05-15'
pred_sql: SELECT `GCRQ` AS '观测日期', `DRTXL` AS '当日内河航道通行量', `DRLLHB` AS '当日通行量环比'  FROM r_cz_z  WHERE `GCRQ` BETWEEN '2024-05-08' AND '2024-05-15';
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  r_cz_z
WHERE
  TXXL = '通行效率一般'
  AND GCRQ BETWEEN DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        r_cz_z
    ),
    INTERVAL 1 MONTH
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      r_cz_z
  );
pred_sql: SELECT `GCRQ` AS '日期'  FROM r_cz_z  WHERE `TXXL` = '一般';
gold_sql: SELECT AVG(`DRTXL`) AS `日均通行量` FROM r_cz_z WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' 
pred_sql: SELECT AVG(`DRTXL`) AS '上季度内河航道日均通行量' FROM `r_cz_z` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT `GCRQ` AS `观测日期`, `DRLLHB` AS `通行量环比增长` FROM r_cz_z WHERE `DRLLHB` = (SELECT MAX(`DRLLHB`) FROM r_cz_z)
pred_sql: SELECT `GCRQ` AS '日期', `DRLLHB` AS '当日通行量环比'  FROM r_cz_z  ORDER BY `DRLLHB` DESC  LIMIT 1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `TXXL` AS `通行效率`
FROM
  `r_cz_z`
WHERE
  `GCRQ` BETWEEN '2024-06-02' AND '2024-06-04'
pred_sql: SELECT `GCRQ` AS '观测日期', `DRTXL` AS '当日内河航道通行量', `PJDZSJ` AS '平均待闸时间（小时）', `DRLLHB` AS '当日通行量环比', `TXXL` AS '通行效率'  FROM r_cz_z  WHERE `GCRQ` BETWEEN '2024-06-02' AND '2024-06-04';
gold_sql: SELECT
  `GCRQ` AS `日期`
FROM
  r_cz_z
WHERE
  `DRTXL` > 8000
  AND `GCRQ` BETWEEN '2023-01-01' AND '2023-12-31';
pred_sql: SELECT `GCRQ` AS '日期'  FROM r_cz_z  WHERE `DRTXL` > 8000  AND `GCRQ` BETWEEN '2023-01-01' AND '2023-12-31';
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `TXXL` AS `通行效率`
FROM
  `r_cz_z`
WHERE
  `GCRQ` BETWEEN '2024-05-05' AND '2024-06-04'
pred_sql: SELECT `GCRQ` AS '观测日期', `DRTXL` AS '当日内河航道通行量', `PJDZSJ` AS '平均待闸时间（小时）', `DRLLHB` AS '当日通行量环比', `TXXL` AS '通行效率' FROM r_cz_z WHERE `GCRQ` BETWEEN '2024-05-05' AND '2024-06-04';
gold_sql: SELECT `DRTXL` AS `内河航道通行量` FROM r_cz_z WHERE `GCRQ` = '2023-11-30' 
pred_sql: SELECT `DRTXL` AS '内河航道通行量'  FROM r_cz_z  WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT
  GCRQ AS 日期
FROM
  r_cz_z
WHERE
  GCRQ BETWEEN '2024-06-02' AND '2024-06-04'
  AND PJDZSJ > 0.25
ORDER BY
  GCRQ;
pred_sql: SELECT `GCRQ` AS '日期' FROM r_cz_z WHERE `GCRQ` BETWEEN '2024-06-02' AND '2024-06-04' GROUP BY `GCRQ` HAVING AVG(`PJDZSJ`) > 15 / 60;
gold_sql: SELECT
  COUNT(GCRQ) AS 通行量环比增长天数
FROM
  r_cz_z
WHERE
  DRLLHB > 0
  AND GCRQ BETWEEN '2024-05-29' AND '2024-06-05';
pred_sql: SELECT COUNT(*) AS `环比增长日期数量` FROM r_cz_z WHERE GCRQ BETWEEN '2024-05-29' AND '2024-06-05' AND DRLLHB > 0;
gold_sql: SELECT TXXL,GCRQ AS '最高通行效率日期'  
FROM (  
    SELECT GCRQ,  
           TXXL,  
           CASE   
               WHEN TXXL = '通行效率良好' THEN 3  
               WHEN TXXL = '通行效率一般' THEN 2  
               WHEN TXXL = '通行效率较低' THEN 1  
               ELSE 0  
           END AS SortOrder  
    FROM R_CZ_Z  
    WHERE DATE(GCRQ) BETWEEN '2023-11-01' AND '2023-11-30'  
) AS SubQuery  
ORDER BY SortOrder DESC, GCRQ DESC;
pred_sql: SELECT `GCRQ` AS '日期', `TXXL` AS '通行效率'  FROM r_cz_z  WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30'  ORDER BY `TXXL` DESC  LIMIT 1;
gold_sql: SELECT
  COUNT(DISTINCT GCRQ) AS 日数
FROM
  r_cz_z
WHERE
  TXXL = '通行效率良好'
  AND PJDZSJ <= 0.25;
pred_sql: SELECT COUNT(DISTINCT `GCRQ`) AS `日期数量` FROM `r_cz_z` WHERE `TXXL` = '通行效率良好' AND `PJDZSJ` <= 0.25;
gold_sql: SELECT
  DATE_FORMAT(GCRQ, '%Y-%m') AS `月份`,
  AVG(PJDZSJ) AS `平均待闸时间（小时）`
FROM
  r_cz_z
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-06-05'
GROUP BY
  `月份`
ORDER BY
  `平均待闸时间（小时）` DESC
LIMIT
  1;
pred_sql: SELECT DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`, AVG(`PJDZSJ`) AS `平均待闸时间` FROM r_cz_z WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-06-05' GROUP BY DATE_FORMAT(`GCRQ`, '%Y-%m') ORDER BY `平均待闸时间` DESC LIMIT 1;
gold_sql: SELECT
  DRHWL as `当日话务量`
FROM
  r_rxhw_z
WHERE
  GCRQ = '2024-05-31';
pred_sql: SELECT `DRHWL` AS '当日话务量' FROM r_rxhw_z WHERE `GCRQ` = '2024-05-31';
gold_sql: SELECT
  DRHWL AS `当日话务量`
FROM
  r_rxhw_z
WHERE
  GCRQ = '2024-05-05';
pred_sql: SELECT `DRHWL` AS '话务量' FROM r_rxhw_z WHERE `GCRQ` = '2024-05-05';
gold_sql: SELECT GCRQ AS "日期", DRHB AS "话务量环比" FROM r_rxhw_z WHERE GCRQ BETWEEN '2023-11-17' AND '2023-11-19' ORDER BY GCRQ;
pred_sql: SELECT `GCRQ` AS '观测日期', `DRHB` AS '当日话务量环比' FROM r_rxhw_z WHERE `GCRQ` BETWEEN '2023-11-17' AND '2023-11-20';
gold_sql: SELECT GCRQ as `日期`, DRHWL as `当日话务量（爱尔兰）`  
FROM r_rxhw_z  
WHERE DRHWL = (  
    SELECT MAX(DRHWL)  
    FROM r_rxhw_z  
    WHERE GCRQ BETWEEN '2024-05-09' AND '2024-05-16'  
)  
AND GCRQ BETWEEN '2024-05-09' AND '2024-05-16';
pred_sql: SELECT `GCRQ` AS '日期', `DRHWL` AS '当日话务量'  FROM r_rxhw_z  WHERE `GCRQ` BETWEEN '2024-05-09' AND '2024-05-16'  ORDER BY `DRHWL` DESC  LIMIT 1;
gold_sql: SELECT SUM(DRHWL) as `上个季度话务量总和` FROM r_rxhw_z WHERE GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT SUM(`DRHWL`) AS `上个季度话务量总和` FROM `r_rxhw_z` WHERE `GCRQ` >= '2024-01-01' AND `GCRQ` <= '2024-03-31';
gold_sql: SELECT
  COUNT(*) AS `超过10000爱尔兰天数`
FROM
  r_rxhw_z
WHERE
  DYLJHWL > 10000
pred_sql: SELECT COUNT(*) AS `超过10000爱尔兰的天数` FROM `r_rxhw_z` WHERE `DYLJHWL` > 10000;
gold_sql: SELECT COUNT(*) AS '话务量环比下降天数' FROM r_rxhw_z  WHERE GCRQ BETWEEN '2024-04-16' AND '2024-05-16' AND DRHB < 0;
pred_sql: SELECT COUNT(*) AS `环比下降天数` FROM r_rxhw_z WHERE `GCRQ` BETWEEN '2024-04-16' AND '2024-05-16' AND `DRHB` < 0;
gold_sql: SELECT    COALESCE((SELECT DRHWL FROM r_rxhw_z WHERE GCRQ = '2024-05-16'), 0) -   COALESCE((SELECT DRHWL FROM r_rxhw_z WHERE GCRQ = '2024-04-16'), 0) AS `话务量增加值`
pred_sql: SELECT      `DRHWL` AS '当前话务量',      (SELECT `DRHWL` FROM r_rxhw_z WHERE `GCRQ` = '2024-04-16') AS '上个月同期话务量',      (`DRHWL` - (SELECT `DRHWL` FROM r_rxhw_z WHERE `GCRQ` = '2024-04-16')) AS '增加的话务量' FROM      r_rxhw_z ORDER BY      `GCRQ` DESC LIMIT 1;
gold_sql: SELECT
  AVG(DRHB) AS '话务量环比平均变化'
FROM
  r_rxhw_z
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-04-30';
pred_sql: SELECT AVG(`DRHB`) AS '上个月话务量环比平均变化' FROM `r_rxhw_z` WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31';
gold_sql: SELECT
  GCRQ As 观测日期,
  DRHB AS 当日话务量环比
FROM
  r_rxhw_z
WHERE
  DRHWL < 1000;
pred_sql: SELECT `GCRQ` AS '日期', `DRHWL` AS '当日话务量', `DRHB` AS '环比情况'  FROM r_rxhw_z  WHERE `DRHWL` < 1000;
gold_sql: SELECT GCRQ AS `最后一次当日话务量为0的日期` FROM r_rxhw_z WHERE DRHWL = 927 ORDER BY GCRQ DESC LIMIT 1;
pred_sql: SELECT `GCRQ` AS '日期'  FROM r_rxhw_z  WHERE `DRHWL` = 927  ORDER BY `GCRQ` DESC  LIMIT 1;
gold_sql: SELECT      GCRQ AS '观测日期',      DRHWL AS '当日话务量',     DRHB AS '当日话务量环比',     DYLJHWL AS '当月累计话务量' FROM      r_rxhw_z  WHERE      GCRQ BETWEEN '2024-01-01' AND '2024-05-16'  ORDER BY      GCRQ;
pred_sql: SELECT `GCRQ` AS '观测日期', `DRHWL` AS '当日话务量（单位：爱尔兰）', `DYLJHWL` AS '当月累计话务量（单位：爱尔兰）' FROM `r_rxhw_z` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-05-16' ORDER BY `GCRQ`;
gold_sql: SELECT
  GCRQ 观测日期
FROM
  r_rxhw_z
WHERE
  DRHB > 0.05;
pred_sql: SELECT `GCRQ` AS '观测日期', `DRHWL` AS '当日话务量'  FROM r_rxhw_z  WHERE `DRHB` > 0.05;
gold_sql: SELECT
  GCRQ AS `日期`,
  DRHWL AS `当日话务量（爱尔兰）`
FROM
  r_rxhw_z
WHERE
  GCRQ BETWEEN '2024-05-29' AND '2024-06-04'
  AND DRHWL < (
    SELECT
      AVG(DRHWL)
    FROM
      r_rxhw_z
    WHERE
      GCRQ BETWEEN '2024-06-02' AND '2024-06-05'
  );
pred_sql: SELECT `GCRQ` AS '日期', `DRHWL` AS '当日话务量' FROM r_rxhw_z WHERE `GCRQ` BETWEEN '2024-05-29' AND '2024-06-04' AND `DRHWL` < (     SELECT AVG(`DRHWL`)     FROM r_rxhw_z     WHERE `GCRQ` BETWEEN '2024-06-02' AND '2024-06-05' );
gold_sql: SELECT      MAX(DRHWL) AS `最高话务量`, MIN(DRHWL) AS `最低话务量`,      (SELECT GCRQ FROM r_rxhw_z ORDER BY DRHWL DESC, GCRQ DESC LIMIT 1) AS `最高话务量日期`,     (SELECT GCRQ FROM r_rxhw_z ORDER BY DRHWL ASC, GCRQ DESC LIMIT 1) AS `最低话务量日期` FROM r_rxhw_z;
pred_sql: SELECT      `GCRQ` AS `日期`,      `DRHWL` AS `话务量` FROM      r_rxhw_z WHERE      `DRHWL` = (SELECT MAX(`DRHWL`) FROM r_rxhw_z)    OR      `DRHWL` = (SELECT MIN(`DRHWL`) FROM r_rxhw_z);
gold_sql: SELECT `FSBC` AS `发送班次` FROM `r_tlbc_z` WHERE `GCRQ` = '2023-11-30';
pred_sql: SELECT `FSBC` AS '发送班次' FROM r_tlbc_z WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT (`FSBC` - `DDBC`) AS `差额` FROM `r_tlbc_z` WHERE `GCRQ` = '2023-11-30';
pred_sql: SELECT `FSBC` - `DDBC` AS '差额' FROM `r_tlbc_z` WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT (FSBC / ZBC) * 100 AS `发送班次占总班次百分比` FROM r_tlbc_z WHERE GCRQ = '2023-11-30';
pred_sql: SELECT CAST(SUM(`FSBC`) AS REAL) * 100 / SUM(`ZBC`) AS `铁路发送班次数占总班次的百分比` FROM `r_tlbc_z` WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT (FSBC / DDBC) * 100 AS `发送班次与到达班次的比例` FROM r_tlbc_z WHERE GCRQ = '2023-11-30';
pred_sql: SELECT `FSBC` / `ZBC` AS '发送班次数与到达班次数的比例' FROM `r_tlbc_z` WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT `GCRQ` AS `观测日期`, `ZBC` AS `总班次`, `DDBC` AS `到达班次`, `FSBC` AS `发送班次` FROM `r_tlbc_z` WHERE `GCRQ` = '2023-11-30';
pred_sql: SELECT `ZBC` AS '总班次', `DDBC` AS '到达班次', `FSBC` AS '发送班次' FROM r_tlbc_z WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM r_tlbc_z);
gold_sql: SELECT
  SUM(ZBC) AS `上个月总班次`
FROM
  r_tlbc_z
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31';
pred_sql: SELECT SUM(`ZBC`) AS '总班次' FROM `r_tlbc_z` WHERE `GCRQ` >= '2024-05-01' AND `GCRQ` <= '2024-05-31';
gold_sql: SELECT DDBC -(ZBC / 2) AS `到达班次与总班次一半的差值` FROM r_tlbc_z WHERE GCRQ = '2023-11-30';
pred_sql: SELECT `GCRQ`, `ZBC`, `DDBC`, CASE WHEN `DDBC` > (`ZBC` / 2) THEN '是' ELSE '否' END AS `是否超过一半` FROM `r_tlbc_z` WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT
  `GCRQ` AS `日期`
FROM
  `r_tlbc_z`
WHERE
  `FSBC` > `DDBC`
  AND `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30';
pred_sql: SELECT `GCRQ` AS '日期', `FSBC` - `DDBC` AS '发送班次与到达班次差值' FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30' AND `FSBC` > `DDBC`;
gold_sql: SELECT
  AVG(`DDBC`) AS '平均每天到达铁路班次'
FROM
  r_tlbc_z
WHERE
  `GCRQ` BETWEEN '2024-06-03' AND '2024-06-09';
pred_sql: SELECT AVG(`DDBC`) AS '平均每天到达班次' FROM `r_tlbc_z` WHERE `GCRQ` BETWEEN '2024-06-03' AND '2024-06-09';
gold_sql: SELECT
  (
    SELECT
      `ZBC`
    FROM
      `r_tlbc_z`
    WHERE
      `GCRQ` = '2024-06-05'
  ) AS '今年铁路总班次',
  (
    SELECT
      `ZBC`
    FROM
      `r_tlbc_z`
    WHERE
      `GCRQ` = '2023-06-05'
  ) AS '去年同期铁路总班次'
pred_sql: SELECT      SUM(CASE WHEN `GCRQ` = '2024-06-05' THEN `ZBC` ELSE 0 END) AS `今年总班次`,     SUM(CASE WHEN `GCRQ` = '2023-06-05' THEN `ZBC` ELSE 0 END) AS `去年总班次`,     (SUM(CASE WHEN `GCRQ` = '2024-06-05' THEN `ZBC` ELSE 0 END) - SUM(CASE WHEN `GCRQ` = '2023-06-05' THEN `ZBC` ELSE 0 END)) / SUM(CASE WHEN `GCRQ` = '2023-06-05' THEN `ZBC` ELSE 0 END) * 100 AS `同比变化百分比` FROM      r_tlbc_z;
gold_sql: SELECT    (SELECT SUM(`DDBC`)    FROM `r_tlbc_z`    WHERE `GCRQ` BETWEEN "2024-05-01" AND "2024-05-21") -    (SELECT SUM(`DDBC`)    FROM `r_tlbc_z`    WHERE `GCRQ` BETWEEN "2024-04-01" AND "2024-04-21") AS `增长的到达班次` 
pred_sql: SELECT      SUM(IF(GCRQ >= '2024-05-01' AND GCRQ <= '2024-05-21', DDBC, 0)) AS `本月到达班次`,     SUM(IF(GCRQ >= '2024-04-01' AND GCRQ <= '2024-04-21', DDBC, 0)) AS `上月同期到达班次` FROM      r_tlbc_z;
gold_sql: SELECT   DATE_FORMAT(GCRQ, '%Y-%m') AS 月份,   AVG(ZBC) AS 平均每日铁路班次 FROM   r_tlbc_z WHERE   GCRQ BETWEEN '2023-05-22' AND '2024-05-21' GROUP BY   月份 ORDER BY   平均每日铁路班次 DESC LIMIT 1;
pred_sql: SELECT DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`, AVG(`ZBC`) AS `平均每日铁路班次` FROM r_tlbc_z WHERE `GCRQ` BETWEEN '2023-05-22' AND '2024-05-21' GROUP BY DATE_FORMAT(`GCRQ`, '%Y-%m') ORDER BY `平均每日铁路班次` DESC LIMIT 1;
gold_sql: SELECT
  COUNT(*) AS 发送班次持续增加的天数
FROM
  (
    SELECT
      GCRQ,
      FSBC,
      LAG(FSBC) OVER (
        ORDER BY
          GCRQ
      ) AS PrevFSBC
    FROM
      R_TLBC_Z
    WHERE
      GCRQ BETWEEN '2024-04-01' AND '2024-06-30'
  ) AS RankedSendings
WHERE
  FSBC > PrevFSBC
  OR (
    FSBC = PrevFSBC
    AND PrevFSBC IS NULL
  );
pred_sql: SELECT COUNT(*) AS `持续增加的天数` FROM r_tlbc_z WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-06-30' AND `FSBC` > (SELECT `FSBC` FROM r_tlbc_z AS sub WHERE sub.`GCRQ` = (SELECT MAX(`GCRQ`) FROM r_tlbc_z WHERE `GCRQ` < r_tlbc_z.`GCRQ`));
gold_sql: SELECT
  TQ as `天气情况`
FROM
  r_jbxx_z
WHERE
  GCRQ = '2024-04-25';
pred_sql: SELECT `GCRQ` AS '观测日期', `XQ` AS '星期', `TQ` AS '天气'  FROM r_jbxx_z  WHERE `GCRQ` = '2024-04-25';
gold_sql: SELECT DISTINCT TQ AS `天气类型` FROM r_jbxx_z WHERE GCRQ BETWEEN '2024-05-19' AND '2024-05-21';
pred_sql: SELECT DISTINCT `TQ` AS '天气类型'  FROM r_jbxx_z  WHERE `GCRQ` BETWEEN '2024-05-19' AND '2024-05-21';
gold_sql: SELECT COUNT(*) AS `多云天气出现的频率`  FROM `r_jbxx_z`  WHERE `TQ` = '多云'  AND `GCRQ` BETWEEN '2023-11-16' AND '2023-11-30';
pred_sql: SELECT COUNT(*) AS `多云天气出现频率` FROM `r_jbxx_z` WHERE `TQ` = '多云' AND `GCRQ` BETWEEN '2023-11-16' AND '2023-11-30';
gold_sql: SELECT
  COUNT(*) AS `星期天的多云天数`
FROM
  r_jbxx_z
WHERE
  XQ = '星期天'
  AND TQ = '多云'
  AND GCRQ BETWEEN '2024-04-01' AND '2024-04-30';
pred_sql: SELECT COUNT(*) AS `多云的星期天数` FROM `r_jbxx_z` WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' AND `XQ` = '星期日' AND `TQ` = '多云';
gold_sql: SELECT
  a.`GCRQ` AS `开始晴天日期`,
  MIN(b.`GCRQ`) AS `结束晴天日期`
FROM
  `r_jbxx_z` a
  LEFT JOIN `r_jbxx_z` b ON a.`GCRQ` = b.`GCRQ` - INTERVAL 1 DAY
  AND b.`TQ` = '晴'
WHERE
  a.`TQ` = '晴'
  AND a.`GCRQ` BETWEEN '2023-11-15' AND '2023-11-30'
GROUP BY
  a.`GCRQ`
HAVING
  `结束晴天日期` IS NOT NULL
ORDER BY
  a.`GCRQ`;
pred_sql: SELECT `GCRQ` AS '观测日期', `TQ` AS '天气'  FROM r_jbxx_z  WHERE `GCRQ` BETWEEN '2023-11-15' AND '2023-11-30'  AND `TQ` = '晴';
gold_sql: SELECT DISTINCT TQ AS `天气类型` FROM r_jbxx_z WHERE GCRQ BETWEEN '2024-05-15' AND '2024-05-22';
pred_sql: SELECT DISTINCT `TQ` AS '天气'  FROM r_jbxx_z  WHERE `GCRQ` BETWEEN '2024-05-15' AND '2024-05-22';
gold_sql: SELECT COUNT(*) AS `星期三观测次数` FROM r_jbxx_z WHERE XQ = '星期三' AND GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT COUNT(*) AS `星期三天气观测次数` FROM `r_jbxx_z` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' AND `XQ` = '星期三';
gold_sql: SELECT MIN(`GCRQ`) AS `开始晴天日期`, MAX(`GCRQ`) AS `结束晴天日期` FROM (     SELECT `GCRQ`,             CASE                 WHEN `TQ` = '晴' THEN @curRank := @curRank + 1                ELSE @curRank := 0             END AS `rank`     FROM `r_jbxx_z`, (SELECT @curRank := 0) r     ORDER BY `GCRQ` DESC ) ranked WHERE `rank` >= 3 ORDER BY `GCRQ` DESC LIMIT 1;
pred_sql: SELECT MIN(GCRQ) AS `开始日期`, MAX(GCRQ) AS `结束日期` FROM (     SELECT GCRQ,             LEAD(GCRQ, 1) OVER (ORDER BY GCRQ) AS next_day,            LEAD(GCRQ, 2) OVER (ORDER BY GCRQ) AS day_after_next     FROM r_jbxx_z     WHERE TQ = '晴天' ) AS subquery WHERE DATEDIFF(next_day, GCRQ) = 1 AND DATEDIFF(day_after_next, GCRQ) = 2;
gold_sql: SELECT TQ AS `天气`, COUNT(*) AS `出现次数` FROM r_jbxx_z GROUP BY TQ ORDER BY COUNT(*) DESC LIMIT 1;
pred_sql: SELECT `TQ` AS '天气', COUNT(*) AS '出现次数' FROM r_jbxx_z GROUP BY `TQ` ORDER BY COUNT(*) DESC LIMIT 1;
gold_sql: SELECT
  a.GCRQ AS 观测日期,
  a.TQ AS 天气
FROM
  r_jbxx_z a
  JOIN r_jbxx_z b ON a.id = b.id + 1
WHERE
  a.TQ != b.TQ;
pred_sql: SELECT GCRQ AS '观测日期', TQ AS '天气' FROM r_jbxx_z WHERE TQ != (SELECT TQ FROM r_jbxx_z WHERE GCRQ = (SELECT MAX(GCRQ) FROM r_jbxx_z)) ORDER BY GCRQ;
gold_sql: SELECT TQ AS `天气类型`, COUNT(*) AS `观测次数` FROM r_jbxx_z GROUP BY TQ;
pred_sql: SELECT `TQ` AS '天气类型', COUNT(*) AS '观测次数' FROM `r_jbxx_z` GROUP BY `TQ`;
gold_sql: SELECT DATEDIFF(MAX(GCRQ), MIN(GCRQ)) AS `相隔天数` FROM r_jbxx_z;
pred_sql: SELECT DATEDIFF((SELECT MAX(`GCRQ`) FROM `r_jbxx_z`), (SELECT MIN(`GCRQ`) FROM `r_jbxx_z`)) AS `相隔天数`;
gold_sql: SELECT
  SUM(REXHWL) as `热线服务话务总量`
FROM
  rxfwzt
WHERE
  GCRQ = '2024-05-12'
  AND XINGZQH = '320100';
pred_sql: SELECT SUM(`REXHWL`) AS `热线服务话务总量` FROM `rxfwzt` WHERE `GCRQ` = '2024-05-12' AND `XINGZQH` = '320100';
gold_sql: SELECT      SUM(CASE WHEN GCRQ = '2023-01-01' THEN REXHWL ELSE 0 END) AS `2023年1月1日热线话务量`,     SUM(CASE WHEN GCRQ = '2023-02-01' THEN REXHWL ELSE 0 END) AS `2023年2月1日热线话务量` FROM      rxfwzt WHERE      GCRQ IN ('2023-01-01', '2023-02-01');
pred_sql: SELECT      SUM(CASE WHEN `GCRQ` = '2023-01-01' THEN `REXHWL` ELSE 0 END) AS `2023年1月1日热线话务量`,     SUM(CASE WHEN `GCRQ` = '2023-02-01' THEN `REXHWL` ELSE 0 END) AS `2023年2月1日热线话务量` FROM      rxfwzt;
gold_sql: SELECT      DATE_FORMAT(GCRQ, '%Y-%m') AS `月份`,     TOUSYWL AS `投诉业务量`,     RANK() OVER (ORDER BY TOUSYWL DESC) AS `排名` FROM     rxfwzt WHERE     GCRQ BETWEEN '2024-04-01' AND '2024-06-30' GROUP BY     `月份`;
pred_sql: SELECT      DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`,      SUM(`TOUSYWL`) AS `投诉业务量` FROM      rxfwzt WHERE      `GCRQ` BETWEEN '2024-04-01' AND '2024-06-30' GROUP BY      DATE_FORMAT(`GCRQ`, '%Y-%m') ORDER BY      `投诉业务量` DESC;
gold_sql: SELECT AVG(ZIXYWL) as `平均咨询业务量` FROM rxfwzt WHERE GCRQ BETWEEN '2023-01-01' AND '2024-05-22' AND XINGZQH = '320100';
pred_sql: SELECT AVG(`ZIXYWL`) AS '平均咨询业务量' FROM `rxfwzt` WHERE `XINGZQH` = '320100' AND `GCRQ` BETWEEN '2023-01-01' AND '2024-05-22';
gold_sql: SELECT
  XINGZQH AS 行政区划,
  MAX(TOUSYWL) AS `最高投诉业务量`
FROM
  rxfwzt
WHERE
  GCRQ = '2023-01-01'
GROUP BY
  XINGZQH
ORDER BY
  `最高投诉业务量` DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', SUM(`TOUSYWL`) AS '投诉业务量' FROM rxfwzt WHERE `GCRQ` = '2023-01-01' GROUP BY `XINGZQH` ORDER BY SUM(`TOUSYWL`) DESC LIMIT 1;
gold_sql: SELECT COUNT(DISTINCT GCRQ) AS `超过10000热线话务量的行政区划天数` FROM rxfwzt WHERE REXHWL > 10000 AND GCRQ BETWEEN '2024-05-19' AND '2024-05-21';
pred_sql: SELECT `XINGZQH` AS '行政区划', SUM(`REXHWL`) AS '热线话务量总和' FROM rxfwzt WHERE `GCRQ` BETWEEN '2024-05-19' AND '2024-05-21' GROUP BY `XINGZQH` HAVING SUM(`REXHWL`) > 10000;
gold_sql: SELECT
  COUNT(DISTINCT GCRQ) AS '超过投诉业务量的天数'
FROM
  (
    SELECT
      GCRQ,
      SUM(ZIXYWL) AS SumZixywl,
      SUM(TOUSYWL) AS SumTousywl
    FROM
      rxfwzt
    GROUP BY
      GCRQ
  ) AS SubQuery
WHERE
  SumZixywl > SumTousywl;
pred_sql: SELECT COUNT(*) AS `天数` FROM (     SELECT `GCRQ`, SUM(`ZIXYWL`) AS `总咨询业务量`, SUM(`TOUSYWL`) AS `总投诉业务量`     FROM rxfwzt     GROUP BY `GCRQ`     HAVING `总咨询业务量` > `总投诉业务量` ) AS subquery;
gold_sql: SELECT SUM(TOUSYWL) as `第一季度投诉业务量` FROM rxfwzt WHERE GCRQ BETWEEN '2023-01-01' AND '2023-03-31' AND XINGZQH = '320100';
pred_sql: SELECT SUM(`TOUSYWL`) AS `投诉业务量` FROM `rxfwzt` WHERE `XINGZQH` = '320100' AND `GCRQ` BETWEEN '2023-01-01' AND '2023-03-31';
gold_sql: SELECT XINGZQH, MIN(ZIXYWL) AS `最小咨询业务量`, MAX(ZIXYWL) AS `最大咨询业务量`, AVG(ZIXYWL) AS `平均咨询业务量` FROM rxfwzt GROUP BY XINGZQH;
pred_sql: SELECT      `XINGZQH` AS '行政区划',      MIN(`ZIXYWL`) AS '咨询业务量最小值',      MAX(`ZIXYWL`) AS '咨询业务量最大值',      AVG(`ZIXYWL`) AS '咨询业务量平均值' FROM      rxfwzt GROUP BY      `XINGZQH`;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  XINGZQH AS `行政区划`,
  REXHWL AS `热线话务量（爱尔兰）`
FROM
  RXFWZT
WHERE
  REXHWL BETWEEN 9000 AND 10000;
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `REXHWL` AS '热线话务量（爱尔兰）'  FROM rxfwzt  WHERE `REXHWL` BETWEEN 9000 AND 10000;
gold_sql: SELECT EXISTS(SELECT 1 FROM rxfwzt WHERE TOUSYWL = 0) AS `是否存在投诉业务量为0的记录`;
pred_sql: SELECT COUNT(*) AS `投诉业务量为0的观测日期数量` FROM `rxfwzt` WHERE `TOUSYWL` = 0;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  rxfwzt
WHERE
  XINGZQH = '320100'
  AND ZIXYWL > 3000
  AND TOUSYWL < 4000;
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `ZIXYWL` AS '咨询业务量', `TOUSYWL` AS '投诉业务量'  FROM rxfwzt  WHERE `XINGZQH` = '320100' AND `ZIXYWL` > 3000 AND `TOUSYWL` < 4000;
gold_sql: SELECT (sum(ZIXYWL) / sum(REXHWL) * 100) AS `咨询业务占比百分比` FROM rxfwzt WHERE GCRQ = '2023-01-01';
pred_sql: SELECT      (SUM(`ZIXYWL`) / SUM(`REXHWL`)) * 100 AS `咨询业务量占比热线话务量的百分比` FROM      rxfwzt WHERE      `GCRQ` = '2023-01-01';
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  rxfwzt
GROUP BY
  GCRQ
ORDER BY
  SUM(ZIXYWL) + SUM(TOUSYWL) DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ`, SUM(`ZIXYWL` + `TOUSYWL`) AS '业务量总和' FROM rxfwzt GROUP BY `GCRQ` ORDER BY `业务量总和` DESC LIMIT 1;
gold_sql: SELECT DISTINCT
  a.XINGZQH AS 行政区划
FROM
  rxfwzt a
  JOIN rxfwzt b ON a.XINGZQH = b.XINGZQH
  AND a.GCRQ = b.GCRQ + INTERVAL 1 DAY
  JOIN rxfwzt c ON b.XINGZQH = c.XINGZQH
  AND b.GCRQ = c.GCRQ + INTERVAL 1 DAY
WHERE
  a.REXHWL > b.REXHWL
  AND b.REXHWL > c.REXHWL;
pred_sql: SELECT a.`XINGZQH` AS '行政区划', a.`GCRQ` AS '观测日期', a.`REXHWL` AS '热线话务量（爱尔兰）' FROM rxfwzt a JOIN rxfwzt b ON a.`XINGZQH` = b.`XINGZQH` AND DATE(a.`GCRQ`) = DATE(b.`GCRQ`) + INTERVAL 1 DAY WHERE a.`REXHWL` > b.`REXHWL`;
gold_sql: SELECT SUM(REXHWL) AS `2023年1月热线话务总和` FROM rxfwzt WHERE GCRQ BETWEEN '2023-01-01' AND '2023-01-31';
pred_sql: SELECT SUM(`REXHWL`) AS `热线话务量总和` FROM `rxfwzt` WHERE `GCRQ` = '2023-01-01';
gold_sql: SELECT
  XINGZQH As 行政区划
FROM
  rxfwzt
WHERE
  TOUSYWL > ZIXYWL
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      rxfwzt
  );
pred_sql: SELECT `XINGZQH` AS '行政区划' FROM rxfwzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM rxfwzt) AND `TOUSYWL` > `ZIXYWL`;
gold_sql: SELECT
  COUNT(*) AS `话务量超过9000的日期数量`
FROM
  rxfwzt
WHERE
  REXHWL > 9000;
pred_sql: SELECT COUNT(DISTINCT `GCRQ`) AS '超过9000的日期数量' FROM `rxfwzt` WHERE `REXHWL` > 9000;
gold_sql: SELECT      (SUM(CASE WHEN GCRQ = '2023-02-01' THEN REXHWL END) - SUM(CASE WHEN GCRQ = '2023-01-01' THEN REXHWL END))     / SUM(CASE WHEN GCRQ = '2023-01-01' THEN REXHWL END) AS `环比增长` FROM rxfwzt WHERE GCRQ IN ('2023-01-01', '2023-02-01');
pred_sql: SELECT      (SUM(CASE WHEN GCRQ = '2023-02-01' THEN REXHWL ELSE 0 END) -       SUM(CASE WHEN GCRQ = '2023-01-01' THEN REXHWL ELSE 0 END)) /      SUM(CASE WHEN GCRQ = '2023-01-01' THEN REXHWL ELSE 0 END) AS `环比增长` FROM rxfwzt;
gold_sql: SELECT
  SUM(REXHWL) as `本月热线话务量`
FROM
  rxfwzt
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-03'
  AND XINGZQH = '320100';
pred_sql: SELECT SUM(`REXHWL`) AS `热线话务量` FROM `rxfwzt` WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-04' AND `XINGZQH` = '320100';
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  SUM(ZIXYWL) AS `咨询业务量（起）`
FROM
  rxfwzt
WHERE
  GCRQ BETWEEN '2024-05-29' AND '2024-06-04'
GROUP BY
  XINGZQH
ORDER BY
  SUM(ZIXYWL) DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', SUM(`ZIXYWL`) AS '咨询业务量' FROM rxfwzt WHERE `GCRQ` BETWEEN '2024-05-29' AND '2024-06-04' GROUP BY `XINGZQH` ORDER BY SUM(`ZIXYWL`) DESC LIMIT 1;
gold_sql: SELECT
  REXHWL as `热线话务量（爱尔兰）`
FROM
  rxfwzt
WHERE
  GCRQ = '2024-06-02';
pred_sql: SELECT `REXHWL` AS '热线话务量' FROM rxfwzt WHERE `GCRQ` = '2024-06-02';
gold_sql: SELECT     (SELECT SUM(TOUSYWL) FROM rxfwzt WHERE GCRQ BETWEEN '2023-02-01' AND '2023-02-28') -     (SELECT SUM(TOUSYWL) FROM rxfwzt WHERE GCRQ BETWEEN '2023-01-01' AND '2023-01-31')     AS `2023年2月投诉业务量变化`;
pred_sql: SELECT SUM(CASE WHEN `GCRQ` BETWEEN '2023-01-01' AND '2023-01-31' THEN `TOUSYWL` ELSE 0 END) AS `2023年1月投诉业务量`, SUM(CASE WHEN `GCRQ` BETWEEN '2023-02-01' AND '2023-02-28' THEN `TOUSYWL` ELSE 0 END) AS `2023年2月投诉业务量`, (SUM(CASE WHEN `GCRQ` BETWEEN '2023-02-01' AND '2023-02-28' THEN `TOUSYWL` ELSE 0 END) - SUM(CASE WHEN `GCRQ` BETWEEN '2023-01-01' AND '2023-01-31' THEN `TOUSYWL` ELSE 0 END)) AS `变化量` FROM `rxfwzt`;
gold_sql: SELECT
  XINGZQH AS 行政区划
FROM
  rxfwzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      rxfwzt
  )
  AND ZIXYWL > 0
  AND (TOUSYWL / ZIXYWL) = (
    SELECT
      MAX(TOUSYWL / NULLIF(ZIXYWL, 0))
    FROM
      rxfwzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          rxfwzt
      )
      AND ZIXYWL > 0
  );
pred_sql: SELECT `XINGZQH`, MAX(`TOUSYWL` / `ZIXYWL`) AS '投诉业务量与咨询业务量之比' FROM rxfwzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM rxfwzt) GROUP BY `XINGZQH` ORDER BY `投诉业务量与咨询业务量之比` DESC LIMIT 1;
gold_sql: SELECT
  '上个月' AS `时间段`,
  SUM(REXHWL) AS `总热线话务量`
FROM
  rxfwzt
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31'
UNION ALL
SELECT
  '两个月前' AS `时间段`,
  SUM(REXHWL) AS `总热线话务量`
FROM
  rxfwzt
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-04-30'
UNION ALL
SELECT
  '三个月前' AS `时间段`,
  SUM(REXHWL) AS `总热线话务量`
FROM
  rxfwzt
WHERE
  GCRQ BETWEEN '2024-03-01' AND '2024-03-31';
pred_sql: SELECT      DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`,      SUM(`REXHWL`) AS `总热线话务量` FROM      rxfwzt WHERE      `GCRQ` BETWEEN '2024-03-01' AND '2024-05-31' GROUP BY      DATE_FORMAT(`GCRQ`, '%Y-%m') ORDER BY      `月份`;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  SUM(TOUSYWL) / NULLIF(SUM(ZIXYWL), 0) AS 投诉业务量与咨询业务量的比例
FROM
  rxfwzt
GROUP BY
  XINGZQH;
pred_sql: SELECT      `XINGZQH` AS '行政区划',      SUM(`TOUSYWL`) / SUM(`ZIXYWL`) AS '投诉业务量与咨询业务量的比例' FROM      rxfwzt GROUP BY      `XINGZQH`;
gold_sql: SELECT XINGZQH AS 行政区划 FROM rxfwzt WHERE GCRQ BETWEEN '2024-04-01' AND '2024-04-30' AND ZIXYWL = (     SELECT MIN(ZIXYWL)     FROM rxfwzt     WHERE GCRQ BETWEEN '2024-04-01' AND '2024-04-30' );
pred_sql: SELECT `XINGZQH` AS '行政区划', SUM(`ZIXYWL`) AS '咨询业务量' FROM rxfwzt WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' GROUP BY `XINGZQH` ORDER BY SUM(`ZIXYWL`) ASC LIMIT 1;
gold_sql: SELECT
  XINGZQH AS '行政区划',
  MAX(REXHWL) - MIN(REXHWL) AS '最大波动'
FROM
  rxfwzt
WHERE
  GCRQ BETWEEN '2024-05-16' AND '2024-05-23'
GROUP BY
  XINGZQH
ORDER BY
  '最大波动' DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', MAX(`REXHWL`) - MIN(`REXHWL`) AS '波动量' FROM rxfwzt WHERE `GCRQ` BETWEEN '2024-05-16' AND '2024-05-23' GROUP BY `XINGZQH` ORDER BY `波动量` DESC LIMIT 1;
gold_sql: SELECT
  XINGZQH AS 行政区划
FROM
  rxfwzt
WHERE
  ZIXYWL > (
    SELECT
      AVG(ZIXYWL)
    FROM
      rxfwzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          rxfwzt
      )
  )
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      rxfwzt
  );
pred_sql: SELECT `XINGZQH` AS '行政区划', `ZIXYWL` AS '咨询业务量' FROM rxfwzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM rxfwzt) AND `ZIXYWL` > (     SELECT AVG(`ZIXYWL`)     FROM rxfwzt     WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM rxfwzt) );
gold_sql: SELECT      XINGZQH AS '行政区划',      (MAX(TOUSYWL) - MIN(TOUSYWL)) AS '投诉业务量增长量' FROM      rxfwzt  WHERE      GCRQ BETWEEN '2000-01-01' AND '2024-05-23'  GROUP BY      XINGZQH  ORDER BY      '投诉业务量增长量' DESC  LIMIT 1;
pred_sql: SELECT `XINGZQH` AS '行政区划', SUM(`TOUSYWL`) AS '投诉业务量' FROM rxfwzt WHERE `GCRQ` BETWEEN '2000-01-01' AND '2024-05-23' GROUP BY `XINGZQH` ORDER BY SUM(`TOUSYWL`) DESC LIMIT 1;
gold_sql: SELECT
  `CZ_RK` AS '常住人口数量（万人）'
FROM
  `RK_TJ`
WHERE
  `YEAR` = 2010
  AND `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
  AND `DISTRICT` IS NULL;
pred_sql: SELECT `CZ_RK` AS '常住人口数量'  FROM rk_tj  WHERE `YEAR` = '2010' AND `PROVINCE` = '安徽省' AND `CITY` = '安庆市';
gold_sql: SELECT
  CITY_RK AS '城镇人口数量（万人）'
FROM
  RK_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY = '安庆市'
  AND DISTRICT IS NULL;
pred_sql: SELECT `CITY_RK` AS '城镇人口数量'  FROM `rk_tj`  WHERE `YEAR` = '2010' AND `PROVINCE` = '安徽省' AND `CITY` = '安庆市';
gold_sql: SELECT
  `CITY` AS '地级市'
FROM
  `RK_TJ`
WHERE
  `PROVINCE` = '安徽省'
  AND `HJ_RK` = 616
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `RK_TJ`
  );
pred_sql: SELECT `CITY` AS '地级市' FROM rk_tj WHERE `PROVINCE` = '安徽省' AND `HJ_RK` = 616 AND `YEAR` = (SELECT MAX(`YEAR`) FROM rk_tj);
gold_sql: SELECT
  `CITY` AS '地级市'
FROM
  `RK_TJ`
WHERE
  `YEAR` = 2010
  AND `PROVINCE` = '安徽省'
  AND `CITY_RK` = 196
  AND `DISTRICT` IS NULL;
pred_sql: SELECT `CITY` AS '地级市'  FROM `rk_tj`  WHERE `YEAR` = '2010' AND `PROVINCE` = '安徽省' AND `CITY_RK` = 196;
gold_sql: SELECT
  HJ_RK AS '户籍人口数量（万人）'
FROM
  RK_TJ
WHERE
  YEAR = 2010
  AND PROVINCE = '安徽省'
  AND CITY = '安庆市'
  AND DISTRICT IS NULL;
pred_sql: SELECT `HJ_RK` AS '户籍人口数量' FROM rk_tj WHERE `YEAR` = '2010' AND `PROVINCE` = '安徽省' AND `CITY` = '安庆市';
gold_sql: SELECT
  `CZ_RK` AS '常住人口数量（万人）'
FROM
  `RK_TJ`
WHERE
  `YEAR` = 2010
  AND `PROVINCE` = '广东省'
  AND `CITY` = '广州市';
pred_sql: SELECT `CZ_RK` AS '常住人口数量' FROM rk_tj WHERE `YEAR` = '2010' AND `PROVINCE` = '广东省' AND `CITY` = '广州市';
gold_sql: SELECT
  PROVINCE AS 省
FROM
  rk_tj
WHERE
  HJ_RK = (
    SELECT
      MAX(HJ_RK)
    FROM
      rk_tj
  );
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`HJ_RK`) AS '户籍人口数量' FROM rk_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM rk_tj) GROUP BY `PROVINCE` ORDER BY SUM(`HJ_RK`) DESC LIMIT 1;
gold_sql: SELECT
  `CITY` As 市
FROM
  rk_tj
WHERE
  `CZ_RK` > 500
  AND DISTRICT IS NULL
  AND CITY IS NOT NULL
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      rk_tj
  )
GROUP BY
  `CITY`;
pred_sql: SELECT DISTINCT CITY AS '城市' FROM rk_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM rk_tj) AND CZ_RK > 500;
gold_sql: SELECT
  SUM(`CZ_RK`) AS '总人口数量'
FROM
  `RK_TJ`
WHERE
  `DISTRICT` IS NULL
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `RK_TJ`
  );
pred_sql: SELECT SUM(`CZ_RK`) AS '总人口数量' FROM `rk_tj` WHERE `DISTRICT` IS NULL;
gold_sql: SELECT
  YEAR AS '年份',
  CZ_RK AS '常住人口数量（万人）'
FROM
  RK_TJ
WHERE
  CZ_RK = (
    SELECT
      MAX(CZ_RK)
    FROM
      RK_TJ
  );
pred_sql: SELECT `YEAR`, SUM(`CZ_RK`) AS '常住人口总数' FROM rk_tj GROUP BY `YEAR` ORDER BY SUM(`CZ_RK`) DESC LIMIT 1;
gold_sql: SELECT
  CITY AS 市
FROM
  rk_tj
WHERE
  HJ_RK > CZ_RK
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      rk_tj
  );
pred_sql: SELECT DISTINCT CITY AS 城市名称 FROM rk_tj WHERE HJ_RK > CZ_RK;
gold_sql: SELECT
  CITY AS '城市',
  CZ_RK AS '常住人口（万人）'
FROM
  RK_TJ
WHERE
  `YEAR` = 2010
ORDER BY
  CZ_RK DESC
LIMIT
  5;
pred_sql: SELECT `CITY` AS '城市', SUM(`CZ_RK`) AS '常住人口数量' FROM `rk_tj` WHERE `YEAR` = '2010' GROUP BY `CITY` ORDER BY SUM(`CZ_RK`) DESC LIMIT 5;
gold_sql: SELECT
  CITY AS `地级市`,
  (MAX(YEAR) - MIN(YEAR)) AS `年数`,
  (MAX(CITY_RK) - MIN(CITY_RK)) AS `城镇人口增长`
FROM
  RK_TJ
WHERE
  YEAR >= (
    SELECT
      MAX(YEAR)
    FROM
      RK_TJ
  ) - 4
GROUP BY
  CITY
ORDER BY
  `城镇人口增长` DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '地级市', MAX(`CITY_RK`) - MIN(`CITY_RK`) AS '城镇人口增长' FROM `rk_tj` WHERE `YEAR` BETWEEN YEAR(CURDATE()) - 5 AND YEAR(CURDATE()) GROUP BY `CITY` ORDER BY `城镇人口增长` DESC LIMIT 1;
gold_sql: SELECT
  `CITY` As 市
FROM
  rk_tj
WHERE
  `HJ_RK` > 500
  AND DISTRICT IS NULL
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      rk_tj
  )
GROUP BY
  `CITY`;
pred_sql: SELECT DISTINCT CITY AS '地级市' FROM rk_tj WHERE HJ_RK > 500;
gold_sql: SELECT
  PROVINCE AS 省,
  DISTRICT AS 县级市
FROM
  rk_tj
WHERE
  DISTRICT IS NOT NULL
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      rk_tj
  )
GROUP BY
  PROVINCE,
  DISTRICT
ORDER BY
  AVG(HJ_RK) DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE`, `DISTRICT`, AVG(`HJ_RK`) AS '平均户籍人口' FROM rk_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM rk_tj) AND `DISTRICT` IS NOT NULL GROUP BY `PROVINCE`, `DISTRICT` ORDER BY `平均户籍人口` DESC LIMIT 1;
gold_sql: SELECT     curr.PROVINCE AS 省份,     (MAX(curr.CITY_RK) - MIN(prev.CITY_RK)) AS 城镇人口增长量 FROM     rk_tj curr JOIN     rk_tj prev ON curr.PROVINCE = prev.PROVINCE WHERE     curr.YEAR = (         SELECT MAX(YEAR)         FROM rk_tj         WHERE YEAR <= '2024-05-23'     )     AND prev.YEAR = (         SELECT MAX(YEAR)         FROM rk_tj         WHERE YEAR <= '2021-05-23'     ) GROUP BY     curr.PROVINCE ORDER BY     城镇人口增长量 DESC LIMIT 1;
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`CITY_RK`) AS '城镇人口增长量' FROM rk_tj WHERE `YEAR` BETWEEN '2021' AND '2024' GROUP BY `PROVINCE` ORDER BY `城镇人口增长量` DESC LIMIT 1;
gold_sql: SELECT CITY AS '地级市', (HJ_RK - CZ_RK) AS '户籍人口与常住人口之差' FROM rk_tj WHERE `YEAR` = '2024' ORDER BY (HJ_RK - CZ_RK) DESC LIMIT 1;
pred_sql: SELECT `CITY` AS '地级市', ABS(`CZ_RK` - `HJ_RK`) AS '常住人口与户籍人口之差' FROM `rk_tj` WHERE `YEAR` = '2024' AND (DATE(`DISTRICT`) BETWEEN '2024-01-01' AND '2024-03-31') ORDER BY `常住人口与户籍人口之差` DESC LIMIT 1;
gold_sql: SELECT DISTINCT
  CITY AS 市
FROM
  RK_TJ AS a
WHERE
  NOT EXISTS (
    SELECT
      1
    FROM
      RK_TJ AS b
    WHERE
      a.CITY = b.CITY
      AND b.CITY_RK <= b.CZ_RK
  );
pred_sql: SELECT CITY  FROM rk_tj  GROUP BY CITY  HAVING MIN(CZ_RK) > MAX(CITY_RK);
gold_sql: SELECT `CITY` AS 地级市, `HJ_RK` AS 户籍人口 FROM rk_tj WHERE `CZ_RK` > 400 AND `DISTRICT` IS NULL AND `CITY` IS NOT NULL AND `YEAR` = '2022' ORDER BY `HJ_RK` DESC LIMIT 1;
pred_sql: SELECT `CITY` AS '地级市', MAX(`HJ_RK`) AS '户籍人口最多' FROM `rk_tj` WHERE `YEAR` = '2023' AND `CZ_RK` > 4000000 GROUP BY `CITY` ORDER BY `HJ_RK` DESC LIMIT 1;
gold_sql: SELECT
  CITY AS 市,
  HJ_RK / CZ_RK AS '户籍人口与常住人口之比'
FROM
  rk_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      rk_tj
  )
ORDER BY
  HJ_RK / CZ_RK DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '地级市', MAX(`HJ_RK` / `CZ_RK`) AS '户籍人口与常住人口之比' FROM `rk_tj` WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM `rk_tj`) GROUP BY `CITY` ORDER BY `户籍人口与常住人口之比` DESC LIMIT 1;
gold_sql: SELECT
  rk.DISTRICT AS 县级市
FROM
  rk_tj rk
WHERE
  rk.DISTRICT IS NOT NULL
GROUP BY
  rk.DISTRICT
HAVING
  SUM(rk.CZ_RK >= rk.HJ_RK) = COUNT(*);
pred_sql: SELECT DISTINCT `DISTRICT` AS '县级市' FROM rk_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM rk_tj) GROUP BY `DISTRICT` HAVING MAX(`HJ_RK`) <= MAX(`CZ_RK`);
gold_sql: SELECT
  `GCRQ` As 观测日期,
  `KECZLL` AS 客车流量 ,
  `HUOCZLL` AS 货车流量
FROM
  ptgl_dmyxzt
WHERE
  `GUANCZMC` = '徐州S121王林'
ORDER BY
  `GCRQ` DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', `KECZLL` AS '客车总流量（辆/天）', `HUOCZLL` AS '货车总流量（辆/天）'  FROM ptgl_dmyxzt  WHERE `GUANCZMC` = '徐州S121王林观测站'  ORDER BY `GCRQ` DESC  LIMIT 1;
gold_sql: SELECT SUM(ZONGCLL) as `总车流量` FROM ptgl_dmyxzt WHERE GCRQ = '2023-09-29' AND XINGZQH = '3203';
pred_sql: SELECT SUM(`ZONGCLL`) AS `总车流量` FROM `ptgl_dmyxzt` WHERE `XINGZQH` = '3203' AND `GCRQ` = '2023-09-29';
gold_sql: SELECT
  `ZONGCLL` AS `总车流量`
FROM
  ptgl_dmyxzt
WHERE
  `GUANCZBM` = 'S121L121320324'
  AND `GCRQ` = '2024-05-05';
pred_sql: SELECT `ZONGCLL` AS '总车流量' FROM ptgl_dmyxzt WHERE `GUANCZBM` = 'S121L121320324' AND `GCRQ` = '2024-05-05';
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  KECZLL AS `客车流量`
FROM
  ptgl_dmyxzt
WHERE
  GCRQ BETWEEN '2023-09-01' AND '2023-09-30'
  AND GUANCZBM LIKE '%1324';
pred_sql: SELECT `KECZLL` AS '客车总流量' FROM ptgl_dmyxzt WHERE `GCRQ` = '2023-09-01' AND `GUANCZBM` LIKE '%1324';
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  HUOCZLL AS `货车流量`
FROM
  PTGL_DMYXZT
WHERE
  GUANCZMC LIKE '%S121%'
  AND GCRQ BETWEEN '2023-07-01' AND '2023-09-30';
pred_sql: SELECT SUM(`HUOCZLL`) AS '货车总流量' FROM `ptgl_dmyxzt` WHERE `GUANCZMC` LIKE '%S121%' AND `GCRQ` BETWEEN '2023-07-01' AND '2023-09-30';
gold_sql: SELECT
  `KECZLL` + `HUOCZLL` AS `客车和货车流量之和`
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = '2023-09-29'
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT SUM(`KECZLL` + `HUOCZLL`) AS '客车和货车流量之和' FROM `ptgl_dmyxzt` WHERE `GUANCZMC` = '徐州S121王林' AND `GCRQ` = '2023-09-29';
gold_sql: SELECT (KECZLL / ZONGCLL * 100) AS `客车流量占比百分比` FROM ptgl_dmyxzt WHERE GUANCZBM = 'S121L121320324' AND GCRQ = '2023-09-29';
pred_sql: SELECT `KECZLL` / `ZONGCLL` AS '客车流量占比' FROM ptgl_dmyxzt WHERE `GUANCZBM` = 'S121L121320324' AND `GCRQ` = '2023-09-29';
gold_sql: SELECT
  `HUOCZLL` AS 货车总流量
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
    WHERE
      DAYOFWEEK(`GCRQ`) = 1
  )
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT `HUOCZLL` AS '货车总流量' FROM ptgl_dmyxzt WHERE `GUANCZMC` = '徐州S121王林' AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_dmyxzt);
gold_sql: SELECT
  `GCRQ` AS 观测日期
FROM
  ptgl_dmyxzt
WHERE
  `GUANCZMC` = '徐州S121王林'
ORDER BY
  `GCRQ` DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期' FROM ptgl_dmyxzt WHERE `GUANCZMC` = '徐州S121王林观测站';
gold_sql: SELECT
  `ZONGCLL` AS 总车流量
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
    WHERE
      `GCRQ` < LAST_DAY(CURDATE() - INTERVAL 1 MONTH)
  )
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT SUM(`ZONGCLL`) AS '总车流量' FROM `ptgl_dmyxzt` WHERE `GUANCZMC` = '徐州S121王林观测站' AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM `ptgl_dmyxzt` WHERE `GCRQ` < CURDATE() - INTERVAL DAYOFMONTH(CURDATE())-1 DAY);
gold_sql: SELECT
  `KECZLL` AS 客车总流量
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
    WHERE
      `GCRQ` <= CURDATE() - INTERVAL 3 DAY
  )
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT SUM(`KECZLL`) AS '客车总流量' FROM `ptgl_dmyxzt` WHERE `GUANCZMC` = '徐州S121王林观测站' AND `GCRQ` >= CURDATE() - INTERVAL 3 DAY;
gold_sql: SELECT
  SUM(`ZONGCLL`) AS 总车流量
FROM
  `ptgl_dmyxzt`
WHERE
  `GUANCZMC` = '徐州S121王林'
  AND `GCRQ` <= (
    SELECT
      MAX(`GCRQ`)
    FROM
      `ptgl_dmyxzt`
    WHERE
      QUARTER(`GCRQ`) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))
      AND YEAR(`GCRQ`) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))
  );
pred_sql: SELECT SUM(`ZONGCLL`) AS `总车流量` FROM `ptgl_dmyxzt` WHERE `GUANCZBM` = 'S121' AND `GUANCZMC` LIKE '%徐州%' AND `GCRQ` <= (SELECT MAX(`GCRQ`) FROM `ptgl_dmyxzt` WHERE QUARTER(`GCRQ`) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(`GCRQ`) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)));
gold_sql: SELECT
  `GCRQ` As 观测日期
FROM
  ptgl_dmyxzt
WHERE
  `GUANCZMC` = '徐州S121王林'
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
    WHERE
      `GCRQ` < (
        SELECT
          MAX(`GCRQ`)
        FROM
          ptgl_dmyxzt
      ) - INTERVAL 7 DAY
  );
pred_sql: SELECT `GCRQ` AS '观测日期' FROM ptgl_dmyxzt WHERE `GUANCZBM` = 'S121' AND `GUANCZMC` LIKE '%徐州%' AND `GUANCZMC` LIKE '%王林%' ORDER BY `GCRQ` DESC LIMIT 1;
gold_sql: SELECT
  `HUOCZLL` AS `货车总流量（辆/天）`
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` BETWEEN '2024-05-29' AND '2024-06-04'
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT SUM(`HUOCZLL`) AS `近一周徐州S121王林观测站货车总流量` FROM `ptgl_dmyxzt` WHERE `GUANCZMC` = '徐州S121王林观测站' AND `GCRQ` BETWEEN '2024-05-29' AND '2024-06-04';
gold_sql: SELECT
  MAX(`GCRQ`) as 上一个月王林观测站的观测日期
FROM
  ptgl_dmyxzt
WHERE
  `GUANCZMC` = '徐州S121王林'
  AND MONTH(`GCRQ`) = MONTH(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH))
  AND YEAR(`GCRQ`) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH));
pred_sql: SELECT `GCRQ` AS '观测日期' FROM ptgl_dmyxzt WHERE `GUANCZBM` = 'S121' AND `GUANCZMC` LIKE '%徐州%' AND `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND `GCRQ` < CURDATE();
gold_sql: SELECT
  SUM(`KECZLL`) AS 客车总流量
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` > (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
  ) - INTERVAL 3 DAY
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT SUM(`KECZLL`) AS `客车总流量` FROM `ptgl_dmyxzt` WHERE `GUANCZMC` = '徐州S121王林观测站' AND `GCRQ` >= CURDATE() - INTERVAL 3 DAY;
gold_sql: SELECT
  SUM(`ZONGCLL`) AS 总流量
FROM
  `ptgl_dmyxzt`
WHERE
  `GUANCZMC` = '徐州S121王林'
  AND QUARTER(`GCRQ`) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))
  AND YEAR(`GCRQ`) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER));
pred_sql: SELECT SUM(`KECZLL`) AS '季度客车总流量' FROM `ptgl_dmyxzt` WHERE `GUANCZBM` = 'S121' AND `GUANCZMC` LIKE '%徐州%' AND `XINGZQH` LIKE '%徐州%' AND `GCRQ` BETWEEN '2023-07-01' AND '2023-09-30';
gold_sql: SELECT
  `XINGZQH` AS 行政区划
FROM
  ptgl_dmyxzt
WHERE
  `GUANCZMC` = '徐州S121王林'
ORDER BY
  `GCRQ` DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划'  FROM ptgl_dmyxzt  WHERE `GUANCZMC` = '徐州S121王林观测站' AND `GCRQ` = CURDATE();
gold_sql: SELECT
  SUM(`ZONGCLL`) AS 总车流量
FROM
  `ptgl_dmyxzt`
WHERE
  `GUANCZMC` = '徐州S121王林'
  AND `GCRQ` > DATE_SUB(
    (
      SELECT
        MAX(`GCRQ`)
      FROM
        `ptgl_dmyxzt`
    ),
    INTERVAL 7 DAY
  );
pred_sql: SELECT SUM(`ZONGCLL`) AS `近一周徐州S121王林观测站总车流量` FROM `ptgl_dmyxzt` WHERE `GUANCZBM` = '徐州S121王林观测站' AND `GCRQ` >= CURDATE() - INTERVAL 7 DAY;
gold_sql: SELECT
  `HUOCZLL` As 货车总流量
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = (
    SELECT
      LAST_DAY(MAX(`GCRQ`) - INTERVAL 1 MONTH)
    FROM
      ptgl_dmyxzt
  )
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT SUM(`HUOCZLL`) AS '货车总流量' FROM `ptgl_dmyxzt` WHERE `GUANCZMC` = '徐州S121王林观测站' AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM `ptgl_dmyxzt` WHERE `GCRQ` < CURDATE() - INTERVAL DAYOFMONTH(CURDATE())-1 DAY);
gold_sql: SELECT
  `KECZLL` AS 客车总流量
FROM
  ptgl_dmyxzt
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      ptgl_dmyxzt
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
      AND DAYOFWEEK(`GCRQ`) = 1
  )
  AND `GUANCZMC` = '徐州S121王林';
pred_sql: SELECT `KECZLL` AS '客车总流量'  FROM ptgl_dmyxzt  WHERE `GUANCZBM` = 'S121' AND `GUANCZMC` LIKE '%徐州%' AND `XINGZQH` LIKE '%徐州%' AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_dmyxzt);
gold_sql: SELECT      GUANCZMC AS `观测站名称`,     AVG(KECZLL) AS `平均日客车流量` FROM      ptgl_dmyxzt WHERE      GCRQ BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() GROUP BY      GUANCZMC ORDER BY      `平均日客车流量` DESC LIMIT 1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', AVG(`KECZLL`) AS '平均日客车流量' FROM ptgl_dmyxzt WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY GROUP BY `GUANCZBM` ORDER BY AVG(`KECZLL`) DESC LIMIT 1;
gold_sql: SELECT DISTINCT GUANCZMC AS `观测站名称` FROM ptgl_dmyxzt WHERE KECZLL > 10000 AND GCRQ = (     SELECT MAX(GCRQ)      FROM ptgl_dmyxzt      WHERE GCRQ < CURDATE() AND MONTH(GCRQ) = MONTH(CURDATE() - INTERVAL 1 MONTH) );
pred_sql: SELECT DISTINCT `GUANCZMC` AS '观测站名称'  FROM `ptgl_dmyxzt`  WHERE `KECZLL` > 10000  AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM `ptgl_dmyxzt`);
gold_sql: SELECT   
    GUANCZMC AS `观测站名称`,   
    SUM(ZONGCLL) AS `上个季度总车流量`   
FROM   
    ptgl_dmyxzt   
WHERE   
    GCRQ BETWEEN   
        DATE_SUB(DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL (1-QUARTER(CURDATE()))*3 MONTH), '%Y-%m-01'), INTERVAL 1 QUARTER)   
        AND   
        LAST_DAY(DATE_SUB(CURDATE(), INTERVAL QUARTER(CURDATE()) MONTH))  
GROUP BY   
    GUANCZMC   
ORDER BY   
    `上个季度总车流量` ASC   
LIMIT 1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`ZONGCLL`) AS '总车流量' FROM ptgl_dmyxzt WHERE QUARTER(`GCRQ`) = QUARTER(CURDATE()) - 1 AND YEAR(`GCRQ`) = YEAR(CURDATE()) GROUP BY `GUANCZBM` ORDER BY SUM(`ZONGCLL`) ASC LIMIT 1;
gold_sql: SELECT      GUANCZMC AS `观测站名称` FROM      ptgl_dmyxzt WHERE      GCRQ BETWEEN          DATE_SUB(DATE_SUB(LAST_DAY(CURDATE()), INTERVAL DAY(LAST_DAY(CURDATE())) - 1 DAY), INTERVAL 1 MONTH)         AND          DATE_SUB(LAST_DAY(CURDATE()), INTERVAL DAY(LAST_DAY(CURDATE())) DAY) GROUP BY      GUANCZMC HAVING      AVG(ZONGCLL) >= 15000;
pred_sql: SELECT `GUANCZBM`, `GUANCZMC`  FROM ptgl_dmyxzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_dmyxzt)  AND `ZONGCLL` >= 15000;
gold_sql: SELECT
  `GUANCZMC` AS 观测站名称,
  `GCRQ` AS 观测日期,
  SUM(`ZONGCLL`) AS 总车流量
FROM
  `ptgl_dmyxzt`
WHERE
  `XINGZQH` LIKE '3203%'
  AND `GCRQ` BETWEEN DATE_SUB(
    (
      SELECT
        MAX(`GCRQ`)
      FROM
        `ptgl_dmyxzt`
    ),
    INTERVAL 7 DAY
  ) AND (
    SELECT
      MAX(`GCRQ`)
    FROM
      `ptgl_dmyxzt`
  )
GROUP BY
  `GUANCZMC`,
  `GCRQ`
ORDER BY
  `GUANCZMC`,
  `GCRQ`;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', `GCRQ` AS '观测日期', SUM(`KECZLL`) AS '客车总流量', SUM(`HUOCZLL`) AS '货车总流量', SUM(`ZONGCLL`) AS '总车流量' FROM `ptgl_dmyxzt` WHERE `XINGZQH` LIKE '%徐州%' AND `GCRQ` BETWEEN '2023-10-10' AND '2023-10-17' GROUP BY `GUANCZMC`, `GCRQ`;
gold_sql: SELECT      GUANCZMC AS `观测站名称` FROM      (         SELECT              id,             GUANCZMC,             GCRQ,             ZONGCLL,             LAG(ZONGCLL, 1) OVER (PARTITION BY GUANCZMC ORDER BY GCRQ DESC) AS `前一日车流量`,             LAG(ZONGCLL, 2) OVER (PARTITION BY GUANCZMC ORDER BY GCRQ DESC) AS `前两日车流量`         FROM              ptgl_dmyxzt         WHERE              GCRQ = (                 SELECT MAX(GCRQ) FROM ptgl_dmyxzt             )             OR GCRQ = (                 SELECT MAX(GCRQ) FROM ptgl_dmyxzt WHERE GCRQ < (                     SELECT MAX(GCRQ) FROM ptgl_dmyxzt                 )             )             OR GCRQ = (                 SELECT MAX(GCRQ) FROM ptgl_dmyxzt WHERE GCRQ < (                     SELECT MAX(GCRQ) FROM ptgl_dmyxzt WHERE GCRQ < (                         SELECT MAX(GCRQ) FROM ptgl_dmyxzt                     )                 )             )     ) AS three_days_traffic WHERE      ZONGCLL < `前一日车流量`     AND `前一日车流量` < `前两日车流量` GROUP BY      `观测站名称`;
pred_sql: SELECT GUANCZBM, GUANCZMC, XINGZQH, ZONGCLL AS '总车流量' FROM ptgl_dmyxzt WHERE GCRQ IN (     SELECT GCRQ     FROM ptgl_dmyxzt     ORDER BY GCRQ DESC     LIMIT 3 ) AND ZONGCLL < ALL (     SELECT ZONGCLL     FROM ptgl_dmyxzt t2     WHERE t2.GCRQ = (         SELECT MAX(GCRQ)         FROM ptgl_dmyxzt t3         WHERE t3.GCRQ < (             SELECT MAX(GCRQ)             FROM ptgl_dmyxzt t4             WHERE t4.GCRQ IN (                 SELECT GCRQ                 FROM ptgl_dmyxzt                 ORDER BY GCRQ DESC                 LIMIT 3             )         )     ) );
gold_sql: SELECT GUANCZMC AS `观测站名称` FROM (   SELECT      id,      GUANCZMC,      GCRQ,      HUOCZLL,     @rownum := @rownum + 1 AS `排名`   FROM      ptgl_dmyxzt,     (SELECT @rownum := 0) r   WHERE      GCRQ = (SELECT MAX(GCRQ) FROM ptgl_dmyxzt WHERE GCRQ <= DATE_SUB(CURDATE(), INTERVAL 1 MONTH))   ORDER BY      HUOCZLL DESC ) AS ranked_traffic WHERE `排名` = 3;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', `HUOCZLL` AS '货车总流量' FROM ptgl_dmyxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_dmyxzt) ORDER BY `HUOCZLL` DESC LIMIT 1 OFFSET 2;
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  AVG(HUOCZLL) AS `平均货车流量`
FROM
  PTGL_DMYXZT
WHERE
  GCRQ BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE()
GROUP BY
  GUANCZMC
HAVING
  AVG(HUOCZLL) < 2000;
pred_sql: SELECT `GUANCZBM`, `GUANCZMC`, AVG(`HUOCZLL`) AS '平均货车流量' FROM ptgl_dmyxzt WHERE `GCRQ` >= CURDATE() - INTERVAL 30 DAY GROUP BY `GUANCZBM`, `GUANCZMC` HAVING AVG(`HUOCZLL`) < 2000;
gold_sql: SELECT COUNT(*) AS `超过15000车流量的天数` FROM ptgl_dmyxzt WHERE GUANCZBM = 'S121L121320324'   AND ZONGCLL > 15000   AND GCRQ BETWEEN      DATE_SUB(       MAKEDATE(YEAR(CURDATE()), 1) + INTERVAL QUARTER(CURDATE()) QUARTER - INTERVAL 1 QUARTER,        INTERVAL DAYOFYEAR(         MAKEDATE(YEAR(CURDATE()), 1) + INTERVAL QUARTER(CURDATE()) QUARTER - INTERVAL 1 QUARTER       ) - 1 DAY     ) AND      DATE_SUB(       MAKEDATE(YEAR(CURDATE()), 1) + INTERVAL QUARTER(CURDATE()) QUARTER - INTERVAL 1 DAY,        INTERVAL DAYOFYEAR(         MAKEDATE(YEAR(CURDATE()), 1) + INTERVAL QUARTER(CURDATE()) QUARTER - INTERVAL 1 DAY       ) DAY     );
pred_sql: SELECT COUNT(*) AS `超过15000车流量的天数` FROM `ptgl_dmyxzt` WHERE `GUANCZBM` = 'S121L121320324'   AND `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL QUARTER(CURDATE()) * 3 MONTH)   AND `GCRQ` < CURDATE() - INTERVAL (QUARTER(CURDATE()) - 1) * 3 MONTH   AND `ZONGCLL` > 15000;
gold_sql: SELECT
  `QIDCS` As 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` AS 班次总量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` IN (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 3 DAY)
  )
ORDER BY
  `BANCZL` DESC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_rmkylx` WHERE `GCRQ` >= CURDATE() - INTERVAL 3 DAY GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `班次总量` DESC LIMIT 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` AS 班次总量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)
  )
  AND `BANCZL` > 250;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', SUM(`BANCZL`) AS '总班次' FROM `tl_rmkylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`) GROUP BY `QIDCS`, `ZHONGDCS` HAVING SUM(`BANCZL`) > 250;
gold_sql: SELECT
  `QIDCS` AS `城市对`,
  `ZHONGDCS` AS `中间城市对`,
  `BANCZL` AS `班次总量`
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 3 DAY)
  )
  AND `PAIM` = 1
ORDER BY
  `GCRQ` DESC
LIMIT
  1;

pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_rmkylx` WHERE `GCRQ` >= CURDATE() - INTERVAL 3 DAY GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `PAIM` ASC LIMIT 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` As 班次总量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
  )
ORDER BY
  `PAIM` ASC
LIMIT
  3;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', `BANCZL` AS '班次总量'  FROM `tl_rmkylx`  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`)  AND `PAIM` <= 3;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` AS 班次总量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
  )
ORDER BY
  `BANCZL` DESC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_rmkylx` WHERE `GCRQ` >= CURDATE() - INTERVAL 3 MONTH GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `班次总量` DESC LIMIT 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市 ,
  `ZHONGDCS` As 终点城市,
  `BANCZL` AS 班次总量,
  `PAIM` AS 排名
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)
  )
  AND `PAIM` = 1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', SUM(`BANCZL`) AS '总班次' FROM `tl_rmkylx` WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `总班次` DESC LIMIT 1;
gold_sql: SELECT `BANCZL` AS `班次总量（班）` FROM `tl_rmkylx` WHERE `GCRQ` = '2023-11-23' AND `QIDCS` = '南京市' AND `ZHONGDCS` = '无锡市';
pred_sql: SELECT SUM(`BANCZL`) AS '班次总量' FROM `tl_rmkylx` WHERE `GCRQ` = '2023-11-23' AND `QIDCS` = '南京市' AND `ZHONGDCS` = '无锡市';
gold_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', `BANCZL` AS '班次总量（班）' FROM `tl_rmkylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`) ORDER BY `BANCZL` DESC;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', `BANCZL` AS '班次总量'  FROM `tl_rmkylx`  WHERE `GCRQ` = '2023-11-23'  ORDER BY `BANCZL` DESC;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  SUM(`BANCZL`) AS 客运路线数量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
  )
GROUP BY
  `QIDCS`
ORDER BY
  客运路线数量 DESC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市', COUNT(*) AS '客运路线数量' FROM `tl_rmkylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`) GROUP BY `QIDCS` ORDER BY COUNT(*) DESC LIMIT 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
  )
  AND `PAIM` = 1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市'  FROM tl_rmkylx  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM tl_rmkylx)  AND `PAIM` = 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` AS 班次总量
FROM
  `tl_rmkylx`
WHERE
  `PAIM` <= 3
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
  )
ORDER BY
  `BANCZL` ASC
LIMIT
  1;
pred_sql: SELECT `QIDCS`, `ZHONGDCS`, MIN(`BANCZL`) AS '最少班次总量' FROM tl_rmkylx WHERE `PAIM` IN (1, 2, 3) GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `最少班次总量` ASC LIMIT 1;
gold_sql: SELECT
  (
    SELECT
      `BANCZL`
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `tl_rmkylx`
        WHERE
          `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
      )
      AND `PAIM` = 1
  ) - (
    SELECT
      `BANCZL`
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` = (
        SELECT
          MAX(`GCRQ`)
        FROM
          `tl_rmkylx`
        WHERE
          `GCRQ` <= DATE_SUB(
            DATE_SUB(CURDATE(), INTERVAL 7 DAY),
            INTERVAL 7 DAY
          )
      )
      AND `PAIM` = 1
  ) AS `班次总量增长量`;
pred_sql: SELECT      (SUM(CASE WHEN `GCRQ` BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE() THEN `BANCZL` ELSE 0 END) -       SUM(CASE WHEN `GCRQ` BETWEEN CURDATE() - INTERVAL 14 DAY AND CURDATE() - INTERVAL 7 DAY THEN `BANCZL` ELSE 0 END)) AS '增长班次总量' FROM      tl_rmkylx WHERE      `PAIM` = 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  AVG(`PAIM`) AS `平均每天排名`
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE()
GROUP BY
  `QIDCS`,
  `ZHONGDCS`
ORDER BY
  `平均每天排名` ASC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', AVG(`PAIM`) AS '平均排名' FROM `tl_rmkylx` WHERE `GCRQ` >= CURDATE() - INTERVAL 3 MONTH GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `平均排名` DESC LIMIT 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  `PAIM` As 排名
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
  )
  AND `ZHONGDCS` = '无锡市'
ORDER BY
  `PAIM` DESC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市'  FROM tl_rmkylx  WHERE `ZHONGDCS` = '无锡市'  ORDER BY `PAIM` DESC  LIMIT 1;
gold_sql: SELECT      t1.`QIDCS` AS `起点城市`,     t1.`PAIM` AS `最新排名`,     t2.`PAIM` AS `最早排名`,     (t1.`PAIM` - t2.`PAIM`) AS `排名变化` FROM      `tl_rmkylx` AS t1 JOIN      `tl_rmkylx` AS t2 ON t1.`QIDCS` = t2.`QIDCS` AND t1.`ZHONGDCS` = t2.`ZHONGDCS` WHERE      t1.`GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`)     AND t2.`GCRQ` = (SELECT MIN(`GCRQ`) FROM `tl_rmkylx` WHERE `GCRQ` BETWEEN DATE_SUB(t1.`GCRQ`, INTERVAL 1 YEAR) AND t1.`GCRQ`)     AND t1.`ZHONGDCS` = '无锡市' ORDER BY      ABS(`排名变化`) DESC LIMIT 1;
pred_sql: SELECT `QIDCS` AS '城市', MAX(`PAIM`) - MIN(`PAIM`) AS '排名变化' FROM `tl_rmkylx` WHERE `ZHONGDCS` = '无锡市' AND `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY `QIDCS` ORDER BY `排名变化` DESC LIMIT 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` As 终点城市
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` IN (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
    GROUP BY
      YEAR(`GCRQ`),
      WEEK(`GCRQ`)
  )
  AND `PAIM` <= 5
GROUP BY
  `QIDCS`,
  `ZHONGDCS`
HAVING
  COUNT(DISTINCT `GCRQ`) = (
    SELECT
      COUNT(DISTINCT `GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
    GROUP BY
      YEAR(`GCRQ`),
      WEEK(`GCRQ`)
    ORDER BY
      MAX(`GCRQ`) DESC
    LIMIT
      1
  );
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市' FROM tl_rmkylx WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY GROUP BY `QIDCS`, `ZHONGDCS` HAVING COUNT(DISTINCT `PAIM`) = 5 AND MIN(`PAIM`) <= 5;
gold_sql: SELECT
  `QIDCS` As 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` AS 班次总量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` <= DATE_SUB(CURDATE(), INTERVAL 1 DAY)
  )
ORDER BY
  `BANCZL` DESC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市' FROM tl_rmkylx WHERE `GCRQ` = CURDATE() - INTERVAL 1 DAY ORDER BY `BANCZL` DESC LIMIT 1;
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` AS 班次总量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
    WHERE
      `GCRQ` BETWEEN DATE_SUB(NOW(), INTERVAL DAYOFWEEK(NOW()) - 1 DAY) AND DATE_SUB(NOW(), INTERVAL DAYOFWEEK(NOW()) - 7 DAY)
  )
ORDER BY
  `BANCZL` DESC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', SUM(`BANCZL`) AS '本周班次总量' FROM `tl_rmkylx` WHERE `GCRQ` >= CURDATE() - INTERVAL WEEKDAY(CURDATE()) DAY AND `GCRQ` <= CURDATE() + INTERVAL (6 - WEEKDAY(CURDATE())) DAY GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `本周班次总量` DESC LIMIT 1;
gold_sql: SELECT
  AVG(num_of_trains) AS 平均每天的铁路客运班次
FROM
  (
    SELECT
      COUNT(*) AS num_of_trains
    FROM
      tl_rmkylx
    WHERE
      GCRQ BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW()
    GROUP BY
      DATE(GCRQ)
  ) AS daily_trains;
pred_sql: SELECT AVG(`BANCZL`) AS '上个月平均每天的铁路客运班次' FROM `tl_rmkylx` WHERE `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND `GCRQ` < CURDATE();
gold_sql: SELECT
  `QIDCS` AS 起点城市,
  `ZHONGDCS` AS 终点城市,
  `BANCZL` As 班次总量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` BETWEEN DATE_SUB(NOW(), INTERVAL 1 WEEK) AND DATE_SUB(NOW(), INTERVAL 1 DAY)
  AND `BANCZL` > 200;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_rmkylx` WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY GROUP BY `QIDCS`, `ZHONGDCS` HAVING SUM(`BANCZL`) > 200;
gold_sql: SELECT
  `QIDCS` AS '起点城市',
  `ZHONGDCS` AS '终点城市',
  `BANCZL` AS '班次总量（班）',
  `PAIM` AS '排名'
FROM
  `TL_RMKYLX`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `TL_RMKYLX`
  )
ORDER BY
  `PAIM` ASC
LIMIT
  10;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', `BANCZL` AS '班次总量'  FROM `tl_rmkylx`  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`)  ORDER BY `PAIM` ASC  LIMIT 10;
gold_sql: SELECT
  `QIDCS` AS `起点城市`,
  `ZHONGDCS` AS `终点城市`,
  `BANCZL` AS `班次总量`
FROM
  `TL_RMKYLX`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `TL_RMKYLX`
  )
  AND `QIDCS` = '南京市'
ORDER BY
  `BANCZL` DESC,
  `PAIM` ASC
LIMIT
  1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', `BANCZL` AS '班次总量'  FROM tl_rmkylx  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM tl_rmkylx) AND `QIDCS` LIKE '%南京%'  ORDER BY `PAIM` ASC  LIMIT 1;
gold_sql: SELECT `QIDCS`, `ZHONGDCS`, `BANCZL` FROM `tl_rmkylx` WHERE `GCRQ` = (     SELECT MAX(`GCRQ`)     FROM `tl_rmkylx`     WHERE `GCRQ` < DATE_SUB(CURDATE(), INTERVAL 1 MONTH)   ) ORDER BY `BANCZL` ASC LIMIT 1;
pred_sql: SELECT `QIDCS` AS '起点城市', `ZHONGDCS` AS '终点城市', MIN(`BANCZL`) AS '最少班次总量' FROM `tl_rmkylx` WHERE `GCRQ` = CURDATE() - INTERVAL 1 MONTH GROUP BY `QIDCS`, `ZHONGDCS` ORDER BY `最少班次总量` ASC LIMIT 1;
gold_sql: SELECT
  DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`,
  `QIDCS` AS `起点城市`,
  `ZHONGDCS` AS `终点城市`,
  `BANCZL` AS `班次总量（班）`,
  `PAIM` AS `排名`
FROM
  `TL_RMKYLX`
WHERE
  CONCAT(YEAR(`GCRQ`), '-', MONTH(`GCRQ`)) IN (
    SELECT
      CONCAT(YEAR(`GCRQ`), '-', MONTH(`GCRQ`))
    FROM
      `TL_RMKYLX`
    WHERE
      `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
    GROUP BY
      YEAR(`GCRQ`),
      MONTH(`GCRQ`)
    ORDER BY
      YEAR(`GCRQ`) DESC,
      MONTH(`GCRQ`) DESC
  )
ORDER BY
  `GCRQ` DESC,
  `PAIM` ASC
LIMIT
  1;
pred_sql: SELECT DATE_FORMAT(GCRQ, '%Y-%m') AS month, QIDCS, ZHONGDCS, BANCZL, PAIM FROM tl_rmkylx WHERE GCRQ >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ORDER BY month, PAIM;
gold_sql: SELECT
  `QIDCS` As 起点城市,
  MAX(`BANCZL`) AS `最大班次总量`
FROM
  `tl_rmkylx`
WHERE
  `QIDCS` LIKE '%市'
GROUP BY
  `QIDCS`;
pred_sql: SELECT `QIDCS` AS '起点城市', MAX(`BANCZL`) AS '最大班次总量' FROM `tl_rmkylx` WHERE `QIDCS` LIKE '%市' GROUP BY `QIDCS`;
gold_sql: SELECT
  COUNT(DISTINCT `ZHONGDCS`) AS 终点城市不同的选择数量
FROM
  `tl_rmkylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_rmkylx`
  );
pred_sql: SELECT COUNT(DISTINCT `ZHONGDCS`) AS '不同的终点城市数量' FROM `tl_rmkylx`;
gold_sql: SELECT      c.`QIDCS` AS 当前起点城市,      c.`ZHONGDCS` AS 当前终点城市,      c.`BANCZL` AS 当前班次总量,      l.`BANCZL` AS 去年同期班次总量,      c.`BANCZL` - l.`BANCZL` AS 班次总量变化 FROM      (SELECT * FROM `tl_rmkylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`) AND `PAIM` <= 5) c LEFT JOIN      (SELECT * FROM `tl_rmkylx` WHERE `GCRQ` = '2023-05-13') l ON      c.`QIDCS` = l.`QIDCS` AND c.`ZHONGDCS` = l.`ZHONGDCS`;
pred_sql: SELECT      `QIDCS` AS '起点城市',      `ZHONGDCS` AS '终点城市',      SUM(CASE WHEN `GCRQ` = '2023-05-13' THEN `BANCZL` ELSE 0 END) AS '去年同期班次总量',      SUM(CASE WHEN `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`) THEN `BANCZL` ELSE 0 END) AS '最新观测日期班次总量',      (SUM(CASE WHEN `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_rmkylx`) THEN `BANCZL` ELSE 0 END) - SUM(CASE WHEN `GCRQ` = '2023-05-13' THEN `BANCZL` ELSE 0 END)) / SUM(CASE WHEN `GCRQ` = '2023-05-13' THEN `BANCZL` ELSE 0 END) * 100 AS '同比变化百分比' FROM      `tl_rmkylx` WHERE      `PAIM` <= 5 GROUP BY      `QIDCS`,      `ZHONGDCS`;
gold_sql: SELECT
  `QIDCS` As 起点城市,
  `BANCZL` AS 班次总量
FROM
  `tl_rmkylx`
WHERE
  `ZHONGDCS` = '南京市';
pred_sql: SELECT `QIDCS` AS '起点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_rmkylx` WHERE `ZHONGDCS` = '南京市' GROUP BY `QIDCS`;
gold_sql: SELECT sum(COACH_UP) AS '客车上行（辆）', sum(COACH_DOWN) AS '客车下行（辆）' FROM ptgl_gczypjl WHERE YEAR = '2,018' AND MONTH = 1 AND ROAD_NAME = '纪百线';
pred_sql: SELECT `COACH_UP` AS '客车上行', `COACH_DOWN` AS '客车下行' FROM ptgl_gczypjl WHERE `YEAR` = 2018 AND `MONTH` = '1';
gold_sql: SELECT AVG(VOLUME) AS `月平均交通量` FROM ptgl_gczypjl WHERE `YEAR`='2,018' AND GUANCZMC='苏州S339太仓东';
pred_sql: SELECT AVG(`VOLUME`) AS '苏州S339太仓东观测站点2018年月平均交通量' FROM `ptgl_gczypjl` WHERE `YEAR` = 2018 AND `GUANCZMC` = '苏州S339太仓东';
gold_sql: SELECT
  `MONTH` AS 月份
FROM
  ptgl_gczypjl
WHERE
  COACH_UP = (
    SELECT
      MAX(COACH_UP)
    FROM
      ptgl_gczypjl
  );
pred_sql: SELECT `MONTH` AS '月份', SUM(`COACH_UP`) AS '客车上行量' FROM `ptgl_gczypjl` GROUP BY `MONTH` ORDER BY SUM(`COACH_UP`) DESC LIMIT 1;
gold_sql: SELECT
  AVG(TRUCK_DOWN) AS 下行量的月平均值
FROM
  ptgl_gczypjl
WHERE
  `ROAD_ID` = 'S339';
pred_sql: SELECT AVG(`TRUCK_DOWN`) AS '货车下行量的月平均值' FROM `ptgl_gczypjl` WHERE `ROAD_ID` = 'S339';
gold_sql: SELECT
  `MONTH` As 月份,
  `ROAD_NAME` As 道路名称
FROM
  ptgl_gczypjl
WHERE
  VOLUME = (
    SELECT
      MAX(VOLUME)
    FROM
      ptgl_gczypjl
  );
pred_sql: SELECT `ROAD_NAME` AS '路线名称', `MONTH` AS '月份', MAX(`VOLUME`) AS '最高交通量' FROM `ptgl_gczypjl` GROUP BY `ROAD_NAME`, `MONTH` ORDER BY `最高交通量` DESC LIMIT 1;
gold_sql: SELECT
  SUM(COACH_UP) AS 客车上行量总和
FROM
  PTGL_GCZYPJL
WHERE
  `YEAR` = 2018
  AND `MONTH` = '1';
pred_sql: SELECT SUM(`COACH_UP`) AS '客车上行量总和' FROM `ptgl_gczypjl` WHERE `YEAR` = 2018 AND `MONTH` = '1';
gold_sql: SELECT
  `MONTH` AS 月份
FROM
  ptgl_gczypjl
ORDER BY
  (`TRUCK_UP` + `TRUCK_DOWN`)
LIMIT
  1;
pred_sql: SELECT `MONTH` AS '月份', SUM(`TRUCK_UP` + `TRUCK_DOWN`) AS '货车总量' FROM `ptgl_gczypjl` GROUP BY `MONTH` ORDER BY `货车总量` ASC LIMIT 1;
gold_sql: SELECT AVG(UP_VOLUME) AS `月平均上行总量` FROM ptgl_gczypjl WHERE `YEAR`='2,018' AND GUANCZMC='苏州S339太仓东';
pred_sql: SELECT AVG(`UP_VOLUME`) AS '苏州S339太仓东观测站点2018年月平均上行总量' FROM `ptgl_gczypjl` WHERE `YEAR` = 2018 AND `GUANCZMC` = '苏州S339太仓东';
gold_sql: SELECT `ROAD_NAME` AS 路线名, MAX(`VOLUME`) AS 最高月平均交通量 FROM ptgl_gczypjl WHERE `YEAR` = '2,018' GROUP BY `ROAD_NAME` ORDER BY 最高月平均交通量 DESC LIMIT 1;
pred_sql: SELECT `ROAD_NAME` AS '路线名称', AVG(`VOLUME`) AS '月平均交通量' FROM `ptgl_gczypjl` WHERE `YEAR` = 2018 GROUP BY `ROAD_ID` ORDER BY `月平均交通量` DESC LIMIT 1;
gold_sql: SELECT
  `MONTH` As 月份
FROM
  ptgl_gczypjl
WHERE
  `ROAD_NAME` = '纪百线'
  AND `GUANCZMC` = '苏州S339太仓东'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      ptgl_gczypjl
    WHERE
      `ROAD_NAME` = '纪百线'
      AND `GUANCZMC` = '苏州S339太仓东'
  )
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT `MONTH` AS '月份', SUM(`VOLUME`) AS '总量' FROM `ptgl_gczypjl` WHERE `ROAD_NAME` LIKE '%纪百线苏州S339太仓东观测站%' GROUP BY `MONTH` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  `TRUCK_DOWN` AS 货车下行量
FROM
  ptgl_gczypjl
WHERE
  `ROAD_NAME` = '纪百线'
  AND `GUANCZMC` = '苏州S339太仓东'
ORDER BY
  `YEAR` DESC,
  `MONTH` DESC
LIMIT
  1;
pred_sql: SELECT `TRUCK_DOWN` AS '货车下行量' FROM ptgl_gczypjl WHERE `ROAD_NAME` = '纪百线苏州S339太仓东观测站';
gold_sql: SELECT `VOLUME` AS `货运量（万吨）` FROM hd_yjyh_od WHERE `YEAR` = '2,015' AND `O_PROVINCE` = '浙江省' AND `D_PROVINCE` = '江苏省' AND `CARGO` = '煤炭、石油、天然气及制品';
pred_sql: SELECT SUM(`VOLUME`) AS '2015年从浙江省到江苏省的煤炭、石油、天然气及制品的货运量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 AND `O_PROVINCE` LIKE '浙江%' AND `D_PROVINCE` LIKE '江苏%' AND `CARGO` IN ('煤炭', '石油', '天然气', '制品');
gold_sql: SELECT
  `YEAR` AS 年,
  MAX(VOLUME) AS `最大货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  O_PROVINCE = '浙江省'
  AND D_PROVINCE = '江苏省'
GROUP BY
  `YEAR`
ORDER BY
  `最大货运量（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', SUM(`VOLUME`) AS '总货运量' FROM hd_yjyh_od WHERE `O_PROVINCE` = '浙江省' AND `D_PROVINCE` = '江苏省' GROUP BY `YEAR` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT `D_PROVINCE` AS `目的地省份`, SUM(`VOLUME`) AS `货运量（万吨）` FROM hd_yjyh_od WHERE `YEAR` = '2,015' AND `O_PROVINCE` = '浙江省' GROUP BY `D_PROVINCE`;
pred_sql: SELECT `O_PROVINCE` AS '起点省份', `D_PROVINCE` AS '终点省份', SUM(`VOLUME`) AS '总货运量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 AND `O_PROVINCE` LIKE '%浙江%' GROUP BY `O_PROVINCE`, `D_PROVINCE`;
gold_sql: SELECT `D_PROVINCE` AS `目的地省份`, SUM(`VOLUME`) AS `货运量（万吨）` FROM hd_yjyh_od WHERE `YEAR` = '2,015' AND `O_PROVINCE` = '浙江省' AND `VOLUME` > 200 GROUP BY `D_PROVINCE`;
pred_sql: SELECT `D_PROVINCE` AS '省份', SUM(`VOLUME`) AS '货运量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 AND `O_PROVINCE` LIKE '%浙江%' GROUP BY `D_PROVINCE` HAVING SUM(`VOLUME`) > 200;
gold_sql: SELECT SUM(`VOLUME`) AS `货运量总和（万吨）` FROM hd_yjyh_od WHERE `YEAR` = '2,015' AND `D_PROVINCE` = '浙江省';
pred_sql: SELECT SUM(`VOLUME`) AS '总货运量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 AND `O_PROVINCE` LIKE '%浙江%';
gold_sql: SELECT
  (
    SELECT
      `VOLUME`
    FROM
      hd_yjyh_od
    WHERE
      `YEAR` = '2,015'
      AND O_PROVINCE = '浙江省'
      AND D_PROVINCE = '江苏省'
  ) AS `2015年货运量（万吨）`,
  (
    SELECT
      `VOLUME`
    FROM
      hd_yjyh_od
    WHERE
      `YEAR` = '2,014'
      AND O_PROVINCE = '浙江省'
      AND D_PROVINCE = '江苏省'
  ) AS `2014年货运量（万吨）`,
  (
    SELECT
      `VOLUME`
    FROM
      hd_yjyh_od
    WHERE
      `YEAR` = '2,015'
      AND O_PROVINCE = '浙江省'
      AND D_PROVINCE = '江苏省'
  ) - (
    SELECT
      `VOLUME`
    FROM
      hd_yjyh_od
    WHERE
      `YEAR` = '2,014'
      AND O_PROVINCE = '浙江省'
      AND D_PROVINCE = '江苏省'
  ) AS `变化量（万吨）`;
pred_sql: SELECT SUM(CASE WHEN `YEAR` = 2015 THEN `VOLUME` ELSE 0 END) AS '2015年浙江省到江苏省的货运量', SUM(CASE WHEN `YEAR` = 2014 THEN `VOLUME` ELSE 0 END) AS '2014年浙江省到江苏省的货运量', (SUM(CASE WHEN `YEAR` = 2015 THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `YEAR` = 2014 THEN `VOLUME` ELSE 0 END)) AS '变化量' FROM `hd_yjyh_od` WHERE `O_PROVINCE` = '浙江' AND `D_PROVINCE` = '江苏';
gold_sql: SELECT `CARGO` AS `货种` FROM hd_yjyh_od  WHERE `YEAR` = '2,015' AND `O_PROVINCE` = '浙江省' AND `D_PROVINCE` = '江苏省'  ORDER BY `VOLUME` ASC LIMIT 1;
pred_sql: SELECT `CARGO` AS '货种', SUM(`VOLUME`) AS '总货运量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 AND `O_PROVINCE` LIKE '%浙江%' AND `D_PROVINCE` LIKE '%江苏%' GROUP BY `CARGO` ORDER BY SUM(`VOLUME`) ASC LIMIT 1;
gold_sql: SELECT `CARGO` AS `货种`, SUM(`VOLUME`) AS `货运量总和（万吨）` FROM hd_yjyh_od WHERE `YEAR` = '2,015' GROUP BY `CARGO` ORDER BY `货运量总和（万吨）` DESC;
pred_sql: SELECT `CARGO`, SUM(`VOLUME`) AS '货运量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 GROUP BY `CARGO` ORDER BY `货运量` DESC;
gold_sql: SELECT      CONCAT(ROUND((SUM(CASE WHEN `O_PROVINCE` = '浙江省' AND `D_PROVINCE` = '江苏省' THEN `VOLUME` END) / SUM(`VOLUME`))*100, 2), '%') AS `浙江到江苏货运量占比` FROM      hd_yjyh_od  WHERE      `YEAR` = '2,015';
pred_sql: SELECT SUM(`volume`)/(SELECT SUM(`volume`) FROM `hd_yjyh_od` WHERE `year` = 2015) AS '2015年浙江省到江苏省的货运量占所有货种的比例' FROM `hd_yjyh_od` WHERE `year` = 2015 AND `o_province` = '浙江' AND `d_province` = '江苏';
gold_sql: SELECT      SUM(`VOLUME`) / (SELECT SUM(`VOLUME`) FROM hd_yjyh_od WHERE `YEAR` = 2015 AND `O_CITY` = '苏州市'      AND `D_PROVINCE` = '浙江省'  ) AS `煤炭石油天然气及制品的占比` FROM      hd_yjyh_od  WHERE      `YEAR` = 2015      AND `O_CITY` = '苏州市'      AND `D_PROVINCE` = '浙江省'      AND `CARGO` = '煤炭、石油、天然气及制品';
pred_sql: SELECT SUM(`VOLUME`) AS '总货运量', SUM(CASE WHEN `CARGO` IN ('煤炭', '石油', '天然气及制品') THEN `VOLUME` ELSE 0 END) / SUM(`VOLUME`) AS '占比' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 AND `O_CITY` LIKE '%苏州%' AND `D_PROVINCE` LIKE '%浙江%';
gold_sql: SELECT `CARGO` AS `货物种类`, SUM(`VOLUME`) AS `最高运输量（万吨）`  FROM hd_yjyh_od  WHERE `YEAR` = 2023 AND `O_CITY` = '苏州市' AND `D_PROVINCE` = '浙江省'  GROUP BY `CARGO`  ORDER BY `最高运输量（万吨）` DESC  LIMIT 1;
pred_sql: SELECT `CARGO` AS '货种', SUM(`VOLUME`) AS '货运量（万吨）' FROM `hd_yjyh_od` WHERE `YEAR` = 2023 AND `O_CITY` LIKE '%苏州%' AND `D_PROVINCE` LIKE '%浙江%' GROUP BY `CARGO` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  volume_2014 AS 2014年苏州市到浙江省的货运量,
  volume_2015 AS 2015年苏州市到浙江省的货运量,
  IF((volume_2015 - volume_2014) > 0, '是', '否') AS `货运量增长趋势`
FROM
  (
    SELECT
      (
        SELECT
          VOLUME
        FROM
          hd_yjyh_od
        WHERE
          YEAR = 2015
          AND D_CITY = '苏州市'
          AND O_PROVINCE = '浙江省'
      ) AS volume_2015,
      (
        SELECT
          VOLUME
        FROM
          hd_yjyh_od
        WHERE
          YEAR = 2014
          AND D_CITY = '苏州市'
          AND O_PROVINCE = '浙江省'
      ) AS volume_2014
  ) AS subquery;
pred_sql: SELECT      (SUM(CASE WHEN `YEAR` = 2015 THEN `VOLUME` ELSE 0 END) -       SUM(CASE WHEN `YEAR` = 2014 THEN `VOLUME` ELSE 0 END)) AS `增长量`,     CASE          WHEN (SUM(CASE WHEN `YEAR` = 2015 THEN `VOLUME` ELSE 0 END) -                SUM(CASE WHEN `YEAR` = 2014 THEN `VOLUME` ELSE 0 END)) > 0          THEN '是'          ELSE '否'      END AS `是否增长` FROM      hd_yjyh_od WHERE      (`O_CITY` = '苏州市' AND `D_PROVINCE` = '浙江省') OR      (`O_PROVINCE` = '浙江省' AND `D_CITY` = '苏州市');
gold_sql: SELECT `CARGO` AS `货物类型`, SUM(`VOLUME`) AS `货运量（万吨）` FROM hd_yjyh_od WHERE `YEAR` = (SELECT MAX(YEAR) FROM hd_yjyh_od) AND `O_CITY` = '苏州市' AND `D_PROVINCE` = '浙江省' GROUP BY `CARGO` ORDER BY `货运量（万吨）` DESC;
pred_sql: SELECT `CARGO` AS '货物类型', SUM(`VOLUME`) AS '货运量（万吨）' FROM `hd_yjyh_od` WHERE `YEAR` = YEAR(CURDATE()) - 1 AND `O_CITY` LIKE '%苏州%' AND `D_PROVINCE` LIKE '%浙江%' GROUP BY `CARGO`;
gold_sql: SELECT SUM(VOLUME) as `2015年货运总量（万吨）` FROM hd_yjyh_od  WHERE YEAR = 2015 AND O_PROVINCE = "浙江省";
pred_sql: SELECT SUM(`VOLUME`) AS '2015年浙江省出发的货运总量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 AND `O_PROVINCE` = '浙江';
gold_sql: SELECT `O_PROVINCE` AS `出发地省份`, SUM(`VOLUME`) AS `货运量（万吨）` FROM hd_yjyh_od WHERE `YEAR` = 2015 GROUP BY `O_PROVINCE` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`VOLUME`) AS '总货运量' FROM `hd_yjyh_od` WHERE `YEAR` = 2015 GROUP BY `O_PROVINCE` ORDER BY `总货运量` DESC LIMIT 1;
gold_sql: SELECT
  `CARGO` AS `货物种类`
FROM
  hd_yjyh_od
WHERE
  `O_COUNTRY` = '中国'
  AND `D_CONTINENT` = '欧洲'
  AND '2024-01-01' <= `YEAR`
  AND `YEAR` <= '2024-03-31';
pred_sql: SELECT `CARGO` AS '货物种类' FROM hd_yjyh_od WHERE `O_COUNTRY` = '中国' AND `D_CONTINENT` = '欧洲' AND DATE(`YEAR`) BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT DISTINCT
  `O_CITY` AS `城市`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = YEAR(CURDATE())
  AND `O_CITY` NOT IN(
    SELECT DISTINCT
      `O_CITY`
    FROM
      hd_yjyh_od
    WHERE
      `YEAR` = YEAR(CURDATE())
      AND MONTH(DATE(CONCAT(`YEAR`, '-01-01'))) = MONTH(CURDATE())
  )
pred_sql: SELECT DISTINCT `O_CITY` AS '城市' FROM `hd_yjyh_od` WHERE `YEAR` = YEAR(CURDATE()) AND MONTH(`O_CITY`) = MONTH(CURDATE()) AND NOT EXISTS (SELECT 1 FROM `hd_yjyh_od` AS sub WHERE sub.`O_CITY` = `hd_yjyh_od`.`O_CITY` AND sub.`YEAR` = YEAR(CURDATE()) AND sub.`MONTH` = MONTH(CURDATE()));
gold_sql: SELECT
  SUM(VOLUME) AS `亚洲国家之间上个月的货运总量（万吨）`
FROM
  hd_yjyh_od
WHERE
  O_CONTINENT = '亚洲'
  AND D_CONTINENT = '亚洲'
  AND YEAR = YEAR(CURDATE())
  AND MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) = MONTH(CURDATE() - INTERVAL 1 MONTH);
pred_sql: SELECT SUM(`VOLUME`) AS `上个月亚洲国家之间的货运总量` FROM `hd_yjyh_od` WHERE `O_CONTINENT` = 'Asia' AND `D_CONTINENT` = 'Asia' AND `YEAR` = YEAR(CURDATE()) - 1 AND MONTH(CURDATE()) - 1;
gold_sql: SELECT
  `O_COUNTRY` AS `出发地国家`,
  SUM(`VOLUME`) AS `货运量（万吨）`
FROM
  hd_yjyh_od
WHERE
  `D_COUNTRY` = '中国'
  AND `YEAR` BETWEEN 2021 AND 2024
GROUP BY
  `O_COUNTRY`
ORDER BY
  SUM(`VOLUME`) DESC
LIMIT
  1;
pred_sql: SELECT `O_COUNTRY` AS '国家', SUM(`VOLUME`) AS '总货运量' FROM hd_yjyh_od WHERE `D_COUNTRY` = '中国' AND `YEAR` BETWEEN 2021 AND 2024 GROUP BY `O_COUNTRY` ORDER BY `总货运量` DESC LIMIT 1;
gold_sql: SELECT `CARGO` AS `货物种类`  FROM hd_yjyh_od  WHERE `YEAR` = 2023 AND `O_PROVINCE` = '江苏省';
pred_sql: SELECT `CARGO` AS '货物种类' FROM hd_yjyh_od WHERE `O_PROVINCE` = '江苏省' AND `YEAR` = 2023;
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  (
    `VOLUME` - LAG(`VOLUME`) OVER (
      PARTITION BY
        `CARGO`
      ORDER BY
        `YEAR`
    )
  ) AS `货运量增长（万吨）`
FROM
  hd_yjyh_od
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_yjyh_od
  )
ORDER BY
  `货运量增长（万吨）` DESC
LIMIT
  1;
pred_sql: SELECT `CARGO` AS '货物种类', MAX(`VOLUME`) - MIN(`VOLUME`) AS '增长量' FROM hd_yjyh_od WHERE `YEAR` BETWEEN YEAR(CURDATE()) - 1 AND YEAR(CURDATE()) GROUP BY `CARGO` ORDER BY `增长量` DESC LIMIT 1;
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  SUM(`VOLUME`) AS `货运量（万吨）`
FROM
  `hd_yjyh_od`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `hd_yjyh_od`
  )
GROUP BY
  `O_CITY`,
  `D_CITY`
HAVING
  `货运量（万吨）` > 50;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`VOLUME`) AS '货运量' FROM `hd_yjyh_od` WHERE `YEAR` = YEAR(CURDATE()) AND MONTH(CURDATE()) GROUP BY `O_CITY`, `D_CITY` HAVING SUM(`VOLUME`) > 50;
gold_sql: SELECT DISTINCT
  `CARGO` AS `货物种类`
FROM
  hd_yjyh_od
WHERE
  `CARGO` NOT IN(
    SELECT DISTINCT
      `CARGO`
    FROM
      hd_yjyh_od
    WHERE
      `O_PROVINCE` = '浙江省'
  )
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hd_yjyh_od
  );
pred_sql: SELECT `CARGO` AS '货物种类' FROM hd_yjyh_od WHERE `O_PROVINCE` != '浙江省' OR `O_PROVINCE` IS NULL GROUP BY `CARGO`;
gold_sql: SELECT
  O_PROVINCE AS '省份',
  SUM(
    CASE
      WHEN DATE_FORMAT(MAX_YEAR_DATE, '%Y-%m') = DATE_FORMAT(
        DATE_SUB(MAX_YEAR_DATE, INTERVAL 1 MONTH),
        '%Y-%m'
      ) THEN VOLUME
      ELSE 0
    END
  ) AS '前一个月货运量（万吨）',
  SUM(
    CASE
      WHEN DATE_FORMAT(MAX_YEAR_DATE, '%Y-%m') = DATE_FORMAT(
        DATE_SUB(MAX_YEAR_DATE, INTERVAL 2 MONTH),
        '%Y-%m'
      ) THEN VOLUME
      ELSE 0
    END
  ) AS '上个月货运量（万吨）'
FROM
  (
    SELECT
      *,
      (
        SELECT
          MAX(YEAR)
        FROM
          hd_yjyh_od
      ) AS MAX_YEAR_DATE
    FROM
      hd_yjyh_od
  ) AS M
GROUP BY
  O_PROVINCE
HAVING
  SUM(
    CASE
      WHEN DATE_FORMAT(MAX_YEAR_DATE, '%Y-%m') = DATE_FORMAT(
        DATE_SUB(MAX_YEAR_DATE, INTERVAL 1 MONTH),
        '%Y-%m'
      ) THEN VOLUME
      ELSE 0
    END
  ) > SUM(
    CASE
      WHEN DATE_FORMAT(MAX_YEAR_DATE, '%Y-%m') = DATE_FORMAT(
        DATE_SUB(MAX_YEAR_DATE, INTERVAL 2 MONTH),
        '%Y-%m'
      ) THEN VOLUME
      ELSE 0
    END
  );
pred_sql: SELECT DISTINCT a.`O_PROVINCE` AS '省份' FROM hd_yjyh_od a JOIN hd_yjyh_od b ON a.`O_PROVINCE` = b.`O_PROVINCE` WHERE a.`YEAR` = YEAR(CURDATE()) - 1 AND b.`YEAR` = YEAR(CURDATE()) - 2 AND a.`VOLUME` > b.`VOLUME`;
gold_sql: SELECT
  SUM(JIZXTTL) AS 集装箱吞吐量
FROM
  yjgk_yxzt
WHERE
  GCRQ BETWEEN DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01') AND LAST_DAY(CURRENT_DATE - INTERVAL 1 MONTH);
pred_sql: SELECT SUM(`JIZXTTL`) AS '上个月沿江港口的集装箱吞吐量总和' FROM `yjgk_yxzt` WHERE `GCRQ` >= '2024-04-01' AND `GCRQ` <= '2024-04-30';
gold_sql: SELECT
  AVG(`GUOJ`) AS `平均每日过境船舶数量`
FROM
  `YJGK_YXZT`
WHERE
  `GCRQ` > (
    SELECT
      MAX(`GCRQ`)
    FROM
      `YJGK_YXZT`
  ) - INTERVAL 7 DAY;
pred_sql: SELECT AVG(`GUOJ`) AS '平均每天过境船舶数' FROM `yjgk_yxzt` WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY;
gold_sql: SELECT
  GANGK_WEIXHPCGL AS 港口危险货物储罐量
FROM
  yjgk_yxzt
WHERE
  GCRQ = LAST_DAY(DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER));
pred_sql: SELECT `GANGK_WEIXHPCGL` AS '港口危险货物储罐量' FROM yjgk_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt);
gold_sql: SELECT `GCRQ` AS '观测日期', `MAOBSJS` AS '锚泊设计数' FROM yjgk_yxzt WHERE `GCRQ` BETWEEN DATE_FORMAT(NOW(),'%Y-%m-01') AND                       LAST_DAY(DATE_FORMAT(NOW() - INTERVAL 2 MONTH, '%Y-%m-01')) ```
pred_sql: SELECT `GCRQ` AS '观测日期', `MAOBSJS` AS '锚泊设计数（个）' FROM yjgk_yxzt WHERE QUARTER(`GCRQ`) = QUARTER(CURRENT_DATE) AND YEAR(`GCRQ`) = YEAR(CURRENT_DATE) AND MONTH(`GCRQ`) = 1;
gold_sql: SELECT
  WANDJBWS AS '万吨级泊位数'
FROM
  yjgk_yxzt
WHERE
  GCRQ = SUBDATE(CURDATE(), INTERVAL WEEKDAY(CURDATE()) + 1 DAY);
pred_sql: SELECT `WANDJBWS` AS '万吨级泊位数' FROM yjgk_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt);
gold_sql: SELECT
  GANGKWX AS 港口危险品装卸量
FROM
  yjgk_yxzt
WHERE
  GCRQ = DATE_SUB(LAST_DAY(CURRENT_DATE), INTERVAL 1 MONTH);
pred_sql: SELECT `GANGKWX` AS '港口危险品装卸量' FROM yjgk_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt);
gold_sql: SELECT `GCRQ` AS '观测日期' FROM yjgk_yxzt WHERE `MAOBJHS` = (SELECT MAX(`MAOBJHS`) FROM yjgk_yxzt);
pred_sql: SELECT `GCRQ` AS '观测日期' FROM yjgk_yxzt ORDER BY `MAOBJHS` DESC LIMIT 1;
gold_sql: SELECT     GCRQ AS `观测日期`,     QIYZS AS `企业总数` FROM     yjgk_yxzt WHERE     GCRQ BETWEEN         DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL -MONTH(CURDATE())%3 MONTH), '%Y-%m-01')         AND         LAST_DAY(DATE_ADD(CURDATE(), INTERVAL 2-MONTH(CURDATE())%3 MONTH)) ORDER BY     QIYZS ASC LIMIT 1;
pred_sql: SELECT `GCRQ`, `QIYZS`  FROM yjgk_yxzt  WHERE QUARTER(`GCRQ`) = QUARTER(CURDATE())  ORDER BY `QIYZS` ASC  LIMIT 1;
gold_sql: SELECT
  `GANGK_CHUANB_WRWJSL` As 港口船舶污染物接收量
FROM
  yjgk_yxzt
WHERE
  `GCRQ` = (
    SELECT
      LAST_DAY(MAX(`GCRQ`) - INTERVAL 1 MONTH)
    FROM
      yjgk_yxzt
  );
pred_sql: SELECT `GANGK_CHUANB_WRWJSL` AS '港口船舶污染物接收量' FROM yjgk_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt);
gold_sql: SELECT SUM(`MAOBSJS`) AS '锚泊设计数总和', SUM(`MAOBJHS`) AS '锚泊计划数总和' FROM yjgk_yxzt  WHERE `GCRQ` BETWEEN DATE_FORMAT(NOW() - INTERVAL (MONTH(NOW()) -1) % 3 MONTH,'%Y-%m-01') AND  LAST_DAY(NOW() - INTERVAL (MONTH(NOW()) -1) % 3 MONTH + INTERVAL 2 MONTH);
pred_sql: SELECT SUM(`maobsjs` + `maobjhs`) AS '锚泊设计数与锚泊计划数总和' FROM `yjgk_yxzt` WHERE QUARTER(`gcrq`) = QUARTER(CURDATE()) AND YEAR(`gcrq`) = YEAR(CURDATE());
gold_sql: SELECT
  `GCRQ` As 观测日期,
  `BENG` AS `每天本港船舶数量`
FROM
  yjgk_yxzt
WHERE
  `GCRQ` > (
    SELECT
      MAX(`GCRQ`) - INTERVAL 3 DAY
    FROM
      yjgk_yxzt
  )
pred_sql: SELECT `GCRQ` AS '观测日期', SUM(`BENG`) AS '本港船舶数量' FROM `yjgk_yxzt` WHERE `GCRQ` >= CURDATE() - INTERVAL 3 DAY AND `GCRQ` <= CURDATE() GROUP BY `GCRQ`;
gold_sql: SELECT
  GCRQ AS 观测日期,
  GANGKWX AS 港口危险品装卸量
FROM
  yjgk_yxzt
WHERE
  GCRQ BETWEEN DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    ),
    INTERVAL 6 DAY
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      yjgk_yxzt
  )
ORDER BY
  GANGKWX DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ`, MAX(`GANGKWX`) AS '最大港口危险品装卸量' FROM yjgk_yxzt WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY GROUP BY `GCRQ` ORDER BY `GANGKWX` DESC LIMIT 1;
gold_sql: SELECT      GCRQ AS `观测日期`,      CHAOBQYS AS `超标企业数` FROM      yjgk_yxzt WHERE      GCRQ BETWEEN LAST_DAY(CURDATE() - INTERVAL 2 MONTH) + INTERVAL 1 DAY      AND LAST_DAY(CURDATE() - INTERVAL 1 MONTH) ORDER BY      CHAOBQYS DESC  LIMIT 1;
pred_sql: SELECT `GCRQ` AS '观测日期', `CHAOBQYS` AS '超标企业数'  FROM yjgk_yxzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt)  ORDER BY `CHAOBQYS` DESC  LIMIT 1;
gold_sql: SELECT    MAX(GANGK_WEIXHPCGL) - MIN(GANGK_WEIXHPCGL) AS '增加量' FROM   yjgk_yxzt WHERE   GCRQ BETWEEN DATE_SUB((SELECT MAX(GCRQ) FROM yjgk_yxzt), INTERVAL 1 WEEK) AND (SELECT MAX(GCRQ) FROM yjgk_yxzt);
pred_sql: SELECT `GANGK_WEIXHPCGL` AS '港口危险货物储罐量' FROM yjgk_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt);
gold_sql: SELECT
  GCRQ As 观测日期,
  JIZXTTL AS 集装箱吞吐量
FROM
  yjgk_yxzt
WHERE
  GCRQ BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE
ORDER BY
  JIZXTTL DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', MAX(`JIZXTTL`) AS '最高集装箱吞吐量' FROM yjgk_yxzt WHERE `GCRQ` >= CURDATE() - INTERVAL 1 MONTH GROUP BY `GCRQ` ORDER BY `最高集装箱吞吐量` DESC LIMIT 1;
gold_sql: SELECT GCRQ AS `观测日期`, CHAOBQYS AS `超标企业数` FROM yjgk_yxzt WHERE GCRQ = '2023-11-17';
pred_sql: SELECT `CHAOBQYS` AS '超标企业数' FROM yjgk_yxzt WHERE `GCRQ` = '2023-11-17';
gold_sql: SELECT
  SUM(`GANGK_CHUANB_WRWJSL`) AS `港口船舶污染物接收量`
FROM
  yjgk_yxzt
WHERE
  `GCRQ` BETWEEN DATE_SUB(
    (
      SELECT
        MAX(`GCRQ`)
      FROM
        yjgk_yxzt
    ),
    INTERVAL 1 YEAR
  ) AND (
    SELECT
      MAX(`GCRQ`)
    FROM
      yjgk_yxzt
  );
pred_sql: SELECT SUM(`GANGK_CHUANB_WRWJSL`) AS '过去一年港口船舶污染物接收量' FROM `yjgk_yxzt` WHERE `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
gold_sql: SELECT `GCRQ` AS '日期'  FROM yjgk_yxzt  ORDER BY ABS(`MAOBJHS` - `MAOBSJS`) ASC  LIMIT 1;
pred_sql: SELECT `GCRQ` AS '观测日期', ABS(`MAOBSJS` - `MAOBJHS`) AS '锚泊计划数与设计数差值' FROM `yjgk_yxzt` ORDER BY `锚泊计划数与设计数差值` ASC LIMIT 1;
gold_sql: SELECT
  AVG(GANGKWX) AS 港口危险品装卸量的平均值
FROM
  yjgk_yxzt
WHERE
  GCRQ BETWEEN DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    ),
    INTERVAL 1 QUARTER
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      yjgk_yxzt
  );
pred_sql: SELECT AVG(`GANGKWX`) AS '过去一季度港口危险品装卸量的平均值' FROM `yjgk_yxzt` WHERE `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  yjgk_yxzt
WHERE
  JIZXTTL > (
    SELECT
      AVG(JIZXTTL)
    FROM
      yjgk_yxzt
  );
pred_sql: SELECT `GCRQ` AS '观测日期'  FROM yjgk_yxzt  WHERE `JIZXTTL` > (SELECT AVG(`JIZXTTL`) FROM yjgk_yxzt);
gold_sql: SELECT
  GCRQ AS 观测日期,
  GANGKWX AS 港口危险品装卸量
FROM
  yjgk_yxzt
WHERE
  GCRQ BETWEEN DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    ),
    INTERVAL 1 YEAR
  ) AND (
    SELECT
      MAX(GCRQ)
    FROM
      yjgk_yxzt
  )
ORDER BY
  GANGKWX DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', MAX(`GANGKWX`) AS '最高港口危险品装卸量' FROM yjgk_yxzt WHERE `GCRQ` >= CURDATE() - INTERVAL 1 YEAR GROUP BY `GCRQ` ORDER BY `最高港口危险品装卸量` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观测日期,
  GUOJ AS 过境
FROM
  yjgk_yxzt
WHERE
  GUOJ > BENG
  AND GCRQ >= DATE_ADD(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    ),
    INTERVAL -3 MONTH
  );
pred_sql: SELECT `GCRQ`, `BENG`  FROM yjgk_yxzt  WHERE `GCRQ` >= CURDATE() - INTERVAL 3 MONTH AND `BENG` > (SELECT AVG(`BENG`) FROM yjgk_yxzt);
gold_sql: SELECT
  SUM(`GANGK_CHUANB_WRWJSL`) AS `港口船舶污染物接收量的总量`
FROM
  yjgk_yxzt
WHERE
  `GCRQ` BETWEEN DATE_SUB(
    (
      SELECT
        MAX(`GCRQ`)
      FROM
        yjgk_yxzt
    ),
    INTERVAL 7 DAY
  ) AND (
    SELECT
      MAX(`GCRQ`)
    FROM
      yjgk_yxzt
  );
pred_sql: SELECT SUM(`GANGK_CHUANB_WRWJSL`) AS '过去一周港口船舶污染物接收量' FROM `yjgk_yxzt` WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY;
gold_sql: SELECT GCRQ AS `观测日期`, QIYZS AS `企业总数`  
FROM yjgk_yxzt  
WHERE GCRQ BETWEEN (  
    SELECT DATE_SUB(MAX(GCRQ), INTERVAL 1 YEAR)  
    FROM yjgk_yxzt  
) AND (  
    SELECT MAX(GCRQ)  
    FROM yjgk_yxzt  
)  
ORDER BY QIYZS DESC  
LIMIT 1;
pred_sql: SELECT `GCRQ`, SUM(`QIYZS`) AS '企业总数' FROM `yjgk_yxzt` WHERE `GCRQ` >= CURDATE() - INTERVAL 1 YEAR GROUP BY `GCRQ` ORDER BY SUM(`QIYZS`) DESC LIMIT 1;
gold_sql: SELECT
  `GANGK_CHUANB_WRWJSL` AS 港口船舶污染物接收量
FROM
  yjgk_yxzt
WHERE
  `GCRQ` = DATE_SUB(
    (
      SELECT
        MAX(`GCRQ`)
      FROM
        yjgk_yxzt
    ),
    INTERVAL 1 DAY
  );
pred_sql: SELECT `GANGK_CHUANB_WRWJSL` AS '昨天港口船舶污染物接收量' FROM yjgk_yxzt WHERE `GCRQ` = CURDATE() - INTERVAL 1 DAY;
gold_sql: SELECT
  JIZXTTL AS 集装箱吞吐量,
  GCRQ AS 观测日期
FROM
  yjgk_yxzt
WHERE
  GCRQ >= DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    ),
    INTERVAL 7 DAY
  )
ORDER BY
  GCRQ DESC;
pred_sql: SELECT `JIZXTTL` AS '本周的集装箱吞吐量' FROM yjgk_yxzt ORDER BY `GCRQ` DESC LIMIT 1;
gold_sql: SELECT SUM(MAOBSJS) AS '近七天锚泊设计总数' FROM yjgk_yxzt WHERE GCRQ BETWEEN (SELECT MAX(GCRQ) - INTERVAL 6 DAY FROM yjgk_yxzt) AND (SELECT MAX(GCRQ) FROM yjgk_yxzt);
pred_sql: SELECT SUM(`MAOBSJS`) AS '近七天锚泊设计数' FROM `yjgk_yxzt` WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY;
gold_sql: SELECT
  (
    SELECT
      GANGKWX
    FROM
      yjgk_yxzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          yjgk_yxzt
        WHERE
          MONTH(GCRQ) = MONTH(
            (
              SELECT
                MAX(GCRQ)
              FROM
                yjgk_yxzt
            )
          )
          AND YEAR(GCRQ) = YEAR(
            (
              SELECT
                MAX(GCRQ)
              FROM
                yjgk_yxzt
            )
          )
      )
  ) - (
    SELECT
      GANGKWX
    FROM
      yjgk_yxzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          yjgk_yxzt
        WHERE
          MONTH(GCRQ) = MONTH(
            (
              SELECT
                MAX(GCRQ)
              FROM
                yjgk_yxzt
            )
          ) - 1
          AND YEAR(GCRQ) = YEAR(
            (
              SELECT
                MAX(GCRQ)
              FROM
                yjgk_yxzt
            )
          ) - (
            MONTH(
              (
                SELECT
                  MAX(GCRQ)
                FROM
                  yjgk_yxzt
              )
            ) - 1 = 0
          )
      )
  ) AS 本月的危险品装卸量比上月的增加量;
pred_sql: SELECT `GANGKWX` AS '本月危险品装卸量', LAG(`GANGKWX`, 1) OVER (ORDER BY `GCRQ`) AS '上月危险品装卸量', (`GANGKWX` - LAG(`GANGKWX`, 1) OVER (ORDER BY `GCRQ`)) / LAG(`GANGKWX`, 1) OVER (ORDER BY `GCRQ`) * 100 AS '增长百分比' FROM `yjgk_yxzt` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `yjgk_yxzt`);
gold_sql: SELECT
  GANGK_WEIXHPCGL AS 港口危险货物储罐量
FROM
  yjgk_yxzt
WHERE
  GCRQ = DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    ),
    INTERVAL DAYOFWEEK(
      (
        SELECT
          MAX(GCRQ)
        FROM
          yjgk_yxzt
      )
    ) -1 DAY
  );
pred_sql: SELECT `GANGK_WEIXHPCGL` AS '港口危险货物储罐量' FROM yjgk_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM yjgk_yxzt);
gold_sql: SELECT
  SUM(`GUOJ`) AS `过境船舶总数`
FROM
  yjgk_yxzt
WHERE
  YEAR(`GCRQ`) = YEAR(
    (
      SELECT
        MAX(`GCRQ`)
      FROM
        yjgk_yxzt
    )
  );
pred_sql: SELECT SUM(`GUOJ`) AS `今年到目前为止的过境船舶总数` FROM `yjgk_yxzt` WHERE YEAR(`GCRQ`) = YEAR(CURDATE());
gold_sql: SELECT    (SELECT MAOBJHS FROM yjgk_yxzt WHERE GCRQ BETWEEN CONCAT(YEAR(CURRENT_DATE) - 1, '-01-01') AND CONCAT(YEAR(CURRENT_DATE) - 1, '-03-31')) AS 'LastYearQ1Plan',   (SELECT MAOBJHS FROM yjgk_yxzt WHERE GCRQ BETWEEN CONCAT(YEAR(CURRENT_DATE), '-01-01') AND CONCAT(YEAR(CURRENT_DATE), '-03-31')) AS 'ThisYearQ1Plan',   (SELECT MAOBJHS FROM yjgk_yxzt WHERE GCRQ BETWEEN CONCAT(YEAR(CURRENT_DATE), '-01-01') AND CONCAT(YEAR(CURRENT_DATE), '-03-31'))   -    (SELECT MAOBJHS FROM yjgk_yxzt WHERE GCRQ BETWEEN CONCAT(YEAR(CURRENT_DATE) - 1, '-01-01') AND CONCAT(YEAR(CURRENT_DATE) - 1, '-03-31')) AS 'Change' FROM yjgk_yxzt LIMIT 1;
pred_sql: SELECT SUM(`MAOBJHS`) AS '今年一季度锚泊计划数', (SELECT SUM(`MAOBJHS`) FROM `yjgk_yxzt` WHERE YEAR(`GCRQ`) = YEAR(CURDATE()) - 1 AND QUARTER(`GCRQ`) = 1) AS '去年同期一季度锚泊计划数', (SUM(`MAOBJHS`) - (SELECT SUM(`MAOBJHS`) FROM `yjgk_yxzt` WHERE YEAR(`GCRQ`) = YEAR(CURDATE()) - 1 AND QUARTER(`GCRQ`) = 1)) / (SELECT SUM(`MAOBJHS`) FROM `yjgk_yxzt` WHERE YEAR(`GCRQ`) = YEAR(CURDATE()) - 1 AND QUARTER(`GCRQ`) = 1) * 100 AS '变化百分比' FROM `yjgk_yxzt` WHERE YEAR(`GCRQ`) = YEAR(CURDATE()) AND QUARTER(`GCRQ`) = 1;
gold_sql: SELECT
  MAX(WANDJBWS) AS 万吨级泊位数最大值
FROM
  yjgk_yxzt
WHERE
  YEAR(GCRQ) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
  AND MONTH(GCRQ) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH);
pred_sql: SELECT MAX(`WANDJBWS`) AS '万吨级泊位数最大值' FROM `yjgk_yxzt` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `yjgk_yxzt`);
gold_sql: SELECT
  AVG(GANGKWX) AS 港口危险品装卸量的平均值
FROM
  yjgk_yxzt
WHERE
  QUARTER(GCRQ) = QUARTER(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    )
  )
  AND YEAR(GCRQ) = YEAR(
    (
      SELECT
        MAX(GCRQ)
      FROM
        yjgk_yxzt
    )
  );
pred_sql: SELECT AVG(`gangkwx`) AS '本季度港口危险品装卸量的平均值' FROM `yjgk_yxzt` WHERE QUARTER(`gcrq`) = QUARTER(CURDATE());
gold_sql: SELECT YEAR(GCRQ) AS `年`, MONTH(GCRQ) AS `月`, COUNT(*) AS `超过2000的企业总数的月份数量` FROM yjgk_yxzt WHERE QIYZS > 2000 AND GCRQ BETWEEN (     SELECT DATE_SUB(MAX(GCRQ), INTERVAL 1 YEAR) FROM yjgk_yxzt ) AND (     SELECT MAX(GCRQ) FROM yjgk_yxzt ) GROUP BY YEAR(GCRQ), MONTH(GCRQ);
pred_sql: SELECT COUNT(DISTINCT DATE_FORMAT(`gcrq`, '%Y-%m')) AS `超过2000的企业总数月份数` FROM `yjgk_yxzt` WHERE `qyzs` > 2000 AND `gcrq` >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
gold_sql: SELECT DAYNAME(GCRQ) AS '星期', SUM(MAOBSJS) AS '锚泊设计数' FROM yjgk_yxzt WHERE GCRQ BETWEEN (SELECT MAX(GCRQ) - INTERVAL WEEKDAY(MAX(GCRQ)) DAY FROM yjgk_yxzt) AND (SELECT MAX(GCRQ) FROM yjgk_yxzt) GROUP BY DAYNAME(GCRQ) ORDER BY SUM(MAOBSJS) DESC LIMIT 1;
pred_sql: SELECT `GCRQ`, SUM(`MAOBSJS`) AS '本周锚泊设计数最多的日期' FROM yjgk_yxzt WHERE WEEK(`GCRQ`) = WEEK(CURDATE()) GROUP BY `GCRQ` ORDER BY SUM(`MAOBSJS`) DESC LIMIT 1;
gold_sql: SELECT
  MIN(`GANGK_CHUANB_WRWJSL`) AS `港口船舶污染物接收量最小值`
FROM
  yjgk_yxzt
WHERE
  YEAR(`GCRQ`) = YEAR(CURDATE())
  AND QUARTER(`GCRQ`) = 2
pred_sql: SELECT MIN(`GANGK_CHUANB_WRWJSL`) AS '今年第二季度港口船舶污染物接收量的最小值' FROM `yjgk_yxzt` WHERE YEAR(`GCRQ`) = YEAR(CURDATE()) AND QUARTER(`GCRQ`) = 2;
gold_sql: SELECT     SUM(CHAOBQYS) AS `去年超标企业总数` FROM     yjgk_yxzt WHERE     GCRQ BETWEEN '2023-01-01' AND '2023-12-31';
pred_sql: SELECT SUM(`CHAOBQYS`) AS `去年超标企业总数` FROM `yjgk_yxzt` WHERE `GCRQ` BETWEEN '2023-01-01' AND '2023-12-31';
gold_sql: SELECT      (QIYZS_M - QIYZS) AS `企业总数增长` FROM     (SELECT QIYZS       FROM yjgk_yxzt       WHERE GCRQ >= '2024-04-01' AND GCRQ <= '2024-04-30'       ORDER BY GCRQ DESC       LIMIT 1) AS QIYZS_LastMonth,     (SELECT QIYZS       FROM yjgk_yxzt       WHERE GCRQ >= '2024-03-01' AND GCRQ <= '2024-03-31'       ORDER BY GCRQ DESC       LIMIT 1) AS QIYZS_PreMonth;
pred_sql: SELECT (SUM(CASE WHEN `GCRQ` >= '2024-04-01' AND `GCRQ` <= '2024-04-30' THEN `QIYZS` ELSE 0 END) - SUM(CASE WHEN `GCRQ` >= '2024-03-01' AND `GCRQ` <= '2024-03-31' THEN `QIYZS` ELSE 0 END)) AS `企业总数增长数` FROM `yjgk_yxzt`;
gold_sql: SELECT AVG(`MAOBJHS`) as `今年锚泊计划数的中位数` FROM (     SELECT `MAOBJHS`,             @row_number:=@row_number+1 as `row_number`,            @total_count:=@row_number as `total_count`     FROM yjgk_yxzt,           (SELECT @row_number:=0) AS r     WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-12-31'     ORDER BY `MAOBJHS` ) as `sorted_plans` WHERE `sorted_plans`.`row_number` IN (FLOOR(@total_count / 2), CEIL(@total_count / 2));
pred_sql: SELECT AVG(`MAOBJHS`) AS '今年锚泊计划数的中位数' FROM (SELECT `MAOBJHS`, @rownum:=@rownum+1 as `rank` FROM yjgk_yxzt, (SELECT @rownum:=0) r WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-12-31' ORDER BY `MAOBJHS`) as sorted_data WHERE sorted_data.`rank` IN (FLOOR((@rownum+1)/2), CEIL((@rownum+1)/2));
gold_sql: SELECT GCRQ AS `观测日期`, QIDZH AS `起点桩号`, ZHONGDZH AS `终点桩号`, YONGDCHENGD AS `拥堵程度`, YONGDCHANGD AS `拥堵长度`, CHIXSJ AS `持续时间` FROM ptgl_ldydzt WHERE LUD = 'S226' AND GCRQ BETWEEN '2024-04-01' AND '2024-04-30';
pred_sql: SELECT `GCRQ` AS '观测日期', `LUD` AS '路段', `YONGDCHENGD` AS '拥堵程度', `YONGDCHANGD` AS '拥堵长度（米）', `CHIXSJ` AS '持续时间（分钟）' FROM ptgl_ldydzt WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' AND `LUD` = 'S226';
gold_sql: SELECT LUD AS 路段, QIDZH AS 起点桩号, ZHONGDZH AS 终点桩号, YONGDCHENGD AS 拥堵程度, YONGDCHANGD AS 拥堵长度, CHIXSJ AS 持续时间  FROM ptgl_ldydzt  WHERE YONGDCHENGD = "拥堵" AND GCRQ BETWEEN "2024-05-20" AND "2024-05-23";
pred_sql: SELECT `LUD` AS '路段', `QIDZH` AS '起点桩号', `ZHONGDZH` AS '终点桩号', `YONGDCHENGD` AS '拥堵程度', `YONGDCHANGD` AS '拥堵长度（米）', `CHIXSJ` AS '持续时间（分钟）' FROM ptgl_ldydzt WHERE `GCRQ` BETWEEN '2024-05-20' AND '2024-05-23' AND `YONGDCHENGD` = '拥堵';
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH As 终点桩号,
  YONGDCHENGD AS 拥堵程度,
  YONGDCHANGD AS 拥堵长度,
  CHIXSJ As 持续时间
FROM
  ptgl_ldydzt
WHERE
  CHIXSJ = 1;
pred_sql: SELECT `LUD` AS '路段', `QIDZH` AS '起点桩号', `ZHONGDZH` AS '终点桩号', `YONGDCHENGD` AS '拥堵程度', `YONGDCHANGD` AS '拥堵长度（米）', `CHIXSJ` AS '持续时间（分钟）'  FROM ptgl_ldydzt  WHERE `CHIXSJ` = 1;
gold_sql: SELECT
  LUD AS 路段,
  QIDZH AS 起点桩号,
  ZHONGDZH AS 终点桩号,
  YONGDCHENGD AS 拥挤程度,
  YONGDCHANGD AS 拥挤长度,
  CHIXSJ As 持续时间
FROM
  ptgl_ldydzt
WHERE
  ZHONGDZH = 142.5
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT `LUD` AS '路段', `QIDZH` AS '起点桩号', `ZHONGDZH` AS '终点桩号', `YONGDCHENGD` AS '拥堵程度', `YONGDCHANGD` AS '拥堵长度（米）', `CHIXSJ` AS '持续时间（分钟）' FROM ptgl_ldydzt WHERE `ZHONGDZH` = 142.5;
gold_sql: SELECT
  LUD AS `路段`,
  QIDZH AS `起点桩号`,
  ZHONGDZH AS `终点桩号`,
  YONGDCHANGD AS `拥堵长度`,
  CHIXSJ AS `持续时间`
FROM
  PTGL_LDYDZT
WHERE
  YONGDCHENGD = '拥堵'
  AND CHIXSJ > 10
ORDER BY
  CHIXSJ DESC;
pred_sql: SELECT `LUD` AS '路段', `QIDZH` AS '起点桩号', `ZHONGDZH` AS '终点桩号', `YONGDCHENGD` AS '拥堵程度', `YONGDCHANGD` AS '拥堵长度（米）', `CHIXSJ` AS '持续时间（分钟）' FROM ptgl_ldydzt WHERE `YONGDCHENGD` = '拥堵' AND `CHIXSJ` > 10;
gold_sql: SELECT
  LUD AS `路段`,
  QIDZH AS `起点桩号`,
  ZHONGDZH AS `终点桩号`,
  YONGDCHENGD AS `拥堵程度`,
  YONGDCHANGD AS `拥堵长度`,
  CHIXSJ AS `持续时间`
FROM
  PTGL_LDYDZT
WHERE
  YONGDCHANGD BETWEEN 100 AND 200
ORDER BY
  GCRQ DESC;
pred_sql: SELECT `LUD` AS '路段', `QIDZH` AS '起点桩号', `ZHONGDZH` AS '终点桩号', `YONGDCHANGD` AS '拥堵长度（米）'  FROM `PTGL_LDYDZT`  WHERE `YONGDCHANGD` BETWEEN 100 AND 200;
gold_sql: SELECT
  LUD AS `路段`,
  QIDZH AS `起点桩号`,
  ZHONGDZH AS `终点桩号`,
  YONGDCHANGD AS `拥堵长度`,
  CHIXSJ AS `持续时间`
FROM
  PTGL_LDYDZT
WHERE
  YONGDCHENGD = '拥堵'
  AND QIDZH = 142.5;
pred_sql: SELECT `LUD` AS '路段', `QIDZH` AS '起点桩号', `ZHONGDZH` AS '终点桩号', `YONGDCHENGD` AS '拥堵程度', `YONGDCHANGD` AS '拥堵长度（米）', `CHIXSJ` AS '持续时间（分钟）'  FROM `ptgl_ldydzt`  WHERE `YONGDCHENGD` = '拥堵' AND `QIDZH` = 142.5;
gold_sql: SELECT
  LUD AS `路段`,
  QIDZH AS `起点桩号`,
  ZHONGDZH AS `终点桩号`,
  YONGDCHENGD AS `拥堵程度`,
  YONGDCHANGD AS `拥堵长度`,
  CHIXSJ AS `持续时间`
FROM
  PTGL_LDYDZT
WHERE
  YONGDCHENGD = '拥堵'
  AND CHIXSJ < 10;
pred_sql: SELECT `LUD` AS '路段', `QIDZH` AS '起点桩号', `ZHONGDZH` AS '终点桩号', `YONGDCHENGD` AS '拥堵程度', `YONGDCHANGD` AS '拥堵长度（米）', `CHIXSJ` AS '持续时间（分钟）' FROM ptgl_ldydzt WHERE `YONGDCHENGD` = '拥堵' AND `CHIXSJ` < 10;
gold_sql: SELECT YONGDCHENGD AS 拥堵程度 FROM ptgl_ldydzt WHERE GCRQ = '2023-07-21' AND LUD = 'S226' AND QIDZH = 142.5 AND ZHONGDZH = 142.5;
pred_sql: SELECT `YONGDCHENGD` AS '拥堵程度'  FROM ptgl_ldydzt  WHERE `GCRQ` = '2023-07-21' AND `LUD` = 'S226' AND `QIDZH` = 142.5 AND `ZHONGDZH` = 142.5;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  ptgl_ldydzt
WHERE
  LUD = 'S226'
  AND QIDZH = 142.5
  AND ZHONGDZH = 142.5
ORDER BY
  YONGDCHANGD DESC,
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', MAX(`YONGDCHANGD`) AS '最长拥堵长度' FROM `ptgl_ldydzt` WHERE `LUD` = 'S226' AND `QIDZH` = 142.5 AND `ZHONGDZH` = 142.5 GROUP BY `GCRQ` ORDER BY `最长拥堵长度` DESC LIMIT 1;
gold_sql: SELECT COUNT(*) AS 拥堵次数 FROM ptgl_ldydzt  WHERE LUD = 'S226' AND GCRQ BETWEEN '2024-05-17' AND '2024-05-23';
pred_sql: SELECT COUNT(*) AS `S226路段一周内拥堵次数` FROM `ptgl_ldydzt` WHERE `LUD` = 'S226' AND `GCRQ` BETWEEN '2024-05-17' AND '2024-05-23';
gold_sql: SELECT LUD AS '路段', YONGDCHENGD AS '拥堵程度', YONGDCHANGD AS '拥堵长度', CHIXSJ AS '持续时间' FROM ptgl_ldydzt WHERE GCRQ BETWEEN '2024-05-13' AND '2024-05-19' ORDER BY CHIXSJ DESC LIMIT 1;
pred_sql: SELECT `LUD` AS '路段', MAX(`CHIXSJ`) AS '最长持续时间' FROM `ptgl_ldydzt` WHERE `GCRQ` BETWEEN '2024-05-13' AND '2024-05-19' GROUP BY `LUD` ORDER BY `最长持续时间` DESC LIMIT 1;
gold_sql: SELECT
  LUD AS 路段,
  MAX(YONGDCHENGD) AS 最严重拥堵程度
FROM
  ptgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-04-23' AND '2024-05-23'
GROUP BY
  LUD
ORDER BY
  MAX(YONGDCHANGD) DESC
LIMIT
  1;
pred_sql: SELECT `LUD` AS '路段', SUM(`YONGDCHANGD`) AS '总拥堵长度' FROM `ptgl_ldydzt` WHERE `GCRQ` BETWEEN '2024-04-23' AND '2024-05-23' GROUP BY `LUD` ORDER BY `总拥堵长度` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观测日期,
  COUNT(*) AS '拥堵事件数量'
FROM
  ptgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-05-20' AND '2024-05-22'
GROUP BY
  GCRQ
ORDER BY
  COUNT(*) DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', COUNT(*) AS '拥堵事件数量' FROM `ptgl_ldydzt` WHERE `GCRQ` BETWEEN '2024-05-20' AND '2024-05-22' GROUP BY `GCRQ` ORDER BY COUNT(*) DESC LIMIT 1;
gold_sql: SELECT LUD AS 路段, QIDZH AS 起点桩号, ZHONGDZH AS 终点桩号 FROM ptgl_ldydzt WHERE GCRQ = '2024-05-13' AND YONGDCHENGD = '拥堵';
pred_sql: SELECT `LUD` AS '路段'  FROM ptgl_ldydzt  WHERE `GCRQ` = '2024-05-13' AND `YONGDCHENGD` = '拥堵';
gold_sql: SELECT
  LUD AS 路段,
  YONGDCHANGD AS 拥堵长度
FROM
  ptgl_ldydzt
WHERE
  YONGDCHANGD > 200
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_ldydzt
  );
pred_sql: SELECT `LUD` AS '路段', `YONGDCHANGD` AS '拥堵长度'  FROM ptgl_ldydzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_ldydzt)  AND `YONGDCHANGD` > 200;
gold_sql: SELECT      LUD AS `路段`,      AVG(YONGDCHANGD) AS `平均拥堵长度` FROM      ptgl_ldydzt  WHERE      GCRQ BETWEEN '2024-04-01' AND '2024-04-30' GROUP BY      LUD;
pred_sql: SELECT `LUD` AS '路段', AVG(`YONGDCHANGD`) AS '平均拥堵长度' FROM `ptgl_ldydzt` WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' GROUP BY `LUD`;
gold_sql: SELECT      LUD AS 路段,      CHIXSJ AS 持续时间  FROM      ptgl_ldydzt  WHERE      GCRQ BETWEEN '2024-01-01' AND '2024-03-31'  ORDER BY      CHIXSJ DESC  LIMIT 1;
pred_sql: SELECT `LUD` AS '路段', MAX(`CHIXSJ`) AS '最长持续时间' FROM `ptgl_ldydzt` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY `LUD` ORDER BY `最长持续时间` DESC LIMIT 1;
gold_sql: SELECT
  LUD As 路段,
  SUM(YONGDCHANGD) AS '拥堵总长度'
FROM
  ptgl_ldydzt
WHERE
  GCRQ BETWEEN '2024-05-17' AND '2024-05-23'
GROUP BY
  LUD
ORDER BY
  SUM(YONGDCHANGD) DESC
LIMIT
  1;
pred_sql: SELECT `LUD` AS '路段', SUM(`YONGDCHANGD`) AS '总拥堵长度' FROM `ptgl_ldydzt` WHERE `GCRQ` BETWEEN '2024-05-17' AND '2024-05-23' GROUP BY `LUD` ORDER BY `总拥堵长度` DESC LIMIT 1;
gold_sql: SELECT
  LUD AS 路段,
  YONGDCHENGD AS 拥堵程度
FROM
  ptgl_ldydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_ldydzt
  )
ORDER BY
  YONGDCHANGD DESC
LIMIT
  1;
pred_sql: SELECT `LUD` AS '路段', MAX(`YONGDCHANGD`) AS '拥堵长度（米）' FROM ptgl_ldydzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_ldydzt) GROUP BY `LUD` ORDER BY `拥堵长度（米）` DESC LIMIT 1;
gold_sql: SELECT AVG(YONGDCHANGD) AS 平均拥堵长度 FROM ptgl_ldydzt WHERE LUD = 'S226' AND GCRQ = '2024-04-23';
pred_sql: SELECT AVG(`YONGDCHANGD`) AS `平均拥堵长度` FROM `ptgl_ldydzt` WHERE `LUD` = 'S226' AND `GCRQ` = '2024-04-23';
gold_sql: SELECT LUD AS 路段, COUNT(*) AS 拥堵次数  FROM ptgl_ldydzt  WHERE GCRQ BETWEEN '2024-05-13' AND '2024-05-19'  GROUP BY LUD;
pred_sql: SELECT `LUD` AS '路段', COUNT(*) AS '拥堵次数' FROM `ptgl_ldydzt` WHERE `GCRQ` BETWEEN '2024-05-13' AND '2024-05-19' GROUP BY `LUD`;
gold_sql: SELECT ZONGBC AS `2023年11月18日苏南硕放机场总班次` FROM jc_yxzt WHERE HANGKSNMC = '苏南硕放机场' AND GCRQ = '2023-11-18';
pred_sql: SELECT SUM(`ZONGBC`) AS '总班次' FROM `jc_yxzt` WHERE `GCRQ` = '2023-11-18' AND `HANGKSNMC` LIKE '%苏南硕放机场%';
gold_sql: SELECT
  HANGKSNMC AS 航空枢纽名称
FROM
  jc_yxzt
WHERE
  SUOZQY = '无锡'
  AND IATA = 'WUX'
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称' FROM jc_yxzt WHERE `IATA` = 'WUX';
gold_sql: SELECT JICHBZDL AS `2023年11月18日苏南硕放机场机场航班准点率` FROM jc_yxzt WHERE HANGKSNMC = '苏南硕放机场' AND GCRQ = '2023-11-18';
pred_sql: SELECT `JICHBZDL` AS '机场航班准点率' FROM jc_yxzt WHERE `GCRQ` = '2023-11-18' AND `HANGKSNMC` LIKE '%苏南硕放机场%';
gold_sql: SELECT HANGKSNMC AS `机场名称`, PINGJYWSJ AS `最长平均延误时间(分钟)` FROM jc_yxzt WHERE GCRQ = '2023-11-18' ORDER BY PINGJYWSJ DESC LIMIT 1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', AVG(`PINGJYWSJ`) AS '平均延误时间' FROM jc_yxzt WHERE `GCRQ` = '2023-11-18' GROUP BY `HANGKSNMC` ORDER BY AVG(`PINGJYWSJ`) DESC LIMIT 1;
gold_sql: SELECT HANGKSNMC AS `机场名称`, FASBC AS `2023年11月18日发送班次最少` FROM jc_yxzt WHERE GCRQ = '2023-11-18' ORDER BY FASBC ASC LIMIT 1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', SUM(`FASBC`) AS '发送班次总数' FROM jc_yxzt WHERE `GCRQ` = '2023-11-18' GROUP BY `HANGKSNMC` ORDER BY SUM(`FASBC`) ASC LIMIT 1;
gold_sql: SELECT HANGKSNMC AS `机场名称`, JICHBZDL AS `最高准点率` FROM jc_yxzt WHERE GCRQ = '2023-11-18' ORDER BY JICHBZDL DESC LIMIT 1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', `JICHBZDL` AS '准点率' FROM jc_yxzt WHERE `GCRQ` = '2023-11-18' ORDER BY CAST(`JICHBZDL` AS DECIMAL(5,2)) DESC LIMIT 1;
gold_sql: SELECT HANGKSNMC AS `机场名称`, (DAODBC / ZONGBC) * 100 AS `到达班次占总班次比例` FROM jc_yxzt WHERE GCRQ = '2023-11-18' ORDER BY (DAODBC / ZONGBC) DESC LIMIT 1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', SUM(`DAODBC`) / SUM(`ZONGBC`) AS '到达班次占比' FROM `jc_yxzt` WHERE `GCRQ` = '2023-11-18' GROUP BY `HANGKSNMC` ORDER BY `到达班次占比` DESC LIMIT 1;
gold_sql: SELECT
  SUOZQY AS 所在区域,
  COUNT(*) AS 机场数量
FROM
  jc_yxzt
GROUP BY
  SUOZQY;
pred_sql: SELECT `SUOZQY` AS '所在区域', COUNT(DISTINCT `HANGKSNMC`) AS '机场数量' FROM `jc_yxzt` GROUP BY `SUOZQY`;
gold_sql: SELECT DISTINCT HANGKSNMC AS '4E等级机场名称' FROM jc_yxzt WHERE FEIXQDJ = '4E';
pred_sql: SELECT `HANGKSNMC` AS '机场名称' FROM jc_yxzt WHERE `FEIXQDJ` = '4E';
gold_sql: SELECT
  HANGKSNMC AS 航空枢纽名称,
  ZONGBC AS 总班次
FROM
  jc_yxzt
WHERE
  ZONGBC = (
    SELECT
      MAX(ZONGBC)
    FROM
      jc_yxzt
  );
pred_sql: SELECT `HANGKSNMC` AS '机场名称', SUM(`ZONGBC`) AS '总班次数量' FROM jc_yxzt GROUP BY `HANGKSNMC` ORDER BY SUM(`ZONGBC`) DESC LIMIT 1;
gold_sql: SELECT HANGKSNMC AS `机场名称` FROM jc_yxzt WHERE PINGJYWSJ > 60;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', AVG(`PINGJYWSJ`) AS '平均延误时间' FROM `jc_yxzt` GROUP BY `HANGKSNMC` HAVING AVG(`PINGJYWSJ`) > 60;
gold_sql: SELECT HANGKSNMC AS `机场名称`, AVG(PINGJYWSJ) AS `平均延误时间` FROM jc_yxzt GROUP BY HANGKSNMC;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', AVG(`PINGJYWSJ`) AS '平均延误时间' FROM jc_yxzt GROUP BY `HANGKSNMC`;
gold_sql: SELECT
  HANGKSNMC As 航空枢纽名称
FROM
  jc_yxzt
WHERE
  DAODBC > FASBC;
pred_sql: SELECT `HANGKSNMC` AS '机场名称' FROM jc_yxzt WHERE `DAODBC` > `FASBC`;
gold_sql: SELECT
  HANGKSNMC AS 航空枢纽名称
FROM
  jc_yxzt
WHERE
  SUOZQY = '无锡'
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT `HANGKSNMC` AS '航空枢纽名称' FROM jc_yxzt WHERE `SUOZQY` = '无锡';
gold_sql: SELECT HANGKSNMC AS `航空枢纽名称`, PINGJYWSJ AS `延误时间` FROM jc_yxzt ORDER BY PINGJYWSJ DESC LIMIT 1;
pred_sql: SELECT `HANGKSNMC` AS '航空枢纽名称', MAX(`PINGJYWSJ`) AS '平均延误时间' FROM jc_yxzt GROUP BY `HANGKSNMC` ORDER BY `平均延误时间` DESC LIMIT 1;
gold_sql: SELECT
  HANGKSNMC AS 航空枢纽名称,
  DAODBC AS 到达班次
FROM
  jc_yxzt
WHERE
  DAODBC = (
    SELECT
      MIN(DAODBC)
    FROM
      jc_yxzt
  );
pred_sql: SELECT `HANGKSNMC` AS '机场名称', MIN(`DAODBC`) AS '最低到达班次' FROM jc_yxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM jc_yxzt) GROUP BY `HANGKSNMC`;
gold_sql: SELECT
  HANGKSNMC AS 航空枢纽名称,
  JICHBZDL AS 机场航班准点率
FROM
  jc_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      jc_yxzt
  );
pred_sql: SELECT `HANGKSNMC` AS '机场名称', AVG(CAST(SUBSTRING_INDEX(`JICHBZDL`, '%', 1) AS DECIMAL(5,2))) AS '平均航班准点率' FROM `jc_yxzt` GROUP BY `HANGKSNMC`;
gold_sql: SELECT AVG(CAST(REPLACE(JICHBZDL, '%', '') AS DECIMAL(10, 2))) AS '平均准点率'  FROM jc_yxzt  WHERE HANGKSNMC = '苏南硕放机场'  AND GCRQ BETWEEN '2024-05-16' AND '2024-05-23';
pred_sql: SELECT AVG(CAST(`JICHBZDL` AS DECIMAL(5,2))) AS `平均准点率` FROM `jc_yxzt` WHERE `HANGKSNMC` LIKE '%苏南硕放机场%' AND `GCRQ` BETWEEN '2024-05-16' AND '2024-05-23';
gold_sql: SELECT HANGKSNMC AS `机场名称` FROM jc_yxzt WHERE GCRQ = "2024-05-12" ORDER BY PINGJYWSJ DESC LIMIT 1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', AVG(`PINGJYWSJ`) AS '平均延误时间' FROM jc_yxzt WHERE `GCRQ` = '2024-05-12' GROUP BY `HANGKSNMC` ORDER BY AVG(`PINGJYWSJ`) DESC LIMIT 1;
gold_sql: SELECT
  HANGKSNMC AS '航空枢纽名称',
  JICHBZDL AS '机场航班准点率'
FROM
  jc_yxzt
WHERE
  GCRQ BETWEEN '2024-04-28' AND '2024-05-27'
ORDER BY
  CAST(JICHBZDL AS DECIMAL(10, 2)) DESC
LIMIT
  1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', MAX(CAST(SUBSTRING_INDEX(`JICHBZDL`, '%', 1) AS DECIMAL(5,2))) AS '最高准点率' FROM jc_yxzt WHERE `GCRQ` BETWEEN '2024-04-28' AND '2024-05-27' GROUP BY `HANGKSNMC` ORDER BY `最高准点率` DESC LIMIT 1;
gold_sql: SELECT
  `DAODBC` AS `到达班次`
FROM
  `jc_yxzt`
WHERE
  `SUOZQY` = '无锡区域'
  AND `GCRQ` = '2024-04-28';
pred_sql: SELECT `DAODBC` AS '到达班次' FROM jc_yxzt WHERE `GCRQ` = '2024-04-28' AND `SUOZQY` LIKE '%无锡%';
gold_sql: SELECT
  AVG(`FASBC`) AS '平均每天发送班次'
FROM
  `jc_yxzt`
WHERE
  `IATA` = 'WUX'
  AND `GCRQ` BETWEEN '2024-05-21' AND '2024-05-27';
pred_sql: SELECT AVG(`FASBC`) AS '平均每天发送班次' FROM `jc_yxzt` WHERE `IATA` = 'WUX' AND `GCRQ` BETWEEN '2024-05-21' AND '2024-05-27';
gold_sql: SELECT
  `SUOZQY` AS '所在区域',
  MIN(`FASBC`) AS '最少发送班次'
FROM
  `jc_yxzt`
WHERE
  `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31'
GROUP BY
  `SUOZQY`
ORDER BY
  `最少发送班次` ASC
LIMIT
  1;
pred_sql: SELECT `SUOZQY` AS '区域', SUM(`FASBC`) AS '发送班次总数' FROM jc_yxzt WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY `SUOZQY` ORDER BY `发送班次总数` ASC LIMIT 1;
gold_sql: SELECT
  HANGKSNMC AS '机场名称',
  AVG(PINGJYWSJ) AS '平均延误时间（分钟）'
FROM
  jc_yxzt
WHERE
  FEIXQDJ = '4E'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      jc_yxzt
  )
GROUP BY
  HANGKSNMC;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', AVG(`PINGJYWSJ`) AS '平均延误时间' FROM jc_yxzt WHERE `FEIXQDJ` = '4E' GROUP BY `HANGKSNMC`;
gold_sql: SELECT
  HANGKSNMC AS '机场名称',
  SUM(ZONGBC) AS '总班次'
FROM
  jc_yxzt
WHERE
  GCRQ BETWEEN '2024-04-28' AND '2024-05-27'
GROUP BY
  HANGKSNMC
ORDER BY
  SUM(ZONGBC) DESC
LIMIT
  1;
pred_sql: SELECT `HANGKSNMC` AS '机场名称', SUM(`ZONGBC`) AS '总班次' FROM jc_yxzt WHERE `GCRQ` BETWEEN '2024-04-28' AND '2024-05-27' GROUP BY `HANGKSNMC` ORDER BY SUM(`ZONGBC`) DESC LIMIT 1;
gold_sql: SELECT
  HANGKSNMC AS 航空枢纽名称,
  JICHBZDL AS 准点率
FROM
  jc_yxzt
WHERE
  PINGJYWSJ = (
    SELECT
      MIN(PINGJYWSJ)
    FROM
      jc_yxzt
    WHERE
      GCRQ BETWEEN '2024-05-21' AND '2024-05-27'
  )
  AND GCRQ BETWEEN '2024-05-21' AND '2024-05-27';
pred_sql: SELECT `JICHBZDL` AS '准点率' FROM jc_yxzt WHERE `GCRQ` BETWEEN '2024-05-21' AND '2024-05-27' ORDER BY `PINGJYWSJ` ASC LIMIT 1;
gold_sql: SELECT
  AVG(PINGJYWSJ) AS '平均延误时间（分钟）'
FROM
  jc_yxzt
WHERE
  GCRQ = '2024-05-27';
pred_sql: SELECT AVG(`PINGJYWSJ`) AS '平均延误时间' FROM `jc_yxzt` WHERE `GCRQ` = '2024-05-27';
gold_sql: SELECT
  HANGKSNMC AS '机场名称',
  (
    SUM(
      CASE
        WHEN GCRQ = '2024-05-27' THEN ZONGBC
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN GCRQ = '2024-05-21' THEN ZONGBC
        ELSE 0
      END
    )
  ) AS '航班量增长'
FROM
  jc_yxzt
WHERE
  GCRQ BETWEEN '2024-05-21' AND '2024-05-27'
GROUP BY
  HANGKSNMC
ORDER BY
  `航班量增长` DESC
LIMIT
  1;
pred_sql: SELECT `HANGKSNMC`, SUM(`ZONGBC`) AS '总航班量' FROM jc_yxzt WHERE `GCRQ` BETWEEN '2024-05-21' AND '2024-05-27' GROUP BY `HANGKSNMC` ORDER BY `总航班量` DESC LIMIT 1;
gold_sql: SELECT DISTINCT
  HANGKSNMC AS 航空枢纽名称
FROM
  jc_yxzt
WHERE
  GCRQ BETWEEN '2024-04-28' AND '2024-05-27'
  AND CAST(JICHBZDL AS DECIMAL(5, 2)) >= 90;
pred_sql: SELECT HANGKSNMC AS '机场名称' FROM jc_yxzt WHERE GCRQ BETWEEN '2024-04-28' AND '2024-05-27' GROUP BY HANGKSNMC HAVING MIN(CAST(SUBSTRING(JICHBZDL, 1, LENGTH(JICHBZDL) - 1) AS DECIMAL(5,2))) >= 90;
gold_sql: SELECT
  OD AS `月度客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '1'
  AND O_STATION = '丁山站'
  AND D_STATION = '上海'
pred_sql: SELECT `O_STATION` AS '始发站', `D_STATION` AS '终点站', SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `O_STATION` LIKE '%丁山站%' AND `D_STATION` LIKE '%上海%' GROUP BY `O_STATION`, `D_STATION`;
gold_sql: SELECT
  AVG(OD) AS `平均月度客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '01';
pred_sql: SELECT AVG(`OD`) AS '平均月度客流量' FROM `glkyl_od_tj` WHERE `YEAR` = '2023' AND `MONTH` = '01';
gold_sql: SELECT
  YEAR AS `年份`,
  MONTH AS `月份`,
  O_STATION AS `始发站`,
  D_STATION AS `终点站`,
  MAX(OD) AS `月度客流量最大值`
FROM
  glkyl_od_tj
GROUP BY
  YEAR,
  MONTH,
  O_STATION,
  D_STATION
ORDER BY
  `月度客流量最大值` DESC
LIMIT
  1;
pred_sql: SELECT `YEAR`, `MONTH`, `O_STATION`, `D_STATION`, MAX(`OD`) AS '最大客流量' FROM glkyl_od_tj GROUP BY `YEAR`, `MONTH`, `O_STATION`, `D_STATION` ORDER BY `最大客流量` DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  `O_STATION` AS `始发站`,
  `D_STATION` AS `终点站`,
  `OD` AS `客流量（人/月）`
FROM
  `glkyl_od_tj`
WHERE
  `O_STATION` = '丁山站';
pred_sql: SELECT `YEAR`, `MONTH`, `O_STATION`, `D_STATION`, `OD`  FROM glkyl_od_tj  WHERE `O_STATION` = '丁山站';
gold_sql: SELECT
  YEAR AS `年份`,
  MONTH AS `月份`,
  O_STATION AS `始发站`,
  D_STATION AS `终点站`,
  OD AS `客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '01'
  AND OD BETWEEN 500 AND 1000
pred_sql: SELECT `YEAR`, `MONTH`, `O_STATION`, `D_STATION`, `OD`  FROM glkyl_od_tj  WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `OD` BETWEEN 500 AND 1000;
gold_sql: SELECT
  O_STATION AS `始发站`,
  OD AS `客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  D_STATION = '上海'
  AND YEAR = '2023'
  AND MONTH = '1'
pred_sql: SELECT `O_STATION` AS '始发站', SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `D_STATION` = '上海' GROUP BY `O_STATION`;
gold_sql: SELECT DISTINCT
  T1.O_STATION AS `始发站`,
  T1.D_STATION AS `终点站`
FROM
  glkyl_od_tj T1
  LEFT JOIN (
    SELECT
      O_STATION,
      D_STATION
    FROM
      glkyl_od_tj
    WHERE
      YEAR = '2023'
      AND MONTH = '01'
  ) T2 ON T1.O_STATION = T2.O_STATION
  AND T1.D_STATION = T2.D_STATION
WHERE
  T2.O_STATION IS NULL
  AND T2.D_STATION IS NULL
pred_sql: SELECT DISTINCT O_STATION, D_STATION  FROM glkyl_od_tj  WHERE NOT EXISTS (     SELECT 1      FROM glkyl_od_tj AS sub      WHERE sub.YEAR = '2023' AND sub.MONTH = '01'        AND sub.O_STATION = glkyl_od_tj.O_STATION        AND sub.D_STATION = glkyl_od_tj.D_STATION );
gold_sql: SELECT
  YEAR AS `年份`,
  MONTH AS `月份`,
  O_STATION AS `始发站`,
  D_STATION AS `终点站`,
  OD AS `客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  (YEAR, MONTH, O_STATION, D_STATION, OD) IN (
    SELECT
      YEAR,
      MONTH,
      O_STATION,
      D_STATION,
      MIN(OD)
    FROM
      glkyl_od_tj
    GROUP BY
      YEAR,
      MONTH,
      O_STATION,
      D_STATION
  )
ORDER BY
  `客流量（人/月）` ASC
LIMIT
  1;
pred_sql: SELECT `YEAR`, `MONTH`, `O_STATION`, `D_STATION`, MIN(`OD`) AS '最少客流量' FROM glkyl_od_tj GROUP BY `YEAR`, `MONTH`, `O_STATION`, `D_STATION` ORDER BY `最少客流量` ASC LIMIT 1;
gold_sql: SELECT
  YEAR AS `年份`,
  MONTH AS `月份`,
  SUM(OD) AS `客流量总和（人/月）`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
GROUP BY
  YEAR,
  MONTH
ORDER BY
  MONTH;
pred_sql: SELECT `MONTH` AS '月份', SUM(`OD`) AS '客流量总和' FROM glkyl_od_tj WHERE `YEAR` = '2023' GROUP BY `MONTH`;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  `O_STATION` AS `始发站`,
  `D_STATION` AS `终点站`,
  `OD` AS `客流量（人/月）`
FROM
  `glkyl_od_tj`
WHERE
  `YEAR` = '2023'
  AND `MONTH` = '1'
ORDER BY
  `OD` DESC
LIMIT
  3;
pred_sql: SELECT `O_STATION` AS '始发站', `D_STATION` AS '终点站', `OD` AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '01' ORDER BY `OD` DESC LIMIT 3;
gold_sql: SELECT
  STD(OD) AS `客流量标准差`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '01';
pred_sql: SELECT STDDEV(`OD`) AS '客流量标准差' FROM `glkyl_od_tj` WHERE `YEAR` = '2023' AND `MONTH` = '01';
gold_sql: SELECT
  OD as `客流量`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '1'
  AND O_STATION = '丁山站'
  AND D_STATION = '上海'
pred_sql: SELECT SUM(`OD`) AS '客流量' FROM `glkyl_od_tj` WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `O_STATION` = '丁山站' AND `D_STATION` = '上海';
gold_sql: SELECT
  `O_STATION` AS `始发站`,
  `D_STATION` AS `终点站`,
  SUM(`OD`) AS `2023年总客流量（人）`
FROM
  `glkyl_od_tj`
WHERE
  `YEAR` = '2023'
GROUP BY
  `O_STATION`,
  `D_STATION`
ORDER BY
  `2023年总客流量（人）` DESC
LIMIT
  1;
pred_sql: SELECT      `O_STATION` AS '始发站',      `D_STATION` AS '终点站',      SUM(`OD`) AS '总客流量' FROM      glkyl_od_tj WHERE      `YEAR` = '2023' GROUP BY      `O_STATION`, `D_STATION` ORDER BY      `总客流量` DESC LIMIT 1;
gold_sql: SELECT
  CONCAT(YEAR, '年', MONTH, '月') AS '月份',
  SUM(OD) AS '客流量最高'
FROM
  glkyl_od_tj
WHERE
  CONCAT(YEAR, '-', MONTH, '-01') BETWEEN '2024-05-21' AND '2024-05-28'
GROUP BY
  YEAR,
  MONTH
ORDER BY
  SUM(OD) DESC
LIMIT
  1;
pred_sql: SELECT `MONTH`, SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2024' AND `MONTH` IN ('05') GROUP BY `MONTH` ORDER BY SUM(`OD`) DESC LIMIT 1;
gold_sql: SELECT
  `O_STATION` AS `始发站`,
  `OD` AS `客流量（人/月）`
FROM
  `glkyl_od_tj`
WHERE
  `YEAR` = '2023'
  AND `MONTH` = '01'
  AND `OD` > (
    SELECT
      AVG(`OD`)
    FROM
      `glkyl_od_tj`
    WHERE
      `YEAR` = '2023'
      AND `MONTH` = '01'
  )
pred_sql: SELECT O_STATION AS '始发站', AVG(OD) AS '客流量平均值' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY O_STATION HAVING AVG(OD) > (     SELECT AVG(OD)     FROM glkyl_od_tj     WHERE `YEAR` = '2023' AND `MONTH` = '01' );
gold_sql: SELECT
  CAST(
    (od_1.`客流量` / od_total.`总客流量`) * 100 AS DECIMAL(5, 2)
  ) AS '客流量占比(%)'
FROM
  (
    SELECT
      MAX(YEAR) AS `YEAR`,
      MAX(MONTH) AS `MONTH`
    FROM
      `glkyl_od_tj`
  ) latest_date,
  (
    SELECT
      SUM(`OD`) AS `客流量`
    FROM
      `glkyl_od_tj`
    WHERE
      `O_STATION` = '丁山站'
      AND `D_STATION` = '上海'
      AND `YEAR` = (
        SELECT
          MAX(YEAR)
        FROM
          `glkyl_od_tj`
      )
      AND `MONTH` = (
        SELECT
          MAX(MONTH)
        FROM
          `glkyl_od_tj`
        WHERE
          `YEAR` = (
            SELECT
              MAX(YEAR)
            FROM
              `glkyl_od_tj`
          )
      )
  ) od_1,
  (
    SELECT
      SUM(`OD`) AS `总客流量`
    FROM
      `glkyl_od_tj`
    WHERE
      `YEAR` = (
        SELECT
          MAX(YEAR)
        FROM
          `glkyl_od_tj`
      )
      AND `MONTH` = (
        SELECT
          MAX(MONTH)
        FROM
          `glkyl_od_tj`
        WHERE
          `YEAR` = (
            SELECT
              MAX(YEAR)
            FROM
              `glkyl_od_tj`
          )
      )
  ) od_total;
pred_sql: SELECT      (SUM(CASE WHEN `D_STATION` = '上海' THEN `OD` ELSE 0 END) / SUM(`OD`)) * 100 AS '丁山站到上海的客流量占总客流量的百分比' FROM      glkyl_od_tj WHERE      `YEAR` = (SELECT MAX(`YEAR`) FROM glkyl_od_tj)     AND `MONTH` = (SELECT MAX(`MONTH`) FROM glkyl_od_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM glkyl_od_tj));
gold_sql: SELECT
  D_STATION AS `终点站`,
  SUM(OD) AS `客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '01'
GROUP BY
  D_STATION
HAVING
  `客流量（人/月）` > 500;
pred_sql: SELECT D_STATION AS '终点站' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '01' AND OD > 500;
gold_sql: SELECT
  MONTH AS `客流量增长最快的月份`
FROM
  glkyl_od_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      glkyl_od_tj
  )
ORDER BY
  OD DESC
LIMIT
  1;
pred_sql: SELECT `YEAR`, `MONTH`, MAX(OD) AS '最大客流量' FROM glkyl_od_tj GROUP BY `YEAR`, `MONTH` ORDER BY MAX(OD) DESC LIMIT 1;
gold_sql: SELECT
  `D_STATION` AS `终点站`,
  MIN(`OD`) AS `最低客流量（人/月）`
FROM
  `glkyl_od_tj`
WHERE
  `YEAR` = '2023'
  AND `MONTH` = '01'
GROUP BY
  `D_STATION`
ORDER BY
  `最低客流量（人/月）`
LIMIT
  1;
pred_sql: SELECT `D_STATION` AS '终点站', SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY `D_STATION` ORDER BY SUM(`OD`) ASC LIMIT 1;
gold_sql: SELECT
  O_STATION AS '始发站',
  SUM(OD) AS '总客流量'
FROM
  glkyl_od_tj
WHERE
  CONCAT(YEAR, MONTH) BETWEEN '202402' AND '202405'
GROUP BY
  O_STATION
ORDER BY
  SUM(OD) ASC
LIMIT
  1;
pred_sql: SELECT O_STATION, MIN(OD) AS 客流量增长最缓慢 FROM glkyl_od_tj WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-02-28' AND '2024-05-28' GROUP BY O_STATION ORDER BY 客流量增长最缓慢 ASC LIMIT 1;
gold_sql: SELECT
  `O_STATION` AS '始发站',
  `D_STATION` AS '终点站',
  SUM(`OD`) AS '客流量（人/月）'
FROM
  `glkyl_od_tj`
WHERE
  `YEAR` = '2023'
GROUP BY
  `O_STATION`,
  `D_STATION`
ORDER BY
  `客流量（人/月）` ASC
LIMIT
  1;
pred_sql: SELECT `O_STATION` AS '始发站', `D_STATION` AS '终点站', SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2023' GROUP BY `O_STATION`, `D_STATION` ORDER BY SUM(`OD`) ASC LIMIT 1;
gold_sql: SELECT
  O_STATION AS `始发站`,
  SUM(OD) AS `客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '1'
GROUP BY
  O_STATION
HAVING
  `客流量（人/月）` > 1000;
pred_sql: SELECT `O_STATION` AS '始发站' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `OD` > 1000;
gold_sql: SELECT
  YEAR AS 年份,
  MONTH As 月份,
  MAX(OD) - MIN(OD) AS '波动量'
FROM
  glkyl_od_tj
GROUP BY
  YEAR,
  MONTH
ORDER BY
  '波动量' DESC
LIMIT
  1;
pred_sql: SELECT `MONTH`, MAX(`OD`) - MIN(`OD`) AS `客流量波动` FROM glkyl_od_tj GROUP BY `MONTH` ORDER BY `客流量波动` DESC LIMIT 1;
gold_sql: SELECT
  D_STATION AS '终点站',
  MAX(OD) - MIN(OD) AS '增长量'
FROM
  glkyl_od_tj
WHERE
  CONCAT(YEAR, '-', MONTH) BETWEEN '2023-11' AND '2024-05'
GROUP BY
  D_STATION
ORDER BY
  '增长量' DESC
LIMIT
  1;
pred_sql: SELECT `D_STATION`, SUM(`OD`) AS '客流量增长' FROM glkyl_od_tj WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-11-28' AND '2024-05-28' GROUP BY `D_STATION` ORDER BY SUM(`OD`) DESC LIMIT 1;
gold_sql: SELECT
  `O_STATION` AS `始发站`,
  SUM(`OD`) AS `总客流量（人）`
FROM
  `glkyl_od_tj`
WHERE
  `YEAR` = '2023'
  AND `D_STATION` = '上海'
GROUP BY
  `O_STATION`
ORDER BY
  `总客流量（人）` DESC
LIMIT
  1;
pred_sql: SELECT `O_STATION` AS '始发站', SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `D_STATION` = '上海' GROUP BY `O_STATION` ORDER BY SUM(`OD`) DESC LIMIT 1;
gold_sql: SELECT
  O_STATION AS '始发站',
  D_STATION AS '终点站',
  MAX(OD) AS '最大客流量'
FROM
  glkyl_od_tj
WHERE
  YEAR = '2024'
  AND MONTH = '01'
GROUP BY
  O_STATION,
  D_STATION
ORDER BY
  `最大客流量` DESC
LIMIT
  1;
pred_sql: SELECT `O_STATION` AS '始发站', `D_STATION` AS '终点站', SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2024' AND `MONTH` = '01' GROUP BY `O_STATION`, `D_STATION` ORDER BY SUM(`OD`) DESC LIMIT 1;
gold_sql: SELECT
  D_STATION AS '终点站',
  SUM(OD) AS '客流量总和'
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH = '12'
GROUP BY
  D_STATION
ORDER BY
  '客流量总和' DESC
LIMIT
  1;
pred_sql: SELECT `D_STATION` AS '终点站', SUM(`OD`) AS '客流量总和' FROM glkyl_od_tj WHERE `YEAR` = '2023' AND `MONTH` = '12' GROUP BY `D_STATION` ORDER BY SUM(`OD`) DESC LIMIT 1;
gold_sql: SELECT
  YEAR as `年份`,
  MONTH as `月份`,
  OD as `客流量（人/月）`
FROM
  glkyl_od_tj
WHERE
  O_STATION = '丁山站'
  AND D_STATION = '上海'
  AND CONCAT(YEAR, LPAD(MONTH, 2, '0')) BETWEEN '202402' AND '202405'
ORDER BY
  YEAR,
  MONTH;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`OD`) AS '客流量总和' FROM glkyl_od_tj WHERE `O_STATION` = '丁山站' AND `D_STATION` = '上海' AND ((`YEAR` = '2024' AND `MONTH` IN ('02', '03', '04')) OR (`YEAR` = '2023' AND `MONTH` = '05')) GROUP BY `YEAR`, `MONTH` ORDER BY `YEAR`, `MONTH`;
gold_sql: SELECT
  O_STATION AS '始发站',
  SUM(OD) AS '客流量'
FROM
  glkyl_od_tj
WHERE
  STR_TO_DATE(CONCAT(YEAR, '-', MONTH, '-01'), '%Y-%m-%d') BETWEEN '2024-04-28' AND '2024-05-27'
GROUP BY
  O_STATION
HAVING
  COUNT(DISTINCT YEAR, MONTH) = 2
ORDER BY
  SUM(OD) DESC
LIMIT
  1;
pred_sql: SELECT O_STATION AS '始发站', SUM(OD) AS '客流量' FROM glkyl_od_tj WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-04-28' AND '2024-05-27' GROUP BY O_STATION HAVING COUNT(DISTINCT STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d')) = 2 AND SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-04-28' THEN OD ELSE 0 END) < SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-05-27' THEN OD ELSE 0 END);
gold_sql: SELECT
  current_month.O_STATION AS `始发站`,
  current_month.D_STATION AS `终点站`
FROM
  (
    SELECT
      O_STATION,
      D_STATION,
      SUM(OD) AS `客流量`
    FROM
      glkyl_od_tj
    WHERE
      CONCAT(YEAR, '-', MONTH) BETWEEN '2024-05' AND '2024-05'
    GROUP BY
      O_STATION,
      D_STATION
  ) AS current_month
  JOIN (
    SELECT
      O_STATION,
      D_STATION,
      SUM(OD) AS `客流量`
    FROM
      glkyl_od_tj
    WHERE
      CONCAT(YEAR, '-', MONTH) BETWEEN '2024-04' AND '2024-04'
    GROUP BY
      O_STATION,
      D_STATION
  ) AS last_month ON current_month.O_STATION = last_month.O_STATION
  AND current_month.D_STATION = last_month.D_STATION
WHERE
  current_month.`客流量` > last_month.`客流量`
pred_sql: SELECT      t1.O_STATION AS '始发站',      t1.D_STATION AS '终点站',      t1.OD AS '当前月份客流量',      t2.OD AS '上个月份客流量' FROM      glkyl_od_tj t1 JOIN      glkyl_od_tj t2 ON t1.O_STATION = t2.O_STATION AND t1.D_STATION = t2.D_STATION WHERE      t1.YEAR = '2024' AND t1.MONTH = '05'     AND t2.YEAR = '2024' AND t2.MONTH = '04'     AND t1.OD > t2.OD;
gold_sql: SELECT
  O_STATION AS '始发站',
  D_STATION AS '终点站',
  MIN(OD) AS '最低客流量'
FROM
  glkyl_od_tj
WHERE
  YEAR = 2024
  AND MONTH = 4
GROUP BY
  O_STATION,
  D_STATION
ORDER BY
  MIN(OD) ASC
LIMIT
  1;
pred_sql: SELECT `O_STATION` AS '始发站', `D_STATION` AS '终点站', SUM(`OD`) AS '客流量' FROM glkyl_od_tj WHERE `YEAR` = '2024' AND `MONTH` = '04' GROUP BY `O_STATION`, `D_STATION` ORDER BY SUM(`OD`) ASC LIMIT 1;
gold_sql: SELECT
  t2.O_STATION AS '始发站',
  t2.D_STATION AS '终点站',
  ABS(t2.OD - t1.OD) AS '客流量变化量'
FROM
  glkyl_od_tj t1
  JOIN glkyl_od_tj t2 ON t1.O_STATION = t2.O_STATION
  AND t1.D_STATION = t2.D_STATION
WHERE
  t1.YEAR = '2024'
  AND t1.MONTH = '4'
  AND t2.YEAR = '2024'
  AND t2.MONTH = '5'
ORDER BY
  '客流量变化量' DESC
LIMIT
  1;
pred_sql: SELECT      t1.O_STATION AS '站名',     (t2.OD - t1.OD) / t1.OD * 100 AS '客流量增长幅度' FROM      glkyl_od_tj t1 JOIN      glkyl_od_tj t2 ON t1.O_STATION = t2.O_STATION WHERE      t1.YEAR = '2024' AND t1.MONTH = '04'     AND t2.YEAR = '2024' AND t2.MONTH = '05';
gold_sql: SELECT
  O_STATION AS `始发站`,
  D_STATION AS `终点站`
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
  AND MONTH BETWEEN '11' AND '12'
  OR YEAR = '2024'
  AND MONTH BETWEEN '01' AND '05'
GROUP BY
  O_STATION,
  D_STATION
HAVING
  MIN(OD) > 500;
pred_sql: SELECT O_STATION, D_STATION FROM glkyl_od_tj WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-11-28' AND '2024-05-28' GROUP BY O_STATION, D_STATION HAVING MIN(OD) > 500;
gold_sql: SELECT
  MONTH AS `月份`,
  SUM(OD) AS `客流量总和`
FROM
  glkyl_od_tj
GROUP BY
  MONTH
ORDER BY
  `客流量总和` DESC
LIMIT
  1;
pred_sql: SELECT `MONTH`, SUM(`OD`) AS '总客流量' FROM glkyl_od_tj GROUP BY `MONTH` ORDER BY `总客流量` DESC LIMIT 1;
gold_sql: SELECT
  D_STATION AS `终点站`
FROM
  glkyl_od_tj
GROUP BY
  D_STATION
HAVING
  MIN(OD) >= 1000
pred_sql: SELECT D_STATION  FROM glkyl_od_tj  GROUP BY D_STATION, YEAR, MONTH  HAVING SUM(OD) >= 1000  AND COUNT(DISTINCT CONCAT(YEAR, '-', MONTH)) = 12;
gold_sql: SELECT
  O_STATION AS '始发站',
  D_STATION AS '终点站',
  MONTH AS '月份',
  MAX(OD) - MIN(OD) AS '客流量波动'
FROM
  glkyl_od_tj
WHERE
  YEAR = '2023'
GROUP BY
  O_STATION,
  D_STATION,
  MONTH
ORDER BY
  '客流量波动' DESC
LIMIT
  1;
pred_sql: SELECT      CONCAT(YEAR, 'Q', QUARTER) AS `季度`,     O_STATION AS `始发站`,     D_STATION AS `终点站`,     MAX(OD) - MIN(OD) AS `客流量波动` FROM (     SELECT          `YEAR`,         `MONTH`,         `O_STATION`,         `D_STATION`,         SUM(`OD`) AS `OD`,         CASE              WHEN `MONTH` IN ('01', '02', '03') THEN 1             WHEN `MONTH` IN ('04', '05', '06') THEN 2             WHEN `MONTH` IN ('07', '08', '09') THEN 3             ELSE 4         END AS QUARTER     FROM glkyl_od_tj     WHERE `YEAR` = '2023'     GROUP BY `YEAR`, QUARTER, `O_STATION`, `D_STATION` ) AS quarterly_data GROUP BY `季度`, `始发站`, `终点站` ORDER BY `客流量波动` DESC LIMIT 1;
gold_sql: SELECT
  CONCAT(O_STATION, ' - ', D_STATION) AS `始发站 - 终点站`,
  MAX(OD) - MIN(OD) AS `客流量增长`
FROM
  glkyl_od_tj
WHERE
  YEAR || MONTH BETWEEN '202305' AND '202404'
GROUP BY
  O_STATION,
  D_STATION
ORDER BY
  `客流量增长` DESC
LIMIT
  3;
pred_sql: SELECT      O_STATION AS '始发站',      D_STATION AS '终点站',      SUM(OD) AS '客流量增长' FROM      glkyl_od_tj WHERE      STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-05-28' AND '2024-05-27' GROUP BY      O_STATION, D_STATION ORDER BY      '客流量增长' DESC LIMIT 3;
gold_sql: SELECT
  curr.O_STATION AS `始发站`,
  (curr.季度客流量 - prev.季度客流量) AS `客流量下降`
FROM
  (
    SELECT
      O_STATION,
      SUM(OD) AS `季度客流量`
    FROM
      glkyl_od_tj
    WHERE
      YEAR = '2024'
      AND MONTH IN ('4', '5', '6')
    GROUP BY
      O_STATION
  ) AS curr
  INNER JOIN (
    SELECT
      O_STATION,
      SUM(OD) AS `季度客流量`
    FROM
      glkyl_od_tj
    WHERE
      YEAR = '2024'
      AND MONTH IN ('1', '2', '3')
    GROUP BY
      O_STATION
  ) AS prev ON curr.O_STATION = prev.O_STATION
WHERE
  (curr.季度客流量 - prev.季度客流量) < 0
ORDER BY
  `客流量下降` DESC;
pred_sql: SELECT      t1.O_STATION AS '始发站',     SUM(CASE WHEN t1.YEAR = '2024' AND t1.MONTH IN ('04', '05', '06') THEN t1.OD ELSE 0 END) AS '本季度客流量',     SUM(CASE WHEN t1.YEAR = '2024' AND t1.MONTH IN ('01', '02', '03') THEN t1.OD ELSE 0 END) AS '上一季度客流量' FROM      glkyl_od_tj t1 GROUP BY      t1.O_STATION HAVING      `本季度客流量` < `上一季度客流量`;
gold_sql: SELECT
  O_STATION AS '始发站',
  D_STATION AS '终点站'
FROM
  glkyl_od_tj
WHERE
  YEAR = '2024'
  AND MONTH IN ('2', '3', '4')
GROUP BY
  O_STATION,
  D_STATION
HAVING
  MIN(OD) > (
    SELECT
      AVG(OD)
    FROM
      glkyl_od_tj
    WHERE
      YEAR = '2024'
      AND MONTH IN ('2', '3', '4')
  );
pred_sql: SELECT O_STATION, D_STATION FROM glkyl_od_tj WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-02-28' AND '2024-05-28' GROUP BY O_STATION, D_STATION HAVING AVG(OD) > (     SELECT AVG(OD)     FROM glkyl_od_tj     WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-02-28' AND '2024-05-28' );
gold_sql: SELECT
  `PTGL_DML` AS `普通公路断面量（辆/天）`
FROM
  `r_ptgl_z`
WHERE
  `GCRQ` = '2023-11-30';
pred_sql: SELECT `PTGL_DML` AS '普通公路断面量' FROM r_ptgl_z WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT
  GCRQ AS '日期'
FROM
  r_ptgl_z
WHERE
  XSSD = 69;
pred_sql: SELECT `GCRQ` AS '观测日期'  FROM r_ptgl_z  WHERE `XSSD` = 69;
gold_sql: SELECT
  GCRQ AS '观测日期'
FROM
  r_ptgl_z
WHERE
  LWCTL = 98;
pred_sql: SELECT `GCRQ` AS '观测日期'  FROM r_ptgl_z  WHERE `LWCTL` = 98.0;
gold_sql: SELECT
  RTXZK AS `普通公路当日通行状况`
FROM
  r_ptgl_z
WHERE
  GCRQ = '2023-11-30'
pred_sql: SELECT `RTXZK` AS '当日通行状况' FROM r_ptgl_z WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT
  AVG(PTGL_DML) AS `普通公路断面量平均值`
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-05-21' AND '2024-05-27';
pred_sql: SELECT AVG(`PTGL_DML`) AS '近一周普通公路断面量的平均值' FROM `r_ptgl_z` WHERE `GCRQ` BETWEEN '2024-05-21' AND '2024-05-27';
gold_sql: SELECT
  GCRQ AS '观测日期',
  XSSD AS '行驶速度（千米/小时）'
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-04-30'
  AND XSSD > 70;
pred_sql: SELECT `GCRQ` AS '观测日期', `XSSD` AS '普通公路行驶速度'  FROM r_ptgl_z  WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30'  AND `XSSD` > 70;
gold_sql: SELECT
  GCRQ AS '观测日期',
  LWCTL AS '畅通率'
FROM
  r_ptgl_z
WHERE
  LWCTL < 95
  AND QUARTER(GCRQ) = QUARTER(NOW())
  AND YEAR(GCRQ) = YEAR(NOW());
pred_sql: SELECT `GCRQ` AS '观测日期', `LWCTL` AS '普通公路路网畅通率'  FROM r_ptgl_z  WHERE `LWCTL` < 95;
gold_sql: SELECT
  GCRQ AS 观测日期,
  DRLLHB AS 当日流量环比
FROM
  r_ptgl_z
WHERE
  DRLLHB > 1
  AND GCRQ BETWEEN '2024-05-25' AND '2024-05-27';
pred_sql: SELECT `GCRQ` AS '观测日期', `DRLLHB` AS '当日流量环比'  FROM r_ptgl_z  WHERE `GCRQ` BETWEEN '2024-05-25' AND '2024-05-27'  AND `DRLLHB` > 1;
gold_sql: SELECT
  GCRQ As 观测日期
FROM
  r_ptgl_z
WHERE
  GCRQ = '2024-04-28'
  AND RTXZK LIKE '%拥堵指数较低%'
  AND CTQK = '畅通';
pred_sql: SELECT `GCRQ` AS '观测日期'  FROM r_ptgl_z  WHERE `GCRQ` = '2024-04-28' AND `RTXZK` = '拥堵指数较低，路网总体通畅';
gold_sql: SELECT
  GCRQ AS '观测日期',
  PTGL_DML AS '断面量（辆/天）',
  XSSD AS '行驶速度（千米/小时）',
  LWCTL AS '路网畅通率',
  DRLLHB AS '流量环比',
  RTXZK AS '通行状况',
  CTQK AS '畅通情况'
FROM
  r_ptgl_z
WHERE
  GCRQ = '2023-11-30';
pred_sql: SELECT `GCRQ` AS '观测日期', `PTGL_DML` AS '普通公路断面量（辆/天）', `XSSD` AS '普通公路行驶速度（千米/小时）', `LWCTL` AS '普通公路路网畅通率', `RTXZK` AS '当日通行状况' FROM r_ptgl_z WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT
  `GCRQ` AS `观测日期`
FROM
  `r_ptgl_z`
WHERE
  `PTGL_DML` > 12000
ORDER BY
  `GCRQ` DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期' FROM r_ptgl_z WHERE `PTGL_DML` > 12000;
gold_sql: SELECT
  XSSD AS `普通公路行驶速度（千米/小时）`
FROM
  r_ptgl_z
WHERE
  GCRQ = '2024-05-19';
pred_sql: SELECT `XSSD` AS '普通公路行驶速度'  FROM r_ptgl_z  WHERE `GCRQ` = '2024-05-19';
gold_sql: SELECT
  GCRQ AS 观测日期,
  LWCTL AS 对应畅通率
FROM
  r_ptgl_z
WHERE
  GCRQ >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
ORDER BY
  LWCTL DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', `LWCTL` AS '普通公路路网畅通率'  FROM r_ptgl_z  WHERE `GCRQ` >= CURDATE() - INTERVAL 1 MONTH  ORDER BY `LWCTL` DESC  LIMIT 1;
gold_sql: SELECT
  `PTGL_DML` AS `普通公路断面量（辆/天）`
FROM
  `r_ptgl_z`
WHERE
  `GCRQ` = '2023-11-30';
pred_sql: SELECT `PTGL_DML` AS '普通公路断面量'  FROM r_ptgl_z  WHERE `GCRQ` = '2023-11-30';
gold_sql: SELECT
  AVG(XSSD) AS '11月份普通公路行驶速度平均值（千米/小时）'
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2023-11-01' AND '2023-11-30';
pred_sql: SELECT AVG(`XSSD`) AS '11月份普通公路行驶速度平均值' FROM `r_ptgl_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
gold_sql: SELECT
  `CTQK` AS `畅通情况`
FROM
  `r_ptgl_z`
WHERE
  `GCRQ` = '2024-05-21';
pred_sql: SELECT `GCRQ` AS '观测日期', `LWCTL` AS '普通公路路网畅通率', `CTQK` AS '畅通情况' FROM r_ptgl_z WHERE `GCRQ` = '2024-05-21';
gold_sql: SELECT
  MAX(`PTGL_DML`) AS `11月份普通公路断面量的最大值`
FROM
  `r_ptgl_z`
WHERE
  `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
pred_sql: SELECT MAX(`PTGL_DML`) AS '最大普通公路断面量' FROM `r_ptgl_z` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
gold_sql: SELECT
  GCRQ AS `日期`,
  RTXZK AS `当日通行状况`
FROM
  r_ptgl_z
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      r_ptgl_z
  )
  AND PTGL_DML > 12000;
pred_sql: SELECT `GCRQ` AS '日期', `RTXZK` AS '当日通行状况'  FROM r_ptgl_z  WHERE `PTGL_DML` > 12000;
gold_sql: SELECT
  GCRQ AS '日期'
FROM
  r_ptgl_z
WHERE
  DRLLHB < 0
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      r_ptgl_z
  );
pred_sql: SELECT `GCRQ` AS '日期', `DRLLHB` AS '当日流量环比'  FROM r_ptgl_z  WHERE `DRLLHB` < 0;
gold_sql: SELECT
  GCRQ AS `最后一次出现“优”的日期`
FROM
  r_ptgl_z
WHERE
  CTQK = '优'
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '最后一次出现“优”的日期'  FROM r_ptgl_z  WHERE `CTQK` = '优'  ORDER BY `GCRQ` DESC  LIMIT 1;
gold_sql: SELECT
  COUNT(*) AS 超过10000断面量的日期数
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2023-10-01' AND '2023-10-31'
  AND PTGL_DML > 10000;
pred_sql: SELECT COUNT(DISTINCT `GCRQ`) AS `超过10000的日期数量` FROM `r_ptgl_z` WHERE `PTGL_DML` > 10000 AND `GCRQ` BETWEEN '2023-10-01' AND '2023-10-31';
gold_sql: SELECT
  GCRQ AS '日期',
  LWCTL AS '路网畅通率'
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-05-27' AND '2024-06-02'
ORDER BY
  LWCTL DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', `LWCTL` AS '路网畅通率'  FROM r_ptgl_z  WHERE `GCRQ` BETWEEN '2024-05-27' AND '2024-06-02'  ORDER BY `LWCTL` DESC  LIMIT 1;
gold_sql: SELECT
  AVG(XSSD) AS `平均行驶速度`
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-05-20' AND '2024-05-26';
pred_sql: SELECT AVG(`XSSD`) AS '上周普通公路平均行驶速度' FROM `r_ptgl_z` WHERE `GCRQ` BETWEEN '2024-05-20' AND '2024-05-26';
gold_sql: SELECT
  GCRQ AS `观测日期`,
  RTXZK AS `普通公路当日通行状况`
FROM
  r_ptgl_z
WHERE
  GCRQ = '2024-04-28';
pred_sql: SELECT `GCRQ` AS '观测日期', `PTGL_DML` AS '普通公路断面量（辆/天）', `XSSD` AS '普通公路行驶速度（千米/小时）', `LWCTL` AS '普通公路路网畅通率', `RTXZK` AS '当日通行状况' FROM r_ptgl_z WHERE `GCRQ` = '2024-04-28';
gold_sql: SELECT GCRQ AS '低于90畅通率的日期'  
FROM r_ptgl_z  
WHERE   
    LWCTL < 90   
    AND GCRQ >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)  
ORDER BY GCRQ DESC  
LIMIT 1;
pred_sql: SELECT `GCRQ` AS '观测日期', `LWCTL` AS '普通公路路网畅通率' FROM r_ptgl_z WHERE `LWCTL` < 90 ORDER BY `GCRQ` DESC LIMIT 1;
gold_sql: SELECT
  DRLLHB AS '断面量环比'
FROM
  r_ptgl_z
WHERE
  GCRQ = '2024-05-19';
pred_sql: SELECT `DRLLHB` AS '断面量环比' FROM r_ptgl_z WHERE `GCRQ` = '2024-05-19';
gold_sql: SELECT
  GCRQ AS '日期',
  MAX(
    REPLACE
      (RTXZK, '严重拥堵', '5') +
    REPLACE
      (RTXZK, '拥堵', '4') +
    REPLACE
      (RTXZK, '缓行', '3') +
    REPLACE
      (RTXZK, '畅通', '0')
  ) AS '拥堵程度'
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-05-21' AND '2024-05-27'
GROUP BY
  GCRQ
ORDER BY
  拥堵程度 DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', SUM(`PTGL_DML`) AS '总流量' FROM r_ptgl_z WHERE `GCRQ` BETWEEN '2024-05-21' AND '2024-05-27' GROUP BY `GCRQ` ORDER BY SUM(`PTGL_DML`) DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观测日期,
  LWCTL AS 路网畅通率
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-05-28'
ORDER BY
  GCRQ;
pred_sql: SELECT `GCRQ` AS '观测日期', `LWCTL` AS '路网畅通率'  FROM r_ptgl_z  WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-05-28';
gold_sql: SELECT
  (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ BETWEEN '2024-05-01' AND '2024-05-28'
  ) AS '当前普通公路行驶速度（千米/小时）',
  (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ BETWEEN '2024-04-01' AND '2024-04-28'
  ) AS '上个月同期普通行驶速度（千米/小时）',
  (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ BETWEEN '2024-05-01' AND '2024-05-28'
  ) > (
    SELECT
      AVG(XSSD)
    FROM
      r_ptgl_z
    WHERE
      GCRQ BETWEEN '2024-04-01' AND '2024-04-28'
  ) AS '当前速度是否高于上个月同期'
FROM
  r_ptgl_z
LIMIT
  1;
pred_sql: SELECT      CASE          WHEN AVG(`XSSD`) > (             SELECT AVG(`XSSD`)              FROM `r_ptgl_z`              WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-28'         ) THEN '是'         ELSE '否'     END AS `当前速度是否高于上个月同期` FROM      `r_ptgl_z`  WHERE      `GCRQ` BETWEEN '2024-05-01' AND '2024-05-28';
gold_sql: SELECT
  AVG(PTGL_DML) AS `上个季度普通公路断面量的平均值`
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT AVG(`PTGL_DML`) AS '上个季度普通公路断面量的平均值' FROM `r_ptgl_z` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  MONTH(GCRQ) AS `行驶速度最慢的月份`
FROM
  r_ptgl_z
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-05-28'
GROUP BY
  MONTH(GCRQ)
ORDER BY
  AVG(XSSD) ASC
LIMIT
  1;
pred_sql: SELECT DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`, AVG(`XSSD`) AS `平均速度` FROM r_ptgl_z WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-05-28' GROUP BY DATE_FORMAT(`GCRQ`, '%Y-%m') ORDER BY `平均速度` ASC LIMIT 1;
gold_sql: SELECT
  IF(COUNT(*) > 0, '是', '否') AS 最近连续三天路网畅通率是否都超过95
FROM
  (
    SELECT
      a.GCRQ
    FROM
      r_ptgl_z a
      JOIN r_ptgl_z b ON a.GCRQ = DATE_ADD(b.GCRQ, INTERVAL 1 DAY)
      AND b.LWCTL > 95
      JOIN r_ptgl_z c ON b.GCRQ = DATE_ADD(c.GCRQ, INTERVAL 1 DAY)
      AND c.LWCTL > 95
    WHERE
      a.LWCTL > 95
    ORDER BY
      a.GCRQ DESC
    LIMIT
      1
  ) AS subquery;
pred_sql: SELECT COUNT(*) AS `连续三天畅通率超过95的天数` FROM (     SELECT `GCRQ`, `LWCTL`     FROM r_ptgl_z     ORDER BY `GCRQ` DESC     LIMIT 3 ) AS recent_days WHERE `LWCTL` > 95;
gold_sql: SELECT
  PASSENGER AS 旅客量
FROM
  hk_od_sjxl
WHERE
  O_PROVINCE = '江苏'
  AND O_CITY = '南京'
  AND D_PROVINCE = '辽宁'
  AND D_CITY = '大连'
  AND AIT_ROUTE_TYPE = '国内'
  AND YEAR = '2023'
  AND MONTH = '01';
pred_sql: SELECT SUM(`PASSENGER`) AS '旅客量' FROM `hk_od_sjxl` WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `O_PROVINCE` = '江苏省' AND `O_CITY` = '南京市' AND `D_PROVINCE` = '辽宁省' AND `D_CITY` = '大连市';
gold_sql: SELECT
  `MONTH` AS `月份`,
  `PASSENGER` AS `旅客量（人/月）`
FROM
  `hk_od_sjxl`
WHERE
  `O_CITY` = '南京'
  AND `D_CITY` = '大连'
ORDER BY
  `PASSENGER` DESC
LIMIT
  1;
pred_sql: SELECT `MONTH` AS '月份', SUM(`PASSENGER`) AS '旅客量' FROM hk_od_sjxl WHERE `O_CITY` = '南京' AND `D_CITY` = '大连' GROUP BY `MONTH` ORDER BY SUM(`PASSENGER`) DESC LIMIT 1;
gold_sql: SELECT DISTINCT
  `AIT_ROUTE_TYPE` AS `航线类型`
FROM
  `hk_od_sjxl`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `hk_od_sjxl`
  )
  AND `O_CITY` = '南京市'
  AND `D_CITY` = '大连市';
pred_sql: SELECT DISTINCT `AIT_ROUTE_TYPE` AS '航线类型' FROM `hk_od_sjxl` WHERE `O_CITY` = '南京' AND `D_CITY` = '大连';
gold_sql: SELECT
  AVG(PASSENGER) AS `平均旅客量（人/月）`
FROM
  hk_od_sjxl
WHERE
  `YEAR` = '2023'
  AND `O_CITY` = '南京市'
  AND `D_CITY` = '大连市';
pred_sql: SELECT AVG(`PASSENGER`) AS '平均旅客量' FROM `hk_od_sjxl` WHERE (`O_PROVINCE` = '江苏' AND `O_CITY` LIKE '%南京%' AND `D_PROVINCE` = '辽宁' AND `D_CITY` LIKE '%大连%') OR (`O_PROVINCE` = '辽宁' AND `O_CITY` LIKE '%大连%' AND `D_PROVINCE` = '江苏' AND `D_CITY` LIKE '%南京%') AND `YEAR` = '2023';
gold_sql: SELECT  
    AVG(CASE  
            WHEN rn IN (  
                FLOOR((SELECT COUNT(*) FROM hk_od_sjxl WHERE `YEAR` = 2023 AND (  
                    (O_CITY = '南京市' AND D_CITY = '大连市') OR  
                    (O_CITY = '大连市' AND D_CITY = '南京市')  
                )) / 2 + 0.5),  
                CEIL((SELECT COUNT(*) FROM hk_od_sjxl WHERE `YEAR` = 2023 AND (  
                    (O_CITY = '南京市' AND D_CITY = '大连市') OR  
                    (O_CITY = '大连市' AND D_CITY = '南京市')  
                )) / 2)  
            ) THEN PASSENGER  
            ELSE NULL  
        END) AS `旅客量中位数`  
FROM (  
    SELECT  
        PASSENGER,  
        ROW_NUMBER() OVER (ORDER BY PASSENGER) AS rn  
    FROM  
        hk_od_sjxl  
    WHERE  
        `YEAR` = 2023 AND (  
            (O_CITY = '南京市' AND D_CITY = '大连市') OR  
            (O_CITY = '大连市' AND D_CITY = '南京市')  
        )  
) AS RankedPassengers;
pred_sql: SELECT AVG(`PASSENGER`) AS '去年南京市与大连市之间的旅客量中位数' FROM (SELECT `PASSENGER`, @rownum:=@rownum+1 AS `rank` FROM hk_od_sjxl, (SELECT @rownum:=0) r WHERE `YEAR` = '2023' AND ((`O_PROVINCE` = '江苏' AND `O_CITY` = '南京') OR (`D_PROVINCE` = '辽宁' AND `D_CITY` = '大连')) ORDER BY `PASSENGER`) AS sorted_passenger WHERE sorted_passenger.`rank` IN (FLOOR((@rownum+1)/2), CEIL((@rownum+1)/2));
gold_sql: SELECT q.季度, SUM(q.PASSENGER) AS 旅客量  
FROM (  
    SELECT  
        CONCAT(YEAR, '年第', CEIL(MONTH / 3), '季度') AS 季度,  
        PASSENGER  
    FROM  
        hk_od_sjxl  
    WHERE  
        O_CITY = '南京市'  
        AND D_CITY = '大连市'  
        AND YEAR = 2023  
) AS q  
GROUP BY q.季度  
ORDER BY 旅客量 DESC  
LIMIT 1;
pred_sql: SELECT `YEAR`, CASE WHEN `MONTH` IN ('01', '02', '03') THEN '第一季度' WHEN `MONTH` IN ('04', '05', '06') THEN '第二季度' WHEN `MONTH` IN ('07', '08', '09') THEN '第三季度' ELSE '第四季度' END AS `季度`, SUM(`PASSENGER`) AS `旅客量` FROM `hk_od_sjxl` WHERE `O_CITY` = '南京' AND `D_CITY` = '大连' AND `YEAR` = (SELECT MAX(`YEAR`) FROM `hk_od_sjxl`) GROUP BY `YEAR`, `季度` ORDER BY `旅客量` DESC LIMIT 1;
gold_sql: SELECT
  O_PROVINCE AS '起点省份',
  O_CITY AS '起点城市',
  D_PROVINCE AS '终点省份',
  D_CITY AS '终点城市',
  PASSENGER AS '旅客量（人/月）'
FROM
  hk_od_sjxl
WHERE
  `YEAR` = '2023'
  AND O_PROVINCE = '江苏省'
  AND PASSENGER = (
    SELECT
      MAX(PASSENGER)
    FROM
      hk_od_sjxl
    WHERE
      `YEAR` = '2023'
      AND O_PROVINCE = '江苏省'
  )
pred_sql: SELECT `O_PROVINCE` AS '起点省份', `D_PROVINCE` AS '终点省份', SUM(`PASSENGER`) AS '旅客量' FROM hk_od_sjxl WHERE `YEAR` = '2023' AND `O_PROVINCE` = '江苏省' GROUP BY `O_PROVINCE`, `D_PROVINCE` ORDER BY `旅客量` DESC LIMIT 1;
gold_sql: SELECT
  D_PROVINCE AS `省份`,
  SUM(PASSENGER) AS `旅客量`
FROM
  hk_od_sjxl
WHERE
  `YEAR` = '2023'
GROUP BY
  D_PROVINCE
ORDER BY
  SUM(PASSENGER) DESC
LIMIT
  1;
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`PASSENGER`) AS '旅客量' FROM `hk_od_sjxl` WHERE `YEAR` = '2023' GROUP BY `O_PROVINCE` ORDER BY SUM(`PASSENGER`) DESC LIMIT 1;
gold_sql: SELECT
  `MONTH` AS '月份'
FROM
  hk_od_sjxl
WHERE
  `YEAR` = '2023'
GROUP BY
  `MONTH`
HAVING
  SUM(PASSENGER) > (
    SELECT
      SUM(PASSENGER) * 0.20
    FROM
      hk_od_sjxl
    WHERE
      `YEAR` = '2023'
  )
pred_sql: SELECT `MONTH` AS '月份', SUM(`PASSENGER`) AS '旅客量' FROM hk_od_sjxl WHERE `YEAR` = '2023' GROUP BY `MONTH` HAVING SUM(`PASSENGER`) > (SELECT 0.2 * SUM(`PASSENGER`) FROM hk_od_sjxl WHERE `YEAR` = '2023') ORDER BY `MONTH`;
gold_sql: SELECT
  O_CITY AS `城市`,
  SUM(PASSENGER) AS `旅客量`
FROM
  hk_od_sjxl
WHERE
  `O_PROVINCE` = '江苏省'
  AND `D_PROVINCE` = '辽宁省'
  AND `YEAR` = '2023'
GROUP BY
  O_CITY
ORDER BY
  SUM(PASSENGER) DESC
LIMIT
  3;
pred_sql: SELECT `O_CITY` AS '起点城市', SUM(`PASSENGER`) AS '旅客量' FROM `hk_od_sjxl` WHERE `YEAR` = '2023' AND `O_PROVINCE` = '江苏省' AND `D_PROVINCE` = '辽宁省' GROUP BY `O_CITY` ORDER BY `旅客量` DESC LIMIT 3;
gold_sql: SELECT
  SUM(`PASSENGER`) AS '旅客总量'
FROM
  `hk_od_sjxl`
WHERE
  `O_PROVINCE` = '江苏省'
  AND `D_PROVINCE` = '辽宁省'
  AND CONCAT(`YEAR`, '-', LPAD(`MONTH`, 2, '0')) BETWEEN '2023-05' AND '2024-05';
pred_sql: SELECT SUM(`PASSENGER`) AS `旅客总量` FROM `hk_od_sjxl` WHERE `O_PROVINCE` = '江苏省' AND `D_PROVINCE` = '辽宁省' AND STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-05-29' AND '2024-05-28';
gold_sql: SELECT
  (
    SELECT
      SUM(PASSENGER)
    FROM
      hk_od_sjxl
    WHERE
      YEAR = '2024'
      AND MONTH = '05'
      AND O_PROVINCE = '江苏省'
      AND D_CITY = '大连市'
  ) AS `今年旅客量`,
  (
    SELECT
      SUM(PASSENGER)
    FROM
      hk_od_sjxl
    WHERE
      YEAR = '2023'
      AND MONTH = '05'
      AND O_PROVINCE = '江苏省'
      AND D_CITY = '大连市'
  ) AS `去年旅客量`,
  (
    SELECT
      SUM(PASSENGER)
    FROM
      hk_od_sjxl
    WHERE
      YEAR = '2024'
      AND MONTH = '05'
      AND O_PROVINCE = '江苏省'
      AND D_CITY = '大连市'
  ) - (
    SELECT
      SUM(PASSENGER)
    FROM
      hk_od_sjxl
    WHERE
      YEAR = '2023'
      AND MONTH = '05'
      AND O_PROVINCE = '江苏省'
      AND D_CITY = '大连市'
  ) AS `旅客量变化`
pred_sql: SELECT      SUM(CASE WHEN `YEAR` = '2023' AND `MONTH` = '05' THEN `PASSENGER` ELSE 0 END) AS '2023年5月旅客量',     SUM(CASE WHEN `YEAR` = '2022' AND `MONTH` = '05' THEN `PASSENGER` ELSE 0 END) AS '2022年5月旅客量',     ((SUM(CASE WHEN `YEAR` = '2023' AND `MONTH` = '05' THEN `PASSENGER` ELSE 0 END) -        SUM(CASE WHEN `YEAR` = '2022' AND `MONTH` = '05' THEN `PASSENGER` ELSE 0 END)) /       SUM(CASE WHEN `YEAR` = '2022' AND `MONTH` = '05' THEN `PASSENGER` ELSE 0 END)) * 100 AS '旅客量变化百分比' FROM      hk_od_sjxl WHERE      (`O_PROVINCE` = '江苏省' AND `D_CITY` = '大连市') OR (`O_PROVINCE` = '辽宁省' AND `D_CITY` = '大连市');
gold_sql: SELECT
  YEAR,
  QUARTER(CONCAT(YEAR, '-', MONTH, '-01')) AS `季度`,
  SUM(PASSENGER) AS `季度客流量（人/季度）`
FROM
  hk_od_sjxl
WHERE
  O_CITY = '南京市'
  AND D_CITY = '大连市'
  AND CONCAT(YEAR, '-', MONTH, '-01') BETWEEN '2023-05-29' AND '2024-05-28'
GROUP BY
  YEAR,
  QUARTER(CONCAT(YEAR, '-', MONTH, '-01'))
ORDER BY
  YEAR,
  QUARTER(CONCAT(YEAR, '-', MONTH, '-01'));
pred_sql: SELECT `MONTH`, SUM(`PASSENGER`) AS '旅客量' FROM hk_od_sjxl WHERE `YEAR` = '2023' AND `O_CITY` = '南京' AND `D_CITY` = '大连' GROUP BY `MONTH`;
gold_sql: SELECT
  CASE
    WHEN CURRENT_YEAR.PASSENGER > LAST_YEAR.PASSENGER THEN '是'
    ELSE '否'
  END AS `南京市到大连市旅客量是否超过去年同月`
FROM
  (
    SELECT
      PASSENGER
    FROM
      hk_od_sjxl
    WHERE
      `YEAR` = '2022'
      AND `MONTH` = '1'
      AND `O_CITY` = '南京市'
      AND `D_CITY` = '大连市'
  ) AS CURRENT_YEAR,
  (
    SELECT
      PASSENGER
    FROM
      hk_od_sjxl
    WHERE
      `YEAR` = '2021'
      AND `MONTH` = '1'
      AND `O_CITY` = '南京市'
      AND `D_CITY` = '大连市'
  ) AS LAST_YEAR;
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2022' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END) AS '2022年1月旅客量', SUM(CASE WHEN `YEAR` = '2021' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END) AS '2021年1月旅客量', CASE WHEN SUM(CASE WHEN `YEAR` = '2022' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END) > SUM(CASE WHEN `YEAR` = '2021' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END) THEN '是' ELSE '否' END AS '是否超过去年同月' FROM `hk_od_sjxl` WHERE (`YEAR` = '2022' OR `YEAR` = '2021') AND `MONTH` = '01' AND `O_PROVINCE` = '江苏' AND `D_CITY` = '大连市';
gold_sql: SELECT
  `MONTH` AS '月份',
  SUM(PASSENGER) AS '旅客量（人/月）'
FROM
  hk_od_sjxl
WHERE
  O_PROVINCE = '江苏省'
  AND D_CITY = '大连市'
GROUP BY
  `YEAR`,
  `MONTH`
ORDER BY
  `YEAR`,
  `MONTH`;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`PASSENGER`) AS '旅客量' FROM hk_od_sjxl WHERE `O_PROVINCE` = '江苏省' AND `D_CITY` = '大连市' GROUP BY `YEAR`, `MONTH`;
gold_sql: SELECT
  YEAR AS `年`,
  MONTH AS `月`,
  PASSENGER AS `旅客量（人/月）`
FROM
  hk_od_sjxl
WHERE
  O_CITY = '南京市'
  AND D_CITY = '大连市'
  AND CONCAT(YEAR, '-', MONTH) BETWEEN '2023-05' AND '2024-05'
ORDER BY
  PASSENGER DESC
LIMIT
  1;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`PASSENGER`) AS '旅客量增长' FROM hk_od_sjxl WHERE `O_PROVINCE` = '江苏' AND `O_CITY` = '南京' AND `D_PROVINCE` = '辽宁' AND `D_CITY` = '大连' AND ((`YEAR` = '2023' AND `MONTH` >= '05') OR (`YEAR` = '2024' AND `MONTH` <= '05')) GROUP BY `YEAR`, `MONTH` ORDER BY `旅客量增长` DESC LIMIT 1;
gold_sql: SELECT
  SUM(`PASSENGER`) AS '接收的旅客总量'
FROM
  `hk_od_sjxl`
WHERE
  `D_PROVINCE` = '辽宁省'
  AND CONCAT(`YEAR`, '-', LPAD(`MONTH`, 2, '0')) BETWEEN '2024-02' AND '2024-05';
pred_sql: SELECT SUM(`PASSENGER`) AS `辽宁省接收旅客总量` FROM `hk_od_sjxl` WHERE `D_PROVINCE` = '辽宁省'   AND STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-02-29' AND '2024-05-28';
gold_sql: SELECT
  D_CITY AS `终点城市`,
  SUM(PASSENGER) AS `旅客到达量`
FROM
  hk_od_sjxl
WHERE
  `YEAR` = '2024'
  AND `MONTH` = '05'
GROUP BY
  D_CITY
ORDER BY
  SUM(PASSENGER) ASC
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '旅客到达量' FROM hk_od_sjxl WHERE `YEAR` = '2024' AND `MONTH` = '05' GROUP BY `D_CITY` ORDER BY SUM(`PASSENGER`) ASC LIMIT 1;
gold_sql: SELECT
  SUM(`PASSENGER`) AS '国内航班旅客总量'
FROM
  `hk_od_sjxl`
WHERE
  `AIT_ROUTE_TYPE` = '国内'
  AND `YEAR` = '2023年'
  AND `MONTH` = '5月';
pred_sql: SELECT SUM(`PASSENGER`) AS '旅客总量' FROM `hk_od_sjxl` WHERE `YEAR` = '2023' AND `MONTH` = '05';
gold_sql: SELECT
  `MONTH` AS '月份',
  `PASSENGER` AS '旅客量'
FROM
  `hk_od_sjxl`
WHERE
  `YEAR` = '2022'
  AND `PASSENGER` > (
    SELECT
      AVG(`PASSENGER`)
    FROM
      `hk_od_sjxl`
    WHERE
      `YEAR` = '2022'
  )
pred_sql: SELECT `MONTH` AS '月份', SUM(`PASSENGER`) AS '旅客量' FROM hk_od_sjxl WHERE `YEAR` = '2022' GROUP BY `MONTH` HAVING SUM(`PASSENGER`) > (     SELECT AVG(monthly_passenger)     FROM (         SELECT SUM(`PASSENGER`) AS monthly_passenger         FROM hk_od_sjxl         WHERE `YEAR` = '2022'         GROUP BY `MONTH`     ) AS monthly_passengers );
gold_sql: SELECT
  prev_year.O_PROVINCE AS '省份',
  SUM(this_year.PASSENGER) - SUM(prev_year.PASSENGER) AS '旅客增长量'
FROM
  hk_od_sjxl prev_year
  JOIN hk_od_sjxl this_year ON prev_year.O_PROVINCE = this_year.O_PROVINCE
WHERE
  prev_year.`YEAR` = '2023'
  AND prev_year.`MONTH` IN ('04', '05', '06')
  AND this_year.`YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      hk_od_sjxl
  )
  AND this_year.`MONTH` IN ('04', '05', '06')
GROUP BY
  prev_year.O_PROVINCE
ORDER BY
  `旅客增长量` DESC
LIMIT
  1;
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`PASSENGER`) AS '旅客增长量' FROM hk_od_sjxl WHERE (`YEAR` = '2023' AND `MONTH` IN ('04', '05', '06')) GROUP BY `O_PROVINCE` ORDER BY SUM(`PASSENGER`) DESC LIMIT 1;
gold_sql: SELECT
  (
    SELECT
      SUM(`PASSENGER`)
    FROM
      `hk_od_sjxl`
    WHERE
      `YEAR` = '2024'
      AND `MONTH` IN ('04', '05', '06')
  ) - (
    SELECT
      SUM(`PASSENGER`)
    FROM
      `hk_od_sjxl`
    WHERE
      `YEAR` = '2024'
      AND `MONTH` IN ('01', '02', '03')
  ) AS '旅客总量增加'
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` IN ('04', '05', '06') THEN `PASSENGER` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` IN ('01', '02', '03') THEN `PASSENGER` ELSE 0 END) AS '旅客总量增加' FROM `hk_od_sjxl`;
gold_sql: SELECT
  O_CITY AS '起点城市',
  VARIANCE(PASSENGER) AS '旅客出发量方差'
FROM
  hk_od_sjxl
WHERE
  YEAR = '2023'
GROUP BY
  O_CITY
ORDER BY
  VARIANCE(PASSENGER) ASC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, VAR_POP(`PASSENGER`) AS `方差` FROM hk_od_sjxl WHERE `YEAR` = '2023' GROUP BY `O_CITY` ORDER BY `方差` ASC LIMIT 1;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  MAX(LUWCTL) AS `最高路网畅通率`
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-05-26' AND '2024-05-28'
GROUP BY
  XINGZQH
ORDER BY
  `最高路网畅通率` DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', MAX(`LUWCTL`) AS '最高路网畅通率' FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-26' AND '2024-05-28' GROUP BY `XINGZQH` ORDER BY `最高路网畅通率` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS '观测日期',
  HUANBI AS '环比'
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-04-30';
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率', `HUANBI` AS '环比'  FROM `ptgl_lwydzt`  WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30';
gold_sql: SELECT
  GCRQ AS 观测日期,
  LUWCTL AS 路网畅通率
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
ORDER BY
  LUWCTL ASC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', `LUWCTL` AS '路网畅通率' FROM ptgl_lwydzt WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY `LUWCTL` ASC LIMIT 1;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  LUWCTL AS 路网畅通率
FROM
  ptgl_lwydzt
WHERE
  GCRQ = '2024-05-26'
ORDER BY
  LUWCTL DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', MAX(`LUWCTL`) AS '最高路网畅通率' FROM `ptgl_lwydzt` WHERE `GCRQ` = '2024-05-26' GROUP BY `XINGZQH` ORDER BY `最高路网畅通率` DESC LIMIT 1;
gold_sql: SELECT
  MAX(LUWCTL) AS 最大路网畅通率,
  MIN(LUWCTL) AS 最小路网畅通率
FROM
  ptgl_lwydzt;
pred_sql: SELECT MAX(`LUWCTL`) AS '最大路网畅通率', MIN(`LUWCTL`) AS '最小路网畅通率' FROM `ptgl_lwydzt`;
gold_sql: SELECT
  AVG(LUWCTL) AS '上一个季度的路网畅通率平均值'
FROM
  ptgl_lwydzt
WHERE
  QUARTER(GCRQ) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))
  AND YEAR(GCRQ) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER));
pred_sql: SELECT AVG(`LUWCTL`) AS '上一个季度路网畅通率平均值' FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  COUNT(*) AS 路网畅通率下降次数
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-04-29' AND '2024-05-28'
  AND HUANBI < 0;
pred_sql: SELECT COUNT(*) AS `下降次数` FROM ptgl_lwydzt WHERE GCRQ BETWEEN '2024-04-29' AND '2024-05-28' AND HUANBI < 0;
gold_sql: SELECT
  GCRQ AS `路网畅通率环比增长最快的日期`
FROM
  ptgl_lwydzt
ORDER BY
  HUANBI DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率', `HUANBI` AS '环比'  FROM ptgl_lwydzt  ORDER BY `HUANBI` DESC  LIMIT 1;
gold_sql: SELECT
  GCRQ AS 观测日期,
  XINGZQH AS 行政区划,
  LUWCTL AS 路网畅通率
FROM
  ptgl_lwydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_lwydzt
  )
  AND HUANBI = 0;
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率', `HUANBI` AS '环比'  FROM ptgl_lwydzt  WHERE `HUANBI` = 0;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  LUWCTL AS 路网畅通率
FROM
  ptgl_lwydzt
ORDER BY
  LUWCTL DESC;
pred_sql: SELECT `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率'  FROM ptgl_lwydzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_lwydzt)  ORDER BY `LUWCTL` DESC;
gold_sql: SELECT
  AVG(LUWCTL) AS 路网畅通率平均值
FROM
  ptgl_lwydzt
WHERE
  XINGZQH = '3211'
  AND GCRQ BETWEEN '2024-05-26' AND '2024-05-28';
pred_sql: SELECT AVG(`LUWCTL`) AS `平均路网畅通率` FROM `PTGL_LWYDZT` WHERE `XINGZQH` = '3211' AND `GCRQ` BETWEEN '2024-05-26' AND '2024-05-28';
gold_sql: SELECT
  COUNT(GCRQ) AS 畅通率为1的天数
FROM
  ptgl_lwydzt
WHERE
  LUWCTL = 1
  AND GCRQ BETWEEN '2024-05-22' AND '2024-05-28';
pred_sql: SELECT COUNT(*) AS `畅通天数` FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-22' AND '2024-05-28' AND `LUWCTL` = 1;
gold_sql: SELECT
  GCRQ AS 观测日期
FROM
  ptgl_lwydzt
ORDER BY
  LUWCTL DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', MAX(`LUWCTL`) AS '最高路网畅通率' FROM ptgl_lwydzt GROUP BY `GCRQ` ORDER BY `最高路网畅通率` DESC LIMIT 1;
gold_sql: SELECT
  COUNT(*) as `记录数`
FROM
  ptgl_lwydzt
WHERE
  XINGZQH = '3211'
  AND LUWCTL = 1;
pred_sql: SELECT COUNT(*) AS `记录数量` FROM `ptgl_lwydzt` WHERE `XINGZQH` = '3211' AND `LUWCTL` = 1;
gold_sql: SELECT
  a.XINGZQH AS 行政区划,
  (a.LUWCTL - b.LUWCTL) AS 畅通率变化
FROM
  (
    SELECT
      XINGZQH,
      AVG(LUWCTL) AS LUWCTL
    FROM
      ptgl_lwydzt
    WHERE
      GCRQ BETWEEN '2024-05-20' AND '2024-05-26'
    GROUP BY
      XINGZQH
  ) a
  JOIN (
    SELECT
      XINGZQH,
      AVG(LUWCTL) AS LUWCTL
    FROM
      ptgl_lwydzt
    WHERE
      GCRQ BETWEEN '2024-05-13' AND '2024-05-19'
    GROUP BY
      XINGZQH
  ) b ON a.XINGZQH = b.XINGZQH;
pred_sql: SELECT      (SELECT AVG(`LUWCTL`) FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-20' AND '2024-05-26') AS `上周平均路网畅通率`,     (SELECT AVG(`LUWCTL`) FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-13' AND '2024-05-19') AS `前一周平均路网畅通率`,     ((SELECT AVG(`LUWCTL`) FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-20' AND '2024-05-26') - (SELECT AVG(`LUWCTL`) FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-13' AND '2024-05-19')) / (SELECT AVG(`LUWCTL`) FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-13' AND '2024-05-19') * 100 AS `变化百分比`;
gold_sql: SELECT
  XINGZQH AS 行政区划
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-05-22' AND '2024-05-28'
  AND HUANBI > 0
pred_sql: SELECT `XINGZQH` AS '行政区划', AVG(`LUWCTL`) AS '平均路网畅通率' FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-22' AND '2024-05-28' GROUP BY `XINGZQH` HAVING AVG(`LUWCTL`) > (     SELECT AVG(`LUWCTL`)     FROM `ptgl_lwydzt`     WHERE `GCRQ` < '2024-05-22' );
gold_sql: SELECT
  XINGZQH AS 行政区划,
  LUWCTL AS 路网畅通率
FROM
  ptgl_lwydzt
WHERE
  GCRQ = DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
ORDER BY
  LUWCTL DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', MAX(`LUWCTL`) AS '最高路网畅通率' FROM `ptgl_lwydzt` WHERE `GCRQ` = '2024-04-29' GROUP BY `XINGZQH` ORDER BY `最高路网畅通率` DESC;
gold_sql: SELECT
  GCRQ AS 日期,
  LUWCTL AS 路网畅通率
FROM
  ptgl_lwydzt
WHERE
  LUWCTL < 90
  AND GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率'  FROM `ptgl_lwydzt`  WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31'  AND `LUWCTL` < 90;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  GCRQ AS 观测日期,
  LUWCTL AS 路网畅通率
FROM
  ptgl_lwydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_lwydzt
  )
  AND HUANBI < 0
pred_sql: SELECT `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率'  FROM ptgl_lwydzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM ptgl_lwydzt)  AND `HUANBI` < 0;
gold_sql: SELECT
  a.XINGZQH AS '行政区划',
  a.LUWCTL AS '当前路网畅通率',
  b.LUWCTL AS '上周路网畅通率',
  a.LUWCTL - b.LUWCTL AS '畅通率提升'
FROM
  ptgl_lwydzt a
  JOIN ptgl_lwydzt b ON a.XINGZQH = b.XINGZQH
WHERE
  a.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_lwydzt
    WHERE
      GCRQ BETWEEN '2024-05-20' AND '2024-05-26'
  )
  AND b.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      ptgl_lwydzt
    WHERE
      GCRQ < '2024-05-20'
  )
  AND a.LUWCTL > b.LUWCTL;
pred_sql: SELECT      `XINGZQH` AS '行政区划',      MAX(CASE WHEN `GCRQ` = '2024-05-26' THEN `LUWCTL` ELSE NULL END) AS '上周六路网畅通率',     MAX(CASE WHEN `GCRQ` = '2024-05-19' THEN `LUWCTL` ELSE NULL END) AS '上周日路网畅通率',     (MAX(CASE WHEN `GCRQ` = '2024-05-26' THEN `LUWCTL` ELSE NULL END) - MAX(CASE WHEN `GCRQ` = '2024-05-19' THEN `LUWCTL` ELSE NULL END)) / MAX(CASE WHEN `GCRQ` = '2024-05-19' THEN `LUWCTL` ELSE NULL END) * 100 AS '环比提升百分比' FROM      ptgl_lwydzt WHERE      `GCRQ` IN ('2024-05-19', '2024-05-26') GROUP BY      `XINGZQH` HAVING      `环比提升百分比` > 0;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  MAX(LUWCTL) - MIN(LUWCTL) AS 畅通率波动幅度
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-05-22' AND '2024-05-28'
GROUP BY
  XINGZQH
ORDER BY
  畅通率波动幅度 DESC
LIMIT
  3;
pred_sql: SELECT `XINGZQH` AS '行政区划', MAX(`HUANBI`) - MIN(`HUANBI`) AS '路网畅通率波动' FROM `ptgl_lwydzt` WHERE `GCRQ` BETWEEN '2024-05-22' AND '2024-05-28' GROUP BY `XINGZQH` ORDER BY `路网畅通率波动` DESC LIMIT 3;
gold_sql: SELECT
  XINGZQH AS 行政区划
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-05-29'
GROUP BY
  XINGZQH
HAVING
  MIN(LUWCTL) >= 95
pred_sql: SELECT `XINGZQH` AS '行政区划' FROM ptgl_lwydzt WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-05-29' GROUP BY `XINGZQH` HAVING MIN(`LUWCTL`) >= 0.95;
gold_sql: SELECT DISTINCT
  XINGZQH AS 行政区划
FROM
  ptgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-05-22' AND '2024-05-28'
GROUP BY
  XINGZQH
HAVING
  MIN(LUWCTL) = 100
pred_sql: SELECT `XINGZQH` AS '行政区划' FROM ptgl_lwydzt WHERE `GCRQ` BETWEEN '2024-05-22' AND '2024-05-28' GROUP BY `XINGZQH` HAVING MIN(`LUWCTL`) = 100;
gold_sql: SELECT
  MAX(YEAR) AS '年份',
  MAX(GLHY) AS '公路货运量（万吨）'
FROM
  transportation_tj
WHERE
  PROVINCE = '安徽省'
  AND CITY = '安庆市'
GROUP BY
  YEAR
ORDER BY
  MAX(GLHY) DESC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', MAX(`GLHY`) AS '最大公路货运量' FROM transportation_tj WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' GROUP BY `YEAR` ORDER BY `最大公路货运量` DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS `年份`
FROM
  transportation_tj
WHERE
  PROVINCE = '安徽省'
  AND CITY = '安庆市'
  AND TLHY > 5000;
pred_sql: SELECT `YEAR` AS '年份' FROM transportation_tj WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' AND `TLHY` > 5000;
gold_sql: SELECT
  `YEAR` AS `年份`
FROM
  transportation_tj
WHERE
  PROVINCE = '安徽省'
  AND CITY = '安庆市'
  AND DISTRICT IS NULL
  AND HY < KY;
pred_sql: SELECT `YEAR` AS '年份' FROM transportation_tj WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' AND `HY` < `KY`;
gold_sql: SELECT
  `YEAR` AS 年,
  `SRQC` AS `私人汽车（万辆）`
FROM
  transportation_tj
WHERE
  `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
ORDER BY
  `SRQC` DESC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', MAX(`SRQC`) AS '私人汽车拥有量最多' FROM `transportation_tj` WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' GROUP BY `YEAR` ORDER BY `SRQC` DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS `年份`
FROM
  `transportation_tj`
WHERE
  `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
  AND `YYQC` > 50;
pred_sql: SELECT `YEAR` AS '年份' FROM transportation_tj WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' AND `YYQC` > 50000;
gold_sql: SELECT
  `YEAR` AS `年份`
FROM
  `transportation_tj`
WHERE
  `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
  AND `GLKY` / `KY` > 0.5
GROUP BY
  `YEAR`
pred_sql: SELECT `YEAR` AS '年份' FROM transportation_tj WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' AND `GLKY` / (SELECT SUM(`GLKY`) FROM transportation_tj WHERE `PROVINCE` = '安徽省') > 0.5;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MYQC` AS `民用车辆拥有量`
FROM
  `transportation_tj`
WHERE
  `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
ORDER BY
  `MYQC` ASC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', MIN(`MYQC`) AS '最少民用车辆拥有量' FROM `transportation_tj` WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' GROUP BY `YEAR` ORDER BY `最少民用车辆拥有量` ASC LIMIT 1;
gold_sql: SELECT
  SLHY AS '水路货运量（万吨）'
FROM
  transportation_tj
WHERE
  YEAR = '2010'
  AND PROVINCE = '安徽省'
  AND CITY = '安庆市'
  AND DISTRICT IS NULL;
pred_sql: SELECT `SLHY` AS '水路货运量' FROM `transportation_tj` WHERE `YEAR` = '2010' AND `PROVINCE` = '安徽省' AND `CITY` = '安庆市';
gold_sql: SELECT
  CITY As 城市,
  MAX(GLKY) AS '公路客运量（万人）'
FROM
  transportation_tj
WHERE
  YEAR = '2010'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  CITY
ORDER BY
  '公路客运量（万人）' DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '地级市', SUM(`GLHY`) AS '公路货运量' FROM `transportation_tj` WHERE `YEAR` = '2010' GROUP BY `CITY` ORDER BY SUM(`GLHY`) DESC LIMIT 1;
gold_sql: SELECT
  `PROVINCE` AS '省份',
  MAX(`SLKY`) - MIN(`SLKY`) AS '水路客运量增长'
FROM
  transportation_tj
WHERE
  `YEAR` BETWEEN '2024-02-29' AND '2024-05-28'
GROUP BY
  `PROVINCE`
ORDER BY
  `水路客运量增长` DESC
LIMIT
  1;
pred_sql: SELECT      PROVINCE AS '省份/直辖市',     MAX(SLKY) - MIN(SLKY) AS '水路客运量增长' FROM      transportation_tj WHERE      STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`), '%Y-%m') BETWEEN '2024-02-29' AND '2024-05-28' GROUP BY      PROVINCE ORDER BY      '水路客运量增长' DESC LIMIT 1;
gold_sql: SELECT
  DISTRICT AS `县级市`
FROM
  transportation_tj
WHERE
  `YEAR` = '2010'
  AND GKTT = 0
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NOT NULL;
pred_sql: SELECT `DISTRICT` AS '县级市' FROM transportation_tj WHERE `YEAR` = '2010' AND `GKTT` = 0;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  (
    GLHY / (
      SELECT
        SUM(GLHY)
      FROM
        transportation_tj
      WHERE
        YEAR = '2010'
        AND PROVINCE IS NOT NULL
        AND CITY IS NULL
        AND DISTRICT IS NULL
    )
  ) * 100 AS '公路货运量占比'
FROM
  transportation_tj
WHERE
  YEAR = '2010'
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL
ORDER BY
  '公路货运量占比' DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', SUM(`GLHY`) / (SELECT SUM(`GLHY`) FROM `transportation_tj` WHERE `YEAR` = '2010') * 100 AS '公路货运量占比' FROM `transportation_tj` WHERE `YEAR` = '2010' GROUP BY `PROVINCE` ORDER BY `公路货运量占比` DESC LIMIT 1;
gold_sql: SELECT
  `CITY` AS '地级市',
  SUM(`KY`) AS '客运量总和（万人）'
FROM
  transportation_tj
WHERE
  `YEAR` = '2010'
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  `CITY`;
pred_sql: SELECT `CITY`, SUM(`KY`) AS '客运量总和' FROM `transportation_tj` WHERE `YEAR` = '2010' GROUP BY `CITY`;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  MYQC AS '民用车辆拥有量（万辆）'
FROM
  transportation_tj
WHERE
  `YEAR` = '2010'
  AND MYQC > 100
  AND PROVINCE is not null
  AND CITY is null
  AND DISTRICT is null;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市' FROM transportation_tj WHERE `YEAR` = '2010' AND `MYQC` > 100;
gold_sql: SELECT
  `DISTRICT` AS `县级市`,
  `TLKY` AS `铁路客运量（万人）`
FROM
  `transportation_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `transportation_tj`
  )
ORDER BY
  `TLKY` ASC
LIMIT
  1;
pred_sql: SELECT `DISTRICT` AS '县级市', MIN(`TLKY`) AS '最低铁路客运量' FROM `transportation_tj` WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM `transportation_tj`) GROUP BY `DISTRICT` ORDER BY `最低铁路客运量` ASC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  MAX(YYQC) - MIN(YYQC) AS '营运汽车增加量'
FROM
  transportation_tj
WHERE
  YEAR BETWEEN '2024-05-22' AND '2024-05-28'
GROUP BY
  PROVINCE
ORDER BY
  '营运汽车增加量' DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', SUM(`YYQC`) AS '营运汽车增加量' FROM transportation_tj WHERE `YEAR` = '2024' AND `DISTRICT` IS NOT NULL GROUP BY `PROVINCE` ORDER BY `营运汽车增加量` DESC LIMIT 1;
gold_sql: SELECT
  CITY As 城市,
  MAX(SLHY) AS '水路货运量（万吨）'
FROM
  transportation_tj
WHERE
  YEAR = '2010'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  CITY,
  SLHY
ORDER BY
  SLHY DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '地级市', SUM(`SLHY`) AS '水路货运量' FROM `transportation_tj` WHERE `YEAR` = '2010' GROUP BY `CITY` ORDER BY SUM(`SLHY`) DESC LIMIT 1;
gold_sql: SELECT
  CITY AS '地级市'
FROM
  transportation_tj
WHERE
  `YEAR` = '2010'
  AND TLHY = 0
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT `CITY` AS '地级市' FROM transportation_tj WHERE `YEAR` = '2010' AND `TLHY` = 0;
gold_sql: SELECT
  `DISTRICT` AS '县级市',
  `KY` AS '客运量（万人）'
FROM
  `transportation_tj`
WHERE
  `YEAR` = '2010'
ORDER BY
  `KY` DESC
LIMIT
  1;
pred_sql: SELECT `DISTRICT` AS '县级市', SUM(`KY`) AS '客运量' FROM `transportation_tj` WHERE `YEAR` = '2010' GROUP BY `DISTRICT` ORDER BY SUM(`KY`) DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  ZKQC AS '载客汽车（万辆）',
  ZHQC AS '载货汽车（万辆）'
FROM
  transportation_tj
WHERE
  `YEAR` = '2010'
  AND ZKQC > ZHQC
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市' FROM `transportation_tj` WHERE `YEAR` = '2010' AND `ZKQC` > `ZHQC`;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  HY AS '货运量（万吨）'
FROM
  transportation_tj
WHERE
  YEAR = '2010'
  AND HY > 20000
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市' FROM transportation_tj WHERE `YEAR` = '2010' AND `HY` > 20000;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  GLHY AS '公路货运量（万吨）',
  SLHY AS '水路货运量（万吨）'
FROM
  transportation_tj
WHERE
  YEAR = 2010
  AND ABS(GLHY - SLHY) < 1
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市' FROM transportation_tj WHERE `YEAR` = '2010' AND `GLHY` = `SLHY`;
gold_sql: SELECT
  PROVINCE AS 省,
  MAX(GLHY) AS '公路货运量（万吨）'
FROM
  transportation_tj
WHERE
  YEAR = '2010'
  and PROVINCE is not null
  and CITY is null
  and DISTRICT is null
GROUP BY
  PROVINCE,
  GLHY
ORDER BY
  GLHY DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`GLHY`) AS '公路货运量' FROM `transportation_tj` WHERE `YEAR` = '2010' GROUP BY `PROVINCE` ORDER BY SUM(`GLHY`) DESC LIMIT 1;
gold_sql: SELECT
  CITY AS 城市
FROM
  transportation_tj
WHERE
  `YEAR` = '2010'
  AND GKTT = 0
  AND PROVINCE is not null
  and CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT `CITY` AS '地级市' FROM `transportation_tj` WHERE `YEAR` = '2010' AND (`GKTT` IS NULL OR `GKTT` = 0);
gold_sql: SELECT
  `PROVINCE` As 省,
  SUM(`KY`) AS '客运总量'
FROM
  transportation_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      transportation_tj
  )
  and PROVINCE is not null
  and CITY is not null
  and DISTRICT is null
GROUP BY
  `PROVINCE`;
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`TLKY`) AS '上个月全国各省份的客运总量' FROM transportation_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM transportation_tj) GROUP BY `PROVINCE`;
gold_sql: SELECT
  CITY AS `地级市`,
  MAX(SRQC) - MIN(SRQC) AS `增长量（万辆）`
FROM
  transportation_tj
WHERE
  `YEAR` BETWEEN 2021 AND 2023
  AND `CITY` IS NOT NULL
  AND 'DISTRICT' IS NULL
GROUP BY
  CITY
ORDER BY
  `增长量（万辆）` DESC
LIMIT
  1;
pred_sql: SELECT `CITY`, MAX(`SRQC`) - MIN(`SRQC`) AS `增长量` FROM `transportation_tj` WHERE `YEAR` BETWEEN '2021' AND '2024' GROUP BY `CITY` ORDER BY `增长量` DESC LIMIT 1;
gold_sql: SELECT
  DISTRICT AS `县级市`,
  ZKQC AS `载客汽车（万辆）`
FROM
  transportation_tj
WHERE
  ZKQC > 10
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      transportation_tj
  )
pred_sql: SELECT DISTINCT `DISTRICT` AS '县级市' FROM transportation_tj WHERE `ZKQC` > 100000;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  MAX(MYQC) AS '民用车辆拥有量/机动车保有量（万辆）'
FROM
  transportation_tj
WHERE
  YEAR = 2010
  AND MYQC IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL
  AND PROVINCE IN ('北京', '天津', '上海', '重庆')
GROUP BY
  PROVINCE
ORDER BY
  MAX(MYQC) DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '直辖市', MAX(`MYQC`) AS '最高机动车保有量' FROM `transportation_tj` WHERE `YEAR` = '2010' AND `PROVINCE` IN ('北京市', '天津市', '上海市', '重庆市') AND DATE(`DISTRICT`) BETWEEN '2010-04-01' AND '2010-06-30' GROUP BY `PROVINCE` ORDER BY `最高机动车保有量` DESC LIMIT 1;
gold_sql: SELECT
  MAX(t1.YEAR) AS '年份',
  SUM(t1.YYQC) AS '本月营运汽车数量（万辆）',
  SUM(t2.YYQC) AS '去年同期营运汽车数量（万辆）',
  (SUM(t1.YYQC) - SUM(t2.YYQC)) / SUM(t2.YYQC) * 100 AS '变化率（%）'
FROM
  transportation_tj t1
  JOIN transportation_tj t2 ON t1.PROVINCE = t2.PROVINCE
  AND t1.CITY = t2.CITY
  AND t1.DISTRICT = t2.DISTRICT
WHERE
  t1.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      transportation_tj
    WHERE
      YEAR BETWEEN '2024-05-01' AND '2024-05-29'
  )
  AND t2.YEAR BETWEEN '2023-05-01' AND '2023-05-29';
pred_sql: SELECT (SUM(CASE WHEN `YEAR` = '2024' THEN `YYQC` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2023' THEN `YYQC` ELSE 0 END)) AS '全国营运汽车数量变化' FROM transportation_tj WHERE (`YEAR` = '2024' OR `YEAR` = '2023') AND `PROVINCE` = '全国';
gold_sql: SELECT DISTINCT
  PROVINCE AS `有港口货物吞吐量的省份`
FROM
  transportation_tj
WHERE
  GKTT > 0
  AND `YEAR` BETWEEN '2024-05-22' AND '2024-05-28';
pred_sql: SELECT DISTINCT `PROVINCE` AS '省份/直辖市' FROM transportation_tj WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', LPAD(SUBSTRING_INDEX(`MONTH`, '月', 1), 2, '0'), '-01'), '%Y-%m-%d') BETWEEN '2024-05-22' AND '2024-05-28';
gold_sql: SELECT
  `PROVINCE` AS `省份`,
  `ZHQC` AS `载货汽车数量`
FROM
  `transportation_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `transportation_tj`
  )
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL
ORDER BY
  `ZHQC` ASC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', MIN(`ZHQC`) AS '最少载货汽车数量' FROM transportation_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM transportation_tj) GROUP BY `PROVINCE` ORDER BY `最少载货汽车数量` ASC LIMIT 1;
gold_sql: SELECT
  CITY AS `地级市`,
  TLKY AS `铁路客运量`
FROM
  transportation_tj
WHERE
  YEAR = '2024-04'
  AND DISTRICT IS NULL
ORDER BY
  TLKY ASC
LIMIT
  1;
pred_sql: SELECT `CITY`, MAX(`TLKY`) - MIN(`TLKY`) AS `铁路客运量下降值` FROM transportation_tj WHERE `YEAR` = '2024' AND `MONTH` = '03' GROUP BY `CITY` ORDER BY `铁路客运量下降值` DESC LIMIT 1;
gold_sql: SELECT
  `PROVINCE` AS 省,
  AVG(`MYQC`) AS '民用车辆拥有量平均值（万辆）'
FROM
  transportation_tj
WHERE
  `YEAR` = '2023'
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
GROUP BY
  `PROVINCE`;
pred_sql: SELECT AVG(`MYQC`) AS '平均民用车辆拥有量' FROM `transportation_tj` WHERE `YEAR` = '2023';
gold_sql: SELECT DISTINCT
  `PROVINCE` AS '省份'
FROM
  `TRANSPORTATION_TJ`
WHERE
  `YEAR` = 2023
  AND `SLKY` = 0
  AND `PROVINCE` IS NOT NULL
  AND `CITY` IS NULL
  AND `DISTRICT` IS NULL;
pred_sql: SELECT DISTINCT PROVINCE  FROM transportation_tj  WHERE `YEAR` = '2023' AND SLKY = 0  AND PROVINCE IN (     SELECT PROVINCE      FROM transportation_tj      WHERE `YEAR` = '2024' AND SLKY = 0 );
gold_sql: SELECT
  total_cars.CITY As 城市,
  total_cars.`私人汽车和载客汽车总量`
FROM
  (
    SELECT
      `CITY`,
      (`SRQC` + `ZKQC`) AS `私人汽车和载客汽车总量`
    FROM
      `transportation_tj`
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          `transportation_tj`
      )
      AND `CITY` IS NOT NULL
  ) AS total_cars
ORDER BY
  total_cars.`私人汽车和载客汽车总量` DESC
LIMIT
  1;
pred_sql: SELECT `CITY`, SUM(`SRQC` + `ZKQC`) AS `总车辆数` FROM transportation_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM transportation_tj) GROUP BY `CITY` ORDER BY `总车辆数` DESC LIMIT 1;
gold_sql: SELECT
  SUM(`BIG_TRUCK`) + SUM(`BIG_PASSENGER_CAR`) AS `大货车和大客车上下行总量`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2024'
  AND `MONTH` = '4'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
  AND `DIRECTION` IN ('S', 'X', 'A');
pred_sql: SELECT SUM(`BIG_TRUCK` + `BIG_PASSENGER_CAR`) AS '大货车和大客车上下行总数' FROM `PTGL_DMLL_TJ` WHERE `YEAR` = '2024' AND `MONTH` = '04' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%';
gold_sql: SELECT
  `MOTORCYCLE` + `BICYCLE` AS `摩托车和自行车总数`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
  AND `DIRECTION` = 'X';
pred_sql: SELECT SUM(`MOTORCYCLE` + `BICYCLE`) AS '摩托车和自行车总数' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%' AND `DIRECTION` = 'X';
gold_sql: SELECT
  `EXTRA_LARGE_TRUCK` + `SMALL_TRUCK` AS `特大货车和小货车总数`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT SUM(`SMALL_TRUCK` + `CARGO_TRUCK`) AS '特大货车和小货车的总数' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%';
gold_sql: SELECT
  `TRACTOR` + `PEDAL_CYCLE` AS `拖拉机和人力车总数`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT SUM(`TRACTOR` + `PEDAL_CYCLE`) AS '2022年7月扬州S243冻青观测站通过的拖拉机和人力车的总数' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '07' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%';
gold_sql: SELECT
  `BIG_PASSENGER_CAR` + `PASSENGER_CAR` + `SMALL_PASSENGER_CAR` AS `客车总数`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT SUM(`PASSENGER_CAR` + `BIG_PASSENGER_CAR` + `SMALL_PASSENGER_CAR`) AS '客车总数' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%';
gold_sql: SELECT
  `BIG_TRUCK` + `BIG_PASSENGER_CAR` + `CARGO_TRUCK` + `PASSENGER_CAR` + `SMALL_TRUCK` + `SMALL_PASSENGER_CAR` + `MEDIUM_TRUCK` AS `汽车总数`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT SUM(`AUTOMOBILE`) AS '汽车总数' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%';
gold_sql: SELECT
  `BIG_TRUCK` + `BIG_PASSENGER_CAR` + `CARGO_TRUCK` + `PASSENGER_CAR` + `SMALL_TRUCK` + `SMALL_PASSENGER_CAR` + `MEDIUM_TRUCK` + `MOTORCYCLE` + `BICYCLE` AS `汽车摩托车自行车总数`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT SUM(`AUTOMOBILE` + `MOTORCYCLE` + `BICYCLE`) AS '汽车、摩托车和自行车总数' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%';
gold_sql: SELECT
  `DIRECTION` AS '方向'
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT `DIRECTION` AS '方向' FROM ptgl_dmll_tj WHERE `YEAR` = '2022' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%';
gold_sql: SELECT
  `GUANCZMC` AS '观测站名称',
  `BIG_TRUCK` AS '大货车数量'
FROM
  `ptgl_dmll_tj`
WHERE
  `BIG_TRUCK` > 10000
  AND CONCAT(`YEAR`, LPAD(`MONTH`, 2, '0')) = (
    SELECT
      CONCAT(`YEAR`, LPAD(`MONTH`, 2, '0'))
    FROM
      `ptgl_dmll_tj`
    ORDER BY
      `YEAR` DESC,
      `MONTH` DESC
    LIMIT
      1
  );
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`BIG_TRUCK`) AS '大货车数量' FROM `ptgl_dmll_tj` GROUP BY `GUANCZMC` HAVING SUM(`BIG_TRUCK`) > 10000;
gold_sql: SELECT
  `NUM` AS `车辆数量（辆）`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
pred_sql: SELECT `NUM` AS '车辆数量' FROM ptgl_dmll_tj WHERE `GUANCZMC` = '扬州S243冻青观测站' AND `YEAR` = '2022' AND `MONTH` = '7';
gold_sql: SELECT
  COUNT(DISTINCT GUANCZMC) AS `不同观测站数量`
FROM
  ptgl_dmll_tj;
pred_sql: SELECT COUNT(DISTINCT `GUANCZMC`) AS '不同观测站数量' FROM `ptgl_dmll_tj`;
gold_sql: SELECT
  DIRECTION AS `方向`,
  SUM(BIG_TRUCK) AS `大货车数量`,
  SUM(BIG_PASSENGER_CAR) AS `大客车数量`,
  SUM(CARGO_TRUCK) AS `货车数量`,
  SUM(MOTOR_VEHICLE) AS `机动车数量`,
  SUM(CONTAINER) AS `集装箱数量`,
  SUM(PASSENGER_CAR) AS `客车数量`,
  SUM(MOTORCYCLE) AS `摩托车数量`,
  SUM(AUTOMOBILE) AS `汽车数量`,
  SUM(PEDAL_CYCLE) AS `人力车数量`,
  SUM(EXTRA_LARGE_TRUCK) AS `特大货车数量`,
  SUM(TRACTOR) AS `拖拉机数量`,
  SUM(SMALL_TRUCK) AS `小货车数量`,
  SUM(SMALL_PASSENGER_CAR) AS `小客车数量`,
  SUM(MEDIUM_TRUCK) AS `中货车数量`,
  SUM(BICYCLE) AS `自行车数量`,
  SUM(NUM) AS `总量`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7'
GROUP BY
  DIRECTION;
pred_sql: SELECT `DIRECTION` AS '方向', SUM(`NUM`) AS '车辆数量' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '07' GROUP BY `DIRECTION`;
gold_sql: SELECT
  `GUANCZMC` AS `观测站名称`,
  `BIG_TRUCK` AS `大货车数量`
FROM
  `ptgl_dmll_tj`
WHERE
  `BIG_TRUCK` > 20000
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `ptgl_dmll_tj`
  );
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`BIG_TRUCK`) AS '大货车数量' FROM `ptgl_dmll_tj` GROUP BY `GUANCZMC` HAVING SUM(`BIG_TRUCK`) > 20000;
gold_sql: SELECT
  `BIG_TRUCK` AS `大货车数量`,
  `SMALL_TRUCK` AS `小货车数量`
FROM
  `ptgl_dmll_tj`
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '7';
pred_sql: SELECT SUM(`BIG_TRUCK`) AS '大货车数量', SUM(`SMALL_TRUCK`) AS '小货车数量' FROM `PTGL_DMLL_TJ` WHERE `YEAR` = '2022' AND `MONTH` = '07';
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  BIG_TRUCK AS `大货车数量`
FROM
  ptgl_dmll_tj
WHERE
  YEAR = '2022'
  AND MONTH = '7'
  AND BIG_TRUCK > 10000;
pred_sql: SELECT SUM(`BIG_TRUCK`) AS '大货车数量' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2022' AND `MONTH` = '7';
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  DIRECTION AS `方向`
FROM
  ptgl_dmll_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_dmll_tj
  )
ORDER BY
  NUM DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', `DIRECTION` AS '方向' FROM ptgl_dmll_tj ORDER BY `NUM` DESC LIMIT 1;
gold_sql: SELECT DISTINCT
  GUANCZMC AS `观测站名称`
FROM
  ptgl_dmll_tj
WHERE
  CONTAINER > 0
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_dmll_tj
  )
  AND MONTH = (
    SELECT
      MAX(MONTH)
    FROM
      ptgl_dmll_tj
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          ptgl_dmll_tj
      )
  );
pred_sql: SELECT DISTINCT `GUANCZMC` AS '观测站名称' FROM ptgl_dmll_tj WHERE `CONTAINER` > 0;
gold_sql: SELECT
  `MOTOR_VEHICLE` AS `机动车数量`
FROM
  ptgl_dmll_tj
WHERE
  `YEAR` = '2024'
  AND `MONTH` = '7'
  AND `GUANCZMC` LIKE '%扬州S243冻青%'
  AND `DIRECTION` = 'S';
pred_sql: SELECT `MOTOR_VEHICLE` AS '机动车数量' FROM ptgl_dmll_tj WHERE `YEAR` = '2024' AND `MONTH` = '7' AND `GUANCZMC` LIKE '%扬州S243冻青观测站%' AND `DIRECTION` = 'S';
gold_sql: SELECT
  SUM(EXTRA_LARGE_TRUCK) AS `特大货车总量`
FROM
  ptgl_dmll_tj
WHERE
  (
    YEAR = '2024'
    AND MONTH = '05'
  )
  AND (
    '2024-05-23' <= DATE(CONCAT(YEAR, '-', MONTH, '-', '23'))
    AND DATE(CONCAT(YEAR, '-', MONTH, '-', '29')) >= '2024-05-29'
  );
pred_sql: SELECT SUM(`EXTRA_LARGE_TRUCK`) AS `特大货车总量` FROM `ptgl_dmll_tj` WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-05-23' AND '2024-05-29';
gold_sql: SELECT
  GUANCZMC AS 观测站名称,
  CONTAINER AS 集装箱数量
FROM
  ptgl_dmll_tj
WHERE
  YEAR = '2024'
  AND MONTH = '04'
ORDER BY
  CONTAINER DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`CONTAINER`) AS '集装箱数量' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2024' AND `MONTH` = '04' GROUP BY `GUANCZMC` ORDER BY `集装箱数量` DESC LIMIT 1;
gold_sql: SELECT
  CUR_WEEK.GUANCZMC AS `观测站名称`,
  CUR_WEEK.BICYCLE AS `本周自行车总量`,
  LAST_WEEK.BICYCLE AS `上周自行车总量`,
  (CUR_WEEK.BICYCLE - LAST_WEEK.BICYCLE) AS `总量变化`
FROM
  (
    SELECT
      GUANCZMC,
      SUM(BICYCLE) AS BICYCLE
    FROM
      ptgl_dmll_tj
    WHERE
      STR_TO_DATE(CONCAT(YEAR, '-', MONTH, '-01'), '%Y-%m-%d') BETWEEN '2024-05-27' AND '2024-06-02'
    GROUP BY
      GUANCZMC
  ) AS CUR_WEEK
  JOIN (
    SELECT
      GUANCZMC,
      SUM(BICYCLE) AS BICYCLE
    FROM
      ptgl_dmll_tj
    WHERE
      STR_TO_DATE(CONCAT(YEAR, '-', MONTH, '-01'), '%Y-%m-%d') BETWEEN '2024-05-20' AND '2024-05-26'
    GROUP BY
      GUANCZMC
  ) AS LAST_WEEK ON CUR_WEEK.GUANCZMC = LAST_WEEK.GUANCZMC;
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` = '05' AND (CAST(`DAY` AS UNSIGNED) BETWEEN 27 AND 31 OR CAST(`DAY` AS UNSIGNED) BETWEEN 1 AND 6) THEN `BICYCLE` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` = '05' AND (CAST(`DAY` AS UNSIGNED) BETWEEN 20 AND 26) THEN `BICYCLE` ELSE 0 END) AS `本周与上周自行车总量变化` FROM `ptgl_dmll_tj`;
gold_sql: SELECT  
  AVG(TRACTOR) AS `平均拖拉机数量`  
FROM  
  ptgl_dmll_tj  
WHERE  
  YEAR >= 2024 AND MONTH >= 1 AND  
  YEAR <= 2024 AND MONTH <= 5;
pred_sql: SELECT AVG(`TRACTOR`) AS '平均拖拉机数量' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2024' AND `MONTH` <= '05';
gold_sql: SELECT
  SUM(
    CASE
      WHEN YEAR = '2024'
      AND MONTH = '05' THEN MOTOR_VEHICLE
      ELSE 0
    END
  ) AS '本月机动车总量',
  SUM(
    CASE
      WHEN YEAR = '2023'
      AND MONTH = '05' THEN MOTOR_VEHICLE
      ELSE 0
    END
  ) AS '去年同期机动车总量',
  SUM(
    CASE
      WHEN YEAR = '2024'
      AND MONTH = '05' THEN MOTOR_VEHICLE
      ELSE 0
    END
  ) - SUM(
    CASE
      WHEN YEAR = '2023'
      AND MONTH = '05' THEN MOTOR_VEHICLE
      ELSE 0
    END
  ) AS '总量变化'
FROM
  ptgl_dmll_tj;
pred_sql: SELECT (SUM(CASE WHEN `YEAR` = '2024' THEN `MOTOR_VEHICLE` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2023' THEN `MOTOR_VEHICLE` ELSE 0 END)) AS `机动车数量变化` FROM `ptgl_dmll_tj` WHERE `MONTH` = '05';
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  PEDAL_CYCLE AS `人力车数量`
FROM
  ptgl_dmll_tj
WHERE
  DIRECTION = 'S'
  AND YEAR = '2024'
  AND MONTH = '05'
ORDER BY
  PEDAL_CYCLE DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`PEDAL_CYCLE`) AS '人力车数量' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2024' AND `MONTH` = '05' AND `DIRECTION` = 'S' GROUP BY `GUANCZMC` ORDER BY `人力车数量` DESC LIMIT 1;
gold_sql: SELECT
  curr_month.`PASSENGER_CAR` - prev_month.`PASSENGER_CAR` AS `客车总量变化`
FROM
  (
    SELECT
      `PASSENGER_CAR`
    FROM
      ptgl_dmll_tj
    WHERE
      `YEAR` = '2024'
      AND `MONTH` = '5'
      AND `GUANCZMC` = '扬州S243冻青'
      AND `DIRECTION` = 'S'
  ) AS curr_month,
  (
    SELECT
      `PASSENGER_CAR`
    FROM
      ptgl_dmll_tj
    WHERE
      `YEAR` = '2024'
      AND `MONTH` = '4'
      AND `GUANCZMC` = '扬州S243冻青'
      AND `DIRECTION` = 'S'
  ) AS prev_month;
pred_sql: SELECT (SUM(CASE WHEN `MONTH` = '2024-05' THEN `PASSENGER_CAR` ELSE 0 END) - SUM(CASE WHEN `MONTH` = '2024-04' THEN `PASSENGER_CAR` ELSE 0 END)) AS `客车总量变化` FROM `ptgl_dmll_tj` WHERE `GUANCZMC` = '扬州S243冻青观测站' AND `DIRECTION` = 'S';
gold_sql: SELECT
  AVG(`SMALL_TRUCK`) AS `平均小货车数量`
FROM
  `ptgl_dmll_tj`
WHERE
  `YEAR` = '2024'
  AND `MONTH` IN ('04', '05')
pred_sql: SELECT AVG(`SMALL_TRUCK`) AS '平均小货车数量' FROM `ptgl_dmll_tj` WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-04-01' AND '2024-05-30';
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  SUM(NUM) AS `总量`
FROM
  ptgl_dmll_tj
WHERE
  YEAR = '2022'
GROUP BY
  GUANCZMC
ORDER BY
  `总量` DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`NUM`) AS '总量' FROM `ptgl_dmll_tj` WHERE `YEAR` = '2023' GROUP BY `GUANCZMC` ORDER BY `总量` DESC LIMIT 1;
gold_sql: SELECT
  YEAR AS `年份`,
  MONTH AS `月份`,
  SUM(EXTRA_LARGE_TRUCK) AS `特大货车总量`
FROM
  ptgl_dmll_tj
WHERE
  CONCAT(YEAR, '-', MONTH) BETWEEN '2023-11' AND '2024-5'
GROUP BY
  YEAR,
  MONTH
ORDER BY
  YEAR,
  MONTH;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`EXTRA_LARGE_TRUCK`) AS '特大货车总量' FROM ptgl_dmll_tj WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-11-30' AND '2024-05-30' GROUP BY `YEAR`, `MONTH` ORDER BY `YEAR`, `MONTH`;
gold_sql: SELECT
  GUANCZMC AS 观测站名称,
  CONTAINER AS 集装箱数量
FROM
  ptgl_dmll_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_dmll_tj
  )
ORDER BY
  CONTAINER DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`CONTAINER`) AS '集装箱数量' FROM ptgl_dmll_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM ptgl_dmll_tj) AND `MONTH` = (SELECT MAX(`MONTH`) FROM ptgl_dmll_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM ptgl_dmll_tj)) GROUP BY `GUANCZMC` ORDER BY `集装箱数量` DESC LIMIT 1;
gold_sql: SELECT  
  CHUANZMC AS 船闸名称,  
  MAX(GUOZCBHYL) AS 最大过闸货运量  
FROM  
  cj_yxzt  
WHERE  
  GCRQ = '2023-11-15'  
GROUP BY  
  CHUANZMC;
pred_sql: SELECT `CHUANZMC` AS '船闸名称', MAX(`GUOZCBHYL`) AS '最大货运量' FROM cj_yxzt WHERE `GCRQ` = '2023-11-15' GROUP BY `CHUANZMC` ORDER BY `最大货运量` DESC LIMIT 1;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  PINGJDZSJ AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15';
pred_sql: SELECT AVG(`PINGJDZSJ`) AS '平均待闸时间' FROM `cj_yxzt` WHERE `GCRQ` = '2023-11-15';
gold_sql: SELECT
  GCRQ AS '观测日期'
FROM
  cj_yxzt
WHERE
  TONGXL > 5;
pred_sql: SELECT `GCRQ` AS '日期'  FROM cj_yxzt  WHERE `TONGXL` > 5;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  PINGJDZSJ AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15'
  AND PINGJDZSJ > 0.0333;
pred_sql: SELECT `CHUANZMC` AS '船闸名称', AVG(`PINGJDZSJ`) AS '平均待闸时间' FROM `cj_yxzt` WHERE `GCRQ` = '2023-11-15' GROUP BY `CHUANZMC` HAVING AVG(`PINGJDZSJ`) > 2/60;
gold_sql: SELECT
  SUM(GUOZCBHYL) AS `总货运量（吨）`
FROM
  cj_yxzt
WHERE
  YEAR(GCRQ) = 2023
  AND QUARTER(GCRQ) = 4
  AND CHUANZMC = '虞山船闸';
pred_sql: SELECT SUM(`GUOZCBHYL`) AS '总货运量' FROM `cj_yxzt` WHERE `CHUANZMC` = '虞山船闸' AND `GCRQ` BETWEEN '2023-10-01' AND '2023-12-31';
gold_sql: SELECT
  SUM(NEIHHD_CHUANZTGL) AS 内河航道船舶通过量
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15'
  AND GUANLDW = '江苏省虞山船闸管理所';
pred_sql: SELECT `NEIHHD_CHUANZTGL` AS '内河航道船舶通过量'  FROM cj_yxzt  WHERE `GCRQ` = '2023-11-15' AND `GUANLDW` = '江苏省虞山船闸管理所';
gold_sql: SELECT
  GCRQ AS 观测日期,
  CHUANZMC AS 船闸名称,
  SUM(GUOZCBHYL) AS 过闸货运量
FROM
  cj_yxzt
GROUP BY
  GCRQ,
  CHUANZMC
HAVING
  SUM(GUOZCBHYL) > 30000;
pred_sql: SELECT `GCRQ` AS '观测日期'  FROM cj_yxzt  WHERE `GUOZCBHYL` > 30000;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  PINGJDZSJ AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15'
ORDER BY
  PINGJDZSJ ASC
LIMIT
  1;
pred_sql: SELECT CHUANZMC AS 船闸名称, PINGJDZSJ AS 平均待闸时间 FROM cj_yxzt WHERE GCRQ = '2023-11-15' ORDER BY PINGJDZSJ ASC LIMIT 1;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  PINGJDZSJ AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15'
ORDER BY
  PINGJDZSJ DESC;
pred_sql: SELECT `CHUANZMC` AS '船闸名称', AVG(`PINGJDZSJ`) AS '平均待闸时间' FROM cj_yxzt WHERE `GCRQ` = '2023-11-15' GROUP BY `CHUANZMC` ORDER BY AVG(`PINGJDZSJ`) DESC;
gold_sql: SELECT
  SUM(NEIHHD_CHUANZTGL) AS `内河航道船舶通过量总和`
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15';
pred_sql: SELECT SUM(`NEIHHD_CHUANZTGL`) AS `总内河航道船舶通过量` FROM `cj_yxzt` WHERE `GCRQ` = '2023-11-15';
gold_sql: SELECT
  TONGXL AS `通行量`
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15'
  AND CHUANZDM = 'EZ02';
pred_sql: SELECT `TONGXL` AS '通行量'  FROM cj_yxzt  WHERE `GCRQ` = '2023-11-15' AND `CHUANZDM` = 'EZ02';
gold_sql: SELECT
  AVG(GUOZCBHYL) AS `船舶过闸货运量日均值（吨）`
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15';
pred_sql: SELECT AVG(`GUOZCBHYL`) AS '平均货运量' FROM `cj_yxzt` WHERE `GCRQ` = '2023-11-15';
gold_sql: SELECT
  CHUANZMC AS '船闸名称',
  AVG(TONGXL) AS '平均每日通行量（艘）'
FROM
  cj_yxzt
WHERE
  GCRQ = '2023-11-15'
  AND GUANLDW = '江苏省虞山船闸管理所'
GROUP BY
  CHUANZMC;
pred_sql: SELECT AVG(`TONGXL`) AS '平均每日通行量' FROM `cj_yxzt` WHERE `GCRQ` = '2023-11-15' AND `CHUANZMC` LIKE '%虞山船闸管理所%';
gold_sql: SELECT
  SUM(GUOZCBHYL) AS 总过闸船舶货运量
FROM
  cj_yxzt
WHERE
  GCRQ <= (
    SELECT
      MAX(GCRQ)
    FROM
      cj_yxzt
  )
  AND QUARTER(GCRQ) = QUARTER(
    DATE_SUB(
      (
        SELECT
          MAX(GCRQ)
        FROM
          cj_yxzt
      ),
      INTERVAL 1 QUARTER
    )
  );
pred_sql: SELECT SUM(`GUOZCBHYL`) AS '总过闸船舶货运量' FROM `cj_yxzt` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `cj_yxzt`);
gold_sql: SELECT      CHUANZMC AS 船闸名称,      SUM(TONGXL) / COUNT(DISTINCT GCRQ) AS 平均每日通行量（艘） FROM      cj_yxzt WHERE      YEAR(GCRQ) = YEAR(CURDATE()) GROUP BY      CHUANZMC ORDER BY      平均每日通行量（艘） DESC LIMIT 1;
pred_sql: SELECT CHUANZMC AS 船闸名称, AVG(TONGXL) AS 平均每日通行量 FROM cj_yxzt WHERE GCRQ >= DATE_FORMAT(NOW() ,'%Y-01-01') GROUP BY CHUANZMC ORDER BY 平均每日通行量 DESC LIMIT 1;
gold_sql: SELECT
  (
    AVG(TONGXL) - (
      SELECT
        AVG(TONGXL)
      FROM
        cj_yxzt
      WHERE
        MONTH(GCRQ) = MONTH(
          (
            SELECT
              MAX(GCRQ)
            FROM
              cj_yxzt
          )
        ) - 2
        AND YEAR(GCRQ) = YEAR(
          (
            SELECT
              MAX(GCRQ)
            FROM
              cj_yxzt
          )
        ) - IF(
          MONTH(
            (
              SELECT
                MAX(GCRQ)
              FROM
                cj_yxzt
            )
          ) - 2 <= 0,
          1,
          0
        )
    )
  ) AS 平均每日通行量增长
FROM
  cj_yxzt
WHERE
  MONTH(GCRQ) = MONTH(
    (
      SELECT
        MAX(GCRQ)
      FROM
        cj_yxzt
    )
  ) - 1
  AND YEAR(GCRQ) = YEAR(
    (
      SELECT
        MAX(GCRQ)
      FROM
        cj_yxzt
    )
  ) - IF(
    MONTH(
      (
        SELECT
          MAX(GCRQ)
        FROM
          cj_yxzt
      )
    ) - 1 <= 0,
    1,
    0
  );
pred_sql: SELECT      (AVG(CASE WHEN MONTH(GCRQ) = MONTH(CURDATE()) - 1 THEN TONGXL ELSE NULL END) -       AVG(CASE WHEN MONTH(GCRQ) = MONTH(CURDATE()) - 2 THEN TONGXL ELSE NULL END)) AS '上个月平均每日通行量增长艘' FROM      cj_yxzt;
gold_sql: SELECT
  DATE_FORMAT(t1.GCRQ, '%Y-%m') AS `月份`,
  AVG(t1.PINGJDZSJ) AS `上月平均待闸时间（小时）`,
  AVG(t2.PINGJDZSJ) AS `前一个月平均待闸时间（小时）`,
  (AVG(t1.PINGJDZSJ) - AVG(t2.PINGJDZSJ)) AS `变化`
FROM
  cj_yxzt t1
  JOIN cj_yxzt t2 ON DATE_FORMAT(t1.GCRQ, '%Y-%m') = DATE_FORMAT(DATE_SUB(t2.GCRQ, INTERVAL 1 MONTH), '%Y-%m')
WHERE
  t1.GCRQ BETWEEN DATE_FORMAT(
    DATE_SUB(LAST_DAY(CURDATE()), INTERVAL 1 MONTH),
    '%Y-%m-01'
  ) AND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))
  AND t2.GCRQ BETWEEN DATE_FORMAT(
    DATE_SUB(
      DATE_SUB(LAST_DAY(CURDATE()), INTERVAL 2 MONTH),
      INTERVAL 1 MONTH
    ),
    '%Y-%m-01'
  ) AND LAST_DAY(
    DATE_SUB(
      DATE_SUB(CURDATE(), INTERVAL 1 MONTH),
      INTERVAL 1 MONTH
    )
  )
GROUP BY
  `月份`;
pred_sql: SELECT      (SELECT AVG(`PINGJDZSJ`) FROM `cj_yxzt` WHERE `GCRQ` BETWEEN DATE_SUB(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)), INTERVAL DAY(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))) - 1 DAY) AND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))) AS '上个月平均每日平均待闸时间',     (SELECT AVG(`PINGJDZSJ`) FROM `cj_yxzt` WHERE `GCRQ` BETWEEN DATE_SUB(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 2 MONTH)), INTERVAL DAY(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 2 MONTH))) - 1 DAY) AND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 2 MONTH))) AS '前一个月平均每日平均待闸时间' FROM DUAL;
gold_sql: SELECT
  SUM(GUOZCBHYL) AS '总过闸船舶货运量(吨)'
FROM
  cj_yxzt
WHERE
  YEAR(GCRQ) = YEAR(CURDATE())
  AND MONTH(GCRQ) = MONTH(CURDATE());
pred_sql: SELECT SUM(`GUOZCBHYL`) AS `本月总过闸船舶货运量` FROM `cj_yxzt` WHERE `GCRQ` >= DATE_FORMAT(CURDATE(), '%Y-%m-01') AND `GCRQ` <= CURDATE();
gold_sql: SELECT
  SUM(TONGXL) AS '累计通行量（艘）'
FROM
  cj_yxzt
WHERE
  YEAR(GCRQ) = YEAR(CURDATE());
pred_sql: SELECT SUM(`TONGXL`) AS `累计通行量` FROM `cj_yxzt` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `cj_yxzt`);
gold_sql: SELECT
  DATE_FORMAT(GCRQ, '%Y-%m') AS 月份,
  SUM(GUOZCBHYL) AS 总过闸船舶货运量
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-06-06'
GROUP BY
  DATE_FORMAT(GCRQ, '%Y-%m');
pred_sql: SELECT DATE_FORMAT(`GCRQ`, '%Y-%m') AS `月份`, SUM(`GUOZCBHYL`) AS `总货运量` FROM `cj_yxzt` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-06-06' GROUP BY DATE_FORMAT(`GCRQ`, '%Y-%m') ORDER BY `月份`;
gold_sql: SELECT
  DATE_FORMAT(GCRQ, '%Y-Q%q') AS `季度`,
  AVG(TONGXL) AS `平均每日通行量`
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2023-06-06' AND '2024-06-05'
GROUP BY
  `季度`
ORDER BY
  `季度`;
pred_sql: SELECT      QUARTER(GCRQ) AS '季度',     AVG(TONGXL) AS '平均每日通行量' FROM      cj_yxzt WHERE      GCRQ BETWEEN '2023-06-06' AND '2024-06-05' GROUP BY      QUARTER(GCRQ) ORDER BY      QUARTER(GCRQ);
gold_sql: SELECT
  SUM(PINGJDZSJ * 60) AS `本月截至目前平均每日平均待闸时间总和（分钟）`
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-06';
pred_sql: SELECT SUM(`PINGJDZSJ` * 60) AS `平均每日平均待闸时间总和（分钟）` FROM `cj_yxzt` WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-06';
gold_sql: SELECT
  (
    AVG(TONGXL) - (
      SELECT
        AVG(TONGXL)
      FROM
        cj_yxzt
      WHERE
        GCRQ BETWEEN '2024-05-01' AND '2024-05-06'
    )
  ) AS 平均每日通行量增幅
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-06';
pred_sql: SELECT      (SUM(CASE WHEN GCRQ BETWEEN '2024-06-01' AND '2024-06-05' THEN `TONGXL` ELSE 0 END) / COUNT(DISTINCT CASE WHEN GCRQ BETWEEN '2024-06-01' AND '2024-06-05' THEN GCRQ ELSE NULL END)) -      (SUM(CASE WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-05' THEN `TONGXL` ELSE 0 END) / COUNT(DISTINCT CASE WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-05' THEN GCRQ ELSE NULL END)) AS `平均日增幅` FROM      cj_yxzt;
gold_sql: SELECT
  DATE_FORMAT(t1.GCRQ, '%Y-%m-%d') AS `日期`,
  AVG(t1.PINGJDZSJ) AS `本月平均待闸时间（小时）`,
  AVG(t2.PINGJDZSJ) AS `上月同期平均待闸时间（小时）`,
  (AVG(t1.PINGJDZSJ) - AVG(t2.PINGJDZSJ)) AS `变化`
FROM
  cj_yxzt t1
  JOIN cj_yxzt t2 ON DATE_FORMAT(t1.GCRQ, '%m-%d') = DATE_FORMAT(DATE_SUB(t2.GCRQ, INTERVAL 1 MONTH), '%m-%d')
WHERE
  t1.GCRQ BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND CURDATE()
  AND t2.GCRQ BETWEEN DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01') AND DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY
  `日期`;
pred_sql: SELECT      AVG(CASE WHEN MONTH(`GCRQ`) = MONTH(CURDATE()) THEN `PINGJDZSJ` ELSE NULL END) AS '本月平均待闸时间',     AVG(CASE WHEN MONTH(`GCRQ`) = MONTH(CURDATE()) - 1 THEN `PINGJDZSJ` ELSE NULL END) AS '上月同期平均待闸时间' FROM      cj_yxzt WHERE      `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL DAYOFMONTH(CURDATE())-1 DAY) AND CURDATE();
gold_sql: SELECT
  (
    SUM(
      CASE
        WHEN GCRQ BETWEEN '2024-05-01' AND '2024-05-31'  THEN GUOZCBHYL
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN GCRQ BETWEEN '2024-04-01' AND '2024-04-30'  THEN GUOZCBHYL
        ELSE 0
      END
    )
  ) AS `总过闸船舶货运量变化（吨）`
FROM
  cj_yxzt;
pred_sql: SELECT      SUM(CASE WHEN `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' THEN `GUOZCBHYL` ELSE 0 END) AS `上个月总货运量`,     SUM(CASE WHEN `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' THEN `GUOZCBHYL` ELSE 0 END) AS `前一个月总货运量`,     (SUM(CASE WHEN `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' THEN `GUOZCBHYL` ELSE 0 END) -       SUM(CASE WHEN `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' THEN `GUOZCBHYL` ELSE 0 END)) /      SUM(CASE WHEN `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' THEN `GUOZCBHYL` ELSE 0 END) * 100 AS `变化百分比` FROM      cj_yxzt;
gold_sql: SELECT SUM(TONGXL) / COUNT(DISTINCT GCRQ) AS 平均每日通行量总和（艘） FROM cj_yxzt WHERE GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT SUM(`TONGXL`) AS `平均每日通行量总和` FROM `cj_yxzt` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT CHUANZMC AS 船闸名称,         (SUM(CASE WHEN YEAR(GCRQ) = 2024 THEN TONGXL ELSE 0 END) / COUNT(DISTINCT CASE WHEN YEAR(GCRQ) = 2024 THEN GCRQ END)) -         (SUM(CASE WHEN YEAR(GCRQ) = 2023 THEN TONGXL ELSE 0 END) / COUNT(DISTINCT CASE WHEN YEAR(GCRQ) = 2023 THEN GCRQ END)) AS 平均每日通行量增长（艘） FROM cj_yxzt WHERE YEAR(GCRQ) IN (2023, 2024) GROUP BY CHUANZMC ORDER BY 平均每日通行量增长（艘） DESC LIMIT 1;
pred_sql: SELECT CHUANZMC, AVG(TONGXL) AS 平均每日通行量增长 FROM cj_yxzt WHERE GCRQ BETWEEN '2024-01-01' AND '2024-06-06' GROUP BY CHUANZMC ORDER BY 平均每日通行量增长 DESC LIMIT 1;
gold_sql: SELECT CHUANZMC AS 船闸名称, PINGJDZSJ AS 平均待闸时间（小时）  FROM cj_yxzt  WHERE GCRQ BETWEEN '2024-06-03' AND '2024-06-09'  ORDER BY PINGJDZSJ DESC  LIMIT 1;
pred_sql: SELECT `CHUANZMC` AS '船闸名称', AVG(`PINGJDZSJ`) AS '平均待闸时间' FROM cj_yxzt WHERE `GCRQ` BETWEEN '2024-06-03' AND '2024-06-09' GROUP BY `CHUANZMC` ORDER BY AVG(`PINGJDZSJ`) DESC LIMIT 1;
gold_sql: SELECT
  CHUANZMC AS '船闸名称',
  AVG(TONGXL) AS '平均每日通行量（艘）'
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31'
  AND GUANLDW = '江苏省虞山船闸管理所'
GROUP BY
  CHUANZMC;
pred_sql: SELECT AVG(`TONGXL`) AS '平均每日通行量' FROM `cj_yxzt` WHERE `GUANLDW` = '江苏省虞山船闸管理所' AND `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31';
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  SUM(TONGXL) AS 通行量
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-05-30' AND '2024-06-05'
GROUP BY
  CHUANZMC
ORDER BY
  通行量 DESC
LIMIT
  1;
pred_sql: SELECT `CHUANZMC` AS '船闸名称', SUM(`TONGXL`) AS '总通行量' FROM cj_yxzt WHERE `GCRQ` BETWEEN '2024-05-30' AND '2024-06-05' GROUP BY `CHUANZMC` ORDER BY `总通行量` DESC LIMIT 1;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  AVG(PINGJDZSJ) AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-06'
GROUP BY
  CHUANZMC;
pred_sql: SELECT      `CHUANZMC` AS '船闸名称',      AVG(`PINGJDZSJ`) AS '平均待闸时间（小时）' FROM      `cj_yxzt` WHERE      `GCRQ` BETWEEN '2024-06-01' AND '2024-06-06' GROUP BY      `CHUANZMC`;
gold_sql: SELECT
  SUM(GUOZCBHYL) AS 总过闸船舶货运量
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT SUM(`GUOZCBHYL`) AS '上个季度过闸船舶货运量总和' FROM `cj_yxzt` WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  PINGJDZSJ AS 平均待闸时间
FROM
  cj_yxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      cj_yxzt
  )
ORDER BY
  PINGJDZSJ ASC
LIMIT
  1;
pred_sql: SELECT CHUANZMC AS 船闸名称, PINGJDZSJ AS 平均待闸时间 FROM cj_yxzt ORDER BY PINGJDZSJ ASC LIMIT 1;
gold_sql: SELECT
  GCRQ AS '观测日期',
  TONGXL AS '通行量（艘/日）'
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-05-07' AND '2024-06-05'
  AND CHUANZMC = '虞山船闸'
ORDER BY
  GCRQ;
pred_sql: SELECT `GCRQ` AS '观测日期', `CHUANZMC` AS '船闸名称', `TONGXL` AS '通行量（艘/日）'  FROM cj_yxzt  WHERE `CHUANZMC` LIKE '%虞山%' AND `GCRQ` BETWEEN '2024-05-07' AND '2024-06-05';
gold_sql: SELECT
  (
    SUM(
      CASE
        WHEN `GCRQ` BETWEEN '2024-06-01' AND '2024-06-06'  THEN `NEIHHD_CHUANZTGL`
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN `GCRQ` BETWEEN '2023-06-01' AND '2023-06-06'  THEN `NEIHHD_CHUANZTGL`
        ELSE 0
      END
    )
  ) AS `船舶通过总量变化`
FROM
  `cj_yxzt`;
pred_sql: SELECT      SUM(CASE WHEN `GCRQ` BETWEEN '2024-06-01' AND '2024-06-06' THEN `TONGXL` ELSE 0 END) AS `本月船舶通过总量`,     SUM(CASE WHEN `GCRQ` BETWEEN '2023-06-01' AND '2023-06-06' THEN `TONGXL` ELSE 0 END) AS `去年同期船舶通过总量`,     (SUM(CASE WHEN `GCRQ` BETWEEN '2024-06-01' AND '2024-06-06' THEN `TONGXL` ELSE 0 END) -       SUM(CASE WHEN `GCRQ` BETWEEN '2023-06-01' AND '2023-06-06' THEN `TONGXL` ELSE 0 END)) AS `变化量` FROM      cj_yxzt;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  NEIHHD_CHUANZTGL AS `船舶通过量`
FROM
  `cj_yxzt`
WHERE
  GCRQ BETWEEN '2024-06-01' AND '2024-06-30'
ORDER BY
  NEIHHD_CHUANZTGL DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', MAX(`TONGXL`) AS '最高通行量' FROM cj_yxzt WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30' GROUP BY `GCRQ` ORDER BY `最高通行量` DESC LIMIT 1;
gold_sql: SELECT
  CHUANZMC AS `船闸名称`,
  AVG(GUOZCBHYL) AS `过闸船舶货运量平均值（吨）`
FROM
  cj_yxzt
WHERE
  GCRQ >= DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        cj_yxzt
    ),
    INTERVAL 7 DAY
  )
GROUP BY
  CHUANZMC;
pred_sql: SELECT      `CHUANZMC` AS '船闸名称',      AVG(`GUOZCBHYL`) AS '平均过闸货运量' FROM      cj_yxzt WHERE      `GCRQ` >= CURDATE() - INTERVAL 7 DAY GROUP BY      `CHUANZMC`;
gold_sql: SELECT
  CHUANZMC AS 船闸名称,
  MAX(GUOZCBHYL) AS 最大过闸船舶货运量
FROM
  cj_yxzt
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-06-06'
GROUP BY
  CHUANZMC;
pred_sql: SELECT `CHUANZMC` AS '船闸名称', SUM(`GUOZCBHYL`) AS '过闸船舶货运量' FROM cj_yxzt WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-06-06' GROUP BY `CHUANZMC` ORDER BY SUM(`GUOZCBHYL`) DESC LIMIT 1;
gold_sql: SELECT AVG(TONGXL) AS 平均每日通行量（艘） FROM cj_yxzt WHERE GCRQ BETWEEN '2024-06-01' AND '2024-06-04';
pred_sql: SELECT AVG(`TONGXL`) AS '平均每日通行量' FROM `cj_yxzt` WHERE `GCRQ` BETWEEN '2024-06-01' AND '2024-06-05';
gold_sql: SELECT
  SUM(GUOZCBHYL) AS 过闸船舶货运总量
FROM
  cj_yxzt
WHERE
  GUANLDW LIKE '江苏省%'
  AND GCRQ BETWEEN '2024-05-01' AND '2024-05-31';
pred_sql: SELECT SUM(`GUOZCBHYL`) AS `上个月过闸船舶货运总量` FROM `cj_yxzt` WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31';
gold_sql: SELECT
  AVG(VOLUME) AS `平均日流量`
FROM
  ptgl_npjcx
WHERE
  `YEAR` = '2018'
  AND `ROAD_NAME` = '纪百线（S339）'
  AND `GUANCZMC` = '苏州S339太仓东'
  AND `DIRECTION` = '上行'
  AND `CAR_TYPE` = '集装箱车辆';
pred_sql: SELECT AVG(`VOLUME`) AS '平均日流量' FROM `ptgl_npjcx` WHERE `YEAR` = '2018' AND `ROAD_ID` = 'S339' AND `ROAD_NAME` LIKE '%苏州S339太仓东%' AND `DIRECTION` = '上行';
gold_sql: SELECT
  `GUANCZMC` AS '观测站名称',
  MAX(`VOLUME`) AS '平均日流量'
FROM
  `ptgl_npjcx`
WHERE
  `YEAR` = '2018'
  AND `ROAD_ID` = 'S339'
  AND `DIRECTION` = '上行'
  AND `CAR_TYPE` = '集装箱车辆'
GROUP BY
  `GUANCZMC`
ORDER BY
  MAX(`VOLUME`) DESC
LIMIT
  1;
pred_sql: SELECT `CAR_TYPE` AS '车型' FROM ptgl_npjcx WHERE `YEAR` = '2018' AND `ROAD_ID` = 'S339' AND `GUANCZMC` = '苏州S339太仓东观测站' AND `DIRECTION` = '上行' AND `VOLUME` = 49;
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  MAX(VOLUME) AS `最高平均日流量`
FROM
  ptgl_npjcx
WHERE
  `YEAR` = '2018'
  AND ROAD_ID = 'S339'
  AND DIRECTION = '上行'
  AND CAR_TYPE = '集装箱车辆'
GROUP BY
  GUANCZMC
ORDER BY
  `最高平均日流量` DESC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', AVG(`VOLUME`) AS '平均日流量' FROM `ptgl_npjcx` WHERE `YEAR` = '2018' AND `ROAD_ID` = 'S339' AND `DIRECTION` = '上行' GROUP BY `GUANCZMC` ORDER BY AVG(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  AVG(VOLUME) AS 平均车流量
FROM
  ptgl_npjcx
WHERE
  `ROAD_ID` = 'S339'
  AND `DIRECTION` = '上行'
  AND `CAR_TYPE` = '集装箱'
  AND `YEAR` = '2024-06-03～2024-06-05';
pred_sql: SELECT AVG(`VOLUME`) AS '平均车流量' FROM `ptgl_npjcx` WHERE `ROAD_ID` = 'S339'   AND `DIRECTION` = '上行'   AND `CAR_TYPE` = '集装箱'   AND DATE(`YEAR`) BETWEEN '2024-06-03' AND '2024-06-05';
gold_sql: SELECT
  COUNT(*) AS '记录条数'
FROM
  ptgl_npjcx
WHERE
  CAR_TYPE = '集装箱'
  AND YEAR BETWEEN '2024-05-30' AND '2024-06-05'
pred_sql: SELECT COUNT(*) AS `记录条数` FROM `ptgl_npjcx` WHERE `CAR_TYPE` = '集装箱' AND DATE(`YEAR`) BETWEEN '2024-05-30' AND '2024-06-05';
gold_sql: SELECT
  SUM(VOLUME) AS '车流量总量'
FROM
  ptgl_npjcx
WHERE
  `YEAR` = '2024'
  AND `ROAD_NAME` = '纪百线'
  AND `DIRECTION` = '上行'
  AND `GUANCZMC` = '2024-06-02'
pred_sql: SELECT SUM(`VOLUME`) AS `车流量总量` FROM `ptgl_npjcx` WHERE `YEAR` = '2024' AND `ROAD_NAME` = '纪百线' AND `DIRECTION` = '上行' AND `GUANCZMC` = '上星期天';
gold_sql: SELECT
  SUM(VOLUME) AS '车流量总量'
FROM
  ptgl_npjcx
WHERE
  `YEAR` = '2024'
  AND ROAD_NAME = '纪百线'
  AND DIRECTION = '上行';
pred_sql: SELECT SUM(`VOLUME`) AS '车流量总量' FROM `ptgl_npjcx` WHERE `ROAD_NAME` = '纪百线' AND `DIRECTION` = '上行' AND DATE(`YEAR`) BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  COUNT(*) AS 记录数
FROM
  ptgl_npjcx
WHERE
  `GUANCZMC` LIKE '%太仓%'
pred_sql: SELECT COUNT(*) AS `记录数量` FROM `ptgl_npjcx` WHERE `GUANCZMC` LIKE '%太仓%';
gold_sql: SELECT
  `ROAD_NAME` AS `路线名字`
FROM
  ptgl_npjcx
WHERE
  GUANCZMC = '苏州S339太仓东'
LIMIT
  1;
pred_sql: SELECT `ROAD_NAME` AS '路线名称' FROM ptgl_npjcx WHERE `GUANCZMC` = '苏州S339太仓东';
gold_sql: SELECT
  ROAD_NAME AS '路线名称',
  SUM(VOLUME) AS '车流量'
FROM
  ptgl_npjcx
WHERE
  YEAR BETWEEN '2024-05-30' AND '2024-06-05'
GROUP BY
  ROAD_NAME
ORDER BY
  SUM(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT ROAD_NAME, SUM(VOLUME) AS total_volume FROM ptgl_npjcx WHERE `YEAR` = '2024' AND (DATE(STR_TO_DATE(CONCAT(`YEAR`, '-', LPAD(SUBSTRING_INDEX(`MONTH`, '月', 1), 2, '0'), '-', LPAD(SUBSTRING_INDEX(SUBSTRING_INDEX(`MONTH`, '月', -1), '日', 1), 2, '0')), '%Y-%m-%d')) BETWEEN '2024-05-30' AND '2024-06-05') GROUP BY ROAD_NAME ORDER BY total_volume DESC LIMIT 1;
gold_sql: SELECT
  SUM(VOLUME) as `集装箱车型上行方向车流量`
FROM
  ptgl_npjcx
WHERE
  CAR_TYPE = '集装箱'
  AND DIRECTION = '上行'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_npjcx
  );
pred_sql: SELECT SUM(`VOLUME`) AS `上行方向集装箱车型车流量` FROM `ptgl_npjcx` WHERE `DIRECTION` = '上行' AND `CAR_TYPE` = '集装箱';
gold_sql: SELECT
  GUANCZMC AS `观测站名称`,
  SUM(VOLUME) AS `车流量`
FROM
  ptgl_npjcx
WHERE
  YEAR = '2，018'
GROUP BY
  GUANCZMC
ORDER BY
  `车流量` ASC
LIMIT
  1;
pred_sql: SELECT `GUANCZMC` AS '观测站名称', SUM(`VOLUME`) AS '总车流量' FROM `ptgl_npjcx` WHERE `YEAR` = '2018' GROUP BY `GUANCZMC` ORDER BY SUM(`VOLUME`) ASC LIMIT 1;
gold_sql: SELECT
  t1.ROAD_ID AS '路线编号',
  t1.GUANCZMC AS '观测站名称',
  t1.CAR_TYPE AS '车型',
  t1.DIRECTION AS '方向',
  t1.CAR_TYPE_DETILE AS '细分车型',
  IFNULL(t1.VOLUME, 0) AS '本月车流量（辆/日）',
  IFNULL(t2.VOLUME, 0) AS '上月车流量（辆/日）',
  (IFNULL(t1.VOLUME, 0) - IFNULL(t2.VOLUME, 0)) AS '车流量变化（辆/日）'
FROM
  ptgl_npjcx t1
  LEFT JOIN ptgl_npjcx t2 ON t1.ROAD_ID = t2.ROAD_ID
  AND t1.GUANCZMC = t2.GUANCZMC
  AND t1.CAR_TYPE = t2.CAR_TYPE
  AND t1.DIRECTION = t2.DIRECTION
  AND t1.CAR_TYPE_DETILE = t2.CAR_TYPE_DETILE
  AND t2.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_npjcx
    WHERE
      YEAR < (
        SELECT
          MAX(YEAR)
        FROM
          ptgl_npjcx
      )
  )
WHERE
  t1.YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_npjcx
  );
pred_sql: SELECT      `ROAD_NAME`,      `GUANCZMC`,      `DIRECTION`,      `CAR_TYPE`,      `CAR_TYPE_DETILE`,      SUM(CASE WHEN `YEAR` = YEAR(CURDATE()) AND MONTH(`YEAR`) = MONTH(CURDATE()) THEN `VOLUME` ELSE 0 END) AS '本月车流量',     SUM(CASE WHEN `YEAR` = YEAR(CURDATE()) AND MONTH(`YEAR`) = MONTH(CURDATE()) - 1 THEN `VOLUME` ELSE 0 END) AS '上月车流量',     (SUM(CASE WHEN `YEAR` = YEAR(CURDATE()) AND MONTH(`YEAR`) = MONTH(CURDATE()) THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `YEAR` = YEAR(CURDATE()) AND MONTH(`YEAR`) = MONTH(CURDATE()) - 1 THEN `VOLUME` ELSE 0 END)) AS '车流量变化' FROM      ptgl_npjcx GROUP BY      `ROAD_NAME`,      `GUANCZMC`,      `DIRECTION`,      `CAR_TYPE`,      `CAR_TYPE_DETILE`;
gold_sql: SELECT
  CAR_TYPE_DETILE AS `细分车型`,
  VOLUME AS `车流量（辆/日）`
FROM
  ptgl_npjcx
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_npjcx
  )
ORDER BY
  VOLUME DESC
LIMIT
  1;
pred_sql: SELECT `CAR_TYPE_DETILE` AS '细分车型', SUM(`VOLUME`) AS '总车流量' FROM ptgl_npjcx WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM ptgl_npjcx) GROUP BY `CAR_TYPE_DETILE` ORDER BY `总车流量` DESC LIMIT 1;
gold_sql: SELECT
  ROAD_NAME AS '路线名称',
  MAX(VOLUME) - MIN(VOLUME) AS '波动量'
FROM
  ptgl_npjcx
WHERE
  YEAR BETWEEN '2024-01-01' AND '2024-03-31'
GROUP BY
  ROAD_NAME
ORDER BY
  '波动量' DESC
LIMIT
  1;
pred_sql: SELECT ROAD_NAME, MAX(VOLUME) - MIN(VOLUME) AS FLUCTUATION FROM ptgl_npjcx WHERE `YEAR` = '2024' AND DATE(STR_TO_DATE(CONCAT(`YEAR`, '-', LPAD(MONTH(STR_TO_DATE(`YEAR`, '%Y')), 2, '0'), '-01'), '%Y-%m-%d')) BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY ROAD_NAME ORDER BY FLUCTUATION DESC LIMIT 1;
gold_sql: SELECT
  VOLUME AS '车流量（辆/日）'
FROM
  ptgl_npjcx
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      ptgl_npjcx
  )
  AND ROAD_NAME = '纪百线'
  AND DIRECTION = '下行'
pred_sql: SELECT SUM(`VOLUME`) AS '纪百线下行方向的车流量' FROM `ptgl_npjcx` WHERE `ROAD_NAME` = '纪百线' AND `DIRECTION` = '下行';
gold_sql: SELECT
  ROAD_ID AS '路线编号',
  ROAD_NAME AS '路线名称'
FROM
  ptgl_npjcx
GROUP BY
  ROAD_ID,
  ROAD_NAME
HAVING
  MAX(VOLUME) <= 50;
pred_sql: SELECT `ROAD_NAME` AS '路线名称' FROM ptgl_npjcx WHERE `VOLUME` <= 50;
gold_sql: SELECT
  today.路线名称 AS '路线名称',
  today.方向 AS '方向',
  today.车型 AS '车型',
  (today.车流量 - yesterday.车流量) AS '车流量变化量'
FROM
  (
    SELECT
      ROAD_NAME AS '路线名称',
      DIRECTION AS '方向',
      CAR_TYPE AS '车型',
      SUM(VOLUME) AS '车流量'
    FROM
      ptgl_npjcx
    WHERE
      YEAR = '2024'
    GROUP BY
      ROAD_NAME,
      DIRECTION,
      CAR_TYPE
  ) AS yesterday
  INNER JOIN (
    SELECT
      ROAD_NAME AS '路线名称',
      DIRECTION AS '方向',
      CAR_TYPE AS '车型',
      SUM(VOLUME) AS '车流量'
    FROM
      ptgl_npjcx
    WHERE
      YEAR = '2024'
    GROUP BY
      ROAD_NAME,
      DIRECTION,
      CAR_TYPE
  ) AS today ON yesterday.路线名称 = today.路线名称
  AND yesterday.方向 = today.方向
  AND yesterday.车型 = today.车型
ORDER BY
  '车流量变化量' DESC;
pred_sql: SELECT `ROAD_NAME` AS '路线名称', SUM(CASE WHEN `YEAR` = '2024-06-06' THEN `VOLUME` ELSE 0 END) AS '今日车流量', SUM(CASE WHEN `YEAR` = '2024-06-05' THEN `VOLUME` ELSE 0 END) AS '昨日车流量' FROM `ptgl_npjcx` GROUP BY `ROAD_NAME`;
gold_sql: SELECT
  CAR_TYPE AS '车型',
  MAX(VOLUME) AS '最大车流量'
FROM
  ptgl_npjcx
WHERE
  ROAD_NAME = '纪百线'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      ptgl_npjcx
  )
GROUP BY
  CAR_TYPE
ORDER BY
  MAX(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT `CAR_TYPE` AS '车型', SUM(`VOLUME`) AS '总车流量' FROM `ptgl_npjcx` WHERE `ROAD_NAME` LIKE '%纪百线%' GROUP BY `CAR_TYPE` ORDER BY `总车流量` DESC LIMIT 1;
gold_sql: SELECT
  `ROAD_NAME` AS '路线名称',
  `ROAD_ID` AS '路线编号',
  `VOLUME` AS '车流量'
FROM
  `ptgl_npjcx`
WHERE
  `CAR_TYPE` = '集装箱'
  AND `VOLUME` > (
    SELECT
      AVG(`VOLUME`)
    FROM
      `ptgl_npjcx`
    WHERE
      `CAR_TYPE` = '集装箱'
      AND `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          `ptgl_npjcx`
      )
  )
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `ptgl_npjcx`
  )
pred_sql: SELECT ROAD_NAME, AVG(VOLUME) AS AVERAGE_VOLUME FROM ptgl_npjcx WHERE CAR_TYPE = '集装箱' GROUP BY ROAD_NAME HAVING AVG(VOLUME) > (     SELECT AVG(VOLUME)     FROM ptgl_npjcx     WHERE CAR_TYPE = '集装箱' );
gold_sql: SELECT
  `YEAR` AS `年份`
FROM
  `jckmy_tj`
WHERE
  `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
  AND `QSHZC` = 0
GROUP BY
  `YEAR`;
pred_sql: SELECT `YEAR` AS '年份' FROM jckmy_tj WHERE `PROVINCE` = '安徽省' AND `CITY` = '安庆市' AND `QSHZC` = 0;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  GNLY AS '国内旅游人次（万人）'
FROM
  jckmy_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      jckmy_tj
  )
  AND GNLY = 0
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT DISTINCT `PROVINCE` AS '省份/直辖市' FROM jckmy_tj WHERE `GNLY` = 0 AND `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj);
gold_sql: SELECT
  `YEAR` AS `年份`,
  `PROVINCE` AS `省份/直辖市`,
  `CITY` AS `地级市`,
  `DISTRICT` AS `县级市`,
  `GNLY` AS `国内旅游人次（万人）`
FROM
  `jckmy_tj`
WHERE
  `GJLY` = 0
  AND `JKMY` = 0;
pred_sql: SELECT `YEAR`, `PROVINCE`, `CITY`, `DISTRICT`  FROM jckmy_tj  WHERE `GJLY` = 0 AND `JKMY` = 0;
gold_sql: SELECT
  YEAR as `年份`,
  SUM(QSHZC) as `全社会固定资产投资总额（亿元）`
FROM
  jckmy_tj
GROUP BY
  YEAR
ORDER BY
  SUM(QSHZC) DESC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', SUM(`QSHZC`) AS '全社会固定资产投资总额' FROM jckmy_tj GROUP BY `YEAR` ORDER BY SUM(`QSHZC`) DESC LIMIT 1;
gold_sql: SELECT
  CITY AS `地级市`,
  PROVINCE AS `省份`
FROM
  jckmy_tj
WHERE
  CKMY > JKMY
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
ORDER BY
  CITY;
pred_sql: SELECT `CITY` AS '地级市', SUM(`CKMY`) AS '出口贸易总额', SUM(`JKMY`) AS '进口贸易总额' FROM jckmy_tj GROUP BY `CITY` HAVING SUM(`CKMY`) > SUM(`JKMY`);
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  GNLY AS '国内旅游人次（万人）'
FROM
  jckmy_tj
WHERE
  `YEAR` = '2010'
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL
ORDER BY
  GNLY DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', SUM(`GNLY`) AS '国内旅游人次' FROM jckmy_tj WHERE `YEAR` = '2010' AND (`PROVINCE` LIKE '%北京%' OR `PROVINCE` LIKE '%天津%' OR `PROVINCE` LIKE '%上海%' OR `PROVINCE` LIKE '%重庆%') GROUP BY `PROVINCE` ORDER BY SUM(`GNLY`) DESC LIMIT 1;
gold_sql: SELECT
  `PROVINCE` AS '省份/直辖市',
  SUM(`GNLY` + `GJLY`) AS '旅游人次总和'
FROM
  `jckmy_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `jckmy_tj`
  )
GROUP BY
  `PROVINCE`
ORDER BY
  `旅游人次总和` DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', SUM(`GNLY` + `GJLY`) AS '旅游人次总和' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `PROVINCE` ORDER BY `旅游人次总和` DESC LIMIT 1;
gold_sql: SELECT
  DISTRICT as `县级市`,
  QSHZC as `全社会固定资产投资（亿元）`
FROM
  jckmy_tj
WHERE
  QSHZC = (
    SELECT
      MAX(QSHZC)
    FROM
      jckmy_tj
    WHERE
      DISTRICT is not null
  );
pred_sql: SELECT `DISTRICT` AS '县级市', MAX(`QSHZC`) AS '全社会固定资产投资总额' FROM jckmy_tj GROUP BY `DISTRICT` ORDER BY `全社会固定资产投资总额` DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  CKMY AS '出口贸易总额（亿美元）'
FROM
  jckmy_tj
WHERE
  `YEAR` = '2010'
  AND CKMY != 0
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT DISTINCT `PROVINCE` AS '省份/直辖市' FROM jckmy_tj WHERE `YEAR` = '2010' AND `CKMY` > 0;
gold_sql: SELECT
  `PROVINCE` AS '省份/直辖市',
  MAX(`JKMY`) AS '最高进口贸易总额（亿美元）'
FROM
  `jckmy_tj`
GROUP BY
  `PROVINCE`
ORDER BY
  `最高进口贸易总额（亿美元）` DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', MAX(`JKMY`) AS '最高进口贸易总额' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `PROVINCE` ORDER BY `最高进口贸易总额` DESC LIMIT 1;
gold_sql: SELECT
  YEAR AS `年份`,
  AVG(QSHZC) AS `全社会固定资产投资总额平均值（亿元）`
FROM
  jckmy_tj
GROUP BY
  YEAR
ORDER BY
  AVG(QSHZC) DESC
LIMIT
  1;
pred_sql: SELECT `YEAR`, AVG(`QSHZC`) AS '平均全社会固定资产投资总额' FROM jckmy_tj GROUP BY `YEAR` ORDER BY AVG(`QSHZC`) DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  MIN(GNLY) AS '国内旅游人次（万人）'
FROM
  jckmy_tj
WHERE
  `YEAR` = '2010'
GROUP BY
  PROVINCE
ORDER BY
  `国内旅游人次（万人）` ASC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', MIN(`GNLY`) AS '最少国内旅游人次' FROM jckmy_tj WHERE `YEAR` = '2010' AND `CITY` IN (SELECT DISTINCT `PROVINCE` FROM jckmy_tj WHERE `PROVINCE` LIKE '%市') GROUP BY `PROVINCE` ORDER BY `最少国内旅游人次` ASC LIMIT 1;
gold_sql: SELECT
  SUM(`JKMY`) AS '进口贸易总额（亿美元）'
FROM
  jckmy_tj
WHERE
  `YEAR` = '2010';
pred_sql: SELECT SUM(`JKMY`) AS '2010年全国进口贸易总额（亿美元）' FROM `jckmy_tj` WHERE `YEAR` = '2010';
gold_sql: SELECT
  PROVINCE as `省份`,
  MAX(QSHZC) as `最高全社会固定资产投资（亿元）`
FROM
  jckmy_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      jckmy_tj
  )
GROUP BY
  PROVINCE
ORDER BY
  MAX(QSHZC) DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`QSHZC`) AS '全社会固定资产投资（亿元）' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `PROVINCE` ORDER BY SUM(`QSHZC`) DESC LIMIT 1;
gold_sql: SELECT
  CITY AS `城市`
FROM
  jckmy_tj
WHERE
  JKMY = 0
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      jckmy_tj
  )
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT DISTINCT `CITY` AS '城市' FROM jckmy_tj WHERE `JKMY` = 0;
gold_sql: SELECT
  SUM(`GJLY`) AS '全国国际旅游人次总和（万人）'
FROM
  `jckmy_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `jckmy_tj`
  );
pred_sql: SELECT SUM(`GJLY`) AS '全国国际旅游人次总和' FROM `jckmy_tj`;
gold_sql: SELECT
  `PROVINCE` AS `省份`,
  `GNLY` AS `国内旅游人次（万人）`
FROM
  `jckmy_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `jckmy_tj`
  )
ORDER BY
  `GNLY` ASC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', MIN(`GNLY`) AS '最少国内旅游人次（万人）' FROM jckmy_tj GROUP BY `PROVINCE` ORDER BY `最少国内旅游人次（万人）` ASC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  SUM(`CKMY`) AS `出口贸易总额（亿美元）`
FROM
  jckmy_tj
GROUP BY
  `YEAR`
ORDER BY
  `出口贸易总额（亿美元）` DESC
LIMIT
  1;
pred_sql: SELECT `YEAR` AS '年份', MAX(`CKMY`) AS '最高出口贸易总额（亿美元）' FROM jckmy_tj GROUP BY `YEAR` ORDER BY `最高出口贸易总额（亿美元）` DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS `省份`,
  JKMY AS `进口贸易总额（亿美元）`,
  CKMY AS `出口贸易总额（亿美元）`
FROM
  jckmy_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      jckmy_tj
  )
  AND JKMY > CKMY;
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`JKMY`) AS '进口贸易总额（亿美元）', SUM(`CKMY`) AS '出口贸易总额（亿美元）' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `PROVINCE` HAVING SUM(`JKMY`) > SUM(`CKMY`);
gold_sql: SELECT
  `CITY` AS '城市',
  `GNLY` AS '国内旅游人次（万人）',
  `GJLY` AS '国际旅游人次（万人）'
FROM
  `jckmy_tj`
WHERE
  `YEAR` = '2010'
  AND `GNLY` > `GJLY`;
pred_sql: SELECT DISTINCT `CITY` AS '城市' FROM jckmy_tj WHERE `YEAR` = '2010' AND `GNLY` > `GJLY`;
gold_sql: select
  count(*) as `县级市个数`
from
  jckmy_tj
where
  QSHZC > 0
  and CITY is not null
  and DISTRICT is not null;
pred_sql: SELECT COUNT(DISTINCT `DISTRICT`) AS `县级市数量` FROM jckmy_tj WHERE `QSHZC` > 0;
gold_sql: SELECT
  `CITY` AS '城市',
  SUM(`GJLY`) AS '国际旅游人次（万人）'
FROM
  `jckmy_tj`
WHERE
  `YEAR` = '2010'
GROUP BY
  `CITY`
ORDER BY
  `国际旅游人次（万人）` DESC
LIMIT
  5;
pred_sql: SELECT `CITY` AS '城市', SUM(`GJLY`) AS '国际旅游人次（万人）' FROM jckmy_tj WHERE `YEAR` = '2010' GROUP BY `CITY` ORDER BY SUM(`GJLY`) DESC LIMIT 5;
gold_sql: SELECT
  `PROVINCE` AS `省份`,
  `JKMY` AS `进口贸易总额（亿美元）`
FROM
  `jckmy_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `jckmy_tj`
  )
ORDER BY
  `进口贸易总额（亿美元）` ASC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', MIN(`JKMY`) AS '进口贸易总额（亿美元）' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `PROVINCE` ORDER BY `进口贸易总额（亿美元）` ASC LIMIT 1;
gold_sql: SELECT
  CITY AS '地级市'
FROM
  jckmy_tj
WHERE
  `YEAR` = '2010'
  AND CKMY = 0
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT DISTINCT `CITY` AS '地级市' FROM jckmy_tj WHERE `YEAR` = '2010' AND `CKMY` = 0;
gold_sql: SELECT
  COUNT(*) AS `为0出口贸易总额的县级市数量`
FROM
  jckmy_tj
WHERE
  CKMY = 0
  AND DISTRICT IS NOT NULL
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      jckmy_tj
  );
pred_sql: SELECT COUNT(DISTINCT `DISTRICT`) AS `县级市数量` FROM jckmy_tj WHERE `CKMY` = 0;
gold_sql: SELECT
  CITY AS '地级市'
FROM
  jckmy_tj
WHERE
  `YEAR` = '2010'
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
  AND JKMY > CKMY;
pred_sql: SELECT DISTINCT `CITY` AS '地级市' FROM jckmy_tj WHERE `YEAR` = '2010' AND `JKMY` > `CKMY`;
gold_sql: SELECT
  CKMY AS 出口贸易总额
FROM
  jckmy_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`) - 1
    FROM
      jckmy_tj
  )
  AND PROVINCE = '安徽省'
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT SUM(`CKMY`) AS '去年安徽省出口贸易总额' FROM `jckmy_tj` WHERE `PROVINCE` = '安徽' AND `YEAR` = YEAR(CURDATE()) - 1;
gold_sql: SELECT
  `JKMY` AS '进口贸易总额（亿美元）',
  `GNLY` AS '国内旅游人次（万人）'
FROM
  `jckmy_tj`
WHERE
  `YEAR` = '2010'
  AND `CITY` = '安庆市'
  AND `DISTRICT` IS NULL;
pred_sql: SELECT SUM(`JKMY`) AS '进口贸易总额', SUM(`GNLY`) AS '国内旅游人次' FROM `jckmy_tj` WHERE `YEAR` = '2010' AND `PROVINCE` = '安庆市';
gold_sql: SELECT
  AVG(`CKMY`) AS '出口贸易总额平均值（亿美元）'
FROM
  jckmy_tj
WHERE
  `YEAR` = '2023'
  AND PROVINCE IS NOT NULL
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT AVG(`CKMY`) AS '去年全国所有地级市出口贸易总额平均值' FROM `jckmy_tj` WHERE `YEAR` = '2023';
gold_sql: SELECT
  `PROVINCE` AS `省份`,
  SUM(`JKMY`) AS `进口贸易总额（亿美元）`
FROM
  `jckmy_tj`
WHERE
  `YEAR` BETWEEN '2022' AND '2024'
GROUP BY
  `PROVINCE`
ORDER BY
  SUM(`JKMY`) DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`JKMY`) AS '进口贸易总额' FROM jckmy_tj WHERE `YEAR` BETWEEN '2022' AND '2024' GROUP BY `PROVINCE` ORDER BY SUM(`JKMY`) DESC LIMIT 1;
gold_sql: SELECT
  `DISTRICT` AS '县级市',
  `GNLY` AS '国内旅游人次（万人）'
FROM
  `jckmy_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `jckmy_tj`
  )
ORDER BY
  `GNLY` DESC
LIMIT
  1;
pred_sql: SELECT `DISTRICT` AS '县级市', SUM(`GNLY`) AS '国内旅游人次' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `DISTRICT` ORDER BY SUM(`GNLY`) DESC LIMIT 1;
gold_sql: SELECT
  SUM(`QSHZC`) AS '固定资产投资总额（亿元）'
FROM
  jckmy_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      jckmy_tj
  )
  AND PROVINCE IS NOT NULL
  AND CITY IS NULL
  AND DISTRICT IS NULL;
pred_sql: SELECT SUM(`QSHZC`) AS '去年全国固定资产投资总额' FROM `jckmy_tj` WHERE `YEAR` = YEAR(CURDATE()) - 1;
gold_sql: SELECT
  CITY AS '地级市',
  (CKMY + JKMY) AS '进出口贸易总额（亿美元）'
FROM
  jckmy_tj
WHERE
  PROVINCE = '安徽省'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      jckmy_tj
  )
ORDER BY
  '进出口贸易总额（亿美元）' DESC;
pred_sql: SELECT `CITY` AS '地级市', SUM(`CKMY` + `JKMY`) AS '进出口贸易总额' FROM jckmy_tj WHERE `PROVINCE` = '安徽省' AND `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `CITY` ORDER BY `进出口贸易总额` DESC;
gold_sql: SELECT
  this_year.PROVINCE AS '省份',
  SUM(this_year.GJLY) - SUM(prev_year.GJLY) AS '国际旅游人次增长量'
FROM
  jckmy_tj prev_year
  JOIN jckmy_tj this_year ON prev_year.PROVINCE = this_year.PROVINCE
WHERE
  prev_year.`YEAR` = '2022'
  AND this_year.`YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      jckmy_tj
  )
GROUP BY
  this_year.PROVINCE
ORDER BY
  `国际旅游人次增长量` DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', MAX(`GJLY`) - LAG(MAX(`GJLY`), 1, 0) OVER (PARTITION BY `PROVINCE` ORDER BY `YEAR`) AS '国际旅游人次增长' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `PROVINCE` ORDER BY `国际旅游人次增长` DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份',
  SUM(CKMY) AS '出口贸易总额（亿美元）'
FROM
  jckmy_tj
WHERE
  '2024-05-31' BETWEEN STR_TO_DATE(SUBSTRING(YEAR, 1, 10), '%Y-%m-%d') - INTERVAL 7 DAY AND STR_TO_DATE(SUBSTRING(YEAR, 1, 10), '%Y-%m-%d')
GROUP BY
  PROVINCE
HAVING
  SUM(CKMY) > 10;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市' FROM jckmy_tj WHERE `YEAR` = '2024' AND `CKMY` > 10;
gold_sql: SELECT
  `DISTRICT` AS `县级市`
FROM
  `jckmy_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `jckmy_tj`
  )
  AND `GNLY` = 0;
pred_sql: SELECT DISTINCT `DISTRICT` AS '县级市' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) AND `GNLY` IS NULL;
gold_sql: SELECT
  CITY as `地级市`,
  QSHZC as `全社会固定资产投资（亿元）`
FROM
  jckmy_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      jckmy_tj
  )
  AND CITY IS NOT NULL
  AND DISTRICT IS NULL
ORDER BY
  QSHZC DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '地级市', SUM(`QSHZC`) AS '固定资产投资总额' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `CITY` ORDER BY SUM(`QSHZC`) DESC LIMIT 1;
gold_sql: SELECT
  AVG(`JKMY`) AS `进口贸易总额平均值（亿美元）`
FROM
  `jckmy_tj`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `jckmy_tj`
    WHERE
      `YEAR` <= '2024'
  )
pred_sql: SELECT AVG(`JKMY`) AS '平均进口贸易总额' FROM `jckmy_tj` WHERE `YEAR` = '2024' AND `PROVINCE` != '合计';
gold_sql: SELECT
  (
    (
      COUNT(*) * SUM(CKMY * GJLY) - SUM(CKMY) * SUM(GJLY)
    ) / SQRT(
      (
        COUNT(*) * SUM(CKMY * CKMY) - SUM(CKMY) * SUM(CKMY)
      ) * (
        COUNT(*) * SUM(GJLY * GJLY) - SUM(GJLY) * SUM(GJLY)
      )
    )
  ) AS `出口贸易总额与国际旅游人次相关性`
FROM
  jckmy_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`) - 1
    FROM
      jckmy_tj
  )
  AND DISTRICT IS NOT NULL;
pred_sql: SELECT `DISTRICT` AS '县级市', SUM(`CKMY`) AS '出口贸易总额（亿美元）', SUM(`GJLY`) AS '国际旅游人次（万人）' FROM jckmy_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM jckmy_tj) GROUP BY `DISTRICT`;
gold_sql: SELECT
  `TRUNK_ROAD_VOLUME` AS `货车数量`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `gsgl_dmll_fs`
  )
  AND `HOUR` = 0;
pred_sql: SELECT SUM(`TRUNK_ROAD_VOLUME`) AS `货车数量` FROM `gsgl_dmll_fs` WHERE `GCRQ` = CURDATE() AND `HOUR` = 0;
gold_sql: SELECT
  HOUR AS `时段`,
  SUM(COACH_ROAD_VOLUME) AS `客车总数`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN '2024-05-31' AND '2024-06-06'
GROUP BY
  HOUR
ORDER BY
  `客车总数` DESC
LIMIT
  1;
pred_sql: SELECT `HOUR` AS '时段', SUM(`COACH_ROAD_VOLUME`) AS '客车数量' FROM gsgl_dmll_fs WHERE `GCRQ` BETWEEN '2024-05-31' AND '2024-06-06' GROUP BY `HOUR` ORDER BY SUM(`COACH_ROAD_VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  (TRUNK_ROAD_VOLUME / COACH_ROAD_VOLUME) AS `货车数量是客车的几倍`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) + 1 DAY)
  AND HOUR = 0
ORDER BY
  GCRQ DESC
LIMIT
  1;
pred_sql: SELECT      TRUNK_ROAD_VOLUME / COACH_ROAD_VOLUME AS '货车与客车数量比' FROM      gsgl_dmll_fs WHERE      GCRQ = (SELECT MAX(GCRQ) FROM gsgl_dmll_fs) AND HOUR = 0;
gold_sql: SELECT
  HOUR AS '时段',
  SUM(ROAD_VOLUME) AS '总在网车流量（辆）'
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()
GROUP BY
  HOUR
HAVING
  SUM(ROAD_VOLUME) > 50000;
pred_sql: SELECT `HOUR` AS '时段', SUM(`ROAD_VOLUME`) AS '总车流量' FROM gsgl_dmll_fs WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_dmll_fs) - INTERVAL 1 MONTH GROUP BY `HOUR` HAVING SUM(`ROAD_VOLUME`) > 50000;
gold_sql: SELECT
  SUM(`COACH_ROAD_VOLUME` + `TRUNK_ROAD_VOLUME`) AS `当前日期0时客车和货车总流量`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `gsgl_dmll_fs`
  )
  AND `HOUR` = 0;
pred_sql: SELECT SUM(COACH_ROAD_VOLUME) AS '客车总流量', SUM(TRUNK_ROAD_VOLUME) AS '货车总流量' FROM gsgl_dmll_fs WHERE GCRQ = CURDATE() AND HOUR = 0;
gold_sql: SELECT
  HOUR as `时段`,
  (
    SUM(ROAD_VOLUME) / (
      SELECT
        SUM(ROAD_VOLUME)
      FROM
        gsgl_dmll_fs
      WHERE
        GCRQ > (
          SELECT
            MAX(GCRQ) - INTERVAL 7 DAY
          FROM
            gsgl_dmll_fs
        )
    )
  ) * 100 as `总车流量比例`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ > (
    SELECT
      MAX(GCRQ) - INTERVAL 7 DAY
    FROM
      gsgl_dmll_fs
  )
GROUP BY
  HOUR
ORDER BY
  `总车流量比例` DESC
LIMIT
  1;
pred_sql: SELECT HOUR, SUM(ROAD_VOLUME) AS total_volume,         SUM(ROAD_VOLUME) / (SELECT SUM(ROAD_VOLUME) FROM gsgl_dmll_fs WHERE GCRQ >= CURDATE() - INTERVAL 7 DAY) * 100 AS percentage FROM gsgl_dmll_fs WHERE GCRQ >= CURDATE() - INTERVAL 7 DAY GROUP BY HOUR ORDER BY percentage DESC LIMIT 1;
gold_sql: SELECT
  HOUR as `时段`,
  ROAD_VOLUME as `总车流量`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = '2024-04-07'
  AND ROAD_VOLUME > (
    SELECT
      AVG(ROAD_VOLUME)
    FROM
      gsgl_dmll_fs
    WHERE
      GCRQ = '2024-04-07'
  )
pred_sql: SELECT `HOUR`, SUM(`ROAD_VOLUME`) AS `总车流量` FROM gsgl_dmll_fs WHERE `GCRQ` = '2024-05-07' GROUP BY `HOUR` HAVING `总车流量` > (     SELECT AVG(`ROAD_VOLUME`)     FROM gsgl_dmll_fs     WHERE `GCRQ` = '2024-05-07' );
gold_sql: SELECT
  GCRQ AS `观测日期`,
  HOUR AS `时段`,
  ROAD_VOLUME / COACH_ROAD_VOLUME AS `总车流量与客车流量之比`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 DAY) AND CURDATE()
ORDER BY
  GCRQ,
  HOUR;
pred_sql: SELECT      HOUR AS `时段`,      SUM(ROAD_VOLUME) / NULLIF(SUM(COACH_ROAD_VOLUME), 0) AS `总车流量与客车流量之比` FROM      gsgl_dmll_fs WHERE      GCRQ >= CURDATE() - INTERVAL 3 DAY AND GCRQ < CURDATE() GROUP BY      HOUR;
gold_sql: SELECT
  GCRQ as `观测日期`,
  HOUR as `时段`,
  MAX(ROAD_VOLUME) as `最大在网车流量`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmll_fs
  )
GROUP BY
  GCRQ,
  HOUR
ORDER BY
  MAX(ROAD_VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ`, `HOUR`, MAX(`ROAD_VOLUME`) AS '最大车流量' FROM gsgl_dmll_fs WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_dmll_fs) GROUP BY `GCRQ`, `HOUR` ORDER BY `最大车流量` DESC LIMIT 1;
gold_sql: SELECT
  AVG(`TRUNK_ROAD_VOLUME`) AS `日平均货车在网车流量`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31';
pred_sql: SELECT AVG(`TRUNK_ROAD_VOLUME`) AS `货车在网车流量日平均值` FROM `gsgl_dmll_fs` WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31';
gold_sql: SELECT
  GCRQ AS `观测日期`,
  HOUR AS `时段`,
  COACH_ROAD_VOLUME AS `客车流量（辆）`
FROM
  gsgl_dmll_fs
WHERE
  HOUR = 0
  AND GCRQ BETWEEN '2024-05-26' AND '2024-06-01'
ORDER BY
  GCRQ;
pred_sql: SELECT `GCRQ` AS '观测日期', SUM(`COACH_ROAD_VOLUME`) AS '客车流量' FROM gsgl_dmll_fs WHERE `GCRQ` BETWEEN '2024-05-26' AND '2024-06-01' AND `HOUR` = 0 GROUP BY `GCRQ`;
gold_sql: SELECT
  `ROAD_VOLUME` AS `总车流量`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` = '2024-05-26'
  AND `HOUR` = 0;
pred_sql: SELECT SUM(`ROAD_VOLUME`) AS '总车流量' FROM `gsgl_dmll_fs` WHERE `GCRQ` = '2024-05-26' AND `HOUR` = 0;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `HOUR` AS `时段`,
  `COACH_ROAD_VOLUME` AS `客车在网车流量（辆）`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` = '2023-10-31'
  AND `HOUR` BETWEEN 0 AND 6
pred_sql: SELECT SUM(`COACH_ROAD_VOLUME`) AS `客车在网车流量` FROM `gsgl_dmll_fs` WHERE `GCRQ` = '2023-10-31' AND `HOUR` BETWEEN 0 AND 6;
gold_sql: SELECT
  `总在网车流量（辆）`,
  `客车在网车流量（辆）`,
  `总在网车流量与客车在网车流量的比例`
FROM
  (
    SELECT
      SUM(`ROAD_VOLUME`) AS `总在网车流量（辆）`,
      SUM(`COACH_ROAD_VOLUME`) AS `客车在网车流量（辆）`,
      SUM(`ROAD_VOLUME`) / NULLIF(SUM(`COACH_ROAD_VOLUME`), 0) AS `总在网车流量与客车在网车流量的比例`
    FROM
      gsgl_dmll_fs
    WHERE
      `GCRQ` = '2023-10-31'
  ) AS subquery;
pred_sql: SELECT      SUM(`ROAD_VOLUME`) AS '总在网车流量',      SUM(`COACH_ROAD_VOLUME`) AS '客车在网车流量',      (SUM(`COACH_ROAD_VOLUME`) / SUM(`ROAD_VOLUME`)) * 100 AS '客车与总在网车流量比例' FROM      gsgl_dmll_fs WHERE      `GCRQ` = '2023-10-31';
gold_sql: SELECT
  `HOUR` AS `时段`,
  AVG(`TRUNK_ROAD_VOLUME`) AS `货车流量平均值`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` = '2023-10-31'
GROUP BY
  `HOUR`;
pred_sql: SELECT `HOUR` AS '时段', AVG(`TRUNK_ROAD_VOLUME`) AS '货车在网车流量平均值' FROM gsgl_dmll_fs WHERE `GCRQ` = '2023-10-31' GROUP BY `HOUR`;
gold_sql: SELECT
  AVG(COACH_ROAD_VOLUME) as `平均每小时客车在网车流量`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-31';
pred_sql: SELECT AVG(`COACH_ROAD_VOLUME`) AS '平均每小时客车在网车流量' FROM `gsgl_dmll_fs` WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31';
gold_sql: SELECT
  SUM(ROAD_VOLUME) / SUM(TRUNK_ROAD_VOLUME) AS `总在网车流量与货车在网车流量比例`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN DATE_SUB(
    CURDATE(),
    INTERVAL QUARTER(CURDATE()) - 1 QUARTER
  ) AND LAST_DAY(
    DATE_SUB(
      CURDATE(),
      INTERVAL QUARTER(CURDATE()) - 1 QUARTER
    )
  )
pred_sql: SELECT      SUM(`TRUNK_ROAD_VOLUME`) AS '总货车在网车流量',      SUM(`ROAD_VOLUME`) AS '总在网车流量',      (SUM(`TRUNK_ROAD_VOLUME`) / SUM(`ROAD_VOLUME`)) AS '货车与总车流量比例' FROM      gsgl_dmll_fs WHERE      GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  `HOUR` AS `时段`,
  `ROAD_VOLUME` AS `总在网车流量（辆）`
FROM
  gsgl_dmll_fs
WHERE
  `GCRQ` = '2023-10-31'
  AND `ROAD_VOLUME` > 40000
pred_sql: SELECT `HOUR` AS '时段', `ROAD_VOLUME` AS '车流量'  FROM gsgl_dmll_fs  WHERE `GCRQ` = '2023-10-31' AND `ROAD_VOLUME` > 40000;
gold_sql: SELECT
  MAX(`ROAD_VOLUME`) - MIN(`ROAD_VOLUME`) AS `车流量差值（辆）`
FROM
  gsgl_dmll_fs
WHERE
  `GCRQ` = '2023-10-31';
pred_sql: SELECT MAX(ROAD_VOLUME) - MIN(ROAD_VOLUME) AS `车流量差值` FROM gsgl_dmll_fs WHERE GCRQ = '2023-10-31';
gold_sql: SELECT
  SUM(ROAD_VOLUME) AS '总车流量（辆）',
  SUM(COACH_ROAD_VOLUME) AS '客车在网车流量（辆）',
  SUM(TRUNK_ROAD_VOLUME) AS '货车在网车流量（辆）'
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = DATE_SUB(
    DATE_ADD(NOW(), INTERVAL 1 - DAYOFWEEK(NOW()) DAY),
    INTERVAL 7 DAY
  );
pred_sql: SELECT SUM(`ROAD_VOLUME`) AS '总车流量', SUM(`COACH_ROAD_VOLUME`) AS '客车车流量', SUM(`TRUNK_ROAD_VOLUME`) AS '货车车流量' FROM `gsgl_dmll_fs` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `gsgl_dmll_fs`);
gold_sql: SELECT
  AVG(日均车流量) as `平均每天的车流量`
FROM
  (
    SELECT
      DATE(GCRQ) as 日期,
      SUM(ROAD_VOLUME) as 日均车流量
    FROM
      gsgl_dmll_fs
    WHERE
      GCRQ >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
    GROUP BY
      DATE(GCRQ)
  ) as 日均流量
pred_sql: SELECT AVG(ROAD_VOLUME) AS '上个月平均每天车流量' FROM gsgl_dmll_fs WHERE GCRQ >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND GCRQ < CURDATE();
gold_sql: SELECT
  HOUR AS `时段`,
  COACH_ROAD_VOLUME AS `客车流量`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ > (
    SELECT
      MAX(GCRQ) - INTERVAL 3 DAY
    FROM
      gsgl_dmll_fs
  )
ORDER BY
  COACH_ROAD_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT HOUR, SUM(COACH_ROAD_VOLUME) AS 客车流量总和 FROM gsgl_dmll_fs WHERE GCRQ >= CURDATE() - INTERVAL 3 DAY GROUP BY HOUR ORDER BY 客车流量总和 DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  HOUR AS `时段`,
  TRUNK_ROAD_VOLUME AS `货车在网车流量（辆）`
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = '2024-04-07';
pred_sql: SELECT `GCRQ` AS '观测日期', SUM(`TRUNK_ROAD_VOLUME`) AS '货车在网车流量（辆）' FROM gsgl_dmll_fs WHERE `GCRQ` = '2024-05-07' GROUP BY `GCRQ`;
gold_sql: SELECT
  AVG(ROAD_VOLUME) AS '平均每小时车流量'
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
pred_sql: SELECT AVG(ROAD_VOLUME) AS '平均每小时车流量' FROM gsgl_dmll_fs WHERE GCRQ BETWEEN '2024-01-01' AND '2024-03-31';
gold_sql: SELECT
  GCRQ AS `观测日期`,
  SUM(TRUNK_ROAD_VOLUME) AS `货车流量之和`
FROM
  gsgl_dmll_fs
GROUP BY
  GCRQ
ORDER BY
  `货车流量之和` DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ`, SUM(`TRUNK_ROAD_VOLUME`) AS '货车流量总和' FROM gsgl_dmll_fs GROUP BY `GCRQ` ORDER BY `货车流量总和` DESC LIMIT 1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`
FROM
  `gsgl_dmll_fs`
GROUP BY
  `GCRQ`
HAVING
  SUM(`COACH_ROAD_VOLUME`) > SUM(`TRUNK_ROAD_VOLUME`);
pred_sql: SELECT GCRQ AS 日期 FROM gsgl_dmll_fs WHERE COACH_ROAD_VOLUME > TRUNK_ROAD_VOLUME;
gold_sql: SELECT
  HOUR AS '小时',
  AVG(ROAD_VOLUME) AS '平均车流量'
FROM
  gsgl_dmll_fs
WHERE
  YEARWEEK(GCRQ, 1) = YEARWEEK(CURDATE() - INTERVAL 1 WEEK, 1)
GROUP BY
  HOUR;
pred_sql: SELECT `HOUR` AS '时段', AVG(`ROAD_VOLUME`) AS '平均车流量' FROM gsgl_dmll_fs WHERE `GCRQ` BETWEEN '2024-05-27' AND '2024-06-02' GROUP BY `HOUR`;
gold_sql: SELECT
  `HOUR` AS `时段`,
  (SUM(`TRUNK_ROAD_VOLUME`) / SUM(`ROAD_VOLUME`)) * 100 AS `货车流量占比(%)`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` BETWEEN '2024-05-31' AND '2024-06-06'
GROUP BY
  `HOUR`
ORDER BY
  `货车流量占比(%)` DESC
LIMIT
  1;
pred_sql: SELECT `HOUR`, SUM(`TRUNK_ROAD_VOLUME`) AS `货车流量`,         (SUM(`TRUNK_ROAD_VOLUME`) / (SELECT SUM(`TRUNK_ROAD_VOLUME`) FROM gsgl_dmll_fs WHERE `GCRQ` BETWEEN '2024-05-31' AND '2024-06-06')) * 100 AS `占比` FROM gsgl_dmll_fs WHERE `GCRQ` BETWEEN '2024-05-31' AND '2024-06-06' GROUP BY `HOUR` ORDER BY `占比` DESC LIMIT 1;
gold_sql: SELECT
  GCRQ AS '日期',
  MIN(COACH_ROAD_VOLUME) AS '最少客车流量'
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN '2024-04-01' AND '2024-04-30'
GROUP BY
  GCRQ
ORDER BY
  '最少客车流量' ASC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', MIN(`COACH_ROAD_VOLUME`) AS '最少客车流量' FROM gsgl_dmll_fs WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31' GROUP BY `GCRQ` ORDER BY `最少客车流量` ASC LIMIT 1;
gold_sql: SELECT
  GCRQ AS '观测日期',
  SUM(ROAD_VOLUME) AS '总在网车流量（辆）'
FROM
  gsgl_dmll_fs
WHERE
  GCRQ BETWEEN '2024-05-04' AND '2024-06-02'
  AND DAYOFWEEK(GCRQ) IN (1, 7)
GROUP BY
  GCRQ
ORDER BY
  GCRQ;
pred_sql: SELECT      `GCRQ` AS '观测日期',      SUM(`ROAD_VOLUME`) AS '总车流量' FROM      gsgl_dmll_fs WHERE      `GCRQ` BETWEEN '2024-05-04' AND '2024-06-02'     AND DAYOFWEEK(`GCRQ`) IN (1, 7) GROUP BY      `GCRQ`;
gold_sql: SELECT
  `HOUR` AS `时段`,
  AVG(`TRUNK_ROAD_VOLUME`) AS `平均货车流量`
FROM
  `gsgl_dmll_fs`
WHERE
  `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30'
GROUP BY
  `HOUR`;
pred_sql: SELECT      `HOUR` AS `小时`,      AVG(`TRUNK_ROAD_VOLUME`) AS `平均货车流量` FROM      gsgl_dmll_fs WHERE      `GCRQ` BETWEEN '2024-06-01' AND '2024-06-30' GROUP BY      `HOUR`;
gold_sql: SELECT
  `TOTAL` AS `到发总量（人/月）`
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '6'
  AND `STATION` = '洪泽';
pred_sql: SELECT SUM(`TOTAL`) AS '到发总量' FROM `GLKY_AD_TJ` WHERE `STATION` = '洪泽客运站' AND `YEAR` = '2022' AND `MONTH` = '6';
gold_sql: SELECT
  `MONTH` AS '月份',
  `TOTAL` AS '到发总量（人/月）'
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
ORDER BY
  `TOTAL` DESC
LIMIT
  1;
pred_sql: SELECT `MONTH` AS 月份, SUM(`TOTAL`) AS 到发总量 FROM glky_ad_tj WHERE `YEAR` = '2022' GROUP BY `MONTH` ORDER BY 到发总量 DESC LIMIT 1;
gold_sql: SELECT
  D_VOLUME AS `到达量（人/月）`
FROM
  glky_ad_tj
WHERE
  YEAR = '2022'
  AND MONTH = '6'
  AND STATION = '洪泽客运站';
pred_sql: SELECT SUM(`D_VOLUME`) AS '到达量' FROM `GLKY_AD_TJ` WHERE `YEAR` = '2022' AND `MONTH` = '06' AND `STATION` = '洪泽客运站';
gold_sql: SELECT
  MONTH AS '月份',
  D_VOLUME AS '到达量(人/月)'
FROM
  glky_ad_tj
WHERE
  YEAR = '2022'
  AND STATION = '洪泽客运站'
ORDER BY
  D_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT `MONTH` AS '月份', MAX(`D_VOLUME`) AS '最高到达量' FROM glky_ad_tj WHERE `YEAR` = '2022' AND `STATION` = '洪泽客运站' GROUP BY `MONTH` ORDER BY `最高到达量` DESC LIMIT 1;
gold_sql: SELECT
  AVG(D_VOLUME) AS `平均到达量（人/月）`
FROM
  glky_ad_tj
WHERE
  YEAR = '2022'
  AND STATION = '洪泽'
pred_sql: SELECT AVG(`D_VOLUME`) AS '平均到达量' FROM `GLKY_AD_TJ` WHERE `YEAR` = '2022' AND `STATION` = '洪泽客运站';
gold_sql: SELECT
  AVG(TOTAL) AS `平均到发总量（人/月）`
FROM
  glky_ad_tj
WHERE
  YEAR = '2022'
  AND STATION = '洪泽客运站';
pred_sql: SELECT AVG(`TOTAL`) AS '平均到发总量' FROM `GLKY_AD_TJ` WHERE `YEAR` = '2022' AND `STATION` = '洪泽客运站';
gold_sql: SELECT
  t1.MONTH AS '月份',
  t1.TOTAL AS '当月到发总量',
  (t1.TOTAL - t2.TOTAL) AS '增长量'
FROM
  glky_ad_tj t1
  JOIN glky_ad_tj t2 ON t1.YEAR = '2022'
  AND t2.YEAR = '2022'
  AND t1.STATION = '洪泽'
  AND t2.STATION = '洪泽'
  AND t1.MONTH = t2.MONTH + 1
WHERE
  t1.TOTAL > t2.TOTAL;
pred_sql: SELECT      `MONTH`,      (TOTAL - LAG(TOTAL, 1) OVER (ORDER BY `MONTH`)) / LAG(TOTAL, 1) OVER (ORDER BY `MONTH`) * 100 AS `增长百分比` FROM      glky_ad_tj WHERE      `YEAR` = '2022' AND `STATION` = '洪泽客运站' HAVING      `增长百分比` > 0;
gold_sql: SELECT
  t1.MONTH AS `月份`,
  t1.O_VOLUME AS `始发量（人/月）`
FROM
  glky_ad_tj t1
  JOIN glky_ad_tj t2 ON t1.YEAR = t2.YEAR
  AND t1.STATION = t2.STATION
  AND t1.MONTH = t2.MONTH + 1
WHERE
  t1.YEAR = '2022'
  AND t1.STATION = '洪泽'
  AND t1.O_VOLUME < t2.O_VOLUME;
pred_sql: SELECT      t1.`MONTH` AS `月份`,     t1.`STATION` AS `客运站`,     t1.`O_VOLUME` AS `当前月始发量`,     t2.`O_VOLUME` AS `上个月始发量`,     (t1.`O_VOLUME` - t2.`O_VOLUME`) AS `始发量变化` FROM      glky_ad_tj t1 JOIN      glky_ad_tj t2 ON t1.`STATION` = t2.`STATION` AND (t1.`YEAR` = t2.`YEAR` AND CAST(t1.`MONTH` AS UNSIGNED) = CAST(t2.`MONTH` AS UNSIGNED) + 1) WHERE      t1.`YEAR` = '2022' AND t1.`STATION` = '洪泽客运站' AND t1.`O_VOLUME` < t2.`O_VOLUME`;
gold_sql: SELECT
  D_VOLUME AS `到达量（人次）`
FROM
  glky_ad_tj
WHERE
  YEAR = '2022'
  AND MONTH = '6'
  AND STATION = '洪泽客运站';
pred_sql: SELECT `D_VOLUME` AS '到达量'  FROM glky_ad_tj  WHERE `STATION` = '洪泽客运站' AND `YEAR` = '2022' AND `MONTH` = '6';
gold_sql: SELECT
  `STATION` AS '客运站',
  SUM(`TOTAL`) AS '到发总量'
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
GROUP BY
  `STATION`
ORDER BY
  `到发总量` DESC
LIMIT
  1;
pred_sql: SELECT `STATION` AS '客运站', SUM(`TOTAL`) AS '到发总量' FROM glky_ad_tj WHERE `YEAR` = '2022' GROUP BY `STATION` ORDER BY SUM(`TOTAL`) DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  `TOTAL` AS `到发总量（人/月）`
FROM
  `glky_ad_tj`
WHERE
  `STATION` = '洪泽客运站'
  AND `TOTAL` > 30000
ORDER BY
  `YEAR` DESC,
  `MONTH` DESC
pred_sql: SELECT `MONTH` AS '月份' FROM glky_ad_tj WHERE `STATION` = '洪泽客运站' AND `TOTAL` > 30000;
gold_sql: SELECT
  (`O_VOLUME` / `TOTAL`) * 100 AS '始发量占总量百分比'
FROM
  `glky_ad_tj`
WHERE
  `STATION` = '洪泽客运站'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `glky_ad_tj`
  )
  AND `MONTH` = (
    SELECT
      MAX(`MONTH`)
    FROM
      `glky_ad_tj`
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          `glky_ad_tj`
      )
  )
pred_sql: SELECT      (SUM(`O_VOLUME`) / SUM(`TOTAL`)) * 100 AS `始发量占比百分比` FROM      glky_ad_tj WHERE      `STATION` = '洪泽客运站';
gold_sql: SELECT
  `STATION` AS `客运站`,
  `D_VOLUME` AS `到达量（人/月）`
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '6'
  AND `D_VOLUME` > 20000;
pred_sql: SELECT `STATION` AS '客运站' FROM glky_ad_tj WHERE `YEAR` = '2022' AND `MONTH` = '6' AND `D_VOLUME` > 20000;
gold_sql: SELECT
  MONTH AS `到达量增长最快的月份`
FROM
  glky_ad_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      glky_ad_tj
  )
ORDER BY
  D_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT `MONTH`, MAX(`D_VOLUME`) AS '到达量' FROM glky_ad_tj GROUP BY `MONTH` ORDER BY `到达量` DESC LIMIT 1;
gold_sql: SELECT
  `STATION` AS '客运站',
  `D_VOLUME` AS '到达量（人/月）'
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '6'
ORDER BY
  `D_VOLUME` ASC
LIMIT
  1;
pred_sql: SELECT `STATION` AS '客运站', MIN(`D_VOLUME`) AS '最低到达量' FROM glky_ad_tj WHERE `YEAR` = '2022' AND `MONTH` = '6' GROUP BY `STATION` ORDER BY `最低到达量` ASC LIMIT 1;
gold_sql: SELECT
  STATION AS '客运站',
  SUM(O_VOLUME) AS '始发量'
FROM
  glky_ad_tj
WHERE
  CONCAT(YEAR, MONTH) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 3 MONTH), '%Y%m') AND DATE_FORMAT(CURDATE(), '%Y%m')
GROUP BY
  STATION
ORDER BY
  SUM(O_VOLUME) ASC
LIMIT
  1;
pred_sql: SELECT STATION, MIN(GROWTH_RATE) AS SLOWEST_GROWTH_RATE FROM (     SELECT STATION,             (O_VOLUME - LAG(O_VOLUME, 1) OVER (PARTITION BY STATION ORDER BY YEAR, MONTH)) / LAG(O_VOLUME, 1) OVER (PARTITION BY STATION ORDER BY YEAR, MONTH) AS GROWTH_RATE     FROM glky_ad_tj     WHERE STR_TO_DATE(CONCAT(YEAR, '-', MONTH, '-01'), '%Y-%m-%d') >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ) AS growth_rates GROUP BY STATION ORDER BY SLOWEST_GROWTH_RATE ASC LIMIT 1;
gold_sql: SELECT
  `STATION` AS `客运站`,
  `TOTAL` AS `到发总量（人/月）`
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
ORDER BY
  `TOTAL` ASC
LIMIT
  1;
pred_sql: SELECT `STATION` AS '客运站', SUM(`TOTAL`) AS '到发总量' FROM glky_ad_tj WHERE `YEAR` = '2022' GROUP BY `STATION` ORDER BY SUM(`TOTAL`) ASC LIMIT 1;
gold_sql: SELECT
  `STATION` AS `客运站`,
  `O_VOLUME` AS `始发量（人/月）`
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '6'
  AND `O_VOLUME` > 10000;
pred_sql: SELECT `STATION` AS '客运站' FROM glky_ad_tj WHERE `YEAR` = '2022' AND `MONTH` = '6' AND `O_VOLUME` > 10000;
gold_sql: SELECT
  YEAR AS '年份',
  MONTH AS '月份',
  MAX(TOTAL) - MIN(TOTAL) AS '波动量'
FROM
  glky_ad_tj
GROUP BY
  YEAR,
  MONTH
ORDER BY
  '波动量' DESC
LIMIT
  1;
pred_sql: SELECT `MONTH`, MAX(`TOTAL`) - MIN(`TOTAL`) AS `波动量` FROM glky_ad_tj GROUP BY `MONTH` ORDER BY `波动量` DESC LIMIT 1;
gold_sql: SELECT
  STATION AS '客运站',
  MAX(D_VOLUME) - MIN(D_VOLUME) AS '增长量'
FROM
  glky_ad_tj
WHERE
  CONCAT(YEAR, '-', MONTH) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 6 MONTH), '%Y-%m') AND DATE_FORMAT(CURDATE(), '%Y-%m')
GROUP BY
  STATION
ORDER BY
  '增长量' DESC
LIMIT
  1;
pred_sql: SELECT      `STATION`,      MAX(`D_VOLUME`) - MIN(`D_VOLUME`) AS `增长量` FROM      glky_ad_tj WHERE      CONCAT(`YEAR`, '-', LPAD(`MONTH`, 2, '0')) >= DATE_FORMAT(CURDATE() - INTERVAL 6 MONTH, '%Y-%m') GROUP BY      `STATION` ORDER BY      `增长量` DESC LIMIT 1;
gold_sql: SELECT
  `STATION` AS `客运站`,
  `D_VOLUME` AS `到达量（人/月）`
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2022'
ORDER BY
  `D_VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT `STATION` AS '客运站', SUM(`D_VOLUME`) AS '到达量' FROM glky_ad_tj WHERE `YEAR` = '2022' GROUP BY `STATION` ORDER BY SUM(`D_VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  TOTAL AS `乘客到发总量（人/月）`
FROM
  glky_ad_tj
WHERE
  STATION = '洪泽客运站'
  AND YEAR = '2022'
  AND MONTH = '6'
pred_sql: SELECT SUM(`TOTAL`) AS '到发总量' FROM `glky_ad_tj` WHERE `STATION` = '洪泽客运站' AND `YEAR` = '2022' AND `MONTH` = '6';
gold_sql: SELECT
  `YEAR` AS '年份',
  `MONTH` AS '月份',
  `O_VOLUME` AS '始发量（人/月）'
FROM
  `glky_ad_tj`
WHERE
  (YEAR, MONTH) IN (
    SELECT
      `YEAR`,
      `MONTH`
    FROM
      (
        SELECT
          `YEAR`,
          `MONTH`
        FROM
          `glky_ad_tj`
        ORDER BY
          `YEAR` DESC,
          `MONTH` DESC
        LIMIT
          3
      ) AS last_three_months
  )
ORDER BY
  `YEAR` DESC,
  `MONTH` DESC;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`O_VOLUME`) AS '始发量' FROM glky_ad_tj WHERE (`YEAR` = YEAR(CURDATE()) AND `MONTH` IN (MONTH(CURDATE() - INTERVAL 1 MONTH), MONTH(CURDATE() - INTERVAL 2 MONTH), MONTH(CURDATE() - INTERVAL 3 MONTH))) GROUP BY `YEAR`, `MONTH`;
gold_sql: SELECT
  AVG(`每日到发量`) AS `日均到发量（人/日）`
FROM
  (
    SELECT
      (`O_VOLUME` + `D_VOLUME`) AS `每日到发量`
    FROM
      `glky_ad_tj`
    WHERE
      `STATION` = '洪泽客运站'
      AND CONCAT(`YEAR`, '-', `MONTH`, '-01') BETWEEN '2024-05-27' AND '2024-06-02'
  ) AS subquery;
pred_sql: SELECT AVG(`TOTAL`) AS '日均到发量' FROM `GLKY_AD_TJ` WHERE `STATION` = '洪泽客运站' AND `YEAR` = '2024' AND `MONTH` = '05' AND (`DAY` BETWEEN 27 AND 31);
gold_sql: SELECT
  CONCAT(YEAR, '-', MONTH) AS `月份`,
  SUM(TOTAL) AS `到发量`
FROM
  glky_ad_tj
WHERE
  STR_TO_DATE(CONCAT(YEAR, '-', MONTH), '%Y-%m') >= DATE_SUB(
    (
      SELECT
        MAX(STR_TO_DATE(CONCAT(YEAR, '-', MONTH), '%Y-%m'))
      FROM
        glky_ad_tj
    ),
    INTERVAL 6 MONTH
  )
GROUP BY
  YEAR,
  MONTH
ORDER BY
  `到发量` DESC
LIMIT
  1;
pred_sql: SELECT `MONTH`, SUM(`TOTAL`) AS '到发总量' FROM glky_ad_tj WHERE CONCAT(`YEAR`, '-', LPAD(`MONTH`, 2, '0')) >= DATE_FORMAT(CURDATE() - INTERVAL 6 MONTH, '%Y-%m') GROUP BY `MONTH` ORDER BY SUM(`TOTAL`) DESC LIMIT 1;
gold_sql: SELECT
  `MONTH` AS '月份',
  `TOTAL` AS '到发总量（人/月）'
FROM
  `glky_ad_tj`
WHERE
  `STATION` = '洪泽'
  AND `TOTAL` > 40000
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `glky_ad_tj`
  )
pred_sql: SELECT `MONTH` AS '月份'  FROM glky_ad_tj  WHERE `STATION` = '洪泽客运站' AND `TOTAL` > 40000;
gold_sql: SELECT
  `MONTH` AS `月份`,
  `D_VOLUME` AS `到达量（人/月）`
FROM
  `glky_ad_tj`
WHERE
  `YEAR` = '2023'
  AND `STATION` = '洪泽'
ORDER BY
  `D_VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT `MONTH` AS '月份', MAX(`D_VOLUME`) AS '到达量峰值' FROM glky_ad_tj WHERE `STATION` = '洪泽客运站' AND `YEAR` = '2023' GROUP BY `MONTH` ORDER BY `到达量峰值` DESC LIMIT 1;
gold_sql: SELECT
  a.`MONTH` AS '月份',
  (a.`O_VOLUME` - b.`O_VOLUME`) AS '始发量增长'
FROM
  (
    SELECT
      `MONTH`,
      `O_VOLUME`
    FROM
      `glky_ad_tj`
    WHERE
      `YEAR` = '2024'
  ) a
  JOIN (
    SELECT
      `MONTH`,
      `O_VOLUME`
    FROM
      `glky_ad_tj`
    WHERE
      `YEAR` = '2024'
  ) b ON a.`MONTH` = b.`MONTH` + 1
WHERE
  STR_TO_DATE(CONCAT('2024-', a.`MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-01-01' AND '2024-06-07'
ORDER BY
  始发量增长 DESC
LIMIT
  1;
pred_sql: SELECT      `MONTH`,      O_VOLUME,      LAG(O_VOLUME) OVER (ORDER BY `MONTH`) AS PREVIOUS_MONTH_O_VOLUME,     (O_VOLUME - LAG(O_VOLUME) OVER (ORDER BY `MONTH`)) / LAG(O_VOLUME) OVER (ORDER BY `MONTH`) * 100 AS GROWTH_RATE FROM      glky_ad_tj WHERE      `YEAR` = '2024' AND      STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-01-01' AND '2024-06-07' ORDER BY      `MONTH`;
gold_sql: SELECT
  BANCZL AS `南通到盐城铁路客运班次总量`
FROM
  tl_kylx
WHERE
  LUXQDCSMC = '南通市'
  AND LUXZDCSMC = '盐城市'
  AND GCRQ = '2023-11-23';
pred_sql: SELECT SUM(`BANCZL`) AS `班次总量` FROM `tl_kylx` WHERE `GCRQ` = '2023-11-23' AND `LUXQDCSMC` = '南通市' AND `LUXZDCSMC` = '盐城市';
gold_sql: SELECT
  GCRQ AS `观测日期`,
  BANCZL AS `班次总量`
FROM
  tl_kylx
WHERE
  LUXQDCSMC = '南通市'
  AND LUXZDCSMC = '盐城市'
  AND GCRQ >= DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        tl_kylx
    ),
    INTERVAL 7 DAY
  )
ORDER BY
  GCRQ;
pred_sql: SELECT SUM(`BANCZL`) AS `近一周南通市到盐城市铁路客运班次总量` FROM `tl_kylx` WHERE `LUXQDCSMC` = '南通市' AND `LUXZDCSMC` = '盐城市' AND `GCRQ` >= CURDATE() - INTERVAL 7 DAY;
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市`,
  `LUXZDCSMC` AS `终点城市`,
  `BANCZL` AS `班次总量`
FROM
  `tl_kylx`
WHERE
  `LUXZDCSMC` = '盐城市';
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE `LUXZDCSMC` = '盐城' GROUP BY `LUXQDCSMC`, `LUXZDCSMC`;
gold_sql: SELECT
  `LUXQDCSMC` AS `路线起点城市`,
  `LUXZDCSMC` AS `路线终点城市`,
  `BANCZL` AS `班次总量`
FROM
  `tl_kylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kylx`
  )
ORDER BY
  `BANCZL` DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_kylx`) GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `班次总量` DESC LIMIT 1;
gold_sql: SELECT
  SUM(`BANCZL`) AS '班次总量'
FROM
  `tl_kylx`
WHERE
  `GCRQ` = '2023-11-23';
pred_sql: SELECT SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE `GCRQ` = '2023-11-23';
gold_sql: SELECT
  `LUXQDCSMC` AS '路线起点城市名称',
  `LUXZDCSMC` AS '路线终点城市名称',
  `BANCZL` AS '班次总量（班）'
FROM
  `tl_kylx`
WHERE
  `GCRQ` = '2023-11-23'
ORDER BY
  `BANCZL` DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`, SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE `GCRQ` = '2023-11-23' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `班次总量` DESC LIMIT 1;
gold_sql: SELECT
  COUNT(*) AS '记录数量'
FROM
  `tl_kylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kylx`
  )
  AND `LUXQDCSMC` = '南通市'
  AND `LUXZDCSMC` != '盐城市';
pred_sql: SELECT COUNT(*) AS `记录数量` FROM `tl_kylx` WHERE `LUXQDCSMC` = '南通市' AND `LUXZDCSMC` != '盐城市';
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市`,
  SUM(`BANCZL`) AS `总班次`
FROM
  `tl_kylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kylx`
  )
GROUP BY
  `LUXQDCSMC`
ORDER BY
  `总班次` DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_kylx`) GROUP BY `LUXQDCSMC` ORDER BY `班次总量` DESC LIMIT 1;
gold_sql: SELECT
  COUNT(*) AS '班次总量超过30的路线数量'
FROM
  `tl_kylx`
WHERE
  `GCRQ` = '2023-11-23'
  AND `BANCZL` > 30;
pred_sql: SELECT COUNT(*) AS `超过30班次的路线数量` FROM `tl_kylx` WHERE `GCRQ` = '2023-11-23' AND `BANCZL` > 30;
gold_sql: SELECT
  COUNT(DISTINCT `LUXZDCSMC`) AS '不同终点城市数量'
FROM
  `tl_kylx`
WHERE
  `GCRQ` = '2023-11-23';
pred_sql: SELECT COUNT(DISTINCT `LUXZDCSMC`) AS '不同终点城市数量' FROM `tl_kylx` WHERE `GCRQ` = '2023-11-23';
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `LUXQDCSMC` AS `路线起点城市名称`,
  `LUXZDCSMC` AS `路线终点城市名称`,
  `BANCZL` AS `班次总量`
FROM
  `tl_kylx`
WHERE
  `GCRQ` = (
    SELECT
      `GCRQ`
    FROM
      `tl_kylx`
    ORDER BY
      `BANCZL` ASC
    LIMIT
      1
  )
ORDER BY
  `BANCZL` ASC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` GROUP BY `GCRQ` ORDER BY SUM(`BANCZL`) ASC LIMIT 1;
gold_sql: SELECT
  AVG(`BANCZL`) AS 班次总量平均值
FROM
  `tl_kylx`
WHERE
  `LUXQDCSMC` = '南通市'
  AND `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kylx`
  );
pred_sql: SELECT AVG(`BANCZL`) AS '平均班次总量' FROM `tl_kylx` WHERE `LUXQDCSMC` = '南通市';
gold_sql: SELECT
  `LUXZDCSMC` AS `终点城市`,
  `BANCZL` AS `班次总量`
FROM
  `tl_kylx`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `tl_kylx`
  )
ORDER BY
  `BANCZL` ASC
LIMIT
  1;
pred_sql: SELECT `LUXZDCSMC` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_kylx`) GROUP BY `LUXZDCSMC` ORDER BY `班次总量` ASC LIMIT 1;
gold_sql: SELECT
  COUNT(DISTINCT `LUXQDCSMC`) AS '不同起点城市个数'
FROM
  `tl_kylx`
WHERE
  `GCRQ` = '2023-11-23';
pred_sql: SELECT COUNT(DISTINCT `LUXQDCSMC`) AS '不同起点城市数量' FROM `tl_kylx` WHERE `GCRQ` = '2023-11-23';
gold_sql: SELECT
  STD(`BANCZL`) AS `班次总量标准差`
FROM
  `tl_kylx`
WHERE
  `LUXZDCSMC` = '盐城市';
pred_sql: SELECT STDDEV(`BANCZL`) AS `班次总量标准差` FROM `tl_kylx` WHERE `LUXZDCSMC` = '盐城市';
gold_sql: SELECT
  `LUXZDCSMC` AS `终点城市`,
  `BANCZL_Median` AS `班次总量中位数`
FROM
  (
    SELECT
      `LUXZDCSMC`,
      CAST(
        SUBSTRING_INDEX(
          SUBSTRING_INDEX(
            GROUP_CONCAT(
              `BANCZL`
              ORDER BY
                `BANCZL` ASC
            ),
            ',',
            (COUNT(*) + 1) / 2
          ),
          ',',
          -1
        ) AS DECIMAL
      ) AS `BANCZL_Median`
    FROM
      `tl_kylx`
    GROUP BY
      `LUXZDCSMC`
  ) AS `Median_Table`
ORDER BY
  `BANCZL_Median` DESC
LIMIT
  1;
pred_sql: SELECT `LUXZDCSMC` AS '终点城市',         PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY `BANCZL`) AS '班次总量中位数' FROM `tl_kylx` WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_kylx`) GROUP BY `LUXZDCSMC` ORDER BY `班次总量中位数` DESC LIMIT 1;
gold_sql: SELECT
  `LUXZDCSMC` AS '终点城市',
  SUM(`BANCZL`) AS '班次总量'
FROM
  `tl_kylx`
WHERE
  `LUXQDCSMC` = '南通市'
  AND MONTH(`GCRQ`) = MONTH(CURRENT_DATE)
  AND YEAR(`GCRQ`) = YEAR(CURRENT_DATE)
GROUP BY
  `LUXZDCSMC`;
pred_sql: SELECT `LUXQDCSMC` AS '路线起点城市名称', COUNT(*) AS '班次数量'  FROM `tl_kylx`  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM `tl_kylx`) AND `LUXQDCSMC` LIKE '%南通市%'  GROUP BY `LUXQDCSMC`;
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市`,
  `LUXZDCSMC` AS `终点城市`,
  `BANCZL` AS `班次总量`
FROM
  `tl_kylx`
WHERE
  `LUXZDCSMC` = '盐城市'
  AND MONTH(`GCRQ`) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))
  AND YEAR(`GCRQ`) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))
ORDER BY
  `BANCZL` DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC` AS '路线起点城市名称', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE `LUXZDCSMC` = '盐城市' AND `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND `GCRQ` < CURDATE() GROUP BY `LUXQDCSMC` ORDER BY `班次总量` DESC LIMIT 1;
gold_sql: SELECT
  `LUXQDCSMC` AS `城市`,
  SUM(`BANCZL`) AS `班次总量`
FROM
  `tl_kylx`
WHERE
  `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 WEEK) AND CURDATE()
GROUP BY
  `LUXQDCSMC`
HAVING
  SUM(`BANCZL`) > 100;
pred_sql: SELECT `LUXQDCSMC` AS '城市', SUM(`BANCZL`) AS '出发班次总量' FROM `tl_kylx` WHERE `GCRQ` >= CURDATE() - INTERVAL 7 DAY GROUP BY `LUXQDCSMC` HAVING SUM(`BANCZL`) > 100;
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市`,
  `LUXZDCSMC` AS `终点城市`,
  AVG(`BANCZL`) AS `日均班次`
FROM
  `tl_kylx`
WHERE
  `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) + 7 DAY) AND DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) - 1 DAY)
GROUP BY
  `LUXQDCSMC`,
  `LUXZDCSMC`
ORDER BY
  `日均班次` ASC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`, AVG(`BANCZL`) AS `日均班次` FROM `tl_kylx` WHERE `GCRQ` BETWEEN DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) + 7 DAY) AND DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) + 1 DAY) GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `日均班次` ASC LIMIT 2;
gold_sql: SELECT
  (
    SELECT
      SUM(BANCZL)
    FROM
      tl_kylx
    WHERE
      LUXQDCSMC = '南通市'
      AND DATE_FORMAT(GCRQ, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
  ) AS `本月班次总量`,
  (
    SELECT
      SUM(BANCZL)
    FROM
      tl_kylx
    WHERE
      LUXQDCSMC = '南通市'
      AND DATE_FORMAT(GCRQ, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
  ) AS `上月班次总量`;
pred_sql: SELECT      SUM(CASE WHEN MONTH(`GCRQ`) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN `BANCZL` ELSE 0 END) AS '上个月南通市出发班次总量',     SUM(CASE WHEN MONTH(`GCRQ`) = MONTH(CURRENT_DATE) THEN `BANCZL` ELSE 0 END) AS '这个月南通市出发班次总量' FROM      tl_kylx WHERE      `LUXQDCSMC` LIKE '%南通%';
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市名称`,
  SUM(`BANCZL`) AS `班次总量`
FROM
  `tl_kylx`
WHERE
  QUARTER(`GCRQ`) = QUARTER(CURDATE())
  AND YEAR(`GCRQ`) = YEAR(CURDATE())
GROUP BY
  `LUXQDCSMC`
HAVING
  `班次总量` > 200;
pred_sql: SELECT `LUXQDCSMC` AS '城市名称', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE QUARTER(`GCRQ`) = QUARTER(CURDATE()) AND YEAR(`GCRQ`) = YEAR(CURDATE()) GROUP BY `LUXQDCSMC` HAVING SUM(`BANCZL`) > 200;
gold_sql: SELECT
  LUXQDCSMC AS '起点城市',
  LUXZDCSMC AS '终点城市',
  SUM(BANCZL) AS '班次总量'
FROM
  tl_kylx
WHERE
  YEAR(GCRQ) = YEAR(CURDATE())
GROUP BY
  LUXQDCSMC,
  LUXZDCSMC
ORDER BY
  SUM(BANCZL) DESC
LIMIT
  5;
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市', SUM(`BANCZL`) AS '班次总量' FROM `tl_kylx` WHERE YEAR(`GCRQ`) = YEAR(CURDATE()) GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `班次总量` DESC LIMIT 5;
gold_sql: SELECT
  `LUXQDCSMC` AS `起点城市`,
  `LUXZDCSMC` AS `终点城市`,
  `BANCZL` AS `班次数量`
FROM
  `tl_kylx`
WHERE
  `LUXQDCSMC` LIKE '%市'
  AND `GCRQ` >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);
pred_sql: SELECT      `LUXQDCSMC` AS '起点城市',      `LUXZDCSMC` AS '终点城市',      SUM(`BANCZL`) AS '班次数量' FROM      `tl_kylx` WHERE      `GCRQ` >= CURDATE() - INTERVAL 1 MONTH      AND `LUXQDCSMC` LIKE '%市' GROUP BY      `LUXQDCSMC`,      `LUXZDCSMC`;
gold_sql: SELECT
  LUXQDCSMC AS '起点城市',
  '（无班次）' AS '终点城市',
  CONCAT(LUXQDCSMC, ' -> ', '（无班次）') AS '起终点城市'
FROM
  tl_kylx a
WHERE
  a.LUXQDCSMC IS NOT NULL
  AND a.LUXQDCSMC NOT IN(
    SELECT DISTINCT
      LUXZDCSMC
    FROM
      tl_kylx
    WHERE
      LUXZDCSMC IS NOT NULL
      AND LUXZDCSMC != ''
  );
pred_sql: SELECT DISTINCT t1.LUXQDCSMC AS 起点城市, t2.LUXZDCSMC AS 终点城市 FROM tl_kylx t1 LEFT JOIN tl_kylx t2 ON t1.LUXQDCSMC = t2.LUXZDCSMC AND t1.GCRQ = t2.GCRQ WHERE t1.GCRQ BETWEEN '2024-05-02' AND '2024-05-08' AND t2.GCRQ BETWEEN '2024-05-02' AND '2024-05-08' AND t1.LUXQDCSMC IN (SELECT LUXQDCSMC FROM tl_kylx WHERE GCRQ BETWEEN '2024-05-02' AND '2024-05-08') AND t2.LUXZDCSMC IN (SELECT LUXZDCSMC FROM tl_kylx WHERE GCRQ BETWEEN '2024-05-02' AND '2024-05-08') AND NOT EXISTS (     SELECT 1     FROM tl_kylx t3     WHERE t3.LUXQDCSMC = t1.LUXQDCSMC     AND t3.LUXZDCSMC = t2.LUXZDCSMC     AND t3.GCRQ BETWEEN '2024-05-02' AND '2024-05-08' );
gold_sql: SELECT
  GCRQ AS `时间段`,
  GSMC AS `高速公路名称`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = '2023-11-18'
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT      `GSMC` AS '高速公路名称',      MAX(`ZONGCLL`) AS '最大总车流量' FROM      gsgl_dmyxzt WHERE      `GCRQ` = '2023-11-18' GROUP BY      `GSMC` ORDER BY      `最大总车流量` DESC LIMIT 1;
gold_sql: SELECT GCRQ as `最大流量日期`, MAX(VOLUME) as `最大流量`  FROM gsgl_dmll_top10  WHERE ROAD_NAME = '沪宜高速（硕放枢纽-东桥枢纽）'  AND GCRQ BETWEEN '2023-10-01' AND '2023-12-31'  GROUP BY GCRQ  ORDER BY VOLUME DESC  LIMIT 1;
pred_sql: SELECT `GCRQ` AS '日期', MAX(`VOLUME`) AS '最大流量' FROM gsgl_dmll_top10 WHERE `ROAD_NAME` = '沪宜高速（硕放枢纽-东桥枢纽）'   AND `GCRQ` BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY `GCRQ` ORDER BY `最大流量` DESC LIMIT 1;
gold_sql: SELECT     `HOUR` AS `时间段`,  ROAD_NAME AS '路段名称' ,  `VOLUME` AS `流量` FROM     gsgl_dmll_top10 WHERE     `GCRQ` BETWEEN '2023-10-01' AND '2023-10-31' ORDER BY     `VOLUME` DESC LIMIT 10;
pred_sql: SELECT `HOUR` AS '时间段', `VOLUME` AS '流量' FROM gsgl_dmll_top10 WHERE `GCRQ` BETWEEN '2023-10-01' AND '2023-10-31' ORDER BY `VOLUME` DESC LIMIT 10;
gold_sql: SELECT HOUR AS `小时`, ROAD_VOLUME AS `在网车流量高峰（辆）`  FROM gsgl_dmll_fs  WHERE GCRQ = '2023-10-31'  ORDER BY ROAD_VOLUME DESC  LIMIT 1;
pred_sql: SELECT      `GCRQ` AS '观测日期',      `HOUR` AS '时段',      `ROAD_VOLUME` AS '总在网车流量（辆）',      `COACH_ROAD_VOLUME` AS '客车在网车流量（辆）',      `TRUNK_ROAD_VOLUME` AS '货车在网车流量（辆）' FROM      gsgl_dmll_fs WHERE      `GCRQ` = '2023-10-31';
gold_sql: SELECT
  DUANMMC AS `最高流量断面`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = '2024-05-12'
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT `DUANMMC` AS '高速断面名称', MAX(`ZONGCLL`) AS '最高车流量' FROM gsgl_dmyxzt WHERE `GCRQ` = '2024-05-12' GROUP BY `DUANMMB` ORDER BY `最高车流量` DESC LIMIT 1;
gold_sql: SELECT
  T1.DUANMMC AS `断面名称`,
  T1.ZONGCLL - IFNULL(T2.ZONGCLL, NULL) AS `流量增长`
FROM
  (
    SELECT
      *
    FROM
      gsgl_dmyxzt
    WHERE
      GCRQ = (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_dmyxzt
      )
  ) T1
  LEFT JOIN gsgl_dmyxzt T2 ON T1.DUANMBM = T2.DUANMBM
  AND T2.GCRQ = '2023-05-23'
WHERE
  T1.ZONGCLL - IFNULL(T2.ZONGCLL, NULL) IS NOT NULL
ORDER BY
  `流量增长` DESC
LIMIT
  1;
pred_sql: SELECT      DUANMMC AS '断面名称',      GSMC AS '高速名称',      ZONGCLL AS '总车流量（辆/天）',      (ZONGCLL - LAG(ZONGCLL, 1) OVER (PARTITION BY DUANMBM ORDER BY GCRQ)) / LAG(ZONGCLL, 1) OVER (PARTITION BY DUANMBM ORDER BY GCRQ) * 100 AS '增长率' FROM      gsgl_dmyxzt WHERE      GCRQ = '2023-05-23' ORDER BY      增长率 DESC LIMIT 1;
gold_sql: SELECT
  HOUR AS '平稳时段',
  ABS(
    ROAD_VOLUME - LAG(ROAD_VOLUME) OVER (
      ORDER BY
        HOUR
    )
  ) AS '流量变化值'
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = '2024-05-23'
ORDER BY
  '流量变化值' ASC,
  HOUR ASC
LIMIT
  1;
pred_sql: SELECT HOUR, ROAD_VOLUME, COACH_ROAD_VOLUME, TRUNK_ROAD_VOLUME FROM gsgl_dmll_fs WHERE GCRQ = '2024-05-23' ORDER BY ABS(ROAD_VOLUME - LAG(ROAD_VOLUME) OVER (ORDER BY HOUR)) ASC LIMIT 1;
gold_sql: SELECT
  DUANMBM AS 断面编码,
  DUANMMC AS 断面名称,
  GSMC As 高速名称,
  GSBM AS 高速编码,
  TONGJLC AS 里程,
  ZONGCLL AS 总车流量,
  (
    ZONGCLL / (
      SELECT
        SUM(ZONGCLL)
      FROM
        gsgl_dmyxzt
      WHERE
        GCRQ = (
          SELECT
            MAX(GCRQ)
          FROM
            gsgl_dmyxzt
        )
    )
  ) AS 通行量占比
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
ORDER BY
  通行量占比 DESC
LIMIT
  1;
pred_sql: SELECT `DUANMMC` AS '高速断面名称', SUM(`ZONGCLL`) / (SELECT SUM(`ZONGCLL`) FROM gsgl_dmyxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_dmyxzt)) * 100 AS '通行量占比' FROM gsgl_dmyxzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_dmyxzt) GROUP BY `DUANMMC` ORDER BY `通行量占比` DESC LIMIT 1;
gold_sql: SELECT GCRQ AS `观测日期`, GSGL_JTLL AS `当天高速公路车流量`, DRLLHB AS `车流量环比情况` FROM r_gsgl_z WHERE GCRQ BETWEEN '2023-11-23' AND '2023-11-30' ORDER BY DRLLHB DESC, GSGL_JTLL DESC limit 1;
pred_sql: SELECT      `GCRQ` AS '观测日期',      `XSSD` AS '高速公路行驶速度' FROM      r_gsgl_z WHERE      `GCRQ` BETWEEN '2023-11-23' AND '2023-11-30';
gold_sql: SELECT
  CURRENT.DUANMMC AS `断面名称`,
  ABS(CURRENT.ZONGCLL - PREVIOUS.ZONGCLL) AS `流量变化`
FROM
  gsgl_dmyxzt CURRENT
  JOIN gsgl_dmyxzt PREVIOUS ON CURRENT.DUANMBM = PREVIOUS.DUANMBM
WHERE
  CURRENT.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
  )
  AND PREVIOUS.GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_dmyxzt
    WHERE
      GCRQ < (
        SELECT
          MAX(GCRQ)
        FROM
          gsgl_dmyxzt
      )
  )
ORDER BY
  `流量变化` DESC
LIMIT
  1;
pred_sql: SELECT      DUANMMC AS '断面名称',      GSMC AS '高速名称',      GCRQ AS '观测日期',      ZONGCLL AS '总车流量（辆/天）' FROM      gsgl_dmyxzt WHERE      GCRQ = (SELECT MAX(GCRQ) FROM gsgl_dmyxzt) ORDER BY      ZONGCLL DESC LIMIT 1;
gold_sql: SELECT
  A.DUANMMC AS `断面名称`,
  STDDEV_SAMP(A.ZONGCLL) AS `流量稳定性`
FROM
  gsgl_dmyxzt A
WHERE
  A.GCRQ BETWEEN '2023-11-01' AND '2023-11-30'
  AND A.DUANMMC IS NOT NULL
GROUP BY
  A.DUANMMC
ORDER BY
  `流量稳定性` ASC
LIMIT
  1;
pred_sql: SELECT      DUANMMC AS '断面名称',      GSMC AS '高速名称',      AVG(ZONGCLL) AS '平均总车流量' FROM      gsgl_dmyxzt WHERE      GCRQ BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY      DUANMBM, DUANMMC, GSMC ORDER BY      STDDEV(ZONGCLL) ASC LIMIT 1;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  AVG(ZONGCLL) AS `平均通行流量`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ BETWEEN '2024-05-16' AND '2024-05-23'
GROUP BY
  DUANMBM
ORDER BY
  `平均通行流量` ASC
LIMIT
  1;
pred_sql: SELECT `DUANMMC` AS '断面名称', AVG(`ZONGCLL`) AS '平均通行流量' FROM gsgl_dmyxzt WHERE `GCRQ` BETWEEN '2024-05-16' AND '2024-05-23' GROUP BY `DUANMMB` ORDER BY `平均通行流量` ASC LIMIT 1;
gold_sql: SELECT
  WEEKEND.DUANMMC AS `断面名称`,
  ABS(WEEKEND.ZONGCLL - WORKDAY.ZONGCLL) AS `流量变化`
FROM
  gsgl_dmyxzt WEEKEND
  JOIN gsgl_dmyxzt WORKDAY ON WEEKEND.DUANMBM = WORKDAY.DUANMBM
WHERE
  WEEKEND.GCRQ = '2023-11-18'
  AND WORKDAY.GCRQ = '2023-11-17'
ORDER BY
  `流量变化` DESC
LIMIT
  1;
pred_sql: SELECT      DUANMMC AS '高速断面名称',     MAX(ZONGCLL) - MIN(ZONGCLL) AS '流量变化' FROM      gsgl_dmyxzt WHERE      GCRQ IN ('2023-11-17', '2023-11-18') GROUP BY      DUANMMB ORDER BY      '流量变化' DESC LIMIT 1;
gold_sql: SELECT
  HOUR AS '时段',
  ROAD_VOLUME AS '交通流量最高'
FROM
  gsgl_dmll_fs
WHERE
  GCRQ = '2024-05-22'
ORDER BY
  ROAD_VOLUME DESC
LIMIT
  1;
pred_sql: SELECT `HOUR` AS '时段', MAX(`ROAD_VOLUME`) AS '最高车流量' FROM gsgl_dmll_fs WHERE `GCRQ` = '2024-05-22' GROUP BY `HOUR` ORDER BY `最高车流量` DESC LIMIT 1;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  ZONGCLL AS `交通流量`
FROM
  gsgl_dmyxzt
WHERE
  ZONGCLL > 20000
  AND GCRQ BETWEEN '2024-05-20' AND '2024-05-26';
pred_sql: SELECT `DUANMMC` AS '断面名称', `GSMC` AS '高速名称', `ZONGCLL` AS '总车流量' FROM `gsgl_dmyxzt` WHERE `GCRQ` BETWEEN '2024-05-20' AND '2024-05-26' AND `ZONGCLL` > 20000;
gold_sql: SELECT
  DUANMMC AS `断面名称`,
  ZONGCLL AS `断面流量峰值`
FROM
  gsgl_dmyxzt
WHERE
  GCRQ = '2024-05-19'
ORDER BY
  ZONGCLL DESC
LIMIT
  1;
pred_sql: SELECT MAX(`ZONGCLL`) AS '上个星期高速断面流量峰值' FROM `gsgl_dmyxzt` WHERE `GCRQ` = '2024-05-19';
gold_sql: SELECT
  MAX_FLOW.GCRQ as `日期`,
  MAX_FLOW.HOUR as `流量最高的时段`,
  MIN_FLOW.HOUR as `流量最低的时段`
FROM
  (
    SELECT
      GCRQ,
      HOUR,
      ROAD_VOLUME
    FROM
      gsgl_dmll_fs
    WHERE
      GCRQ BETWEEN '2023-10-31' AND '2023-10-31'
      AND HOUR = (
        SELECT
          HOUR
        FROM
          gsgl_dmll_fs as inner_tbl
        WHERE
          inner_tbl.GCRQ = gsgl_dmll_fs.GCRQ
          AND inner_tbl.ROAD_VOLUME = (
            SELECT
              MAX(ROAD_VOLUME)
            FROM
              gsgl_dmll_fs as max_tbl
            WHERE
              max_tbl.GCRQ = gsgl_dmll_fs.GCRQ
          )
      )
  ) AS MAX_FLOW
  JOIN (
    SELECT
      GCRQ,
      HOUR
    FROM
      gsgl_dmll_fs
    WHERE
      GCRQ BETWEEN '2023-10-31' AND '2023-10-31'
      AND HOUR = (
        SELECT
          HOUR
        FROM
          gsgl_dmll_fs as inner_tbl
        WHERE
          inner_tbl.GCRQ = gsgl_dmll_fs.GCRQ
          AND inner_tbl.ROAD_VOLUME = (
            SELECT
              MIN(ROAD_VOLUME)
            FROM
              gsgl_dmll_fs as min_tbl
            WHERE
              min_tbl.GCRQ = gsgl_dmll_fs.GCRQ
          )
      )
  ) AS MIN_FLOW ON MAX_FLOW.GCRQ = MIN_FLOW.GCRQ;
pred_sql: SELECT      `GCRQ`,     MAX(`ROAD_VOLUME`) AS '最高流量',     MIN(`ROAD_VOLUME`) AS '最低流量' FROM      gsgl_dmll_fs WHERE      `GCRQ` = '2023-10-31' GROUP BY      `GCRQ`;
gold_sql: SELECT `O_PROVINCE` AS `省份`, `VOLUME` AS `流入车辆量` FROM gsgl_crk_zysflr WHERE `GCRQ` = '2023-10-22' ORDER BY `VOLUME` DESC LIMIT 1;
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`VOLUME`) AS '流入车辆总数' FROM gsgl_crk_zysflr WHERE `GCRQ` = '2023-10-22' GROUP BY `O_PROVINCE` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  `O_PROVINCE` AS `外省省份`,
  SUM(`CHELL`) AS `流入车辆总数`
FROM
  gsgl_od_flow
WHERE
  `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30'
  AND `D_PROVINCE` != `O_PROVINCE`
  AND `O_PROVINCE` <> '江苏省'
GROUP BY
  `O_PROVINCE`
ORDER BY
  `流入车辆总数` DESC
LIMIT
  1;
pred_sql: SELECT `D_PROVINCE` AS '省份', SUM(`CHELL`) AS '车流量' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2024-04-01' AND '2024-04-30' GROUP BY `D_PROVINCE` ORDER BY `车流量` DESC LIMIT 1;
gold_sql: SELECT
  `O_PROVINCE` AS `起点省份`,
  SUM(`CHELL`) AS `流入车流量（辆/天）`
FROM
  `GSGL_OD_FLOW`
WHERE
  `GCRQ` BETWEEN '2024-06-24' AND '2024-06-30'
  AND `D_PROVINCE` = '江苏省'
  AND `O_PROVINCE` != '江苏省'
GROUP BY
  `O_PROVINCE`
HAVING
  `流入车流量（辆/天）` BETWEEN 30000 AND 100000;
pred_sql: SELECT DISTINCT `O_PROVINCE` AS '省份' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2024-06-24' AND '2024-06-30'   AND `CHELL` BETWEEN 30000 AND 100000;
gold_sql: SELECT
  `O_PROVINCE` AS `省份`,
  `VOLUME` AS `流量（辆/天）`
FROM
  gsgl_crk_zysflr
WHERE
  `GCRQ` = '2023-10-22'
ORDER BY
  `流量（辆/天）` DESC
LIMIT
  3;
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`VOLUME`) AS '总流量' FROM gsgl_crk_zysflr WHERE `GCRQ` = '2023-10-22' GROUP BY `O_PROVINCE` ORDER BY `总流量` DESC LIMIT 3;
gold_sql: SELECT
  SUM(subquery.total_vehicle) AS '总流入车辆数'
FROM
  (
    SELECT
      SUM(`CHELL`) AS total_vehicle
    FROM
      gsgl_od_flow
    WHERE
      `GCRQ` = '2023-11-15'
      AND `D_PROVINCE` = '江苏省'

      AND `O_PROVINCE` != '江苏省'
    GROUP BY
      `O_PROVINCE`
    ORDER BY
      total_vehicle DESC
    LIMIT
      3
  ) AS subquery
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`CHELL`) AS '流入车辆总数' FROM `gsgl_od_flow` WHERE `GCRQ` = '2023-11-15' AND `D_PROVINCE` LIKE '%江苏%' AND `O_PROVINCE` NOT LIKE '%江苏%' GROUP BY `O_PROVINCE` ORDER BY `流入车辆总数` DESC LIMIT 3;
gold_sql: SELECT
  `O_PROVINCE` AS `流入省份`,
  `VOLUME` AS `流量（辆/天）`
FROM
  gsgl_crk_zysflr
WHERE
  `GCRQ` = '2023-10-22'
ORDER BY
  `VOLUME` DESC
LIMIT
  5;
pred_sql: SELECT `O_PROVINCE` AS '省份', `VOLUME` AS '流量（辆/天）' FROM gsgl_crk_zysflr WHERE `GCRQ` = '2023-10-22' ORDER BY `VOLUME` DESC LIMIT 5;
gold_sql: SELECT
  `O_CITY` AS `城市`,
  AVG(`车流量（辆/天）`) AS `发生量（辆/天）`
FROM
  (
    SELECT
      `GCRQ`,
      `O_CITY`,
      SUM(`CHELL`) AS `车流量（辆/天）`
    FROM
      gsgl_od_flow
    WHERE
      `O_PROVINCE` = '江苏省'
      AND `GCRQ` BETWEEN '2023-10-01' AND '2023-10-31'
    GROUP BY
      `GCRQ`,
      `O_CITY`
  ) AS daily_city_flow
GROUP BY
  `O_CITY`;
pred_sql: SELECT `O_CITY` AS '城市', AVG(`CHELL`) AS '平均高速公路发生量（辆/天）' FROM `gsgl_od_flow` WHERE `GCRQ` BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY `O_CITY`;
gold_sql: SELECT
  `VOLUME` AS `上行航向矿建货运量`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `MONTH` = '1'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
  AND `DIRECTION` = '上行'
  AND `CARGO` = '矿建';
pred_sql: SELECT SUM(`VOLUME`) AS '上行航向矿建货运量' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `MONTH` = '01' AND `O_DISTRICTS` LIKE '%南京城区%' AND `D_DISTRICTS` LIKE '%南京城区%' AND `DIRECTION` = '上行';
gold_sql: SELECT
  `DIRECTION` AS `航向`,
  SUM(`VOLUME`) AS `货运量（吨/月)`
FROM
  `hd_nh_od`
WHERE
  `YEAR` = '2020'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
GROUP BY
  `DIRECTION`;
pred_sql: SELECT `YEAR` AS '年份', `MONTH` AS '月份', `O_DISTRICTS` AS '起点区县', `D_DISTRICTS` AS '终点区县', `DIRECTION` AS '航向', SUM(`VOLUME`) AS '货运量总和' FROM hd_nh_od WHERE `YEAR` = '2020' AND `O_CITY` = '南京' AND `D_CITY` = '南京' GROUP BY `YEAR`, `MONTH`, `O_DISTRICTS`, `D_DISTRICTS`, `DIRECTION`;
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  `MONTH` AS `月份`,
  SUM(`VOLUME`) AS `货运量`
FROM
  `hd_nh_od`
WHERE
  `YEAR` = '2020'
GROUP BY
  `O_CITY`,
  `D_CITY`,
  `MONTH`
HAVING
  `货运量` > 10000;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市' FROM hd_nh_od WHERE `YEAR` = '2020' AND `VOLUME` > 10000;
gold_sql: SELECT
  SUM(VOLUME) AS `货运量总和（万吨）`
FROM
  hd_nh_od
WHERE
  YEAR = '2020';
pred_sql: SELECT SUM(`VOLUME`) AS '2020年水运货运量总和' FROM `hd_nh_od` WHERE `YEAR` = '2020';
gold_sql: SELECT
  `O_CITY` AS `城市`,
  SUM(`VOLUME`) AS `总货运量`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
GROUP BY
  `O_CITY`
ORDER BY
  `总货运量` DESC;
pred_sql: SELECT `D_CITY` AS '城市', SUM(`VOLUME`) AS '总货运量' FROM `hd_nh_od` WHERE `YEAR` = '2020' GROUP BY `D_CITY` ORDER BY `总货运量` DESC;
gold_sql: SELECT
  (
    SUM(VOLUME) / (
      SELECT
        SUM(VOLUME)
      FROM
        hd_nh_od
      WHERE
        YEAR = '2020'
    )
  ) * 100 AS `比例`
FROM
  hd_nh_od
WHERE
  YEAR = '2020'
  AND O_DISTRICTS = '南京城区'
  AND D_DISTRICTS = '南京城区';
pred_sql: SELECT SUM(CASE WHEN `o_districts` = '南京城区' AND `d_districts` = '南京城区' THEN `volume` ELSE 0 END) / SUM(`volume`) AS '2020年南京城区到南京城区的水路货运量占所有航向货运量的比例' FROM `hd_nh_od` WHERE `year` = '2020';
gold_sql: SELECT
  '2020年第一季度' AS `时间区间`,
  SUM(`VOLUME`) AS `货运量（吨）`
FROM
  `hd_nh_od`
WHERE
  `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
  AND `YEAR` = '2020'
  AND `MONTH` IN ('1', '2', '3')
UNION ALL
SELECT
  '2020年第四季度' AS `时间区间`,
  SUM(`VOLUME`) AS `货运量（吨）`
FROM
  `hd_nh_od`
WHERE
  `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
  AND `YEAR` = '2020'
  AND `MONTH` IN ('10', '11', '12');
pred_sql: SELECT SUM(CASE WHEN `MONTH` IN ('01', '02', '03') THEN `VOLUME` ELSE 0 END) AS `第一季度货运量`, SUM(CASE WHEN `MONTH` IN ('10', '11', '12') THEN `VOLUME` ELSE 0 END) AS `第四季度货运量` FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` LIKE '%南京%' AND `D_DISTRICTS` LIKE '%南京%';
gold_sql: SELECT
  `MONTH` AS '月份',
  SUM(`VOLUME`) AS '货运量（吨/月)'
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND O_DISTRICTS = '南京城区'
  AND D_DISTRICTS = '南京城区'
GROUP BY
  `MONTH`;
pred_sql: SELECT `MONTH` AS '月份', SUM(`VOLUME`) AS '货运量（吨/月）' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` LIKE '%南京%' AND `D_DISTRICTS` LIKE '%南京%' GROUP BY `MONTH`;
gold_sql: SELECT
  `年份`,
  `月份`,
  `货运量（吨/月)` AS `货运量`,
  CONCAT(
    ROUND(
      (
        `货运量（吨/月)` - LAG(`货运量（吨/月)`) OVER (
          ORDER BY
            `年份`,
            `月份`
        )
      ) / LAG(`货运量（吨/月)`) OVER (
        ORDER BY
          `年份`,
          `月份`
      ) * 100,
      2
    ),
    '%'
  ) AS `月度环比增长率`
FROM
  (
    SELECT
      `YEAR` AS `年份`,
      `MONTH` AS `月份`,
      SUM(`VOLUME`) AS `货运量（吨/月)`
    FROM
      `hd_nh_od`
    WHERE
      `YEAR` = '2020'
      AND `O_DISTRICTS` = '南京城区'
      AND `D_DISTRICTS` = '南京城区'
      AND `O_CITY` = '南京'
      AND `D_CITY` = '南京'
    GROUP BY
      `YEAR`,
      `MONTH`
  ) AS t
ORDER BY
  `年份`,
  `月份`;
pred_sql: SELECT      `MONTH`,      SUM(`VOLUME`) AS `当月货运量`,      LAG(SUM(`VOLUME`), 1, 0) OVER (ORDER BY `MONTH`) AS `上月货运量`,      CASE          WHEN LAG(SUM(`VOLUME`), 1, 0) OVER (ORDER BY `MONTH`) = 0 THEN NULL          ELSE (SUM(`VOLUME`) - LAG(SUM(`VOLUME`), 1, 0) OVER (ORDER BY `MONTH`)) / LAG(SUM(`VOLUME`), 1, 0) OVER (ORDER BY `MONTH`) * 100      END AS `环比增长率` FROM      hd_nh_od WHERE      `YEAR` = '2020'      AND `O_DISTRICTS` = '南京城区'      AND `D_DISTRICTS` = '南京城区' GROUP BY      `MONTH` ORDER BY      `MONTH`;
gold_sql: SELECT
  MONTH AS `月份`,
  SUM(VOLUME) AS `货运量（吨/月）`
FROM
  hd_nh_od
WHERE
  YEAR = '2020'
  AND O_CITY = '南京'
  AND D_CITY = '南京'
GROUP BY
  MONTH
ORDER BY
  FIELD(
    MONTH,
    '一月',
    '二月',
    '三月',
    '四月',
    '五月',
    '六月',
    '七月',
    '八月',
    '九月',
    '十月',
    '十一月',
    '十二月'
  );
pred_sql: SELECT `MONTH` AS '月份', SUM(`VOLUME`) AS '货运量（吨/月）' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` = '南京城区' AND `D_DISTRICTS` = '南京城区' GROUP BY `MONTH` ORDER BY `MONTH`;
gold_sql: SELECT
  SUM(VOLUME) AS `货运量总和`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区';
pred_sql: SELECT SUM(`VOLUME`) AS `总货运量` FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` LIKE '%南京城区%' AND `D_DISTRICTS` LIKE '%南京城区%';
gold_sql: SELECT
  `CARGO` AS `货物种类`,
  SUM(`VOLUME`) AS `最高运输量（吨）`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
GROUP BY
  `CARGO`
ORDER BY
  `最高运输量（吨）` DESC
LIMIT
  1;
pred_sql: SELECT `CARGO` AS '货种', SUM(`VOLUME`) AS '总货运量' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` LIKE '%南京%' AND `D_DISTRICTS` LIKE '%南京%' GROUP BY `CARGO` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  `MONTH` AS 月份,
  SUM(`VOLUME`) AS `货运量（吨/月)`
FROM
  `hd_nh_od`
WHERE
  `YEAR` = '2020'
  AND `O_CITY` = '南京'
  AND `D_CITY` = '南京'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
GROUP BY
  `MONTH`
ORDER BY
  CAST(`MONTH` AS UNSIGNED);
pred_sql: SELECT `MONTH`, SUM(`VOLUME`) AS '货运量总和' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` = '南京城区' AND `D_DISTRICTS` = '南京城区' GROUP BY `MONTH`;
gold_sql: SELECT
  '上半年' AS `时间段`,
  SUM(VOLUME) AS `货运量（吨/月）`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `O_CITY` = '南京'
  AND `D_CITY` = '南京'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
  AND `MONTH` BETWEEN 01 AND 06
UNION ALL
SELECT
  '下半年' AS `时间段`,
  SUM(VOLUME) AS `货运量（吨/月）`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `O_CITY` = '南京'
  AND `D_CITY` = '南京'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
  AND `MONTH` BETWEEN 07 AND 12
pred_sql: SELECT SUM(CASE WHEN `MONTH` IN ('01', '02', '03', '04', '05', '06') THEN `VOLUME` ELSE 0 END) AS `上半年货运量`, SUM(CASE WHEN `MONTH` IN ('07', '08', '09', '10', '11', '12') THEN `VOLUME` ELSE 0 END) AS `下半年货运量`, (SUM(CASE WHEN `MONTH` IN ('07', '08', '09', '10', '11', '12') THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `MONTH` IN ('01', '02', '03', '04', '05', '06') THEN `VOLUME` ELSE 0 END)) AS `变化量` FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` = '南京城区' AND `D_DISTRICTS` = '南京城区';
gold_sql: SELECT
  `MONTH` AS `月份`,
  SUM(`VOLUME`) AS `货运量（吨/月）`
FROM
  `hd_nh_od`
WHERE
  `YEAR` = '2020'
  AND `O_CITY` = '南京'
  AND `D_CITY` = '南京'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
GROUP BY
  `MONTH`
ORDER BY
  `MONTH`
pred_sql: SELECT SUM(CASE WHEN `MONTH` IN ('1', '2', '3', '4', '5', '6') THEN `VOLUME` ELSE 0 END) AS `上半年货运量`, SUM(CASE WHEN `MONTH` IN ('7', '8', '9', '10', '11', '12') THEN `VOLUME` ELSE 0 END) AS `下半年货运量`, (SUM(CASE WHEN `MONTH` IN ('7', '8', '9', '10', '11', '12') THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `MONTH` IN ('1', '2', '3', '4', '5', '6') THEN `VOLUME` ELSE 0 END)) AS `增长量`, CASE WHEN (SUM(CASE WHEN `MONTH` IN ('7', '8', '9', '10', '11', '12') THEN `VOLUME` ELSE 0 END) - SUM(CASE WHEN `MONTH` IN ('1', '2', '3', '4', '5', '6') THEN `VOLUME` ELSE 0 END)) > 0 THEN '是' ELSE '否' END AS `是否增长` FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` = '南京城区' AND `D_DISTRICTS` = '南京城区';
gold_sql: SELECT
  DIRECTION AS `航向`,
  SUM(VOLUME) AS `货运量（吨/月)`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `O_DISTRICTS` = '南京城区'
  AND `D_DISTRICTS` = '南京城区'
GROUP BY
  DIRECTION;
pred_sql: SELECT `DIRECTION` AS '航向', SUM(`VOLUME`) AS '货运量（吨/月）' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `O_DISTRICTS` LIKE '%南京城区%' AND `D_DISTRICTS` LIKE '%南京城区%' GROUP BY `DIRECTION`;
gold_sql: SELECT
  `O_DISTRICTS` AS `起点区县`,
  `D_DISTRICTS` AS `终点区县`,
  `VOLUME` AS `货运量（吨/月）`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
  AND `MONTH` = 4
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS` AS '起点区县', `D_DISTRICTS` AS '终点区县', SUM(`VOLUME`) AS '总货运量' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `MONTH` = '04' GROUP BY `O_DISTRICTS`, `D_DISTRICTS` ORDER BY `总货运量` DESC LIMIT 1;
gold_sql: SELECT  
  id AS 编号,  
  YEAR AS 年份,  
  MONTH AS 月份,  
  O_DISTRICTS AS 起点区县,  
  D_DISTRICTS AS 终点区县,  
  O_CITY AS 起点城市,  
  D_CITY AS 终点城市,   
  DIRECTION AS 航向  
FROM  
  hd_nh_od  
WHERE  
  VOLUME = 0  
  AND CONCAT(YEAR, '-', LPAD(MONTH, 2, '0')) BETWEEN '2020-01' AND '2020-12';  
pred_sql: SELECT `id`, `YEAR`, `MONTH`, `O_DISTRICTS`, `D_DISTRICTS`, `O_CITY`, `D_CITY`, `DIRECTION`, `CARGO`, `VOLUME` FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `VOLUME` = 0;
gold_sql: SELECT
  `CARGO` AS `货种`,
  SUM(`VOLUME`) AS `总货运量`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
GROUP BY
  `CARGO`
ORDER BY
  `总货运量` DESC
LIMIT
  1;
pred_sql: SELECT `CARGO` AS '货种', SUM(`VOLUME`) AS '总货运量' FROM `hd_nh_od` WHERE `YEAR` = '2020' GROUP BY `CARGO` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  SUM(VOLUME) AS `货运总量`
FROM
  hd_nh_od
WHERE
  O_CITY = '南京'
  AND D_CITY = '上海'
  AND YEAR = '2024'
  AND MONTH = '04';
pred_sql: SELECT SUM(`VOLUME`) AS `上个月南京到上海的水路货运总量` FROM `hd_nh_od` WHERE `O_CITY` = '南京' AND `D_CITY` = '上海' AND `YEAR` = '2024' AND `MONTH` = '04';
gold_sql: SELECT
  (
    CASE
      WHEN `MONTH` IN ('01', '02', '03') THEN '第一季度'
      WHEN `MONTH` IN ('04', '05', '06') THEN '第二季度'
      WHEN `MONTH` IN ('07', '08', '09') THEN '第三季度'
      WHEN `MONTH` IN ('10', '11', '12') THEN '第四季度'
    END
  ) AS `季度`,
  SUM(`VOLUME`) AS `总货运量`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
GROUP BY
  `季度`
ORDER BY
  `总货运量` DESC
LIMIT
  1;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`VOLUME`) AS '季度货运总量' FROM hd_nh_od WHERE `YEAR` = '2020' GROUP BY `YEAR`, `MONTH` ORDER BY `季度货运总量` DESC LIMIT 1;
gold_sql: SELECT
  DIRECTION AS '方向',
  SUM(VOLUME) AS '货运量（吨）'
FROM
  hd_nh_od
WHERE
  MONTH = 5
  AND YEAR = '2024'
GROUP BY
  DIRECTION
ORDER BY
  SUM(VOLUME) DESC
LIMIT
  1;
pred_sql: SELECT `DIRECTION` AS '航向', SUM(`VOLUME`) AS '总货运量' FROM hd_nh_od WHERE `YEAR` = YEAR(CURDATE()) AND `MONTH` = MONTH(CURDATE()) GROUP BY `DIRECTION` ORDER BY SUM(`VOLUME`) DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS `起点城市`,
  SUM(VOLUME) AS `发送货运量`
FROM
  hd_nh_od
WHERE
  YEAR = '2020'
  AND MONTH IN (1, 2, 3, 4, 5)
GROUP BY
  O_CITY
ORDER BY
  `发送货运量` DESC
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '城市', SUM(`VOLUME`) AS '总货运量' FROM `hd_nh_od` WHERE `YEAR` = '2020' AND `MONTH` IN ('01', '02', '03', '04', '05') GROUP BY `D_CITY` ORDER BY `总货运量` DESC LIMIT 1;
gold_sql: SELECT
  SUM(`VOLUME`) AS `总货运量`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020';
pred_sql: SELECT SUM(`VOLUME`) AS '2020年水路货运总量' FROM `hd_nh_od` WHERE `YEAR` = '2020';
gold_sql: SELECT
  `O_DISTRICTS` AS `起点区县`
FROM
  `hd_nh_od`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `hd_nh_od`
  )
  AND `MONTH` = 5
  AND `VOLUME` > 100;
pred_sql: SELECT `O_DISTRICTS` AS '起点区县' FROM hd_nh_od WHERE `MONTH` = DATE_FORMAT(CURDATE(), '%Y-%m') AND `VOLUME` > 100;
gold_sql: SELECT DISTINCT
  `CARGO` AS `货物类别`
FROM
  hd_nh_od
WHERE
  `CARGO` NOT IN(
    SELECT DISTINCT
      `CARGO`
    FROM
      hd_nh_od
    WHERE
      CONCAT(`YEAR`, `MONTH`) BETWEEN '202311' AND '202405'
  )
pred_sql: SELECT `CARGO` AS '货种' FROM hd_nh_od WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-11-27' AND '2024-05-27' GROUP BY `CARGO` HAVING COUNT(*) = 0;
gold_sql: SELECT
  `id` AS 编号,
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  `O_DISTRICTS` AS `起点区县`,
  `D_DISTRICTS` AS `终点区县`,
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  `DIRECTION` AS `航向`,
  `CARGO` AS `货种`,
  `VOLUME` AS `货运量（吨/月)`
FROM
  hd_nh_od
WHERE
  `YEAR` = '2020'
ORDER BY
  `VOLUME` DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS`, `D_DISTRICTS`, `O_CITY`, `D_CITY`, `DIRECTION`, `CARGO`, SUM(`VOLUME`) AS '总货运量' FROM `hd_nh_od` WHERE `YEAR` = '2020' GROUP BY `O_DISTRICTS`, `D_DISTRICTS`, `O_CITY`, `D_CITY`, `DIRECTION`, `CARGO` ORDER BY `总货运量` DESC LIMIT 1;
gold_sql: SELECT
  SUM(HANGBL) AS `航班数量（个）`
FROM
  hk_kylx
WHERE
  LUXQDCSMC = '成都'
  AND LUXZDCSMC = '无锡'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hk_kylx
  )
pred_sql: SELECT SUM(`HANGBL`) AS '航班数量' FROM `hk_kylx` WHERE `LUXQDCSMC` = '成都' AND `LUXZDCSMC` = '无锡';
gold_sql: SELECT  
  SUM(`ZUOWS`) AS `座位数（个）`  
FROM  
  `hk_kylx`  
WHERE  
  `GCRQ` = '2023-11-17'  
  AND `LUXQDCSMC` = '成都'  
  AND `LUXZDCSMC` = '无锡'  
GROUP BY  
  `LUXQDCSMC`,`LUXZDCSMC`;
pred_sql: SELECT `ZUOWS` AS '座位数'  FROM hk_kylx  WHERE `GCRQ` = '2023-11-17' AND `LUXQDCSMC` = '成都' AND `LUXZDCSMC` = '无锡';
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  SUM(`HANGBL`) AS `航班量`
FROM
  `hk_kylx`
WHERE
  `LUXQDCSMC` = '成都'
  AND `LUXZDCSMC` = '无锡'
GROUP BY
  `GCRQ`
HAVING
  SUM(`HANGBL`) = (
    SELECT
      MAX(total_flights)
    FROM
      (
        SELECT
          SUM(`HANGBL`) AS total_flights
        FROM
          `hk_kylx`
        WHERE
          `LUXQDCSMC` = '成都'
          AND `LUXZDCSMC` = '无锡'
        GROUP BY
          `GCRQ`
      ) AS subquery
  )
ORDER BY
  `航班量` DESC;
pred_sql: SELECT     `GCRQ` AS `观测日期`,     SUM(`HANGBL`) AS `航班量`   FROM     `hk_kylx`   WHERE     `LUXQDCSMC` = '成都'     AND `LUXZDCSMC` = '无锡'   GROUP BY `GCRQ`   ORDER BY     SUM(`HANGBL`) DESC  LIMIT 1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  SUM(`ZUOWS`) AS `座位数（个）`
FROM
  `hk_kylx`
WHERE
  `LUXQDCSMC` = '无锡'
  AND `LUXZDCSMC` = '成都'
GROUP BY
  `GCRQ`
HAVING
  SUM(`ZUOWS`) = (
    SELECT
      MAX(total_seats)
    FROM
      (
        SELECT
          SUM(`ZUOWS`) AS total_seats
        FROM
          `hk_kylx`
        WHERE
          `LUXQDCSMC` = '无锡'
          AND `LUXZDCSMC` = '成都'
        GROUP BY
          `GCRQ`
      ) AS subquery
  )
ORDER BY
  `座位数（个）` DESC;
pred_sql: SELECT `GCRQ` AS '日期', SUM(`ZUOWS`) AS '座位数' FROM hk_kylx WHERE `LUXQDCSMC` = '无锡' AND `LUXZDCSMC` = '成都' GROUP BY `GCRQ` ORDER BY SUM(`ZUOWS`) DESC LIMIT 1;
gold_sql: SELECT
  SUM(HANGBL) AS `成都到无锡航班量`
FROM
  hk_kylx
WHERE
  LUXQDCSMC = '成都'
  AND LUXZDCSMC = '无锡'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      hk_kylx
  );
pred_sql: SELECT SUM(`HANGBL`) AS '航班量' FROM `hk_kylx` WHERE `LUXQDCSMC` = '成都' AND `LUXZDCSMC` = '无锡' AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM `hk_kylx`);
gold_sql: SELECT  
  MAX(CASE WHEN GCRQ = '2023-11-17' THEN HANGBANZL ELSE NULL END) AS `2023年11月17日航班量`,  
  MAX(CASE WHEN GCRQ = '2023-11-16' THEN HANGBANZL ELSE NULL END) AS `2023年11月16日航班量`,  
  (  
    MAX(CASE WHEN GCRQ = '2023-11-17' THEN HANGBANZL ELSE NULL END) -  
    MAX(CASE WHEN GCRQ = '2023-11-16' THEN HANGBANZL ELSE NULL END)  
  ) AS `航班量变化`  
FROM  
  (  
    SELECT  
      GCRQ,  
      SUM(HANGBL) AS HANGBANZL  
    FROM  
      hk_kylx  
    WHERE  
      GCRQ IN ('2023-11-17', '2023-11-16')  
      AND LUXQDCSMC = '成都'  
      AND LUXZDCSMC = '无锡'  
    GROUP BY  
      GCRQ  
  ) AS temp;
pred_sql: SELECT      SUM(CASE WHEN `GCRQ` = '2023-11-17' THEN `HANGBL` ELSE 0 END) AS `2023年11月17日航班量`,     SUM(CASE WHEN `GCRQ` = '2023-11-16' THEN `HANGBL` ELSE 0 END) AS `2023年11月16日航班量`,     (SUM(CASE WHEN `GCRQ` = '2023-11-17' THEN `HANGBL` ELSE 0 END) - SUM(CASE WHEN `GCRQ` = '2023-11-16' THEN `HANGBL` ELSE 0 END)) AS `航班量变化` FROM      hk_kylx WHERE      (`LUXQDCSMC` = '成都' AND `LUXZDCSMC` = '无锡')     AND (`GCRQ` = '2023-11-17' OR `GCRQ` = '2023-11-16');
gold_sql: SELECT
  SUM(HANGBL) AS `航班总量`
FROM
  hk_kylx
WHERE
  GCRQ = '2023-11-17'
  AND (
    LUXQDCSMC LIKE '%南京%'
    OR LUXQDCSMC LIKE '%无锡%'
    OR LUXQDCSMC LIKE '%徐州%'
    OR LUXQDCSMC LIKE '%常州%'
    OR LUXQDCSMC LIKE '%苏州%'
    OR LUXQDCSMC LIKE '%南通%'
    OR LUXQDCSMC LIKE '%连云港%'
    OR LUXQDCSMC LIKE '%淮安%'
    OR LUXQDCSMC LIKE '%盐城%'
    OR LUXQDCSMC LIKE '%扬州%'
    OR LUXQDCSMC LIKE '%镇江%'
    OR LUXQDCSMC LIKE '%泰州%'
    OR LUXQDCSMC LIKE '%宿迁%'
  );
pred_sql: SELECT SUM(`HANGBL`) AS `航班总量` FROM `hk_kylx` WHERE `GCRQ` = '2023-11-17' AND `LUXQDCSMC` LIKE '%江苏%';
gold_sql: SELECT  
  `LUXQDCSMC` AS '路线起点城市名称',  
  `LUXZDCSMC` AS '路线终点城市名称',  
  SUM(`ZUOWS`) AS '座位数（个）'  
FROM  
  `hk_kylx`  
WHERE  
  `GCRQ` = '2023-11-17'  
GROUP BY `LUXQDCSMC`,`LUXZDCSMC`  
ORDER BY   
  SUM(`ZUOWS`) DESC limit 1;
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市', MAX(`ZUOWS`) AS '最大座位数' FROM hk_kylx WHERE `GCRQ` = '2023-11-17' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `最大座位数` DESC LIMIT 1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  SUM(`HANGBL`) AS `航班量`
FROM
  `hk_kylx`
WHERE
  `LUXQDCSMC` = '成都'
  AND `LUXZDCSMC` = '无锡'
  AND `GCRQ` BETWEEN '2023-11-13' AND '2023-11-19'
GROUP BY 	GCRQ,`LUXQDCSMC`,`LUXZDCSMC`
ORDER BY
  `GCRQ` ASC;
pred_sql: SELECT `GCRQ` AS '观测日期', SUM(`HANGBL`) AS '航班量' FROM hk_kylx WHERE `LUXQDCSMC` = '成都' AND `LUXZDCSMC` = '无锡' AND `GCRQ` BETWEEN '2023-11-13' AND '2023-11-19' GROUP BY `GCRQ`;
gold_sql: SELECT
  ROUND(
    (
      SUM(
        CASE
          WHEN `LUXQDCSMC` = '成都'
          AND `LUXZDCSMC` = '无锡' THEN `ZUOWS`
          ELSE 0
        END
      ) / SUM(`ZUOWS`)
    ) * 100,
    2
  ) AS `座位数百分比（%）`
FROM
  `hk_kylx`
WHERE
  `GCRQ` = '2023-11-17'
  AND `LUXZDCSMC` = '无锡';
pred_sql: SELECT      (SUM(CASE WHEN `LUXQDCSMC` = '成都' AND `LUXZDCSMC` = '无锡' THEN `ZUOWS` ELSE 0 END) / SUM(`ZUOWS`)) * 100 AS `成都至无锡航班座位数占比` FROM      hk_kylx WHERE      `GCRQ` = '2023-11-17';
gold_sql: SELECT
  LUXQDCSMC AS '路线起点城市名称',
  LUXZDCSMC AS '路线终点城市名称',
  SUM(HANGBL) AS '航班量'
FROM
  hk_kylx
WHERE
  GCRQ BETWEEN '2024-05-20' AND '2024-05-26'
GROUP BY
  LUXQDCSMC,
  LUXZDCSMC
ORDER BY
  SUM(HANGBL) DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`, SUM(`HANGBL`) AS '航班量' FROM hk_kylx WHERE `GCRQ` BETWEEN '2024-05-20' AND '2024-05-26' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY SUM(`HANGBL`) DESC LIMIT 1;
gold_sql: SELECT
  CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS '航线',
  SUM(HANGBL) AS '航班数量'
FROM
  hk_kylx
WHERE
  GCRQ BETWEEN '2024-04-27' AND '2024-05-26'
GROUP BY
  LUXQDCSMC,
  LUXZDCSMC
HAVING
  SUM(HANGBL) > 10;
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市', SUM(`HANGBL`) AS '航班量' FROM hk_kylx WHERE `GCRQ` BETWEEN '2024-04-27' AND '2024-05-26' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` HAVING SUM(`HANGBL`) > 10;
gold_sql: SELECT
   GCRQ AS 观测日期,
  LUXQDCSMC AS 起点城市,
  LUXZDCSMC AS 终点城市,
  SUM(ZUOWS) AS 总座位数
FROM
  hk_kylx
GROUP BY
  GCRQ,
  LUXQDCSMC,
  LUXZDCSMC
ORDER BY
  总座位数 DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`, SUM(`ZUOWS`) AS '总座位数' FROM hk_kylx WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM hk_kylx) GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `总座位数` DESC LIMIT 1;
gold_sql: SELECT  
  `起点城市`,  
  `终点城市`,  
  AVG(`航班增长量`) AS `平均航班增长量`  
FROM (  
  SELECT  
    `起点城市`,  
    `终点城市`,  
    `GCRQ`,  
    `航班量`,  
    LEAD(`航班量`) OVER (  
      PARTITION BY  
        `起点城市`,  
        `终点城市`  
      ORDER BY  
        `GCRQ`  
    ) - `航班量` AS `航班增长量`  
  FROM (  
    SELECT  
      GCRQ,  
      LUXQDCSMC AS `起点城市`,  
      LUXZDCSMC AS `终点城市`,  
      SUM(HANGBL) AS `航班量`  
    FROM  
      hk_kylx  
    WHERE  
      GCRQ BETWEEN '2023-11-01' AND '2023-11-30'  
    GROUP BY  
      GCRQ,  
      LUXQDCSMC,  
      LUXZDCSMC  
  ) AS DailyFlight  
) AS DailyGrowth  
WHERE  
  `航班增长量` IS NOT NULL  
GROUP BY  
  `起点城市`,  
  `终点城市`  
ORDER BY  
  `平均航班增长量` DESC  
LIMIT 1;
pred_sql: SELECT          `LUXQDCSMC`,          `LUXZDCSMC`,          DATE(`GCRQ`) AS `Date`,          SUM(`HANGBL`) AS `TotalFlights`     FROM          hk_kylx     WHERE          `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30'     GROUP BY          `LUXQDCSMC`,          `LUXZDCSMC`,          DATE(`GCRQ`) ), DailyGrowth AS (     SELECT          `LUXQDCSMC`,          `LUXZDCSMC`,          `Date`,          `TotalFlights`,         LAG(`TotalFlights`) OVER (PARTITION BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `Date`) AS `PreviousDayFlights`,         (`TotalFlights` - LAG(`TotalFlights`) OVER (PARTITION BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `Date`)) AS `DailyGrowth`     FROM          MonthlyFlights ), AverageGrowth AS (     SELECT          `LUXQDCSMC`,          `LUXZDCSMC`,          AVG(`DailyGrowth`) AS `AvgDailyGrowth`     FROM          DailyGrowth     WHERE          `PreviousDayFlights` IS NOT NULL     GROUP BY          `LUXQDCSMC`,          `LUXZDCSMC` ) SELECT      `LUXQDCSMC` AS `起点城市`,      `LUXZDCSMC` AS `终点城市`,      MAX(`AvgDailyGrowth`) AS `最大平均日增长量` FROM      AverageGrowth GROUP BY      `LUXQDCSMC`,      `LUXZDCSMC` ORDER BY      `最大平均日增长量` DESC LIMIT 1;
gold_sql: SELECT
  LUXQDCSMC AS '路线起点城市名称',
  LUXZDCSMC AS '路线终点城市名称',
  sum(HANGBL) AS '航班量'
FROM
  hk_kylx

WHERE
  GCRQ = '2024-05-19'
GROUP BY LUXQDCSMC,LUXZDCSMC;
pred_sql: SELECT `LUXQDCSMC` AS '路线起点城市名称', `LUXZDCSMC` AS '路线终点城市名称', SUM(`HANGBL`) AS '航班量' FROM hk_kylx WHERE `GCRQ` = '2024-05-19' GROUP BY `LUXQDCSMC`, `LUXZDCSMC`;
gold_sql: SELECT  
  `起点城市`,  
  `终点城市`,  
  round(AVG(`总座位数`),0) AS `日平均座位数`  
FROM (  
    SELECT  
      LUXQDCSMC AS `起点城市`,  
      LUXZDCSMC AS `终点城市`,  
      GCRQ,  
      SUM(ZUOWS) AS `总座位数`  
    FROM  
      hk_kylx  
    WHERE  
      GCRQ BETWEEN '2023-11-01' AND '2023-11-30'  
    GROUP BY  
      LUXQDCSMC,  
      LUXZDCSMC,  
      GCRQ  
) AS TempTable  
GROUP BY  
  `起点城市`,  
  `终点城市`  
HAVING  
  AVG(`总座位数`) > 200;
pred_sql: SELECT      `LUXQDCSMC` AS '起点城市',      `LUXZDCSMC` AS '终点城市' FROM      hk_kylx WHERE      `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY      `LUXQDCSMC`, `LUXZDCSMC` HAVING      AVG(`ZUOWS`) > 200;
gold_sql: SELECT  
  `LUXQDCSMC` AS `路线起点城市名称`,  
  `LUXZDCSMC` AS `路线终点城市名称`,  
  SUM(`HANGBL`) AS `航班量`  
FROM  
  `hk_kylx`  
WHERE  
  YEAR(`GCRQ`) = 2023  
GROUP BY  
 `LUXQDCSMC`, `LUXZDCSMC`  
ORDER BY  
  `航班量` DESC   
LIMIT  
  3;
pred_sql: SELECT `LUXQDCSMC` AS '起点城市', `LUXZDCSMC` AS '终点城市', SUM(`HANGBL`) AS '航班量' FROM hk_kylx WHERE `GCRQ` BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY SUM(`HANGBL`) DESC LIMIT 3;
gold_sql: SELECT
  `LUXQDCSMC` as `路线起点城市名称`,
  `LUXZDCSMC` as `路线终点城市名称`,
  `HANGBL` as `航班量`,
  (
    `HANGBL` / (
      SELECT
        SUM(HANGBL)
      FROM
        hk_kylx
      WHERE
        `GCRQ` = '2023-11-19'
    )
  ) * 100 as `航班量占比`
FROM
  hk_kylx
WHERE
  `GCRQ` = '2023-11-19'
ORDER BY
  `航班量占比` DESC
LIMIT
  1;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`, MAX(`HANGBL`) AS '最高航班量' FROM hk_kylx WHERE `GCRQ` = '2023-11-19' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `最高航班量` DESC LIMIT 1;
gold_sql: SELECT  
  CONCAT(LUXQDCSMC, ' - ', LUXZDCSMC) AS `航线`,  
  (  
    SELECT  
      VARIANCE(DailyFlightCount)  
    FROM (  
      SELECT  
        COUNT(HANGBL) AS DailyFlightCount  
      FROM  
        hk_kylx AS inner_hk_kylx  
      WHERE  
        inner_hk_kylx.LUXQDCSMC = outer_hk_kylx.LUXQDCSMC AND  
        inner_hk_kylx.LUXZDCSMC = outer_hk_kylx.LUXZDCSMC AND  
        inner_hk_kylx.GCRQ BETWEEN '2023-11-01' AND '2023-11-30'  
      GROUP BY  
        inner_hk_kylx.GCRQ  
    ) AS DailyFlightCounts  
  ) AS `航班量方差`  
FROM  
  hk_kylx AS outer_hk_kylx  
WHERE  
  outer_hk_kylx.GCRQ BETWEEN '2023-11-01' AND '2023-11-30'  
GROUP BY  
  outer_hk_kylx.LUXQDCSMC,  
  outer_hk_kylx.LUXZDCSMC  
ORDER BY  
  `航班量方差` ASC;
pred_sql: SELECT `LUXQDCSMC`, `LUXZDCSMC`, VAR_POP(`HANGBL`) AS '方差' FROM hk_kylx WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY `LUXQDCSMC`, `LUXZDCSMC` ORDER BY `方差` ASC LIMIT 1;
gold_sql: SELECT
  hk_kylx.LUXQDCSMC as `起点城市`,
  hk_kylx.LUXZDCSMC as `终点城市`,
  SUM(hk_kylx.HANGBL) as `2023年11月19日航班量`,
  (
    SELECT
      SUM(HANGBL)
    FROM
      hk_kylx AS prev
    WHERE
      prev.GCRQ = '2023-11-18'
      AND prev.LUXQDCSMC = hk_kylx.LUXQDCSMC
      AND prev.LUXZDCSMC = hk_kylx.LUXZDCSMC
  ) as `2023年11月18日航班量`
FROM
  hk_kylx
WHERE
  hk_kylx.GCRQ = '2023-11-19'
GROUP BY
  hk_kylx.LUXQDCSMC,
  hk_kylx.LUXZDCSMC
HAVING
  `2023年11月19日航班量` < (
    SELECT
      SUM(HANGBL)
    FROM
      hk_kylx AS prev
    WHERE
      prev.GCRQ = '2023-11-18'
      AND prev.LUXQDCSMC = hk_kylx.LUXQDCSMC
      AND prev.LUXZDCSMC = hk_kylx.LUXZDCSMC
  );
pred_sql: SELECT      `LUXQDCSMC` AS '路线起点城市名称',      `LUXZDCSMC` AS '路线终点城市名称',      SUM(CASE WHEN `GCRQ` = '2023-11-19' THEN `HANGBL` ELSE 0 END) AS '2023年11月19日航班量',      SUM(CASE WHEN `GCRQ` = '2023-11-18' THEN `HANGBL` ELSE 0 END) AS '2023年11月18日航班量' FROM      hk_kylx GROUP BY      `LUXQDCSMC`,      `LUXZDCSMC` HAVING      SUM(CASE WHEN `GCRQ` = '2023-11-19' THEN `HANGBL` ELSE 0 END) < SUM(CASE WHEN `GCRQ` = '2023-11-18' THEN `HANGBL` ELSE 0 END);
gold_sql: SELECT
  SUM(PASSENGER) AS `旅客总数（人）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND O_PROVINCE = '安徽省'
  AND D_PROVINCE = '江苏省'
  AND D_CITY = '南京市';
pred_sql: SELECT SUM(`PASSENGER`) AS '旅客数量' FROM `tl_od` WHERE `YEAR` = '2018' AND `O_PROVINCE` LIKE '%安徽%' AND `D_CITY` = '南京';
gold_sql: SELECT
  SUM(
    CASE
      WHEN `D_PROVINCE` = '安徽省' THEN `PASSENGER`
      ELSE 0
    END
  ) AS `到安徽省的旅客人数`,
  SUM(
    CASE
      WHEN `D_PROVINCE` != '安徽省' THEN `PASSENGER`
      ELSE 0
    END
  ) AS `到其他省份的旅客人数`
FROM
  `tl_od`
WHERE
  `YEAR` = '2018'
  AND `O_PROVINCE` = '江苏省';
pred_sql: SELECT `O_PROVINCE` AS '起点省份', `D_PROVINCE` AS '终点省份', SUM(`PASSENGER`) AS '旅客人数' FROM `tl_od` WHERE `YEAR` = '2018' AND ((`O_PROVINCE` = '江苏省' AND `D_PROVINCE` = '安徽省') OR (`O_PROVINCE` = '江苏省' AND `D_PROVINCE` != '安徽省')) GROUP BY `O_PROVINCE`, `D_PROVINCE`;
gold_sql: SELECT
  `O_DISTRICTS` AS `起点区县`,
  SUM(`PASSENGER`) AS `旅客人数（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND `O_PROVINCE` = '江苏省'
GROUP BY
  `O_DISTRICTS`
ORDER BY
  SUM(`PASSENGER`) DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS` AS '出发区县', SUM(`PASSENGER`) AS '旅客人数' FROM `tl_od` WHERE `YEAR` = '2018' AND `O_PROVINCE` LIKE '%江苏%' GROUP BY `O_DISTRICTS` ORDER BY SUM(`PASSENGER`) DESC LIMIT 1;
gold_sql: SELECT
  `D_CITY` AS `城市`,
  SUM(`PASSENGER`) AS `客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND `D_PROVINCE` = '江苏省'
GROUP BY
  `D_CITY`
ORDER BY
  SUM(`PASSENGER`) DESC
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '城市', SUM(`PASSENGER`) AS '总客流量' FROM `tl_od` WHERE `YEAR` = '2018' AND `O_PROVINCE` LIKE '%江苏%' GROUP BY `D_CITY` ORDER BY `总客流量` DESC LIMIT 1;
gold_sql: SELECT
  IFNULL(
    SUM(
      CASE
        WHEN `D_PROVINCE` = '安徽省' THEN `PASSENGER`
        ELSE 0
      END
    ) / NULLIF(SUM(`PASSENGER`), 0) * 100,
    0
  ) AS `百分比`
FROM
  `tl_od`
WHERE
  `YEAR` = '2018'
  AND `O_PROVINCE` = '江苏省'
  AND `D_PROVINCE` != '江苏省';
pred_sql: SELECT CONCAT(ROUND((SUM(CASE WHEN `o_province` = '江苏' AND `d_province` = '安徽' THEN `passenger` ELSE 0 END) / SUM(CASE WHEN `o_province` = '江苏' THEN `passenger` ELSE 0 END)) * 100, 2), '%') AS '从江苏省到安徽省的铁路旅客人数占江苏省到其他省份铁路旅客人数的百分比' FROM `tl_od` WHERE `year` = '2018';
gold_sql: SELECT
  (
    SELECT
      SUM(`PASSENGER`)
    FROM
      `tl_od`
    WHERE
      `YEAR` = '2018'
      AND `O_PROVINCE` = '安徽省'
      AND `D_PROVINCE` = '江苏省'
  ) AS `从安徽省到江苏省的旅客人数`,
  (
    SELECT
      SUM(`PASSENGER`)
    FROM
      `tl_od`
    WHERE
      `YEAR` = '2018'
      AND `O_PROVINCE` = '江苏省'
      AND `D_PROVINCE` = '安徽省'
  ) AS `从江苏省到安徽省的旅客人数`;
pred_sql: SELECT SUM(CASE WHEN `O_PROVINCE` = '安徽省' AND `D_PROVINCE` = '江苏省' THEN `PASSENGER` ELSE 0 END) AS '从安徽省到江苏省的旅客人数', SUM(CASE WHEN `O_PROVINCE` = '江苏省' AND `D_PROVINCE` = '安徽省' THEN `PASSENGER` ELSE 0 END) AS '从江苏省到安徽省的旅客人数' FROM `tl_od` WHERE `YEAR` = '2018';
gold_sql: SELECT
  YEAR AS `年份`,
  O_PROVINCE AS `起点省份`,
  D_PROVINCE AS `终点省份`,
  PASSENGER AS `客流量`
FROM
  tl_od
WHERE
  YEAR = '2018'
ORDER BY
  PASSENGER DESC
LIMIT
  1;
pred_sql: SELECT `YEAR`, `O_PROVINCE`, `D_PROVINCE`, `PASSENGER`  FROM `tl_od`  WHERE `YEAR` = '2018'  ORDER BY `PASSENGER` DESC  LIMIT 1;
gold_sql: SELECT
  O_DISTRICTS AS `起点区县`,
  SUM(PASSENGER) AS `总客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND O_PROVINCE = '江苏省'
GROUP BY
  O_DISTRICTS
ORDER BY
  `总客流量（人/月）` DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS` AS '起点区县', SUM(`PASSENGER`) AS '客流量' FROM `tl_od` WHERE `YEAR` = '2018' AND `O_PROVINCE` = '江苏省' GROUP BY `O_DISTRICTS` ORDER BY SUM(`PASSENGER`) DESC LIMIT 1;
gold_sql: SELECT
  `D_CITY` AS `终点城市`,
  SUM(`PASSENGER`) AS `客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
GROUP BY
  `D_CITY`
ORDER BY
  `客流量（人/月）` ASC
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '总客流量' FROM `tl_od` WHERE `YEAR` = '2018' GROUP BY `D_CITY` ORDER BY SUM(`PASSENGER`) ASC LIMIT 1;
gold_sql: SELECT
  `D_CITY` AS `终点城市`,
  SUM(`PASSENGER`) AS `客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
GROUP BY
  `D_CITY`
ORDER BY
  `客流量（人/月）` ASC
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '总客流量' FROM `tl_od` WHERE `YEAR` = '2018' GROUP BY `D_CITY` ORDER BY SUM(`PASSENGER`) ASC LIMIT 1;
gold_sql: SELECT
  `O_DISTRICTS` AS `区县`,
  SUM(`O_PASSENGER`) - SUM(`D_PASSENGER`) AS `客流量差（人/月）`
FROM
  (
    SELECT
      `O_DISTRICTS`,
      `O_CITY`,
      SUM(`PASSENGER`) AS `O_PASSENGER`,
      0 AS `D_PASSENGER`
    FROM
      tl_od
    WHERE
      `YEAR` = '2018'
      AND `O_PROVINCE` = '江苏省'
    GROUP BY
      `O_DISTRICTS`,
      `O_CITY`
    UNION ALL
    SELECT
      `D_DISTRICTS`,
      `D_CITY`,
      0,
      SUM(`PASSENGER`)
    FROM
      tl_od
    WHERE
      `YEAR` = '2018'
      AND `D_PROVINCE` = '江苏省'
    GROUP BY
      `D_DISTRICTS`,
      `D_CITY`
  ) AS subquery
GROUP BY
  `O_DISTRICTS`,
  `O_CITY`
HAVING
  SUM(`O_PASSENGER`) > SUM(`D_PASSENGER`);
pred_sql: SELECT `O_DISTRICTS` AS '区县' FROM tl_od WHERE `YEAR` = '2018' AND `O_PROVINCE` LIKE '%江苏%' AND `PASSENGER` > (SELECT SUM(`PASSENGER`) FROM tl_od WHERE `YEAR` = '2018' AND `D_PROVINCE` LIKE '%江苏%') GROUP BY `O_DISTRICTS`;
gold_sql: SELECT
  `D_CITY` AS `终点城市`,
  SUM(`PASSENGER`) AS `客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  and `D_CITY` is not null
GROUP BY
  `D_CITY`
ORDER BY
  SUM(`PASSENGER`) DESC
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '总客流量' FROM `tl_od` WHERE `YEAR` = '2018' GROUP BY `D_CITY` ORDER BY `总客流量` DESC LIMIT 1;
gold_sql: SELECT
  SUM(PASSENGER) AS `总客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND O_CITY = '南京市'
  AND D_PROVINCE = '江苏省';
pred_sql: SELECT `O_DISTRICTS` AS '起点区县', SUM(`PASSENGER`) AS '总客流量' FROM `tl_od` WHERE `YEAR` = '2018' AND `O_CITY` = '南京市' AND `D_PROVINCE` = '江苏省' GROUP BY `O_DISTRICTS`;
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  SUM(`PASSENGER`) AS `月客流量（人/月）`
FROM
  tl_od
WHERE
  `YEAR` = '2018'
  AND `O_PROVINCE` = '江苏省'
  AND `D_PROVINCE` = '江苏省'
GROUP BY
  `O_CITY`,
  `D_CITY`
HAVING
  SUM(`PASSENGER`) > 100000;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '总客流量' FROM `tl_od` WHERE `YEAR` = '2018' AND `O_PROVINCE` = '江苏省' AND `D_PROVINCE` = '江苏省' GROUP BY `O_CITY`, `D_CITY` HAVING SUM(`PASSENGER`) > 100000;
gold_sql: SELECT
  `D_CITY` AS '终点城市',
  SUM(`PASSENGER`) AS '累计客流量'
FROM
  `tl_od`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `tl_od`
  )
GROUP BY
  `D_CITY`
ORDER BY
  SUM(`PASSENGER`) ASC
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '累计客流量' FROM `tl_od` GROUP BY `D_CITY` ORDER BY SUM(`PASSENGER`) ASC LIMIT 1;
gold_sql: SELECT
  SUM(OD) AS '2022年涟水县年度总OD量'
FROM
  tl_od_sjxl
WHERE
  `YEAR` = '2022'
  AND `O_DISTRICTS` = '涟水县';
pred_sql: SELECT SUM(`OD`) AS '2022年涟水县作为起点城市的铁路年度总OD量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' AND `O_CITY` LIKE '%涟水%';
gold_sql: SELECT
  `OD` AS `OD量（人/月）`
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '1'
  AND `O_DISTRICTS` = '涟水县'
  AND `D_DISTRICTS` = '丹阳市'
pred_sql: SELECT SUM(`OD`) AS '2022年1月涟水县到丹阳市之间的铁路OD量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' AND `MONTH` = '01' AND `O_DISTRICTS` LIKE '%涟水%' AND `D_CITY` LIKE '%丹阳%';
gold_sql: SELECT
  `MONTH` as `月份`,
  SUM(OD) as `人流数量`
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2022'
  AND `D_CITY` = '镇江市'
GROUP BY
  `MONTH`;
pred_sql: SELECT `MONTH`, SUM(`OD`) AS '铁路客流数量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' AND `D_CITY` LIKE '%镇江%' GROUP BY `MONTH`;
gold_sql: SELECT
  SUM(`OD`) AS '2022年1月涟水县OD总量'
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2022'
  AND `MONTH` = '1'
  AND (
    `O_DISTRICTS` = '涟水县'
    OR `D_DISTRICTS` = '涟水县'
  )
pred_sql: SELECT SUM(`od`) AS '2022年1月涟水县铁路OD总量' FROM `tl_od_sjxl` WHERE `year` = '2022' AND `month` = '01' AND (`o_districts` LIKE '%涟水%' OR `d_districts` LIKE '%涟水%');
gold_sql: SELECT
  SUM(OD) AS `人流数量`
FROM
  tl_od_sjxl
WHERE
  YEAR = '2022'
  AND MONTH IN (1, 2, 3)
  AND O_CITY = '淮安市'
  AND D_CITY = '镇江市';
pred_sql: SELECT SUM(`OD`) AS '2022年第一季度从淮安市到镇江市的铁路客流数量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' AND `MONTH` IN ('01', '02', '03') AND `O_CITY` LIKE '%淮安%' AND `D_CITY` LIKE '%镇江%';
gold_sql: SELECT
  MONTH AS `月份`,
  sum(OD) AS `人流数量（人/月）`
FROM
  tl_od_sjxl
WHERE
  YEAR = '2022'
  AND O_CITY = '淮安市'
  AND D_CITY = '镇江市'
GROUP BY
  MONTH;
pred_sql: SELECT `MONTH` AS '月份', SUM(`OD`) AS '淮安市到镇江市的铁路人流数量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' AND `O_CITY` LIKE '%淮安%' AND `D_CITY` LIKE '%镇江%' GROUP BY `MONTH`;
gold_sql: SELECT
  SUM(OD) AS `人流总量`
FROM
  tl_od_sjxl
WHERE
  YEAR = '2022'
  AND MONTH IN ('1', '2', '3')
  AND O_DISTRICTS = '涟水县'
  AND D_DISTRICTS = '丹阳市';
pred_sql: SELECT SUM(`OD`) AS '2022年第一季度涟水县到丹阳市的铁路客流总量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' AND `MONTH` IN ('01', '02', '03') AND `O_DISTRICTS` LIKE '%涟水%' AND `D_CITY` LIKE '%丹阳%';
gold_sql: SELECT
  `O_DISTRICTS` AS `区县`,
  SUM(`OD`) AS `出发量（人/月）`
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2022'
GROUP BY
  `O_DISTRICTS`
ORDER BY
  `出发量（人/月）` DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS` AS '区县', SUM(`OD`) AS '总出发量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' GROUP BY `O_DISTRICTS` ORDER BY `总出发量` DESC LIMIT 1;
gold_sql: SELECT
  t1.YEAR AS 年份,
  t1.MONTH AS `最繁忙月份`,
  t2.`OD量（人/月）` AS `涟水县到丹阳市铁路出发量`
FROM
  (
    SELECT
      YEAR,
      MONTH,
      SUM(OD) AS 总OD量
    FROM
      tl_od_sjxl
    GROUP BY
      YEAR,
      MONTH
    ORDER BY
      总OD量 DESC
    LIMIT
      1
  ) t1
  LEFT JOIN (
    SELECT
      `YEAR`,
      `MONTH`,
      `OD` AS `OD量（人/月）`
    FROM
      tl_od_sjxl
    WHERE
      `O_DISTRICTS` = '涟水县'
      AND `D_DISTRICTS` = '丹阳市'
  ) t2 ON t1.YEAR = t2.YEAR
  AND t1.MONTH = t2.MONTH
LIMIT
  1;
pred_sql: SELECT `MONTH`, SUM(`OD`) AS '出发量' FROM `tl_od_sjxl` WHERE `O_DISTRICTS` LIKE '%涟水县%' AND `D_CITY` LIKE '%丹阳市%' GROUP BY `MONTH` ORDER BY SUM(`OD`) DESC LIMIT 1;
gold_sql: SELECT
  `O_CITY` AS '城市',
  AVG(`OD`) AS '平均出发量'
FROM
  `tl_od_sjxl`
GROUP BY
  `O_CITY`
ORDER BY
  平均出发量 DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '城市', AVG(`OD`) AS '平均出发量' FROM `tl_od_sjxl` GROUP BY `O_CITY` ORDER BY AVG(`OD`) DESC LIMIT 1;
gold_sql: SELECT  
  s.`O_CITY` AS '起点城市',  
  s.`O_DISTRICTS` AS '起点区县',  
  SUM(s.`OD`) AS '出发量',  
  a.区县月平均量  
FROM  
  (SELECT  
    `YEAR`,  
    `MONTH`,  
    `O_CITY`,  
    `O_DISTRICTS`,  
    `OD`  
  FROM  
    `tl_od_sjxl`) s  
JOIN  
  (SELECT  
    d.`YEAR`,  
    d.`MONTH`,  
    d.`O_DISTRICTS`,  
    AVG(d.区县总量) AS 区县月平均量  
  FROM  
    (SELECT  
      `YEAR`,  
      `MONTH`,  
      `O_DISTRICTS`,  
      SUM(`OD`) AS 区县总量  
    FROM  
      `tl_od_sjxl`  
    GROUP BY  
      `YEAR`,  
      `MONTH`,  
      `O_DISTRICTS`) d  
  GROUP BY  
    d.`YEAR`,  
    d.`MONTH`,  
    d.`O_DISTRICTS`) a  
ON s.`YEAR` = a.`YEAR` AND s.`MONTH` = a.`MONTH` AND s.`O_DISTRICTS` = a.`O_DISTRICTS`  
GROUP BY  
  s.`YEAR`,  
  s.`MONTH`,  
  s.`O_CITY`,  
  s.`O_DISTRICTS`,  
  a.区县月平均量  
HAVING  
  SUM(s.`OD`) > a.区县月平均量;
pred_sql: SELECT      `YEAR`,      `MONTH`,      `O_DISTRICTS`,      `O_CITY`,      SUM(`OD`) AS `总出发量` FROM      tl_od_sjxl GROUP BY      `YEAR`,      `MONTH`,      `O_DISTRICTS`,      `O_CITY` HAVING      SUM(`OD`) > (         SELECT              AVG(`月出发量`)         FROM (             SELECT                  `YEAR`,                  `MONTH`,                  SUM(`OD`) AS `月出发量`             FROM                  tl_od_sjxl             GROUP BY                  `YEAR`,                  `MONTH`         ) AS `月度统计`     );
gold_sql: SELECT
  O_CITY AS 起点城市,
  D_CITY AS 终点城市,
  SUM(SUM_OD) AS OD总量,
  SQRT(SUM(POW(SUM_OD - AVG_OD, 2)) / COUNT(*)) AS OD标准差
FROM
  (
    SELECT
      O_CITY,
      D_CITY,
      SUM_OD,
      (
        SELECT
          AVG(SUM_OD_inner)
        FROM
          (
            SELECT
              SUM(OD) AS SUM_OD_inner
            FROM
              tl_od_sjxl inner_table
            WHERE
              inner_table.O_CITY = outer_table.O_CITY
              AND inner_table.D_CITY = outer_table.D_CITY
              AND CONCAT(inner_table.YEAR, '-', inner_table.MONTH, '-01') BETWEEN '2024-01-17' AND '2024-06-17'
            GROUP BY
              inner_table.YEAR,
              inner_table.MONTH
          ) AS avg_subquery
      ) AS AVG_OD
    FROM
      (
        SELECT
          YEAR,
          MONTH,
          O_CITY,
          D_CITY,
          SUM(OD) AS SUM_OD
        FROM
          tl_od_sjxl
        WHERE
          CONCAT(YEAR, '-', MONTH, '-01') BETWEEN '2024-01-17' AND '2024-06-17'
        GROUP BY
          YEAR,
          MONTH,
          O_CITY,
          D_CITY
      ) AS outer_table
  ) AS MonthlySums
GROUP BY
  O_CITY,
  D_CITY
ORDER BY
  OD标准差 ASC
LIMIT
  1;
pred_sql: SELECT `O_CITY`, MIN(STDDEV(`OD`)) AS `波动最小值` FROM `tl_od_sjxl` WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-01-17' AND '2024-06-17' GROUP BY `O_CITY` ORDER BY `波动最小值` ASC LIMIT 1;
gold_sql: SELECT
  a.O_DISTRICTS AS '起点区县',
  a.OD AS '当前铁路出发量',
  b.OD AS '前一年铁路出发量',
  (a.OD - b.OD) AS '出发量增长'
FROM
  (
    SELECT
      O_DISTRICTS,
      OD
    FROM
      tl_od_sjxl
    WHERE
      YEAR = '2023'
      AND MONTH = '05'
      AND D_CITY = '丹阳市'
  ) a
  INNER JOIN (
    SELECT
      O_DISTRICTS,
      OD
    FROM
      tl_od_sjxl
    WHERE
      YEAR = '2022'
      AND MONTH = '05'
      AND D_CITY = '丹阳市'
  ) b ON a.O_DISTRICTS = b.O_DISTRICTS
ORDER BY
  a.OD - b.OD DESC
LIMIT
  1;
pred_sql: SELECT `O_DISTRICTS` AS '区县', SUM(CASE WHEN `YEAR` = '2024' AND `MONTH` <= '05' THEN `OD` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2023' AND `MONTH` <= '05' THEN `OD` ELSE 0 END) AS '增长量' FROM `tl_od_sjxl` WHERE (`YEAR` = '2024' AND `MONTH` <= '05') OR (`YEAR` = '2023' AND `MONTH` <= '05') GROUP BY `O_DISTRICTS` ORDER BY `增长量` DESC LIMIT 1;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `MONTH` AS `月份`,
  SUM(`OD`) AS `铁路发送量（人/月）`
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2022'
GROUP BY
  `YEAR`,
  `MONTH`
ORDER BY
  CAST(`MONTH` AS UNSIGNED);
pred_sql: SELECT `MONTH`, SUM(`OD`) AS `总发送量` FROM `tl_od_sjxl` WHERE `YEAR` = '2022' AND `O_CITY` LIKE '江苏%' GROUP BY `MONTH`;
gold_sql: SELECT
  O_CITY AS `城市`,
  SUM(OD) AS `铁路发送量`
FROM
  tl_od_sjxl
WHERE
  CONCAT(YEAR, '-', LPAD(MONTH, 2, '0')) BETWEEN '2023-11' AND '2024-05'
GROUP BY
  O_CITY
ORDER BY
  `铁路发送量` DESC
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '城市', SUM(`OD`) AS '总发送量' FROM `tl_od_sjxl` WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-11-28' AND '2024-05-27' GROUP BY `O_CITY` ORDER BY `总发送量` DESC LIMIT 1;
gold_sql: SELECT
  `D_DISTRICTS` AS `终点区县`,
  SUM(`OD`) AS `到达量`
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2022'
GROUP BY
  `D_DISTRICTS`
ORDER BY
  `到达量` DESC
LIMIT
  1;
pred_sql: SELECT `D_DISTRICTS` AS '终点区县', SUM(`OD`) AS '到达量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' GROUP BY `D_DISTRICTS` ORDER BY SUM(`OD`) DESC LIMIT 1;
gold_sql: SELECT
  AVG(`OD`) AS '涟水县到其他城市的平均OD量'
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2024'
  AND `MONTH` IN ('06')
  AND `O_DISTRICTS` = '涟水县'
  AND `D_CITY` != `O_CITY`
  AND CONCAT(
    `YEAR`,
    '-',
    LPAD(`MONTH`, 2, '0'),
    '-',
    LPAD(`id` % 30 + 1, 2, '0')
  ) BETWEEN '2024-06-14' AND '2024-06-16';
pred_sql: SELECT AVG(`OD`) AS '平均OD量' FROM `tl_od_sjxl` WHERE `O_DISTRICTS` = '涟水县' AND (`YEAR` = '2024' AND `MONTH` = '06' AND (`D_CITY` != '涟水县' OR `D_DISTRICTS` != '涟水县')) AND (`YEAR` || '-' || `MONTH` || '-14' <= CURDATE() AND `YEAR` || '-' || `MONTH` || '-16' >= CURDATE());
gold_sql: SELECT
  O_CITY AS '城市',
  SUM(OD) AS '铁路发送量（人/月）'
FROM
  tl_od_sjxl
WHERE
  YEAR = '2022'
GROUP BY
  O_CITY
ORDER BY
  SUM(OD) ASC
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '城市', SUM(`OD`) AS '总发送量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' GROUP BY `O_CITY` ORDER BY `总发送量` ASC LIMIT 1;
gold_sql: SELECT  
  a.O_DISTRICTS AS '起点区县',  
  a.OD AS '上个季度OD量',  
  b.OD AS '去年同期OD量',  
  (a.OD - b.OD) AS 'OD量增长'  
FROM  
  (  
    SELECT  
      month,
      O_DISTRICTS,  
      OD  
    FROM  
      tl_od_sjxl  
    WHERE  
      D_CITY = '镇江市'  
      AND YEAR = '2024'  
      AND MONTH IN ('1', '2', '3')  
  ) a  
  INNER JOIN (  
    SELECT  
      month,
      O_DISTRICTS,  
      OD  
    FROM  
      tl_od_sjxl  
    WHERE  
      D_CITY = '镇江市'  
      AND YEAR = '2023'  
      AND MONTH IN ('1', '2', '3')  
  ) b ON a.O_DISTRICTS = b.O_DISTRICTS AND a.MONTH = b.MONTH  
WHERE  
  (a.OD - b.OD) > 0  
ORDER BY  
  (a.OD - b.OD) DESC;
pred_sql: SELECT      t1.`O_DISTRICTS` AS '起点区县',     SUM(t1.`OD`) AS '2024年上个季度OD量',     SUM(t2.`OD`) AS '2023年上个季度OD量' FROM      tl_od_sjxl t1 JOIN      tl_od_sjxl t2 ON t1.`O_DISTRICTS` = t2.`O_DISTRICTS` AND t1.`D_CITY` = '镇江市' AND t2.`D_CITY` = '镇江市' WHERE      t1.`YEAR` = '2024' AND t1.`MONTH` IN ('01', '02', '03') AND t1.`D_CITY` = '镇江市'     AND t2.`YEAR` = '2023' AND t2.`MONTH` IN ('01', '02', '03') AND t2.`D_CITY` = '镇江市' GROUP BY      t1.`O_DISTRICTS` HAVING      SUM(t1.`OD`) > SUM(t2.`OD`);
gold_sql: SELECT
  o1.O_DISTRICTS AS `起点区县`
FROM
  (
    SELECT
      O_DISTRICTS,
      MONTH,
      SUM(OD) AS `月总OD量`,
      (
        SELECT
          SUM(OD)
        FROM
          tl_od_sjxl o2
        WHERE
          o2.O_DISTRICTS = o1.O_DISTRICTS
          AND o2.YEAR = o1.YEAR
          AND o2.MONTH = o1.MONTH + 1
          AND o2.YEAR * 100 + o2.MONTH = (
            SELECT
              MIN(YEAR * 100 + MONTH)
            FROM
              tl_od_sjxl o3
            WHERE
              o3.O_DISTRICTS = o1.O_DISTRICTS
              AND o3.YEAR = o1.YEAR
              AND o3.MONTH > o1.MONTH
          )
      ) AS `下个月总OD量`
    FROM
      tl_od_sjxl o1
    WHERE
      YEAR = 2024
      AND MONTH IN (3, 4, 5)
    GROUP BY
      O_DISTRICTS,
      MONTH
  ) AS o1
WHERE
  o1.`下个月总OD量` IS NOT NULL
  AND o1.`月总OD量` < o1.`下个月总OD量`
GROUP BY
  o1.O_DISTRICTS
HAVING
  COUNT(*) = 2
ORDER BY
  o1.O_DISTRICTS;
pred_sql: SELECT O_DISTRICTS AS '区县', SUM(OD) AS '总OD量' FROM tl_od_sjxl WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-03-17' AND '2024-06-17' GROUP BY O_DISTRICTS HAVING COUNT(DISTINCT STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d')) = 3 AND SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-03-17' THEN OD ELSE 0 END) > 0 AND SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-04-17' THEN OD ELSE 0 END) > SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-03-17' THEN OD ELSE 0 END) AND SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-05-17' THEN OD ELSE 0 END) > SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-04-17' THEN OD ELSE 0 END) AND SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-06-17' THEN OD ELSE 0 END) > SUM(CASE WHEN STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') = '2024-05-17' THEN OD ELSE 0 END);
gold_sql: SELECT
  `O_DISTRICTS` AS `起点区县`,
  `O_CITY` AS `起点城市`,
  `D_DISTRICTS` AS `终点区县`,
  `D_CITY` AS `终点城市`,
  `MONTH` AS `月份`,
  `OD` AS `OD量(人/月)`
FROM
  `tl_od_sjxl`
WHERE
  `YEAR` = '2022'
  AND `OD` > 500;
pred_sql: SELECT `MONTH` AS '月份', SUM(`OD`) AS '铁路客运量' FROM `tl_od_sjxl` WHERE `YEAR` = '2022' GROUP BY `MONTH` HAVING SUM(`OD`) > 500;
gold_sql: SELECT
  `CHUANB_WURWJSL` AS `船舶污染物接收量`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` = '2023-11-19';
pred_sql: SELECT `CHUANB_WURWJSL` AS '船舶污染物接收量（吨）'  FROM cb_yxqk  WHERE `GCRQ` = '2023-11-19';
gold_sql: SELECT
  `WEIHPCB_RUWCBS` AS `危化品船舶入网船舶数（艘）`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
pred_sql: SELECT SUM(`WEIHPCB_RUWCBS`) AS '危化品船舶入网船舶数' FROM `cb_yxqk` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
gold_sql: SELECT
  `WEIHPCB_ZAIXL` AS '危化品船舶在线率'
FROM
  `cb_yxqk`
WHERE
  `GCRQ` = '2024-05-17';
pred_sql: SELECT `WEIHPCB_ZAIXL` AS '危化品船舶在线率'  FROM cb_yxqk  WHERE `GCRQ` = '2024-05-17';
gold_sql: SELECT
  AVG(`CHUANB_WURWJSL`) AS `船舶污染物日均接收量（吨）`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
pred_sql: SELECT AVG(`CHUANB_WURWJSL`) AS '平均每天船舶污染物接收量' FROM `cb_yxqk` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `CHUANB_WURWJSL` AS `船舶污染物接收量`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30'
  AND `CHUANB_WURWJSL` > 50000;
pred_sql: SELECT `GCRQ` AS '观测日期', `CHUANB_WURWJSL` AS '船舶污染物接收量（吨/年）' FROM cb_yxqk WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30' AND `CHUANB_WURWJSL` > 50000;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `CHUANB_WURWJSL` AS `船舶污染物接收量（吨/年）`
FROM
  `cb_yxqk`
WHERE
  `CHUANB_WURWJSL` > (
    SELECT
      AVG(`CHUANB_WURWJSL`)
    FROM
      `cb_yxqk`
  )
pred_sql: SELECT `GCRQ`, `CHUANB_WURWJSL`  FROM cb_yxqk  WHERE `CHUANB_WURWJSL` > (SELECT AVG(`CHUANB_WURWJSL`) FROM cb_yxqk);
gold_sql: SELECT
  AVG(`CHUANB_WURWJSL`) AS `船舶污染物接收量月均值（吨）`
FROM
  cb_yxqk
WHERE
  `GCRQ` BETWEEN '2023-05-30' AND '2024-05-29';
pred_sql: SELECT      DATE_FORMAT(GCRQ, '%Y-%m') AS `月份`,     AVG(CHUANB_WURWJSL) AS `平均船舶污染物接收量（吨/年）` FROM      cb_yxqk WHERE      GCRQ BETWEEN '2023-05-30' AND '2024-05-29' GROUP BY      DATE_FORMAT(GCRQ, '%Y-%m');
gold_sql: SELECT
  `WEIHPCB_RUWCBS` AS `危化品船舶入网船舶数（艘）`
FROM
  `cb_yxqk`
WHERE
  GCRQ BETWEEN '2023-01-01' AND '2023-11-19';
pred_sql: SELECT SUM(`WEIHPCB_RUWCBS`) AS `危化品船舶入网船舶数` FROM `cb_yxqk` WHERE `GCRQ` BETWEEN '2023-01-01' AND '2023-11-19';
gold_sql: SELECT
  SUM(`CHUANB_WURWJSL`) AS `船舶污染物接收量(吨)`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` <= '2024-05-31';
pred_sql: SELECT SUM(`CHUANB_WURWJSL`) AS `累计船舶污染物接收量` FROM `cb_yxqk` WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-31';
gold_sql: SELECT
  (
    SELECT
      WEIHPCB_ZAIXL
    FROM
      cb_yxqk
    WHERE
      GCRQ = '2023-11-19'
  ) AS `2023年11月19日危化品船舶在线率`,
  (
    SELECT
      WEIHPCB_ZAIXL
    FROM
      cb_yxqk
    WHERE
      GCRQ = '2023-11-18'
  ) AS `2023年11月18日危化品船舶在线率`,
  (
    SELECT
      WEIHPCB_ZAIXL
    FROM
      cb_yxqk
    WHERE
      GCRQ = '2023-11-19'
  ) - (
    SELECT
      WEIHPCB_ZAIXL
    FROM
      cb_yxqk
    WHERE
      GCRQ = '2023-11-18'
  ) AS `在线率变化`
FROM
  DUAL;
pred_sql: SELECT      `WEIHPCB_ZAIXL` AS '2023年11月19日危化品船舶在线率',     (SELECT `WEIHPCB_ZAIXL` FROM cb_yxqk WHERE `GCRQ` = '2023-11-18') AS '2023年11月18日危化品船舶在线率',     (`WEIHPCB_ZAIXL` - (SELECT `WEIHPCB_ZAIXL` FROM cb_yxqk WHERE `GCRQ` = '2023-11-18')) AS '变化量' FROM      cb_yxqk WHERE      `GCRQ` = '2023-11-19';
gold_sql: SELECT
  MIN(WEIHPCB_ZAIXL) AS `最低危化品船舶在线率`
FROM
  cb_yxqk
WHERE
  GCRQ >= '2023-11-01'
  AND GCRQ <= '2023-11-30';
pred_sql: SELECT MIN(`WEIHPCB_ZAIXL`) AS `最低危化品船舶在线率` FROM `cb_yxqk` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
gold_sql: SELECT
  `WEIHPCB_RUWCBS` AS `危化品船舶入网数`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` = '2024-05-29';
pred_sql: SELECT SUM(`WEIHPCB_RUWCBS`) AS '危化品船舶入网总数' FROM `cb_yxqk` WHERE `GCRQ` BETWEEN '2024-05-23' AND '2024-05-29';
gold_sql: SELECT
  MAX(WEIHPCB_ZAIXL) AS `最高在线率`
FROM
  cb_yxqk
WHERE
  GCRQ BETWEEN '2023-11-01' AND '2023-11-30';
pred_sql: SELECT MAX(`WEIHPCB_ZAIXL`) AS `最高在线率` FROM `cb_yxqk` WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
gold_sql: SELECT
  `WEIHPCB_ZAIXCBS` AS `当前在线危化品船舶数`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` = (
    SELECT
      MAX(`GCRQ`)
    FROM
      `cb_yxqk`
  );
pred_sql: SELECT `WEIHPCB_ZAIXCBS` AS '当前在线的危化品船舶数'  FROM cb_yxqk  ORDER BY `GCRQ` DESC  LIMIT 1;
gold_sql: SELECT
  `GCRQ` AS `观测日期`,
  `CHUANB_WURWJSL` AS `船舶污染物接收量（吨/年）`
FROM
  `cb_yxqk`
WHERE
  `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30'
ORDER BY
  `GCRQ` ASC;
pred_sql: SELECT `GCRQ` AS '观测日期', `CHUANB_WURWJSL` AS '船舶污染物接收量（吨/年）'  FROM cb_yxqk  WHERE `GCRQ` BETWEEN '2023-11-01' AND '2023-11-30';
gold_sql: SELECT
  (
    SUM(
      CASE
        WHEN `GCRQ` BETWEEN '2024-05-01' AND '2024-05-30'  THEN `CHUANB_WURWJSL`
        ELSE null
      END
    ) - SUM(
      CASE
        WHEN `GCRQ` BETWEEN '2023-05-01' AND '2023-05-30'  THEN `CHUANB_WURWJSL`
        ELSE null
      END
    )
  ) AS `船舶污染物接收量变化`
FROM
  `cb_yxqk`;
pred_sql: SELECT (SUM(CASE WHEN `GCRQ` BETWEEN '2024-05-01' AND '2024-05-30' THEN `CHUANB_WURWJSL` ELSE 0 END) - SUM(CASE WHEN `GCRQ` BETWEEN '2023-05-01' AND '2023-05-30' THEN `CHUANB_WURWJSL` ELSE 0 END)) AS `本月与去年同期船舶污染物接收量变化（吨/年）` FROM `cb_yxqk`;
gold_sql: SELECT
  GCRQ AS `观测日期`,
  WEIHPCB_RUWCBS AS `危化品船舶入网数量`
FROM
  `cb_yxqk`
WHERE
  GCRQ BETWEEN '2024-05-01' AND '2024-05-30'
ORDER BY
  WEIHPCB_RUWCBS DESC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '日期', MAX(`WEIHPCB_RUWCBS`) AS '危化品船舶入网数量峰值' FROM cb_yxqk WHERE `GCRQ` BETWEEN '2024-05-01' AND '2024-05-30' GROUP BY `GCRQ` ORDER BY `危化品船舶入网数量峰值` DESC LIMIT 1;
gold_sql: SELECT
  AVG(`TRUCK_UP`) AS `货车上行日均流量`,
  AVG(`TRUCK_DOWN`) AS `货车下行日均流量`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `ROAD_TYPE` = 'S49-新扬高速'
  AND `ROAD_NAME` = '泗洪北-梅花';
pred_sql: SELECT      `TRUCK_UP` AS '货车上行日均流量',      `TRUCK_DOWN` AS '货车下行日均流量' FROM      gsgl_dmll_tj WHERE      `YEAR` = '2017' AND      `ROAD_NAME` = '泗洪北-梅花路段' AND      `ROAD_TYPE` = 'S49-新扬高速';
gold_sql: SELECT
  ROAD_TYPE AS 路段类型 ,
  ROAD_NAME AS 路段名称,
  SUM(`COACH_UP`) AS `上行总数`,
  SUM(`COACH_DOWN`) AS `下行总数`,
  CASE
    WHEN SUM(`COACH_UP`) > SUM(`COACH_DOWN`) THEN '上行'
    ELSE '下行'
  END AS `流量更多的方向`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `ROAD_TYPE` LIKE '%S49-新扬高速%'
  AND `ROAD_NAME` LIKE '%泗洪北-梅花%'
GROUP BY
  ROAD_TYPE,
  ROAD_NAME;
pred_sql: SELECT      CASE          WHEN SUM(`COACH_UP`) > SUM(`COACH_DOWN`) THEN '客车上行更多'         WHEN SUM(`COACH_UP`) < SUM(`COACH_DOWN`) THEN '客车下行更多'         ELSE '客车上行和下行相同'     END AS `客车流量比较结果` FROM      `gsgl_dmll_tj` WHERE      `YEAR` = '2017' AND      `ROAD_NAME` LIKE '%泗洪北-梅花%';
gold_sql: SELECT
  AVG(`TRUCK_UP`) AS `平均货车上行流量`,
  AVG(`TRUCK_DOWN`) AS `平均货车下行流量`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `ROAD_TYPE` LIKE '%S49-新扬高速%'
  AND `ROAD_NAME` LIKE '%泗洪北-梅花%';
pred_sql: SELECT      AVG(`TRUCK_UP`) AS '货车上行日均流量',      AVG(`TRUCK_DOWN`) AS '货车下行日均流量' FROM      gsgl_dmll_tj WHERE      `YEAR` = '2017' AND      `ROAD_NAME` LIKE '%泗洪北-梅花%' AND      `ROAD_TYPE` = 'S49-新扬高速';
gold_sql: SELECT
  `ROAD_NAME` AS `断面名称`,
  `TRUCK_UP` AS `货车上行流量`,
  `TRUCK_DOWN` AS `货车下行流量`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `ROAD_TYPE` = 'S49-新扬高速'
ORDER BY
  (`TRUCK_UP` + `TRUCK_DOWN`) DESC;
pred_sql: SELECT `ROAD_NAME` AS '路段名称', SUM(`TRUCK_UP` + `TRUCK_DOWN`) AS '货车流量' FROM gsgl_dmll_tj WHERE `YEAR` = '2017' AND `ROAD_TYPE` = 'S49-新扬高速' GROUP BY `ROAD_NAME` ORDER BY `货车流量` DESC;
gold_sql: SELECT
  ROUND(
    100 * SUM(`TRUCK_UP` + `TRUCK_DOWN`) / SUM(`VOLUME`),
    2
  ) AS `货车流量占总流量百分比`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `ROAD_TYPE` LIKE '%S49-新扬高速%'
  AND `ROAD_NAME` LIKE '%泗洪北-梅花%';
pred_sql: SELECT      (SUM(`TRUCK_UP` + `TRUCK_DOWN`) / SUM(`VOLUME`)) * 100 AS '货车流量占总流量的百分比' FROM      gsgl_dmll_tj WHERE      `YEAR` = '2017' AND      `ROAD_TYPE` = 'S49-新扬高速' AND      `ROAD_NAME` = '泗洪北-梅花路段';
gold_sql: SELECT
  `ROAD_NAME` AS `路段名称`,
  (`TRUCK_UP` + `TRUCK_DOWN`) AS `货车流量`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
ORDER BY
  `货车流量` DESC
LIMIT
  5;
pred_sql: SELECT ROAD_NAME, TRUCK_UP + TRUCK_DOWN AS TOTAL_TRUCK_VOLUME FROM gsgl_dmll_tj WHERE `YEAR` = '2017' ORDER BY TOTAL_TRUCK_VOLUME DESC LIMIT 5;
gold_sql: SELECT
  `ROAD_NAME` AS `断面名称`,
  `TRUCK_UP` / `TRUCK_DOWN` AS `货车不均衡系数`,
  `COACH_UP` / `COACH_DOWN` AS `客车不均衡系数`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `ROAD_TYPE` LIKE '%S49-新扬高速%'
  AND `ROAD_NAME` LIKE '%泗洪北-梅花%';
pred_sql: SELECT      `ROAD_NAME`,     (SUM(`TRUCK_UP`) + SUM(`TRUCK_DOWN`)) / (SUM(`COACH_UP`) + SUM(`COACH_DOWN`)) AS `货车客车流量不均衡系数` FROM      gsgl_dmll_tj WHERE      `YEAR` = '2017' AND      `ROAD_TYPE` = 'S49-新扬高速' AND      `ROAD_NAME` LIKE '%泗洪北-梅花%' GROUP BY      `ROAD_NAME`;
gold_sql: SELECT
  AVG(`TRUCK_UP`) AS `货车上行总量平均值（辆/日）`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` BETWEEN '2019-01-01' AND '2019-06-30';
pred_sql: SELECT AVG(`TRUCK_UP`) AS '货车上行总量平均值' FROM `gsgl_dmll_tj` WHERE `YEAR` = '2019' AND `ROAD_TYPE` = '高速公路' AND DATE(`DATE_COLUMN`) BETWEEN '2019-01-01' AND '2019-06-30';
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  SUM(VOLUME) AS `总流量`
FROM
  gsgl_dmll_tj
WHERE
  STR_TO_DATE(CONCAT(YEAR, '-01-01'), '%Y-%m-%d') BETWEEN '2024-04-30' AND '2024-05-29'
GROUP BY
  ROAD_NAME
ORDER BY
  `总流量` DESC
LIMIT
  1;
pred_sql: SELECT ROAD_NAME, SUM(VOLUME) AS total_volume FROM gsgl_dmll_tj WHERE `YEAR` = '2024' AND (DATE(`YEAR`) BETWEEN '2024-04-30' AND '2024-05-30') GROUP BY ROAD_NAME ORDER BY total_volume DESC LIMIT 1;
gold_sql: SELECT
  ROAD_NAME AS '断面名称',
  COACH_DOWN as '下行总量'
FROM
  gsgl_dmll_tj
WHERE
  YEAR = '2017'
  AND COACH_DOWN > 10000;
pred_sql: SELECT `ROAD_NAME` AS '高速断面名称' FROM gsgl_dmll_tj WHERE `YEAR` = '2017' AND `COACH_DOWN` > 10000;
gold_sql: SELECT
  COUNT(*) AS `道路数量`
FROM
  gsgl_dmll_tj
WHERE
  YEAR = '2017'
  AND TRUCK_UP > 7000;
pred_sql: SELECT COUNT(DISTINCT `ROAD_NAME`) AS `道路数量` FROM `gsgl_dmll_tj` WHERE `YEAR` = '2017' AND `TRUCK_UP` > 7000;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  STD(VOLUME) AS `总流量变化幅度`
FROM
  gsgl_dmll_tj
WHERE
  YEAR BETWEEN '2018' AND '2022'
GROUP BY
  ROAD_NAME
ORDER BY
  `总流量变化幅度` DESC
LIMIT
  1;
pred_sql: SELECT ROAD_NAME, MAX(VOLUME_STD) AS MAX_CHANGE_IN_FLOW FROM (     SELECT ROAD_NAME, STDDEV(VOLUME) AS VOLUME_STD     FROM gsgl_dmll_tj     WHERE `YEAR` BETWEEN '2018' AND '2022'     GROUP BY ROAD_NAME, `YEAR` ) AS yearly_std GROUP BY ROAD_NAME ORDER BY MAX_CHANGE_IN_FLOW DESC LIMIT 1;
gold_sql: SELECT
  ROAD_NAME AS `断面名称`,
  UP_VOLUME AS `上行总量（辆/日）`
FROM
  gsgl_dmll_tj
WHERE
  UP_VOLUME > 20000
  AND YEAR BETWEEN '2024-02-29' AND '2024-05-29';
pred_sql: SELECT ROAD_NAME AS '高速断面名称', UP_VOLUME AS '上行总量（辆/日）' FROM gsgl_dmll_tj WHERE `YEAR` = '2024' AND DATE(STR_TO_DATE(CONCAT(`YEAR`, '-02-29'), '%Y-%m-%d')) <= CURDATE() AND CURDATE() <= DATE(STR_TO_DATE(CONCAT(`YEAR`, '-05-29'), '%Y-%m-%d')) AND UP_VOLUME > 20000;
gold_sql: SELECT
  `ROAD_NAME` AS `高速断面名称`,
  `ROAD_TYPE` AS `道路类型`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
  AND `TRUCK_UP` > 8000;
pred_sql: SELECT ROAD_NAME AS '高速断面名称', ROAD_TYPE AS '道路类型' FROM gsgl_dmll_tj WHERE `YEAR` = '2017' AND TRUCK_UP > 8000;
gold_sql: SELECT
  `ROAD_NAME` AS `高速断面名称`,
  STDDEV(`TRUCK_DOWN`) AS `货车下行总量标准差`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` BETWEEN '2014' AND '2024'
GROUP BY
  `ROAD_NAME`
ORDER BY
  `货车下行总量标准差` ASC
LIMIT
  1;
pred_sql: SELECT ROAD_NAME, STDDEV(TRUCK_DOWN) AS TRUCK_DOWN_STD FROM gsgl_dmll_tj WHERE `YEAR` BETWEEN '2014-05-30' AND '2024-05-29' GROUP BY ROAD_NAME ORDER BY TRUCK_DOWN_STD ASC LIMIT 1;
gold_sql: SELECT
  ROAD_NAME AS `流量最大的路段`,
  TRUCK_DOWN AS `货车下行流量`
FROM
  gsgl_dmll_tj
WHERE
  YEAR = '2017'
ORDER BY
  TRUCK_DOWN DESC
LIMIT
  1;
pred_sql: SELECT ROAD_NAME, TRUCK_DOWN FROM gsgl_dmll_tj WHERE `YEAR` = '2017' AND ROAD_TYPE = '高速公路' ORDER BY TRUCK_DOWN DESC LIMIT 1;
gold_sql: SELECT
  `ROAD_TYPE` AS `道路类型`,
  SUM(`COACH_UP` + `COACH_DOWN`) AS `中客车总流量`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
GROUP BY
  `ROAD_TYPE`
ORDER BY
  `中客车总流量` ASC limit 1;
pred_sql: SELECT ROAD_TYPE, SUM(COACH_UP + COACH_DOWN) AS total_coach_traffic FROM gsgl_dmll_tj WHERE `YEAR` = '2017' GROUP BY ROAD_TYPE ORDER BY total_coach_traffic ASC LIMIT 1;
gold_sql: SELECT
  `断面名称`,
  `流量差值`
FROM
  (
    SELECT
      `ROAD_NAME` as `断面名称`,
      ABS(`TRUCK_UP` - `TRUCK_DOWN`) as `流量差值`
    FROM
      `gsgl_dmll_tj`
    WHERE
      `YEAR` = (
        SELECT
          MAX(`YEAR`)
        FROM
          `gsgl_dmll_tj`
      )
    ORDER BY
      `流量差值` DESC
  ) t
LIMIT
  1;
pred_sql: SELECT ROAD_NAME, ABS(TRUCK_UP - TRUCK_DOWN) AS truck_flow_difference FROM gsgl_dmll_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM gsgl_dmll_tj) ORDER BY truck_flow_difference DESC LIMIT 1;
gold_sql: SELECT
  a.ROAD_NAME AS '断面名称',
  (a.VOLUME - b.VOLUME) AS '增长量'
FROM
  gsgl_dmll_tj a
  JOIN gsgl_dmll_tj b ON a.ROAD_NAME = b.ROAD_NAME
WHERE
  a.YEAR = '2017'
  AND b.YEAR = '2016'
ORDER BY
  `增长量` DESC
LIMIT
  1;
pred_sql: SELECT      ROAD_NAME AS '路段名称',     (SUM(CASE WHEN `YEAR` = '2018' THEN VOLUME ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2017' THEN VOLUME ELSE 0 END)) AS '增长量' FROM      gsgl_dmll_tj WHERE      `YEAR` IN ('2017', '2018') GROUP BY      ROAD_NAME ORDER BY      '增长量' DESC LIMIT 1;
gold_sql: SELECT
  `ROAD_NAME` AS `路段名称`,
  (SUM(`COACH_UP` + `COACH_DOWN`) / SUM(`VOLUME`)) * 100 AS `客车流量占比(%)`
FROM
  `gsgl_dmll_tj`
WHERE
  `YEAR` = '2017'
GROUP BY
  `ROAD_NAME`
ORDER BY
  `客车流量占比(%)` DESC
LIMIT
  1;
pred_sql: SELECT      ROAD_NAME AS '路段名称',     (COACH_UP + COACH_DOWN) / (TRUCK_UP + TRUCK_DOWN + COACH_UP + COACH_DOWN) * 100 AS '客车流量占比' FROM      gsgl_dmll_tj WHERE      `YEAR` = '2017' ORDER BY      '客车流量占比' DESC LIMIT 1;
gold_sql: SELECT
  AVG(LUWCTL) AS 路网畅通率平均
FROM
  gsgl_lwydzt
WHERE
  GCRQ BETWEEN '2023-07-01' AND '2023-07-31';
pred_sql: SELECT AVG(`LUWCTL`) AS '平均路网畅通率' FROM `gsgl_lwydzt` WHERE `GCRQ` BETWEEN '2023-07-01' AND '2023-07-31';
gold_sql: SELECT
  GCRQ AS 观测日期,
  XINGZQH AS 行政区划,
  LUWCTL AS 路网畅通率,
  HUANBI AS 环比
FROM
  gsgl_lwydzt
WHERE
  HUANBI > 0
ORDER BY
  GCRQ DESC;
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率', `HUANBI` AS '环比' FROM gsgl_lwydzt WHERE `HUANBI` > 0;
gold_sql: SELECT
  GCRQ AS '记录日期',
  XINGZQH AS '行政区划',
  LUWCTL AS '路网畅通率'
FROM
  gsgl_lwydzt
ORDER BY
  LUWCTL ASC
LIMIT
  1;
pred_sql: SELECT `GCRQ` AS '观测日期', MIN(`LUWCTL`) AS '最低路网畅通率' FROM gsgl_lwydzt GROUP BY `GCRQ` ORDER BY `最低路网畅通率` ASC LIMIT 1;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  AVG(LUWCTL) AS `路网畅通率平均值`
FROM
  gsgl_lwydzt
WHERE
  GCRQ BETWEEN '2023-07-01' AND '2023-07-31'
GROUP BY
  XINGZQH
ORDER BY
  AVG(LUWCTL) DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', AVG(`LUWCTL`) AS '平均路网畅通率' FROM gsgl_lwydzt WHERE `GCRQ` BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY `XINGZQH` ORDER BY AVG(`LUWCTL`) DESC LIMIT 1;
gold_sql: SELECT
  AVG(`HUANBI`) AS '平均环比变化'
FROM
  gsgl_lwydzt
WHERE
  `GCRQ` BETWEEN '2023-07-01' AND '2023-07-31'
  AND `XINGZQH` LIKE '32%'
pred_sql: SELECT AVG(`HUANBI`) AS '平均环比变化' FROM `gsgl_lwydzt` WHERE `XINGZQH` LIKE '%江苏省%' AND `GCRQ` BETWEEN '2023-07-01' AND '2023-07-31';
gold_sql: SELECT
  GCRQ AS 观测日期,
  XINGZQH AS 行政区划,
  LUWCTL AS 路网畅通率
FROM
  gsgl_lwydzt
WHERE
  LUWCTL = 100
  AND GCRQ BETWEEN '2023-01-01' AND '2023-12-31';
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率'  FROM gsgl_lwydzt  WHERE `GCRQ` BETWEEN '2023-01-01' AND '2023-12-31'  AND `LUWCTL` = 100.0;
gold_sql: SELECT
  GCRQ AS '观测日期',
  XINGZQH AS '行政区划'
FROM
  gsgl_lwydzt
WHERE
  HUANBI < -1
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_lwydzt
  );
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划' FROM gsgl_lwydzt WHERE `HUANBI` < -1;
gold_sql: SELECT
  AVG(LUWCTL) AS '南京平均高速路网畅通率'
FROM
  gsgl_lwydzt
WHERE
  XINGZQH = '3201'
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_lwydzt
  );
pred_sql: SELECT AVG(`LUWCTL`) AS '南京平均高速路网畅通率'  FROM `gsgl_lwydzt`  WHERE `XINGZQH` LIKE '%南京%'  AND `GCRQ` = (SELECT MAX(`GCRQ`) FROM `gsgl_lwydzt`);
gold_sql: SELECT
  GCRQ AS `观测日期`,
  LUWCTL AS `路网畅通率`,
  HUANBI AS `环比变化率`
FROM
  gsgl_lwydzt
WHERE
  XINGZQH = '3201'
ORDER BY
  GCRQ;
pred_sql: SELECT `GCRQ` AS '观测日期', `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率', `HUANBI` AS '环比'  FROM gsgl_lwydzt  WHERE `XINGZQH` LIKE '%南京%'  ORDER BY `GCRQ` DESC;
gold_sql: SELECT
  COUNT(DISTINCT GCRQ) AS 日期数量
FROM
  gsgl_lwydzt
WHERE
  LUWCTL > 0.8
  AND GCRQ BETWEEN '2023-07-01' AND '2023-07-31';
pred_sql: SELECT COUNT(DISTINCT `GCRQ`) AS `日期数量` FROM `gsgl_lwydzt` WHERE `GCRQ` BETWEEN '2023-07-01' AND '2023-07-31' AND `LUWCTL` > 80;
gold_sql: SELECT
  CASE
    WHEN XINGZQH = '3201' THEN '南京市'
    WHEN XINGZQH = '3202' THEN '无锡市'
    WHEN XINGZQH = '3203' THEN '徐州市'
    WHEN XINGZQH = '3204' THEN '常州市'
    WHEN XINGZQH = '3205' THEN '苏州市'
    WHEN XINGZQH = '3206' THEN '南通市'
    WHEN XINGZQH = '3207' THEN '连云港市'
    WHEN XINGZQH = '3208' THEN '淮安市'
    WHEN XINGZQH = '3209' THEN '盐城市'
    WHEN XINGZQH = '3210' THEN '扬州市'
    WHEN XINGZQH = '3211' THEN '镇江市'
    WHEN XINGZQH = '3212' THEN '泰州市'
    WHEN XINGZQH = '3213' THEN '宿迁市'
    ELSE '未知城市'
  END AS 城市
FROM
  gsgl_lwydzt
WHERE
  HUANBI < -0.05
  AND GCRQ BETWEEN '2023-07-01' AND '2023-07-31'
GROUP BY
  XINGZQH;
pred_sql: SELECT      `XINGZQH` AS `城市`,     `LUWCTL` AS `路网畅通率`,     `HUANBI` AS `环比` FROM      gsgl_lwydzt WHERE      `GCRQ` BETWEEN '2023-07-01' AND '2023-07-31'     AND `HUANBI` < -5;
gold_sql: SELECT
  COUNT(DISTINCT XINGZQH) AS 行政区划数量,
  MIN(GCRQ) AS 起始日期,
  MAX(GCRQ) AS 结束日期
FROM
  gsgl_lwydzt
WHERE
  GCRQ >= DATE_SUB(
    (
      SELECT
        MAX(GCRQ)
      FROM
        gsgl_lwydzt
    ),
    INTERVAL 1 MONTH
  )
  AND XINGZQH IN (
    SELECT
      XINGZQH
    FROM
      gsgl_lwydzt AS t1
    WHERE
      t1.GCRQ >= DATE_SUB(
        (
          SELECT
            MAX(GCRQ)
          FROM
            gsgl_lwydzt
        ),
        INTERVAL 1 MONTH
      )
      AND NOT EXISTS (
        SELECT
          1
        FROM
          gsgl_lwydzt AS t2
        WHERE
          t2.XINGZQH = t1.XINGZQH
          AND t2.GCRQ = t1.GCRQ + INTERVAL 1 DAY
          AND t2.LUWCTL >= t1.LUWCTL
      )
  );
pred_sql: SELECT COUNT(DISTINCT `XINGZQH`) AS `行政区划数量`, MIN(`GCRQ`) AS `开始日期`, MAX(`GCRQ`) AS `结束日期` FROM gsgl_lwydzt WHERE `GCRQ` >= CURDATE() - INTERVAL 1 MONTH GROUP BY `XINGZQH` HAVING MIN(`LUWCTL`) < MAX(`LUWCTL`);
gold_sql: SELECT
  XINGZQH AS '行政区划',
  LUWCTL AS '路网畅通率'
FROM
  gsgl_lwydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_lwydzt
    WHERE
      DAYOFWEEK(GCRQ) = 1
  )
pred_sql: SELECT `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率'  FROM gsgl_lwydzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_lwydzt);
gold_sql: SELECT
  XINGZQH AS 行政区划
FROM
  gsgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-06-10' AND '2024-06-16'
  AND HUANBI < 0
pred_sql: SELECT `XINGZQH` AS '行政区划', AVG(`LUWCTL`) AS '平均路网畅通率' FROM gsgl_lwydzt WHERE `GCRQ` BETWEEN '2024-06-10' AND '2024-06-16' GROUP BY `XINGZQH` HAVING AVG(`LUWCTL`) < (     SELECT AVG(`LUWCTL`)     FROM gsgl_lwydzt     WHERE `GCRQ` BETWEEN '2024-06-17' AND '2024-06-23' );
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  LUWCTL AS `路网畅通率`
FROM
  gsgl_lwydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_lwydzt
  )
ORDER BY
  LUWCTL DESC
LIMIT
  3;
pred_sql: SELECT `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率'  FROM gsgl_lwydzt  WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_lwydzt)  ORDER BY `LUWCTL` DESC  LIMIT 3;
gold_sql: SELECT
  XINGZQH AS 行政区划
FROM
  gsgl_lwydzt t1
WHERE
  EXISTS (
    SELECT
      1
    FROM
      gsgl_lwydzt t2
    WHERE
      t2.XINGZQH = t1.XINGZQH
      AND t2.GCRQ BETWEEN '2024-05-17' AND '2024-06-16'
    GROUP BY
      t2.XINGZQH
    HAVING
      MIN(t2.LUWCTL) < MAX(t2.LUWCTL)
  )
GROUP BY
  XINGZQH;
pred_sql: SELECT `XINGZQH` AS '行政区划', AVG(`LUWCTL`) AS '平均路网畅通率' FROM gsgl_lwydzt WHERE `GCRQ` BETWEEN '2024-05-17' AND '2024-06-16' GROUP BY `XINGZQH` HAVING MIN(`LUWCTL`) < MAX(`LUWCTL`);
gold_sql: SELECT
  XINGZQH AS '行政区划',
  LUWCTL AS '路网畅通率'
FROM
  gsgl_lwydzt
WHERE
  HUANBI > 0
  AND GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_lwydzt
  );
pred_sql: SELECT `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率' FROM gsgl_lwydzt WHERE `HUANBI` > 0;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  AVG(LUWCTL) AS `平均路网畅通率`
FROM
  gsgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-01-01' AND '2024-03-31'
GROUP BY
  XINGZQH
ORDER BY
  `平均路网畅通率` DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', AVG(`LUWCTL`) AS '平均路网畅通率' FROM gsgl_lwydzt WHERE `GCRQ` BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY `XINGZQH` ORDER BY AVG(`LUWCTL`) DESC LIMIT 1;
gold_sql: SELECT
  XINGZQH AS 行政区划
FROM
  gsgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-06-04' AND '2024-06-10'
GROUP BY
  XINGZQH
HAVING
  MAX(LUWCTL) != MIN(LUWCTL);
pred_sql: SELECT `XINGZQH` AS '行政区划', `LUWCTL` AS '路网畅通率' FROM gsgl_lwydzt WHERE `GCRQ` BETWEEN '2024-06-04' AND '2024-06-10' GROUP BY `XINGZQH` HAVING COUNT(DISTINCT `LUWCTL`) > 1;
gold_sql: SELECT
  XINGZQH AS `行政区划`,
  LUWCTL AS `路网畅通率`
FROM
  gsgl_lwydzt
WHERE
  GCRQ = (
    SELECT
      MAX(GCRQ)
    FROM
      gsgl_lwydzt
  )
  AND HUANBI > 0
ORDER BY
  LUWCTL ASC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', MIN(`LUWCTL`) AS '最低路网畅通率' FROM gsgl_lwydzt WHERE `GCRQ` = (SELECT MAX(`GCRQ`) FROM gsgl_lwydzt) AND `HUANBI` > 0 GROUP BY `XINGZQH` ORDER BY `最低路网畅通率` ASC LIMIT 1;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  GCRQ AS 观测日期
FROM
  gsgl_lwydzt
WHERE
  LUWCTL > 0.95;
pred_sql: SELECT `XINGZQH` AS '行政区划', `GCRQ` AS '观测日期' FROM gsgl_lwydzt WHERE `LUWCTL` > 95;
gold_sql: SELECT
  XINGZQH AS 行政区划,
  MAX(LUWCTL) - MIN(LUWCTL) AS 畅通率波动幅度
FROM
  gsgl_lwydzt
WHERE
  GCRQ BETWEEN '2024-05-11' AND '2024-06-10'
GROUP BY
  XINGZQH
ORDER BY
  畅通率波动幅度 DESC
LIMIT
  1;
pred_sql: SELECT `XINGZQH` AS '行政区划', MAX(`HUANBI`) - MIN(`HUANBI`) AS '环比波动' FROM gsgl_lwydzt WHERE `GCRQ` BETWEEN '2024-05-11' AND '2024-06-10' GROUP BY `XINGZQH` ORDER BY `环比波动` DESC LIMIT 1;
gold_sql: SELECT
  `PASSENGER` AS `旅客量`
FROM
  hk_od
WHERE
  `YEAR` = 2023
  AND `MONTH` = 1
  AND `O_PROVINCE` = '江苏'
  AND `O_CITY` = '南通'
  AND `D_PROVINCE` = '黑龙江'
  AND `D_CITY` = '哈尔滨';
pred_sql: SELECT SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `O_PROVINCE` LIKE '%江苏%' AND `O_CITY` LIKE '%南通%' AND `D_PROVINCE` LIKE '%黑龙江%' AND `D_CITY` LIKE '%哈尔滨%';
gold_sql: SELECT
  O_CITY AS `起点城市`,
  SUM(PASSENGER) AS `旅客量（万/人）`
FROM
  hk_od
WHERE
  YEAR = '2023'
  AND MONTH = '1'
GROUP BY
  O_CITY
HAVING
  `旅客量（万/人）` > 10;
pred_sql: SELECT `D_CITY` AS '城市', SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY `D_CITY` HAVING SUM(`PASSENGER`) > 10;
gold_sql: SELECT
  O_PROVINCE AS `起点省份`,
  D_PROVINCE AS `终点省份`,
  SUM(PASSENGER) AS `旅客量（万/人）`
FROM
  hk_od
WHERE
  (
    YEAR = 2023
    AND MONTH IN ('1', '2', '3')
  )
GROUP BY
  O_PROVINCE,
  D_PROVINCE
ORDER BY
  `旅客量（万/人）` DESC
LIMIT
  1;
pred_sql: SELECT `O_PROVINCE` AS '起点省份', `D_PROVINCE` AS '终点省份', SUM(`PASSENGER`) AS '旅客量（万/人）' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` IN ('01', '02', '03') GROUP BY `O_PROVINCE`, `D_PROVINCE` ORDER BY `旅客量（万/人）` DESC;
gold_sql: SELECT
  `O_CITY` AS `起点城市`,
  `D_CITY` AS `终点城市`,
  MIN(`PASSENGER`) AS `最小旅客量（万/人）`
FROM
  `hk_od`
WHERE
  `YEAR` = '2023'
  AND `MONTH` = '1'
GROUP BY
  `O_CITY`,
  `D_CITY`
ORDER BY
  `最小旅客量（万/人）`
LIMIT
  1;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY `O_CITY`, `D_CITY` ORDER BY `旅客量` ASC LIMIT 1;
gold_sql: SELECT
  O_PROVINCE AS `起点省份`,
  SUM(PASSENGER) AS `旅客量（万/人）`
FROM
  hk_od
WHERE
  YEAR = '2023'
  AND MONTH = '1'
GROUP BY
  O_PROVINCE
ORDER BY
  SUM(PASSENGER) DESC
LIMIT
  1;
pred_sql: SELECT `D_PROVINCE` AS '省份', SUM(`PASSENGER`) AS '旅客量' FROM hk_od WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY `D_PROVINCE` ORDER BY SUM(`PASSENGER`) DESC;
gold_sql: SELECT
  SUM(PASSENGER) AS `旅客量（万/人）`
FROM
  hk_od
WHERE
  YEAR = 2023
  AND MONTH = 1
  AND O_PROVINCE = '江苏'
  AND D_PROVINCE = '黑龙江';
pred_sql: SELECT SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `O_PROVINCE` LIKE '%江苏%' AND `D_PROVINCE` LIKE '%黑龙江%';
gold_sql: SELECT
  `D_CITY` AS `终点城市`,
  MIN(`PASSENGER`) AS `旅客量（万/人）`
FROM
  `hk_od`
WHERE
  `YEAR` = '2023'
  AND `MONTH` = '1'
GROUP BY
  `D_CITY`
ORDER BY
  `旅客量（万/人）`
LIMIT
  1;
pred_sql: SELECT `D_CITY` AS '城市', SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY `D_CITY` ORDER BY SUM(`PASSENGER`) ASC LIMIT 1;
gold_sql: SELECT  
  (  
    SUM(PASSENGER) / (  
      SELECT  
        SUM(PASSENGER)  
      FROM  
        hk_od  
      WHERE  
        YEAR = '2023'  
        AND MONTH = '1'  
    )  
  ) * 100 AS `江苏飞往黑龙江旅客量占比(%)`  
FROM  
  hk_od  
WHERE  
  YEAR = '2023'  
  AND MONTH = '1'  
  AND O_PROVINCE = '江苏'  
  AND D_PROVINCE = '黑龙江';
pred_sql: SELECT SUM(CASE WHEN `O_PROVINCE` = '江苏' AND `D_PROVINCE` = '黑龙江' THEN `PASSENGER` ELSE 0 END) / SUM(`PASSENGER`) AS '旅客量占比' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01';
gold_sql: SELECT
  O_CITY AS `起点城市`,
  D_CITY AS `终点城市`,
  PASSENGER AS `旅客量（万/人）`,
  (
    PASSENGER / (
      SELECT
        SUM(PASSENGER)
      FROM
        hk_od
      WHERE
        YEAR = '2023'
        AND MONTH = '1'
    )
  ) * 100 AS `占比（%）`
FROM
  hk_od
WHERE
  YEAR = '2023'
  AND MONTH = '1'
ORDER BY
  `占比（%）` DESC;
pred_sql: SELECT `O_CITY` AS '起点城市', `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY `O_CITY`, `D_CITY` ORDER BY `旅客量` DESC;
gold_sql: SELECT
  D_PROVINCE AS `省份`,
  D_CITY AS `城市`,
  SUM(PASSENGER) AS `旅客量（万/人）`
FROM
  hk_od
WHERE
  YEAR = '2023'
  AND MONTH = '1'
GROUP BY
  D_PROVINCE,
  D_CITY
ORDER BY
  `旅客量（万/人）` DESC
LIMIT
  1;
pred_sql: SELECT `D_PROVINCE` AS '省份', SUM(`PASSENGER`) AS '旅客量' FROM hk_od WHERE `YEAR` = '2023' AND `MONTH` = '01' GROUP BY `D_PROVINCE` ORDER BY SUM(`PASSENGER`) DESC LIMIT 1;
gold_sql: SELECT
  SUM(PASSENGER) AS "旅客量（万/人）"
FROM
  hk_od
WHERE
  YEAR = '2023'
  AND MONTH = '1'
  AND O_PROVINCE = '江苏'
  AND D_PROVINCE = '黑龙江'
  AND D_CITY = '哈尔滨';
pred_sql: SELECT SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `O_PROVINCE` LIKE '%江苏%' AND `D_PROVINCE` LIKE '%黑龙江%' AND `D_CITY` LIKE '%哈尔滨%';
gold_sql: SELECT
  SUM(
    CASE
      WHEN YEAR = '2023' THEN PASSENGER
      ELSE 0
    END
  ) AS `2023年旅客量（万/人）`,
  SUM(
    CASE
      WHEN YEAR = '2022' THEN PASSENGER
      ELSE 0
    END
  ) AS `2022年旅客量（万/人）`,
  (
    SUM(
      CASE
        WHEN YEAR = '2023' THEN PASSENGER
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN YEAR = '2022' THEN PASSENGER
        ELSE 0
      END
    )
  ) AS `旅客量增长（万/人）`
FROM
  hk_od
WHERE
  O_PROVINCE = '江苏'
  AND D_PROVINCE = '黑龙江';
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2023' THEN `PASSENGER` ELSE 0 END) AS '2023年江苏省到黑龙江省的旅客量' FROM `hk_od` WHERE `O_PROVINCE` LIKE '江苏%' AND `D_PROVINCE` LIKE '黑龙江%';
gold_sql: SELECT
  D_PROVINCE AS `省份`,
  SUM(PASSENGER) AS `旅客量`
FROM
  hk_od
WHERE
  D_CITY = '哈尔滨'
  AND CONCAT(YEAR, '-', MONTH) BETWEEN '2023-6' AND '2024-6'
GROUP BY
  D_PROVINCE
ORDER BY
  SUM(PASSENGER) DESC
LIMIT
  1;
pred_sql: SELECT `O_PROVINCE` AS '省份', SUM(`PASSENGER`) AS '旅客量' FROM hk_od WHERE `D_CITY` = '哈尔滨市' AND STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2023-06-11' AND '2024-06-10' GROUP BY `O_PROVINCE` ORDER BY SUM(`PASSENGER`) DESC LIMIT 1;
gold_sql: SELECT
  YEAR AS `年份`,
  QUARTER(CONCAT(YEAR, '-', MONTH, '-01')) AS `季度`,
  SUM(PASSENGER) * 10000 AS `季度客流量（人/季度）`
FROM
  hk_od
WHERE
  O_CITY = '南通'
  AND D_CITY = '哈尔滨'
  AND CONCAT(YEAR, '-', MONTH, '-01') BETWEEN '2023-06-11' AND '2024-06-10'
GROUP BY
  YEAR,
  QUARTER(CONCAT(YEAR, '-', MONTH, '-01'))
ORDER BY
  YEAR,
  QUARTER(CONCAT(YEAR, '-', MONTH, '-01'));
pred_sql: SELECT `MONTH`, SUM(`PASSENGER`) AS '旅客量（万/人）' FROM hk_od WHERE `YEAR` = '2023' AND `O_CITY` LIKE '%南通%' AND `D_CITY` LIKE '%哈尔滨%' GROUP BY `MONTH`;
gold_sql: SELECT
  MAX(
    CASE
      WHEN `YEAR` = '2023'
      AND `MONTH` = '1' THEN `PASSENGER`
    END
  ) AS `2023年1月份客流量（万/人）`,
  MAX(
    CASE
      WHEN `YEAR` = '2022'
      AND `MONTH` = '1' THEN `PASSENGER`
    END
  ) AS `去年同月客流量（万/人）`
FROM
  hk_od
WHERE
  `O_CITY` = '南通'
  AND `D_CITY` = '哈尔滨';
pred_sql: SELECT SUM(CASE WHEN `YEAR` = '2023' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END) AS '2023年1月南通市到哈尔滨市客流量', SUM(CASE WHEN `YEAR` = '2022' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END) AS '2022年1月南通市到哈尔滨市客流量', (SUM(CASE WHEN `YEAR` = '2023' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END) - SUM(CASE WHEN `YEAR` = '2022' AND `MONTH` = '01' THEN `PASSENGER` ELSE 0 END)) AS '客流量变化' FROM `hk_od` WHERE (`O_PROVINCE`, `O_CITY`, `D_PROVINCE`, `D_CITY`) = ('南通市', '南通市', '哈尔滨市', '哈尔滨市') AND ((`YEAR` = '2023' AND `MONTH` = '01') OR (`YEAR` = '2022' AND `MONTH` = '01'));
gold_sql: SELECT
  SUM(PASSENGER) AS `旅客量(万/人)`
FROM
  hk_od
WHERE
  YEAR = '2023'
  AND MONTH = '1'
  AND D_PROVINCE = '黑龙江'
  AND D_CITY = '哈尔滨'
  AND O_PROVINCE = '江苏';
pred_sql: SELECT SUM(`PASSENGER`) AS '旅客量' FROM `hk_od` WHERE `YEAR` = '2023' AND `MONTH` = '01' AND `O_PROVINCE` LIKE '%江苏%' AND `D_PROVINCE` LIKE '%黑龙江%' AND `D_CITY` LIKE '%哈尔滨%';
gold_sql: SELECT
  YEAR AS '年份',
  MONTH AS '月份',
  (
    LEAD(PASSENGER) OVER (
      ORDER BY
        YEAR,
        MONTH
    ) - PASSENGER
  ) AS '客流量变化'
FROM
  hk_od
WHERE
  O_CITY = '南通'
  AND D_CITY = '哈尔滨'
  AND CONCAT(YEAR, '-', MONTH) BETWEEN '2023-06' AND '2024-06'
ORDER BY
  客流量变化 DESC
LIMIT
  1;
pred_sql: SELECT `YEAR`, `MONTH`, SUM(`PASSENGER`) AS '旅客量增长' FROM hk_od WHERE `O_PROVINCE` = '南通市' AND `D_PROVINCE` = '哈尔滨市' AND ((`YEAR` = '2023' AND `MONTH` >= '06') OR (`YEAR` = '2024' AND `MONTH` <= '06')) GROUP BY `YEAR`, `MONTH` ORDER BY `旅客量增长` DESC LIMIT 1;
gold_sql: SELECT
  O_CITY AS '起点城市',
  SUM(PASSENGER) AS '旅客量（万/人）'
FROM
  hk_od
WHERE
  CONCAT(YEAR, '-', MONTH) BETWEEN '2024-5' AND '2024-6'
GROUP BY
  O_CITY
HAVING
  SUM(PASSENGER) > 10
pred_sql: SELECT `O_CITY` AS '起点城市', SUM(`PASSENGER`) AS '旅客量' FROM hk_od WHERE STR_TO_DATE(CONCAT(`YEAR`, '-', `MONTH`, '-01'), '%Y-%m-%d') BETWEEN '2024-05-11' AND '2024-06-10' GROUP BY `O_CITY` HAVING SUM(`PASSENGER`) > 10;
gold_sql: SELECT
  SUM(PASSENGER) AS '累计旅客量（万/人）'
FROM
  hk_od
WHERE
  D_CITY = '哈尔滨'
  AND `YEAR` = '2024'
  AND MONTH BETWEEN '4' AND '6';
pred_sql: SELECT SUM(`PASSENGER`) AS `累计运送旅客量` FROM `hk_od` WHERE `D_PROVINCE` = '黑龙江省' AND `D_CITY` = '哈尔滨'   AND ((`YEAR` = '2024' AND `MONTH` >= '04') OR (`YEAR` = '2024' AND `MONTH` = '05') OR (`YEAR` = '2024' AND `MONTH` = '06'));
gold_sql: SELECT
  `MONTH` AS '月份',
  SUM(`PASSENGER`) AS '旅客量（万/人）'
FROM
  `hk_od`
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      `hk_od`
  )
  AND `O_PROVINCE` = '江苏'
  AND `D_PROVINCE` != '江苏'
GROUP BY
  `MONTH`
ORDER BY
  `旅客量（万/人）`
LIMIT
  1
pred_sql: SELECT `MONTH`, SUM(`PASSENGER`) AS '旅客数量' FROM hk_od WHERE `O_PROVINCE` = '江苏' AND `D_PROVINCE` != '江苏' GROUP BY `MONTH` ORDER BY SUM(`PASSENGER`) ASC LIMIT 1;
gold_sql: SELECT
  D_CITY AS `终点城市`,
  SUM(PASSENGER) AS `旅客总量（万/人）`
FROM
  hk_od
WHERE
  YEAR = '2023'
  AND MONTH IN ('1', '2', '3')
GROUP BY
  D_CITY
ORDER BY
  `旅客总量（万/人）` DESC
LIMIT
  5;
pred_sql: SELECT `D_CITY` AS '终点城市', SUM(`PASSENGER`) AS '旅客总量' FROM hk_od WHERE `YEAR` = '2023' AND `MONTH` IN ('01', '02', '03') GROUP BY `D_CITY` ORDER BY `旅客总量` DESC LIMIT 5;
gold_sql: SELECT
  `MONTH` AS `月份`,
  SUM(`PASSENGER`) AS `旅客总量（万/人）`
FROM
  `hk_od`
WHERE
  `YEAR` = '2023'
  AND `MONTH` BETWEEN '1' AND '3'
  AND `O_PROVINCE` = '江苏'
  AND `D_PROVINCE` != '江苏'
GROUP BY
  `MONTH`
ORDER BY
  `MONTH`
pred_sql: SELECT `MONTH` AS '月份', SUM(`PASSENGER`) AS '旅客量（万/人）' FROM hk_od WHERE `YEAR` = '2023' AND `MONTH` IN ('01', '02', '03') AND `O_PROVINCE` = '江苏' GROUP BY `MONTH` ORDER BY `MONTH`;
gold_sql: SELECT
  NAME AS `公交站名称`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND AREA = '高淳区'
  AND M_TYPE = '公交站'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      poi
    WHERE
      PROVINCE = '江苏省'
      AND CITY = '南京市'
      AND AREA = '高淳区'
  );
pred_sql: SELECT `NAME` AS '公交站名称'  FROM poi  WHERE `PROVINCE` = '江苏省'  AND `CITY` = '南京市'  AND `AREA` = '高淳区'  AND `L_TYPE` = '公交站';
gold_sql: SELECT
  NAME AS 名称,
  LATITUDE AS 经度,
  LONGITUDE AS 纬度,
  PROVINCE AS 省份,
  CITY AS 城市,
  AREA AS 区域
FROM
  poi
WHERE
  L_TYPE = '交通设施'
  AND YEAR = '2022';
pred_sql: SELECT `NAME` AS '名称', `L_TYPE` AS '大类', `M_TYPE` AS '中类', `PROVINCE` AS '省份', `CITY` AS '城市', `AREA` AS '区域' FROM `poi` WHERE `YEAR` = '2022';
gold_sql: SELECT
  CITY AS 城市,
  COUNT(*) AS 交通设施数量
FROM
  poi
WHERE
  `YEAR` = '2022'
GROUP BY
  CITY
ORDER BY
  交通设施数量 DESC
pred_sql: SELECT `CITY`, COUNT(*) AS `交通设施数量` FROM `poi` WHERE `YEAR` = '2022' AND `L_TYPE` = '交通设施' GROUP BY `CITY` ORDER BY `交通设施数量` DESC;
gold_sql: SELECT
  NAME AS 名称,
  L_TYPE AS 大类,
  M_TYPE AS 中类,
  LATITUDE AS 经度,
  LONGITUDE AS 纬度,
  PROVINCE AS 省份,
  CITY AS 城市,
  AREA AS 区域,
  YEAR AS 年份
FROM
  poi
WHERE
  L_TYPE = '交通设施'
  AND LATITUDE = '118.82814';
pred_sql: SELECT `NAME`, `L_TYPE`, `M_TYPE`, `LATITUDE`, `LONGITUDE`, `PROVINCE`, `CITY`, `AREA`, `YEAR`  FROM poi  WHERE `LONGITUDE` = '118.82814';
gold_sql: SELECT
  AREA AS '区域',
  COUNT(*) AS '交通设施数量'
FROM
  poi
WHERE
  `YEAR` = '2022'
GROUP BY
  AREA
ORDER BY
  COUNT(*) ASC
LIMIT
  1;
pred_sql: SELECT `AREA`, COUNT(*) AS `交通设施数量` FROM `poi` WHERE `YEAR` = '2022' AND `L_TYPE` = '交通设施' GROUP BY `AREA` ORDER BY `交通设施数量` ASC LIMIT 1;
gold_sql: SELECT
  M_TYPE AS `中类`
FROM
  poi
WHERE
  L_TYPE = '交通设施'
GROUP BY
  M_TYPE;
pred_sql: SELECT DISTINCT `M_TYPE` AS '中类' FROM poi WHERE `L_TYPE` = '交通设施';
gold_sql: SELECT
  CITY AS '城市',
  COUNT(*) AS '交通设施数量'
FROM
  poi
WHERE
  YEAR = '2022'
GROUP BY
  CITY
ORDER BY
  COUNT(*) ASC;
pred_sql: SELECT `CITY`, COUNT(*) AS `交通设施数量` FROM `poi` WHERE `YEAR` = '2022' AND `L_TYPE` = '交通设施' GROUP BY `CITY` ORDER BY `交通设施数量` ASC LIMIT 1;
gold_sql: SELECT
  NAME AS 名称,
  L_TYPE AS 大类,
  M_TYPE AS 中类,
  LATITUDE AS 经度,
  LONGITUDE AS 纬度
FROM
  poi
WHERE
  L_TYPE = '交通设施'
  AND CITY = '南京市';
pred_sql: SELECT `NAME`, `L_TYPE`, `M_TYPE`, `LATITUDE`, `LONGITUDE`, `PROVINCE`, `CITY`, `AREA`, `YEAR` FROM poi WHERE `L_TYPE` = '交通设施' AND `CITY` = '南京';
gold_sql: SELECT
  NAME AS `名称`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND CITY = '南京市'
  AND M_TYPE = '公交站';
pred_sql: SELECT `NAME` AS '公交站名称' FROM poi WHERE `PROVINCE` = '江苏省' AND `CITY` = '南京市';
gold_sql: SELECT
  `NAME` AS `名称`,
  `L_TYPE` AS `大类`,
  `M_TYPE` AS `中类`,
  `LATITUDE` AS `经度`,
  `LONGITUDE` AS `纬度`,
  `PROVINCE` AS `省份`,
  `CITY` AS `城市`,
  `AREA` AS `区域`
FROM
  `poi`
WHERE
  `YEAR` = '2022'
  AND `L_TYPE` = '交通设施';
pred_sql: SELECT `NAME`, `L_TYPE`, `M_TYPE`, `LATITUDE`, `LONGITUDE`, `PROVINCE`, `CITY`, `AREA`  FROM poi  WHERE `YEAR` = '2022';
gold_sql: SELECT
  AREA AS `区域`,
  COUNT(*) AS `交通设施数量`
FROM
  poi
WHERE
  L_TYPE = '交通设施'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      poi
  )
GROUP BY
  AREA
ORDER BY
  `交通设施数量` DESC
LIMIT
  1;
pred_sql: SELECT `AREA`, COUNT(*) AS `交通设施数量` FROM `poi` WHERE `L_TYPE` = '交通' GROUP BY `AREA` ORDER BY `交通设施数量` DESC LIMIT 1;
gold_sql: SELECT
  `NAME` AS `名称`,
  `L_TYPE` AS `大类`,
  `M_TYPE` AS `中类`,
  `LATITUDE` AS `经度`,
  `LONGITUDE` AS `纬度`,
  `PROVINCE` AS `省份`,
  `CITY` AS `城市`,
  `AREA` AS `区域`
FROM
  poi
WHERE
  `LATITUDE` > 118.8
  AND `LONGITUDE` < 31.3
  AND `L_TYPE` = '交通设施'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      poi
  );
pred_sql: SELECT `NAME`, `LATITUDE`, `LONGITUDE`  FROM poi  WHERE CAST(`LONGITUDE` AS DECIMAL(10,6)) > 118.8  AND CAST(`LATITUDE` AS DECIMAL(10,6)) < 31.3;
gold_sql: SELECT
  CITY AS `城市`,
  COUNT(*) AS `公交站数量`
FROM
  poi
WHERE
  PROVINCE = '江苏省'
  AND M_TYPE = '公交站'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      poi
  )
GROUP BY
  CITY
ORDER BY
  `公交站数量` DESC
LIMIT
  1;
pred_sql: SELECT `CITY` AS '城市', COUNT(*) AS '公交站数量' FROM `poi` WHERE `PROVINCE` = '江苏省' AND `L_TYPE` = '公交站' GROUP BY `CITY` ORDER BY COUNT(*) DESC LIMIT 1;
gold_sql: SELECT
  NAME AS `名称`,
  LATITUDE AS `经度`,
  LONGITUDE AS `纬度`
FROM
  poi
WHERE
  CITY = '南京市'
  AND M_TYPE = '公交站'
  AND `YEAR` = '2022';
pred_sql: SELECT `NAME` AS '公交站名称', `LATITUDE` AS '经度', `LONGITUDE` AS '纬度'  FROM poi  WHERE `YEAR` = '2022' AND `CITY` = '南京市';
gold_sql: SELECT
  `NAME` AS `名称`
FROM
  poi
WHERE
  CITY = '南京市'
  AND AREA = '高淳区'
  AND M_TYPE = '公交站'
  AND `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      poi
    WHERE
      CITY = '南京市'
      AND AREA = '高淳区'
      AND M_TYPE = '公交站'
  );
pred_sql: SELECT `NAME` AS '公交站名称' FROM poi WHERE `CITY` = '南京市' AND `AREA` = '高淳区' AND `L_TYPE` = '公交站';
gold_sql: SELECT
  M_TYPE AS `类型`
FROM
  poi
GROUP BY
  M_TYPE
ORDER BY
  COUNT(*) ASC
LIMIT
  1;
pred_sql: SELECT `M_TYPE` AS '交通设施类型', COUNT(*) AS '数量' FROM `poi` GROUP BY `M_TYPE` ORDER BY COUNT(*) ASC LIMIT 1;
gold_sql: SELECT
  AREA AS 区域,
  COUNT(DISTINCT M_TYPE) AS 交通设施种类数
FROM
  poi
WHERE
  L_TYPE = '交通设施'
  AND YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      poi
  )
GROUP BY
  AREA
ORDER BY
  交通设施种类数 DESC
LIMIT
  1;
pred_sql: SELECT `AREA`, COUNT(DISTINCT `L_TYPE`) AS `交通设施种类数` FROM `poi` GROUP BY `AREA` ORDER BY `交通设施种类数` DESC LIMIT 1;
gold_sql: SELECT
  `FOREIGN_INVESTMENT_USED` AS `实际使用外资（亿美元）`
FROM
  `people_life_tj`
WHERE
  `PROVINCE` = '安徽省'
  AND `CITY` = '安庆市'
  AND `YEAR` = '2022';
pred_sql: SELECT `FOREIGN_INVESTMENT_USED` AS '实际使用外资' FROM `people_life_tj` WHERE `YEAR` = '2023' AND `PROVINCE` = '安徽省' AND `CITY` = '安庆市';
gold_sql: select
  YEAR as `年份`
from
  PEOPLE_LIFE_TJ
group by
  YEAR
having
  sum(FINANCE_REVENUE) > sum(LOCAL_BUDGET_EXPENDITURE);
pred_sql: SELECT `YEAR` AS '年份' FROM people_life_tj WHERE `FINANCE_REVENUE` > `LOCAL_BUDGET_EXPENDITURE`;
gold_sql: SELECT
  `YEAR` AS `年份`,
  `RETAIL_SALES_TOTAL` AS `社会消费品零售总额（亿元）`,
  `FINANCE_REVENUE` AS `财政收入（亿元）`
FROM
  `people_life_tj`
WHERE
  `RETAIL_SALES_TOTAL` > `FINANCE_REVENUE`
ORDER BY
  `YEAR` DESC;
pred_sql: SELECT `YEAR` AS '年份' FROM people_life_tj WHERE `RETAIL_SALES_TOTAL` > `FINANCE_REVENUE` ORDER BY `YEAR` DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS `省份`,
  PER_CAPITA_CONSUMPTION AS `居民人均生活消费支出`
FROM
  people_life_tj
WHERE
  YEAR = (
    SELECT
      MAX(YEAR)
    FROM
      people_life_tj
  )
ORDER BY
  PER_CAPITA_CONSUMPTION DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', MAX(`PER_CAPITA_CONSUMPTION`) AS '最高居民人均生活消费支出' FROM `people_life_tj` WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM `people_life_tj`) GROUP BY `PROVINCE` ORDER BY `最高居民人均生活消费支出` DESC LIMIT 1;
gold_sql: select
  YEAR as `年份`,
  FINANCE_REVENUE as `财政收入（亿元）`
from
  people_life_tj
where
  PROVINCE = '安徽省'
  and CITY = '安庆市'
  and AREA is null
  and YEAR in ('2021', '2022', '2023');
pred_sql: SELECT SUM(`FINANCE_REVENUE`) AS '前三年安徽省安庆市的财政收入' FROM `people_life_tj` WHERE `PROVINCE` = '安徽' AND `CITY` = '安庆' AND (`YEAR` = '2021' OR `YEAR` = '2022' OR `YEAR` = '2023');
gold_sql: SELECT
  YEAR AS '年份',
  PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出',
  PER_CAPITA_INCOME AS '人均可支配收入'
FROM
  people_life_tj
WHERE
  PER_CAPITA_CONSUMPTION < PER_CAPITA_INCOME
ORDER BY
  YEAR DESC;
pred_sql: SELECT `YEAR` AS '年份' FROM people_life_tj WHERE `PER_CAPITA_CONSUMPTION` < `PER_CAPITA_INCOME`;
gold_sql: SELECT
  `PROVINCE` AS `省份`,
  `PER_CAPITA_CONSUMPTION` AS `居民人均生活消费支出（元）`
FROM
  `people_life_tj`
WHERE
  `YEAR` = '2021'
ORDER BY
  `居民人均生活消费支出（元）` DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', MAX(`PER_CAPITA_CONSUMPTION`) AS '最高居民人均生活消费支出' FROM `people_life_tj` WHERE `YEAR` = '2021' GROUP BY `PROVINCE` ORDER BY `最高居民人均生活消费支出` DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份',
  LOCAL_BUDGET_EXPENDITURE AS '地方财政一般预算支出（亿元）'
FROM
  people_life_tj
WHERE
  YEAR = '2024'
ORDER BY
  LOCAL_BUDGET_EXPENDITURE ASC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', MIN(`LOCAL_BUDGET_EXPENDITURE`) AS '最低地方财政一般预算支出' FROM `people_life_tj` WHERE `YEAR` = '2024' GROUP BY `PROVINCE` ORDER BY `最低地方财政一般预算支出` ASC LIMIT 1;
gold_sql: SELECT
  `PROVINCE` AS `省份`,
  `FOREIGN_INVESTMENT_USED` AS `实际使用外资（亿美元）`
FROM
  `people_life_tj`
WHERE
  `YEAR` = '2024'
  AND CITY is null
  AND AREA is null
ORDER BY
  `FOREIGN_INVESTMENT_USED` DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份', SUM(`FOREIGN_INVESTMENT_USED`) AS '实际使用外资总额' FROM `people_life_tj` WHERE `YEAR` = '2024' GROUP BY `PROVINCE` ORDER BY `实际使用外资总额` DESC LIMIT 1;
gold_sql: select
  LOCAL_BUDGET_EXPENDITURE as `地方财政一般预算支出（亿元）`
from
  PEOPLE_LIFE_TJ
where
  YEAR = '2010'
  and PROVINCE = '安徽省'
  and CITY = '安庆市';
pred_sql: SELECT `LOCAL_BUDGET_EXPENDITURE` AS '地方财政一般预算支出' FROM `people_life_tj` WHERE `YEAR` = '2010' AND `PROVINCE` = '安徽省' AND `AREA` = '安庆市';
gold_sql: SELECT
  (A.FINANCE_REVENUE / B.FINANCE_REVENUE) AS `财政收入倍数`
FROM
  (
    SELECT
      FINANCE_REVENUE
    FROM
      people_life_tj
    WHERE
      YEAR = (
        SELECT
          MAX(YEAR)
        FROM
          people_life_tj
      )
      AND PROVINCE = '安徽省'
      AND CITY = '安庆市'
      AND AREA IS NULL
  ) A,
  (
    SELECT
      FINANCE_REVENUE
    FROM
      people_life_tj
    WHERE
      YEAR = '2010'
      AND PROVINCE = '安徽省'
      AND CITY = '安庆市'
      AND AREA IS NULL
  ) B;
pred_sql: SELECT `FINANCE_REVENUE` AS '2010年财政收入' FROM `people_life_tj` WHERE `YEAR` = '2010' AND `PROVINCE` LIKE '%安徽%' AND `CITY` LIKE '%安庆%';
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  MAX(RETAIL_SALES_TOTAL) AS '社会消费品零售总额（亿元）'
FROM
  people_life_tj
WHERE
  YEAR BETWEEN '2024-06-04' AND '2024-06-10'
  AND CITY is null
  AND AREA is null
GROUP BY
  PROVINCE
ORDER BY
  '社会消费品零售总额（亿元）' DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', MAX(`RETAIL_SALES_TOTAL`) AS '最高社会消费品零售总额' FROM people_life_tj WHERE `YEAR` = '2024' AND `AREA` IN (     SELECT `AREA`     FROM people_life_tj     WHERE `YEAR` = '2024' AND `LOCAL_BUDGET_EXPENDITURE` IS NOT NULL     GROUP BY `AREA`     ORDER BY SUM(`LOCAL_BUDGET_EXPENDITURE`) DESC     LIMIT 1 ) GROUP BY `PROVINCE` ORDER BY `最高社会消费品零售总额` DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  AREA AS '地区',
  MIN(PER_CAPITA_INCOME) AS '人均可支配收入（元）'
FROM
  people_life_tj
WHERE
  `YEAR` = '2010'
GROUP BY
  PROVINCE,
  AREA
ORDER BY
  MIN(PER_CAPITA_INCOME) ASC
LIMIT
  1;
pred_sql: SELECT `PROVINCE`, `AREA`, MIN(`PER_CAPITA_INCOME`) AS `最低人均可支配收入` FROM `people_life_tj` WHERE `YEAR` = '2010' GROUP BY `PROVINCE`, `AREA` ORDER BY `最低人均可支配收入` ASC;
gold_sql: SELECT
  CITY AS `地级市`,
  FOREIGN_INVESTMENT_USED AS `实际使用外资（亿美元）`
FROM
  people_life_tj
WHERE
  FOREIGN_INVESTMENT_USED > 2
pred_sql: SELECT `CITY` AS '地级市', SUM(`FOREIGN_INVESTMENT_USED`) AS '实际使用外资总额' FROM `people_life_tj` GROUP BY `CITY` HAVING SUM(`FOREIGN_INVESTMENT_USED`) > 2;
gold_sql: SELECT
  `PROVINCE` AS '省份/直辖市',
  (
    MAX(`LOCAL_BUDGET_EXPENDITURE`) - MIN(`LOCAL_BUDGET_EXPENDITURE`)
  ) AS '地方财政一般预算支出增长'
FROM
  `people_life_tj`
WHERE
  `YEAR` BETWEEN '2021-01-01' AND '2023-12-31'
  AND CITY is null
  AND AREA is null
GROUP BY
  `PROVINCE`
ORDER BY
  `地方财政一般预算支出增长` DESC
LIMIT
  1;
pred_sql: SELECT `PROVINCE` AS '省份/直辖市', MAX(`LOCAL_BUDGET_EXPENDITURE`) - MIN(`LOCAL_BUDGET_EXPENDITURE`) AS '增长额' FROM people_life_tj WHERE `YEAR` BETWEEN '2021-01-01' AND '2023-12-31' GROUP BY `PROVINCE` ORDER BY `增长额` DESC LIMIT 1;
gold_sql: SELECT
  PROVINCE AS '省份/直辖市',
  AREA AS '县级市',
  CITY AS '地级市',
  RETAIL_SALES_TOTAL AS '社会消费品零售总额（亿元）'
FROM
  people_life_tj
WHERE
  YEAR = '2010'
  AND RETAIL_SALES_TOTAL > 300;
pred_sql: SELECT `AREA` AS '地区' FROM people_life_tj WHERE `YEAR` = '2010' AND `RETAIL_SALES_TOTAL` > 300;
gold_sql: SELECT
  AREA AS '县级市',
  PER_CAPITA_CONSUMPTION AS '居民人均生活消费支出'
FROM
  people_life_tj
WHERE
  `YEAR` = (
    SELECT
      MAX(`YEAR`)
    FROM
      people_life_tj
  )
  AND `CITY` = AREA
ORDER BY
  `居民人均生活消费支出` DESC
LIMIT
  1;
pred_sql: SELECT `AREA` AS '县级市', MAX(`PER_CAPITA_CONSUMPTION`) AS '最高居民人均生活消费支出' FROM people_life_tj WHERE `YEAR` = (SELECT MAX(`YEAR`) FROM people_life_tj) GROUP BY `AREA` ORDER BY `最高居民人均生活消费支出` DESC LIMIT 1;

EM accuracy: 79.92% (1704/2132)
